
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000166  00800060  00004342  000043d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008001c6  008001c6  0000453c  2**0
                  ALLOC
  3 .stab         00005214  00000000  00000000  0000453c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003284  00000000  00000000  00009750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000cb74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cd66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f171  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000104f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000116d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000124f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_1>
       8:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_2>
       c:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 21 	call	0x421c	; 0x421c <main>
      8a:	0c 94 9f 21 	jmp	0x433e	; 0x433e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e9       	ldi	r26, 0x9F	; 159
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 21 	jmp	0x427e	; 0x427e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e9       	ldi	r24, 0x9F	; 159
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 21 	jmp	0x427e	; 0x427e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e9       	ldi	r22, 0x9F	; 159
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 47 21 	jmp	0x428e	; 0x428e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 33 21 	jmp	0x4266	; 0x4266 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4f 21 	jmp	0x429e	; 0x429e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 47 21 	jmp	0x428e	; 0x428e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 55       	subi	r30, 0x59	; 89
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer0_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer0_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 c7 01 	sts	0x01C7, r25
     e44:	80 93 c6 01 	sts	0x01C6, r24
    }
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <__vector_11>:

    #if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
        ISR(TIMER_0_OVF)
        {
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T0 != NULL_PTR)
     e7c:	80 91 c6 01 	lds	r24, 0x01C6
     e80:	90 91 c7 01 	lds	r25, 0x01C7
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	29 f0       	breq	.+10     	; 0xe92 <__vector_11+0x40>
            {
                g_CallBackPtr_T0();
     e88:	e0 91 c6 01 	lds	r30, 0x01C6
     e8c:	f0 91 c7 01 	lds	r31, 0x01C7
     e90:	09 95       	icall
            }
        }
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <Timer0_Init>:




void Timer0_Init(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR0,FOC0);
     ec0:	a3 e5       	ldi	r26, 0x53	; 83
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e3 e5       	ldi	r30, 0x53	; 83
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR0,WGM00);
     ece:	a3 e5       	ldi	r26, 0x53	; 83
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e3 e5       	ldi	r30, 0x53	; 83
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 7b       	andi	r24, 0xBF	; 191
     eda:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,WGM01);
     edc:	a3 e5       	ldi	r26, 0x53	; 83
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e3 e5       	ldi	r30, 0x53	; 83
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	8c 93       	st	X, r24
    #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
     eea:	af e5       	ldi	r26, 0x5F	; 95
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ef e5       	ldi	r30, 0x5F	; 95
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 68       	ori	r24, 0x80	; 128
     ef6:	8c 93       	st	X, r24
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
     ef8:	a9 e5       	ldi	r26, 0x59	; 89
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e9 e5       	ldi	r30, 0x59	; 89
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer0_UpdateValue>
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
     f1e:	e2 e5       	ldi	r30, 0x52	; 82
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <Timer0_StopClock>:


void Timer0_StopClock(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 7f       	andi	r24, 0xF8	; 248
     f42:	8c 93       	st	X, r24
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	98 2f       	mov	r25, r24
     f5e:	98 7f       	andi	r25, 0xF8	; 248
     f60:	80 91 a7 01 	lds	r24, 0x01A7
     f64:	89 2b       	or	r24, r25
     f66:	8c 93       	st	X, r24
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <Timer0_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T0 == Enable_Interrupt_T0)

        void Timer0_DelayOVFInterrupt(void)
        {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
            Timer0_ProvideClock();
     f76:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Timer0_ProvideClock>
        }
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <Timer0_OVFDisableInterrupt>:


        void Timer0_OVFDisableInterrupt(void)
        {
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE0);   
     f88:	a9 e5       	ldi	r26, 0x59	; 89
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e9 e5       	ldi	r30, 0x59	; 89
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	8c 93       	st	X, r24
        }
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <Timer0_OVFEnableInterrupt>:

        void Timer0_OVFEnableInterrupt(void)
        {
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE0);   
     fa4:	a9 e5       	ldi	r26, 0x59	; 89
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e9 e5       	ldi	r30, 0x59	; 89
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	81 60       	ori	r24, 0x01	; 1
     fb0:	8c 93       	st	X, r24
        }
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	57 c0       	rjmp	.+174    	; 0x1074 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	c9 01       	movw	r24, r18
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	fc 01       	movw	r30, r24
     fd8:	e7 55       	subi	r30, 0x57	; 87
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	80 81       	ld	r24, Z
     fde:	88 30       	cpi	r24, 0x08	; 8
     fe0:	e9 f4       	brne	.+58     	; 0x101c <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	fc 01       	movw	r30, r24
     ff4:	e8 55       	subi	r30, 0x58	; 88
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	40 81       	ld	r20, Z
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	c9 01       	movw	r24, r18
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	82 0f       	add	r24, r18
    1008:	93 1f       	adc	r25, r19
    100a:	fc 01       	movw	r30, r24
    100c:	e6 55       	subi	r30, 0x56	; 86
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	90 81       	ld	r25, Z
    1012:	84 2f       	mov	r24, r20
    1014:	69 2f       	mov	r22, r25
    1016:	0e 94 4a 0c 	call	0x1894	; 0x1894 <GPIO_SetPortDirection>
    101a:	29 c0       	rjmp	.+82     	; 0x106e <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	c9 01       	movw	r24, r18
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	fc 01       	movw	r30, r24
    102e:	e8 55       	subi	r30, 0x58	; 88
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	50 81       	ld	r21, Z
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	fc 01       	movw	r30, r24
    1046:	e7 55       	subi	r30, 0x57	; 87
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	40 81       	ld	r20, Z
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	c9 01       	movw	r24, r18
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	82 0f       	add	r24, r18
    105a:	93 1f       	adc	r25, r19
    105c:	fc 01       	movw	r30, r24
    105e:	e6 55       	subi	r30, 0x56	; 86
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	90 81       	ld	r25, Z
    1064:	85 2f       	mov	r24, r21
    1066:	64 2f       	mov	r22, r20
    1068:	49 2f       	mov	r20, r25
    106a:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 23       	and	r24, r24
    1078:	09 f4       	brne	.+2      	; 0x107c <GPIO_init+0xc4>
    107a:	a5 cf       	rjmp	.-182    	; 0xfc6 <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <GPIO_SetPinDirection+0x6>
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_SetPinDirection+0x8>
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6a 83       	std	Y+2, r22	; 0x02
    1096:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <GPIO_SetPinDirection+0x1c>
    109e:	d8 c1       	rjmp	.+944    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <GPIO_SetPinDirection+0x24>
    10a6:	d4 c1       	rjmp	.+936    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <GPIO_SetPinDirection+0x3a>
    10bc:	84 c0       	rjmp	.+264    	; 0x11c6 <GPIO_SetPinDirection+0x142>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <GPIO_SetPinDirection+0x4e>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	71 f0       	breq	.+28     	; 0x10ec <GPIO_SetPinDirection+0x68>
    10d0:	bf c1       	rjmp	.+894    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <GPIO_SetPinDirection+0x5a>
    10dc:	e1 c0       	rjmp	.+450    	; 0x12a0 <GPIO_SetPinDirection+0x21c>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <GPIO_SetPinDirection+0x66>
    10e8:	48 c1       	rjmp	.+656    	; 0x137a <GPIO_SetPinDirection+0x2f6>
    10ea:	b2 c1       	rjmp	.+868    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 23       	and	r24, r24
    10f0:	41 f5       	brne	.+80     	; 0x1142 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    10f2:	aa e3       	ldi	r26, 0x3A	; 58
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ea e3       	ldi	r30, 0x3A	; 58
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_SetPinDirection+0x8a>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	2a 95       	dec	r18
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_SetPinDirection+0x86>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    1118:	ab e3       	ldi	r26, 0x3B	; 59
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	eb e3       	ldi	r30, 0x3B	; 59
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <GPIO_SetPinDirection+0xb2>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <GPIO_SetPinDirection+0xae>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	87 c1       	rjmp	.+782    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	39 f5       	brne	.+78     	; 0x1196 <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    1148:	aa e3       	ldi	r26, 0x3A	; 58
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea e3       	ldi	r30, 0x3A	; 58
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_SetPinDirection+0xe0>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	2a 95       	dec	r18
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_SetPinDirection+0xdc>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    116e:	ab e3       	ldi	r26, 0x3B	; 59
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_SetPinDirection+0x108>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_SetPinDirection+0x104>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	5d c1       	rjmp	.+698    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	09 f0       	breq	.+2      	; 0x119e <GPIO_SetPinDirection+0x11a>
    119c:	59 c1       	rjmp	.+690    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    119e:	aa e3       	ldi	r26, 0x3A	; 58
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	ea e3       	ldi	r30, 0x3A	; 58
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_SetPinDirection+0x138>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_SetPinDirection+0x134>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	45 c1       	rjmp	.+650    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 23       	and	r24, r24
    11ca:	41 f5       	brne	.+80     	; 0x121c <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    11cc:	a7 e3       	ldi	r26, 0x37	; 55
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_SetPinDirection+0x164>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	2a 95       	dec	r18
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_SetPinDirection+0x160>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_SetPinDirection+0x18c>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_SetPinDirection+0x188>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	1a c1       	rjmp	.+564    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	39 f5       	brne	.+78     	; 0x1270 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    1222:	a7 e3       	ldi	r26, 0x37	; 55
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_SetPinDirection+0x1ba>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_SetPinDirection+0x1b6>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    1248:	a8 e3       	ldi	r26, 0x38	; 56
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e3       	ldi	r30, 0x38	; 56
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_SetPinDirection+0x1e2>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_SetPinDirection+0x1de>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	f0 c0       	rjmp	.+480    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	09 f0       	breq	.+2      	; 0x1278 <GPIO_SetPinDirection+0x1f4>
    1276:	ec c0       	rjmp	.+472    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_SetPinDirection+0x212>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_SetPinDirection+0x20e>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	d8 c0       	rjmp	.+432    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 23       	and	r24, r24
    12a4:	41 f5       	brne	.+80     	; 0x12f6 <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    12a6:	a4 e3       	ldi	r26, 0x34	; 52
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e4 e3       	ldi	r30, 0x34	; 52
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_SetPinDirection+0x23e>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	2a 95       	dec	r18
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_SetPinDirection+0x23a>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    12cc:	a5 e3       	ldi	r26, 0x35	; 53
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GPIO_SetPinDirection+0x266>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GPIO_SetPinDirection+0x262>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	ad c0       	rjmp	.+346    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	39 f5       	brne	.+78     	; 0x134a <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_SetPinDirection+0x294>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	2a 95       	dec	r18
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_SetPinDirection+0x290>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    1322:	a5 e3       	ldi	r26, 0x35	; 53
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e3       	ldi	r30, 0x35	; 53
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_SetPinDirection+0x2bc>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_SetPinDirection+0x2b8>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	83 c0       	rjmp	.+262    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	09 f0       	breq	.+2      	; 0x1352 <GPIO_SetPinDirection+0x2ce>
    1350:	7f c0       	rjmp	.+254    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    1352:	a4 e3       	ldi	r26, 0x34	; 52
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e4 e3       	ldi	r30, 0x34	; 52
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <GPIO_SetPinDirection+0x2ec>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <GPIO_SetPinDirection+0x2e8>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	6b c0       	rjmp	.+214    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 23       	and	r24, r24
    137e:	41 f5       	brne	.+80     	; 0x13d0 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    1380:	a1 e3       	ldi	r26, 0x31	; 49
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <GPIO_SetPinDirection+0x318>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	2a 95       	dec	r18
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <GPIO_SetPinDirection+0x314>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    13a6:	a2 e3       	ldi	r26, 0x32	; 50
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e2 e3       	ldi	r30, 0x32	; 50
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <GPIO_SetPinDirection+0x340>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <GPIO_SetPinDirection+0x33c>
    13c8:	80 95       	com	r24
    13ca:	84 23       	and	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	40 c0       	rjmp	.+128    	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	39 f5       	brne	.+78     	; 0x1424 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    13d6:	a1 e3       	ldi	r26, 0x31	; 49
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e1 e3       	ldi	r30, 0x31	; 49
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_SetPinDirection+0x36e>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	2a 95       	dec	r18
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_SetPinDirection+0x36a>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    13fc:	a2 e3       	ldi	r26, 0x32	; 50
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_SetPinDirection+0x396>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_SetPinDirection+0x392>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	99 f4       	brne	.+38     	; 0x1450 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    142a:	a1 e3       	ldi	r26, 0x31	; 49
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e1 e3       	ldi	r30, 0x31	; 49
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_SetPinDirection+0x3c4>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_SetPinDirection+0x3c0>
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <GPIO_ReadPin+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <GPIO_ReadPin+0x8>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	8a 83       	std	Y+2, r24	; 0x02
    1470:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1472:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	08 f0       	brcs	.+2      	; 0x147c <GPIO_ReadPin+0x1c>
    147a:	84 c0       	rjmp	.+264    	; 0x1584 <GPIO_ReadPin+0x124>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 30       	cpi	r24, 0x08	; 8
    1480:	08 f0       	brcs	.+2      	; 0x1484 <GPIO_ReadPin+0x24>
    1482:	80 c0       	rjmp	.+256    	; 0x1584 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3d 83       	std	Y+5, r19	; 0x05
    148c:	2c 83       	std	Y+4, r18	; 0x04
    148e:	4c 81       	ldd	r20, Y+4	; 0x04
    1490:	5d 81       	ldd	r21, Y+5	; 0x05
    1492:	41 30       	cpi	r20, 0x01	; 1
    1494:	51 05       	cpc	r21, r1
    1496:	79 f1       	breq	.+94     	; 0x14f6 <GPIO_ReadPin+0x96>
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	91 05       	cpc	r25, r1
    14a0:	34 f4       	brge	.+12     	; 0x14ae <GPIO_ReadPin+0x4e>
    14a2:	2c 81       	ldd	r18, Y+4	; 0x04
    14a4:	3d 81       	ldd	r19, Y+5	; 0x05
    14a6:	21 15       	cp	r18, r1
    14a8:	31 05       	cpc	r19, r1
    14aa:	69 f0       	breq	.+26     	; 0x14c6 <GPIO_ReadPin+0x66>
    14ac:	6b c0       	rjmp	.+214    	; 0x1584 <GPIO_ReadPin+0x124>
    14ae:	4c 81       	ldd	r20, Y+4	; 0x04
    14b0:	5d 81       	ldd	r21, Y+5	; 0x05
    14b2:	42 30       	cpi	r20, 0x02	; 2
    14b4:	51 05       	cpc	r21, r1
    14b6:	b9 f1       	breq	.+110    	; 0x1526 <GPIO_ReadPin+0xc6>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <GPIO_ReadPin+0x64>
    14c2:	49 c0       	rjmp	.+146    	; 0x1556 <GPIO_ReadPin+0xf6>
    14c4:	5f c0       	rjmp	.+190    	; 0x1584 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    14c6:	e9 e3       	ldi	r30, 0x39	; 57
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a9 01       	movw	r20, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_ReadPin+0x7e>
    14da:	55 95       	asr	r21
    14dc:	47 95       	ror	r20
    14de:	8a 95       	dec	r24
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_ReadPin+0x7a>
    14e2:	ca 01       	movw	r24, r20
    14e4:	81 70       	andi	r24, 0x01	; 1
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	88 23       	and	r24, r24
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	49 c0       	rjmp	.+146    	; 0x1584 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	47 c0       	rjmp	.+142    	; 0x1584 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    14f6:	e6 e3       	ldi	r30, 0x36	; 54
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a9 01       	movw	r20, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_ReadPin+0xae>
    150a:	55 95       	asr	r21
    150c:	47 95       	ror	r20
    150e:	8a 95       	dec	r24
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_ReadPin+0xaa>
    1512:	ca 01       	movw	r24, r20
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	90 70       	andi	r25, 0x00	; 0
    1518:	88 23       	and	r24, r24
    151a:	19 f0       	breq	.+6      	; 0x1522 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	31 c0       	rjmp	.+98     	; 0x1584 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1522:	19 82       	std	Y+1, r1	; 0x01
    1524:	2f c0       	rjmp	.+94     	; 0x1584 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    1526:	e3 e3       	ldi	r30, 0x33	; 51
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_ReadPin+0xde>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_ReadPin+0xda>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	88 23       	and	r24, r24
    154a:	19 f0       	breq	.+6      	; 0x1552 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	19 c0       	rjmp	.+50     	; 0x1584 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1552:	19 82       	std	Y+1, r1	; 0x01
    1554:	17 c0       	rjmp	.+46     	; 0x1584 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_ReadPin+0x10e>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_ReadPin+0x10a>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	90 70       	andi	r25, 0x00	; 0
    1578:	88 23       	and	r24, r24
    157a:	19 f0       	breq	.+6      	; 0x1582 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1582:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <GPIO_WritePin+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <GPIO_WritePin+0x8>
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	6a 83       	std	Y+2, r22	; 0x02
    15a8:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <GPIO_WritePin+0x1c>
    15b0:	e4 c0       	rjmp	.+456    	; 0x177a <GPIO_WritePin+0x1e4>
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	88 30       	cpi	r24, 0x08	; 8
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <GPIO_WritePin+0x24>
    15b8:	e0 c0       	rjmp	.+448    	; 0x177a <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3d 83       	std	Y+5, r19	; 0x05
    15c2:	2c 83       	std	Y+4, r18	; 0x04
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <GPIO_WritePin+0x3a>
    15ce:	47 c0       	rjmp	.+142    	; 0x165e <GPIO_WritePin+0xc8>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <GPIO_WritePin+0x4e>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	71 f0       	breq	.+28     	; 0x15fe <GPIO_WritePin+0x68>
    15e2:	cb c0       	rjmp	.+406    	; 0x177a <GPIO_WritePin+0x1e4>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <GPIO_WritePin+0x5a>
    15ee:	67 c0       	rjmp	.+206    	; 0x16be <GPIO_WritePin+0x128>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <GPIO_WritePin+0x66>
    15fa:	91 c0       	rjmp	.+290    	; 0x171e <GPIO_WritePin+0x188>
    15fc:	be c0       	rjmp	.+380    	; 0x177a <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1604:	ab e3       	ldi	r26, 0x3B	; 59
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	eb e3       	ldi	r30, 0x3B	; 59
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_WritePin+0x8c>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_WritePin+0x88>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	a7 c0       	rjmp	.+334    	; 0x177a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 23       	and	r24, r24
    1630:	09 f0       	breq	.+2      	; 0x1634 <GPIO_WritePin+0x9e>
    1632:	a3 c0       	rjmp	.+326    	; 0x177a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    1634:	ab e3       	ldi	r26, 0x3B	; 59
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GPIO_WritePin+0xbc>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <GPIO_WritePin+0xb8>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
    165c:	8e c0       	rjmp	.+284    	; 0x177a <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	a1 f4       	brne	.+40     	; 0x168c <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1664:	a8 e3       	ldi	r26, 0x38	; 56
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_WritePin+0xec>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <GPIO_WritePin+0xe8>
    1686:	84 2b       	or	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	77 c0       	rjmp	.+238    	; 0x177a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	88 23       	and	r24, r24
    1690:	09 f0       	breq	.+2      	; 0x1694 <GPIO_WritePin+0xfe>
    1692:	73 c0       	rjmp	.+230    	; 0x177a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <GPIO_WritePin+0x11c>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <GPIO_WritePin+0x118>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	5e c0       	rjmp	.+188    	; 0x177a <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	a1 f4       	brne	.+40     	; 0x16ec <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_WritePin+0x14c>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_WritePin+0x148>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	47 c0       	rjmp	.+142    	; 0x177a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 23       	and	r24, r24
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <GPIO_WritePin+0x15e>
    16f2:	43 c0       	rjmp	.+134    	; 0x177a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    16f4:	a5 e3       	ldi	r26, 0x35	; 53
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <GPIO_WritePin+0x17c>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <GPIO_WritePin+0x178>
    1716:	80 95       	com	r24
    1718:	84 23       	and	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	2e c0       	rjmp	.+92     	; 0x177a <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	a1 f4       	brne	.+40     	; 0x174c <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_WritePin+0x1ac>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_WritePin+0x1a8>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	17 c0       	rjmp	.+46     	; 0x177a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 23       	and	r24, r24
    1750:	a1 f4       	brne	.+40     	; 0x177a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    1752:	a2 e3       	ldi	r26, 0x32	; 50
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_WritePin+0x1da>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_WritePin+0x1d6>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
                break;

        }
    }
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <GPIO_TogglePin+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <GPIO_TogglePin+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <GPIO_TogglePin+0x18>
    17a0:	72 c0       	rjmp	.+228    	; 0x1886 <GPIO_TogglePin+0xfc>
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <GPIO_TogglePin+0x20>
    17a8:	6e c0       	rjmp	.+220    	; 0x1886 <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3c 83       	std	Y+4, r19	; 0x04
    17b2:	2b 83       	std	Y+3, r18	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	49 f1       	breq	.+82     	; 0x1810 <GPIO_TogglePin+0x86>
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <GPIO_TogglePin+0x48>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <GPIO_TogglePin+0x5e>
    17d0:	5a c0       	rjmp	.+180    	; 0x1886 <GPIO_TogglePin+0xfc>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	71 f1       	breq	.+92     	; 0x1838 <GPIO_TogglePin+0xae>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	e9 f1       	breq	.+122    	; 0x1860 <GPIO_TogglePin+0xd6>
    17e6:	4f c0       	rjmp	.+158    	; 0x1886 <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    17e8:	ab e3       	ldi	r26, 0x3B	; 59
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	eb e3       	ldi	r30, 0x3B	; 59
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GPIO_TogglePin+0x7c>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <GPIO_TogglePin+0x78>
    180a:	84 27       	eor	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	3b c0       	rjmp	.+118    	; 0x1886 <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1810:	a8 e3       	ldi	r26, 0x38	; 56
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e8 e3       	ldi	r30, 0x38	; 56
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_TogglePin+0xa4>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_TogglePin+0xa0>
    1832:	84 27       	eor	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	27 c0       	rjmp	.+78     	; 0x1886 <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    1838:	a5 e3       	ldi	r26, 0x35	; 53
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_TogglePin+0xcc>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_TogglePin+0xc8>
    185a:	84 27       	eor	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	13 c0       	rjmp	.+38     	; 0x1886 <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1860:	a2 e3       	ldi	r26, 0x32	; 50
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <GPIO_TogglePin+0xf4>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <GPIO_TogglePin+0xf0>
    1882:	84 27       	eor	r24, r20
    1884:	8c 93       	st	X, r24
                break;

        }
    }

}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <GPIO_SetPortDirection+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_SetPortDirection+0x8>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <GPIO_SetPortDirection+0x18>
    18aa:	96 c0       	rjmp	.+300    	; 0x19d8 <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3c 83       	std	Y+4, r19	; 0x04
    18b4:	2b 83       	std	Y+3, r18	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	a9 f1       	breq	.+106    	; 0x192a <GPIO_SetPortDirection+0x96>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <GPIO_SetPortDirection+0x40>
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	71 f0       	breq	.+28     	; 0x18ee <GPIO_SetPortDirection+0x5a>
    18d2:	82 c0       	rjmp	.+260    	; 0x19d8 <GPIO_SetPortDirection+0x144>
    18d4:	2b 81       	ldd	r18, Y+3	; 0x03
    18d6:	3c 81       	ldd	r19, Y+4	; 0x04
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <GPIO_SetPortDirection+0x4c>
    18de:	43 c0       	rjmp	.+134    	; 0x1966 <GPIO_SetPortDirection+0xd2>
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <GPIO_SetPortDirection+0x58>
    18ea:	5a c0       	rjmp	.+180    	; 0x19a0 <GPIO_SetPortDirection+0x10c>
    18ec:	75 c0       	rjmp	.+234    	; 0x19d8 <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	88 23       	and	r24, r24
    18f2:	39 f4       	brne	.+14     	; 0x1902 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	10 82       	st	Z, r1
    1900:	6b c0       	rjmp	.+214    	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	41 f4       	brne	.+16     	; 0x1918 <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1908:	ea e3       	ldi	r30, 0x3A	; 58
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    190e:	eb e3       	ldi	r30, 0x3B	; 59
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	80 83       	st	Z, r24
    1916:	60 c0       	rjmp	.+192    	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	8f 3f       	cpi	r24, 0xFF	; 255
    191c:	09 f0       	breq	.+2      	; 0x1920 <GPIO_SetPortDirection+0x8c>
    191e:	5c c0       	rjmp	.+184    	; 0x19d8 <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1920:	ea e3       	ldi	r30, 0x3A	; 58
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	80 83       	st	Z, r24
    1928:	57 c0       	rjmp	.+174    	; 0x19d8 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	88 23       	and	r24, r24
    192e:	39 f4       	brne	.+14     	; 0x193e <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1930:	e7 e3       	ldi	r30, 0x37	; 55
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    1936:	e8 e3       	ldi	r30, 0x38	; 56
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	10 82       	st	Z, r1
    193c:	4d c0       	rjmp	.+154    	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	41 f4       	brne	.+16     	; 0x1954 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    1944:	e7 e3       	ldi	r30, 0x37	; 55
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    194a:	e8 e3       	ldi	r30, 0x38	; 56
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	80 83       	st	Z, r24
    1952:	42 c0       	rjmp	.+132    	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 3f       	cpi	r24, 0xFF	; 255
    1958:	09 f0       	breq	.+2      	; 0x195c <GPIO_SetPortDirection+0xc8>
    195a:	3e c0       	rjmp	.+124    	; 0x19d8 <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    195c:	e7 e3       	ldi	r30, 0x37	; 55
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	80 83       	st	Z, r24
    1964:	39 c0       	rjmp	.+114    	; 0x19d8 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	88 23       	and	r24, r24
    196a:	39 f4       	brne	.+14     	; 0x197a <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    196c:	e4 e3       	ldi	r30, 0x34	; 52
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1972:	e5 e3       	ldi	r30, 0x35	; 53
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	10 82       	st	Z, r1
    1978:	2f c0       	rjmp	.+94     	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	41 f4       	brne	.+16     	; 0x1990 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1980:	e4 e3       	ldi	r30, 0x34	; 52
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	80 83       	st	Z, r24
    198e:	24 c0       	rjmp	.+72     	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	8f 3f       	cpi	r24, 0xFF	; 255
    1994:	09 f5       	brne	.+66     	; 0x19d8 <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    1996:	e4 e3       	ldi	r30, 0x34	; 52
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	80 83       	st	Z, r24
    199e:	1c c0       	rjmp	.+56     	; 0x19d8 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 23       	and	r24, r24
    19a4:	39 f4       	brne	.+14     	; 0x19b4 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    19a6:	e1 e3       	ldi	r30, 0x31	; 49
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    19ac:	e2 e3       	ldi	r30, 0x32	; 50
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	10 82       	st	Z, r1
    19b2:	12 c0       	rjmp	.+36     	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	41 f4       	brne	.+16     	; 0x19ca <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    19ba:	e1 e3       	ldi	r30, 0x31	; 49
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    19c0:	e2 e3       	ldi	r30, 0x32	; 50
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	80 83       	st	Z, r24
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	8f 3f       	cpi	r24, 0xFF	; 255
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_ReadPort+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_ReadPort+0x8>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    19f4:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	90 f5       	brcc	.+100    	; 0x1a60 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3c 83       	std	Y+4, r19	; 0x04
    1a04:	2b 83       	std	Y+3, r18	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	d1 f0       	breq	.+52     	; 0x1a44 <GPIO_ReadPort+0x5e>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <GPIO_ReadPort+0x3e>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <GPIO_ReadPort+0x54>
    1a22:	1e c0       	rjmp	.+60     	; 0x1a60 <GPIO_ReadPort+0x7a>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <GPIO_ReadPort+0x68>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	91 05       	cpc	r25, r1
    1a36:	81 f0       	breq	.+32     	; 0x1a58 <GPIO_ReadPort+0x72>
    1a38:	13 c0       	rjmp	.+38     	; 0x1a60 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    1a3a:	e9 e3       	ldi	r30, 0x39	; 57
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    1a44:	e6 e3       	ldi	r30, 0x36	; 54
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    1a4e:	e3 e3       	ldi	r30, 0x33	; 51
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    1a58:	e0 e3       	ldi	r30, 0x30	; 48
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <GPIO_WritePort+0x6>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <GPIO_WritePort+0x8>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	90 f5       	brcc	.+100    	; 0x1aea <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3c 83       	std	Y+4, r19	; 0x04
    1a8e:	2b 83       	std	Y+3, r18	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	d1 f0       	breq	.+52     	; 0x1ace <GPIO_WritePort+0x5e>
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <GPIO_WritePort+0x3e>
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	61 f0       	breq	.+24     	; 0x1ac4 <GPIO_WritePort+0x54>
    1aac:	1e c0       	rjmp	.+60     	; 0x1aea <GPIO_WritePort+0x7a>
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	81 f0       	breq	.+32     	; 0x1ad8 <GPIO_WritePort+0x68>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <GPIO_WritePort+0x72>
    1ac2:	13 c0       	rjmp	.+38     	; 0x1aea <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	80 83       	st	Z, r24
    1acc:	0e c0       	rjmp	.+28     	; 0x1aea <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1ace:	e8 e3       	ldi	r30, 0x38	; 56
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	80 83       	st	Z, r24
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    1ad8:	e5 e3       	ldi	r30, 0x35	; 53
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	80 83       	st	Z, r24
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1ae2:	e2 e3       	ldi	r30, 0x32	; 50
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_TogglePort+0x6>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <GPIO_TogglePort+0x16>
    1b0c:	3e c0       	rjmp	.+124    	; 0x1b8a <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	3b 83       	std	Y+3, r19	; 0x03
    1b16:	2a 83       	std	Y+2, r18	; 0x02
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	91 05       	cpc	r25, r1
    1b20:	e9 f0       	breq	.+58     	; 0x1b5c <GPIO_TogglePort+0x64>
    1b22:	2a 81       	ldd	r18, Y+2	; 0x02
    1b24:	3b 81       	ldd	r19, Y+3	; 0x03
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <GPIO_TogglePort+0x3e>
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <GPIO_TogglePort+0x54>
    1b34:	2a c0       	rjmp	.+84     	; 0x1b8a <GPIO_TogglePort+0x92>
    1b36:	2a 81       	ldd	r18, Y+2	; 0x02
    1b38:	3b 81       	ldd	r19, Y+3	; 0x03
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	b1 f0       	breq	.+44     	; 0x1b6c <GPIO_TogglePort+0x74>
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	91 05       	cpc	r25, r1
    1b48:	c9 f0       	breq	.+50     	; 0x1b7c <GPIO_TogglePort+0x84>
    1b4a:	1f c0       	rjmp	.+62     	; 0x1b8a <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    1b4c:	ab e3       	ldi	r26, 0x3B	; 59
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	eb e3       	ldi	r30, 0x3B	; 59
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 95       	com	r24
    1b58:	8c 93       	st	X, r24
    1b5a:	17 c0       	rjmp	.+46     	; 0x1b8a <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    1b5c:	a8 e3       	ldi	r26, 0x38	; 56
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e8 e3       	ldi	r30, 0x38	; 56
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 95       	com	r24
    1b68:	8c 93       	st	X, r24
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    1b6c:	a5 e3       	ldi	r26, 0x35	; 53
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e5 e3       	ldi	r30, 0x35	; 53
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 95       	com	r24
    1b78:	8c 93       	st	X, r24
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    1b7c:	a2 e3       	ldi	r26, 0x32	; 50
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e2 e3       	ldi	r30, 0x32	; 50
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 95       	com	r24
    1b88:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	2f 93       	push	r18
    1ba2:	3f 93       	push	r19
    1ba4:	4f 93       	push	r20
    1ba6:	5f 93       	push	r21
    1ba8:	6f 93       	push	r22
    1baa:	7f 93       	push	r23
    1bac:	8f 93       	push	r24
    1bae:	9f 93       	push	r25
    1bb0:	af 93       	push	r26
    1bb2:	bf 93       	push	r27
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    1bc0:	80 91 c8 01 	lds	r24, 0x01C8
    1bc4:	90 91 c9 01 	lds	r25, 0x01C9
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	29 f0       	breq	.+10     	; 0x1bd6 <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    1bcc:	e0 91 c8 01 	lds	r30, 0x01C8
    1bd0:	f0 91 c9 01 	lds	r31, 0x01C9
    1bd4:	09 95       	icall
    }
}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_2>:

ISR(INT1)
{
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    1c26:	80 91 ca 01 	lds	r24, 0x01CA
    1c2a:	90 91 cb 01 	lds	r25, 0x01CB
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	29 f0       	breq	.+10     	; 0x1c3c <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    1c32:	e0 91 ca 01 	lds	r30, 0x01CA
    1c36:	f0 91 cb 01 	lds	r31, 0x01CB
    1c3a:	09 95       	icall
    }
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	ff 91       	pop	r31
    1c42:	ef 91       	pop	r30
    1c44:	bf 91       	pop	r27
    1c46:	af 91       	pop	r26
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	7f 91       	pop	r23
    1c4e:	6f 91       	pop	r22
    1c50:	5f 91       	pop	r21
    1c52:	4f 91       	pop	r20
    1c54:	3f 91       	pop	r19
    1c56:	2f 91       	pop	r18
    1c58:	0f 90       	pop	r0
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	0f 90       	pop	r0
    1c5e:	1f 90       	pop	r1
    1c60:	18 95       	reti

00001c62 <__vector_3>:

ISR(INT2)
{
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    1c8c:	80 91 cc 01 	lds	r24, 0x01CC
    1c90:	90 91 cd 01 	lds	r25, 0x01CD
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	29 f0       	breq	.+10     	; 0x1ca2 <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    1c98:	e0 91 cc 01 	lds	r30, 0x01CC
    1c9c:	f0 91 cd 01 	lds	r31, 0x01CD
    1ca0:	09 95       	icall
    }
}
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	ff 91       	pop	r31
    1ca8:	ef 91       	pop	r30
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <INT0_SetCallBack+0x6>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	90 93 c9 01 	sts	0x01C9, r25
    1cde:	80 93 c8 01 	sts	0x01C8, r24
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <INT1_SetCallBack+0x6>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	90 93 cb 01 	sts	0x01CB, r25
    1d02:	80 93 ca 01 	sts	0x01CA, r24
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <INT2_SetCallBack+0x6>
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	90 93 cd 01 	sts	0x01CD, r25
    1d26:	80 93 cc 01 	sts	0x01CC, r24
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <INT0_init+0x6>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	62 e0       	ldi	r22, 0x02	; 2
    1d46:	4a 81       	ldd	r20, Y+2	; 0x02
    1d48:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    1d4c:	a5 e5       	ldi	r26, 0x55	; 85
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e5 e5       	ldi	r30, 0x55	; 85
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	98 2f       	mov	r25, r24
    1d58:	9c 7f       	andi	r25, 0xFC	; 252
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	89 2b       	or	r24, r25
    1d5e:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    1d60:	ab e5       	ldi	r26, 0x5B	; 91
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	eb e5       	ldi	r30, 0x5B	; 91
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 64       	ori	r24, 0x40	; 64
    1d6c:	8c 93       	st	X, r24
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <INT1_init+0x6>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	63 e0       	ldi	r22, 0x03	; 3
    1d8a:	4a 81       	ldd	r20, Y+2	; 0x02
    1d8c:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    1d90:	a5 e5       	ldi	r26, 0x55	; 85
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e5       	ldi	r30, 0x55	; 85
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	23 7f       	andi	r18, 0xF3	; 243
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	82 2b       	or	r24, r18
    1dae:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    1db0:	ab e5       	ldi	r26, 0x5B	; 91
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	eb e5       	ldi	r30, 0x5B	; 91
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	8c 93       	st	X, r24
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <INT2_init+0x6>
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	4a 81       	ldd	r20, Y+2	; 0x02
    1ddc:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	41 f4       	brne	.+16     	; 0x1df6 <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    1de6:	a4 e5       	ldi	r26, 0x54	; 84
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e4 e5       	ldi	r30, 0x54	; 84
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	8f 7b       	andi	r24, 0xBF	; 191
    1df2:	8c 93       	st	X, r24
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	39 f4       	brne	.+14     	; 0x1e0a <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    1dfc:	a4 e5       	ldi	r26, 0x54	; 84
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e4 e5       	ldi	r30, 0x54	; 84
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    1e0a:	ab e5       	ldi	r26, 0x5B	; 91
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e5       	ldi	r30, 0x5B	; 91
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	8c 93       	st	X, r24
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <INT0_DeInit>:


void INT0_DeInit(void)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    1e2a:	ab e5       	ldi	r26, 0x5B	; 91
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e5       	ldi	r30, 0x5B	; 91
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7b       	andi	r24, 0xBF	; 191
    1e36:	8c 93       	st	X, r24
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <INT1_DeInit>:


void INT1_DeInit(void)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    1e46:	ab e5       	ldi	r26, 0x5B	; 91
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	eb e5       	ldi	r30, 0x5B	; 91
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 77       	andi	r24, 0x7F	; 127
    1e52:	8c 93       	st	X, r24
}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <INT2_DeInit>:

void INT2_DeInit(void)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    1e62:	ab e5       	ldi	r26, 0x5B	; 91
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	eb e5       	ldi	r30, 0x5B	; 91
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 7d       	andi	r24, 0xDF	; 223
    1e6e:	8c 93       	st	X, r24
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	87 70       	andi	r24, 0x07	; 7
    1e86:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    1e88:	a7 e2       	ldi	r26, 0x27	; 39
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e7 e2       	ldi	r30, 0x27	; 39
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	98 2f       	mov	r25, r24
    1e94:	90 7e       	andi	r25, 0xE0	; 224
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	89 2b       	or	r24, r25
    1e9a:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    1e9c:	a6 e2       	ldi	r26, 0x26	; 38
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e6 e2       	ldi	r30, 0x26	; 38
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 64       	ori	r24, 0x40	; 64
    1ea8:	8c 93       	st	X, r24
}
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <ADC_Init>:

void ADC_Init(void)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    1eba:	a7 e2       	ldi	r26, 0x27	; 39
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e7 e2       	ldi	r30, 0x27	; 39
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	2f 73       	andi	r18, 0x3F	; 63
    1ec8:	80 91 ac 01 	lds	r24, 0x01AC
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	00 24       	eor	r0, r0
    1ed2:	96 95       	lsr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	07 94       	ror	r0
    1ed8:	96 95       	lsr	r25
    1eda:	87 95       	ror	r24
    1edc:	07 94       	ror	r0
    1ede:	98 2f       	mov	r25, r24
    1ee0:	80 2d       	mov	r24, r0
    1ee2:	82 2b       	or	r24, r18
    1ee4:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    1ee6:	80 91 ad 01 	lds	r24, 0x01AD
    1eea:	88 23       	and	r24, r24
    1eec:	41 f4       	brne	.+16     	; 0x1efe <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    1eee:	a7 e2       	ldi	r26, 0x27	; 39
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e7 e2       	ldi	r30, 0x27	; 39
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 7d       	andi	r24, 0xDF	; 223
    1efa:	8c 93       	st	X, r24
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    1efe:	80 91 ad 01 	lds	r24, 0x01AD
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	39 f4       	brne	.+14     	; 0x1f14 <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    1f06:	a7 e2       	ldi	r26, 0x27	; 39
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e7 e2       	ldi	r30, 0x27	; 39
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 62       	ori	r24, 0x20	; 32
    1f12:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    1f14:	a6 e2       	ldi	r26, 0x26	; 38
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e6 e2       	ldi	r30, 0x26	; 38
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    1f22:	80 91 ab 01 	lds	r24, 0x01AB
    1f26:	88 23       	and	r24, r24
    1f28:	99 f1       	breq	.+102    	; 0x1f90 <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    1f2a:	80 91 ab 01 	lds	r24, 0x01AB
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	79 f4       	brne	.+30     	; 0x1f50 <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    1f32:	a6 e2       	ldi	r26, 0x26	; 38
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e6 e2       	ldi	r30, 0x26	; 38
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 62       	ori	r24, 0x20	; 32
    1f3e:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    1f40:	a0 e5       	ldi	r26, 0x50	; 80
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e0 e5       	ldi	r30, 0x50	; 80
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 70       	andi	r24, 0x0F	; 15
    1f4c:	8c 93       	st	X, r24
    1f4e:	20 c0       	rjmp	.+64     	; 0x1f90 <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    1f50:	80 91 ab 01 	lds	r24, 0x01AB
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	e1 f4       	brne	.+56     	; 0x1f90 <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    1f58:	a6 e2       	ldi	r26, 0x26	; 38
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e6 e2       	ldi	r30, 0x26	; 38
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	80 62       	ori	r24, 0x20	; 32
    1f64:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    1f66:	a0 e5       	ldi	r26, 0x50	; 80
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e0 e5       	ldi	r30, 0x50	; 80
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	28 2f       	mov	r18, r24
    1f72:	2f 70       	andi	r18, 0x0F	; 15
    1f74:	80 91 af 01 	lds	r24, 0x01AF
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	82 95       	swap	r24
    1f82:	92 95       	swap	r25
    1f84:	90 7f       	andi	r25, 0xF0	; 240
    1f86:	98 27       	eor	r25, r24
    1f88:	80 7f       	andi	r24, 0xF0	; 240
    1f8a:	98 27       	eor	r25, r24
    1f8c:	82 2b       	or	r24, r18
    1f8e:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    1f90:	a6 e2       	ldi	r26, 0x26	; 38
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e6 e2       	ldi	r30, 0x26	; 38
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	98 7f       	andi	r25, 0xF8	; 248
    1f9e:	80 91 ae 01 	lds	r24, 0x01AE
    1fa2:	87 70       	andi	r24, 0x07	; 7
    1fa4:	89 2b       	or	r24, r25
    1fa6:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    1fa8:	a6 e2       	ldi	r26, 0x26	; 38
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e6 e2       	ldi	r30, 0x26	; 38
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	87 7f       	andi	r24, 0xF7	; 247
    1fb4:	8c 93       	st	X, r24
    #endif
        
}
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    1fce:	e6 e2       	ldi	r30, 0x26	; 38
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	80 71       	andi	r24, 0x10	; 16
    1fda:	90 70       	andi	r25, 0x00	; 0
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	b9 f3       	breq	.-18     	; 0x1fce <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    1fe0:	0e 94 12 10 	call	0x2024	; 0x2024 <ADC_ReadConversionRegister>
    1fe4:	90 93 cf 01 	sts	0x01CF, r25
    1fe8:	80 93 ce 01 	sts	0x01CE, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    1fec:	a6 e2       	ldi	r26, 0x26	; 38
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e6 e2       	ldi	r30, 0x26	; 38
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 61       	ori	r24, 0x10	; 16
    1ff8:	8c 93       	st	X, r24
    return ADC_conversion_value;
    1ffa:	80 91 ce 01 	lds	r24, 0x01CE
    1ffe:	90 91 cf 01 	lds	r25, 0x01CF
}
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <ADC_OnlyStartConversionGeneral>
}
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <ADC_ReadConversionRegister+0x6>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    202e:	1a 82       	std	Y+2, r1	; 0x02
    2030:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    2032:	80 91 ad 01 	lds	r24, 0x01AD
    2036:	88 23       	and	r24, r24
    2038:	b9 f4       	brne	.+46     	; 0x2068 <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    203a:	e4 e2       	ldi	r30, 0x24	; 36
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    2048:	e5 e2       	ldi	r30, 0x25	; 37
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	83 70       	andi	r24, 0x03	; 3
    2054:	90 70       	andi	r25, 0x00	; 0
    2056:	38 2f       	mov	r19, r24
    2058:	22 27       	eor	r18, r18
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	82 2b       	or	r24, r18
    2060:	93 2b       	or	r25, r19
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	20 c0       	rjmp	.+64     	; 0x20a8 <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    2068:	80 91 ad 01 	lds	r24, 0x01AD
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	e1 f4       	brne	.+56     	; 0x20a8 <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    2070:	e4 e2       	ldi	r30, 0x24	; 36
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	82 95       	swap	r24
    2078:	86 95       	lsr	r24
    207a:	86 95       	lsr	r24
    207c:	83 70       	andi	r24, 0x03	; 3
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    2088:	e5 e2       	ldi	r30, 0x25	; 37
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9c 01       	movw	r18, r24
    2094:	22 0f       	add	r18, r18
    2096:	33 1f       	adc	r19, r19
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	82 2b       	or	r24, r18
    20a2:	93 2b       	or	r25, r19
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	0f 92       	push	r0
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	69 81       	ldd	r22, Y+1	; 0x01
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>

}
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <POT_GetValue+0x6>
    20da:	0f 92       	push	r0
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	89 83       	std	Y+1, r24	; 0x01
    
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <LED_Init+0x6>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2100:	42 e0       	ldi	r20, 0x02	; 2
    2102:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <LED_OnOffPositiveLogic+0x6>
    2116:	0f 92       	push	r0
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	6a 83       	std	Y+2, r22	; 0x02
    2120:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	88 23       	and	r24, r24
    2126:	31 f4       	brne	.+12     	; 0x2134 <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	6a 81       	ldd	r22, Y+2	; 0x02
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	29 f4       	brne	.+10     	; 0x2144 <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	6a 81       	ldd	r22, Y+2	; 0x02
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    }


}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <LED_OnOffNegativeLogic+0x6>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	6a 83       	std	Y+2, r22	; 0x02
    2160:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	88 23       	and	r24, r24
    2166:	31 f4       	brne	.+12     	; 0x2174 <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	6a 81       	ldd	r22, Y+2	; 0x02
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    2172:	08 c0       	rjmp	.+16     	; 0x2184 <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	29 f4       	brne	.+10     	; 0x2184 <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	6a 81       	ldd	r22, Y+2	; 0x02
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    }


}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <LED_Toggle+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	6a 81       	ldd	r22, Y+2	; 0x02
    21a2:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_TogglePin>
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	63 e0       	ldi	r22, 0x03	; 3
    21bc:	42 e0       	ldi	r20, 0x02	; 2
    21be:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	42 e0       	ldi	r20, 0x02	; 2
    21c8:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	42 e0       	ldi	r20, 0x02	; 2
    21d2:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	42 e0       	ldi	r20, 0x02	; 2
    21dc:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	62 e0       	ldi	r22, 0x02	; 2
    21e4:	42 e0       	ldi	r20, 0x02	; 2
    21e6:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	64 e0       	ldi	r22, 0x04	; 4
    21ee:	42 e0       	ldi	r20, 0x02	; 2
    21f0:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    21fa:	88 e2       	ldi	r24, 0x28	; 40
    21fc:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2200:	8c e0       	ldi	r24, 0x0C	; 12
    2202:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    2212:	0f 93       	push	r16
    2214:	1f 93       	push	r17
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	c4 56       	subi	r28, 0x64	; 100
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	fe 01       	movw	r30, r28
    222e:	ec 59       	subi	r30, 0x9C	; 156
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	63 e0       	ldi	r22, 0x03	; 3
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    223e:	fe 01       	movw	r30, r28
    2240:	e1 5a       	subi	r30, 0xA1	; 161
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	80 83       	st	Z, r24
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	a2 83       	std	Z+2, r26	; 0x02
    2252:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	8e 01       	movw	r16, r28
    2256:	05 5a       	subi	r16, 0xA5	; 165
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	e1 5a       	subi	r30, 0xA1	; 161
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a e7       	ldi	r20, 0x7A	; 122
    226e:	55 e4       	ldi	r21, 0x45	; 69
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	f8 01       	movw	r30, r16
    227a:	80 83       	st	Z, r24
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	a2 83       	std	Z+2, r26	; 0x02
    2280:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2282:	fe 01       	movw	r30, r28
    2284:	e5 5a       	subi	r30, 0xA5	; 165
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229c:	88 23       	and	r24, r24
    229e:	44 f4       	brge	.+16     	; 0x22b0 <LCD_SendCommand+0x9e>
		__ticks = 1;
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 5a       	subi	r30, 0xA7	; 167
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	64 c0       	rjmp	.+200    	; 0x2378 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 5a       	subi	r30, 0xA5	; 165
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	0c f0       	brlt	.+2      	; 0x22d0 <LCD_SendCommand+0xbe>
    22ce:	43 c0       	rjmp	.+134    	; 0x2356 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	fe 01       	movw	r30, r28
    22d2:	e1 5a       	subi	r30, 0xA1	; 161
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8e 01       	movw	r16, r28
    22f0:	07 5a       	subi	r16, 0xA7	; 167
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
    2306:	1f c0       	rjmp	.+62     	; 0x2346 <LCD_SendCommand+0x134>
    2308:	fe 01       	movw	r30, r28
    230a:	e9 5a       	subi	r30, 0xA9	; 169
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 e9       	ldi	r24, 0x90	; 144
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2316:	fe 01       	movw	r30, r28
    2318:	e9 5a       	subi	r30, 0xA9	; 169
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_SendCommand+0x10e>
    2324:	fe 01       	movw	r30, r28
    2326:	e9 5a       	subi	r30, 0xA9	; 169
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232e:	de 01       	movw	r26, r28
    2330:	a7 5a       	subi	r26, 0xA7	; 167
    2332:	bf 4f       	sbci	r27, 0xFF	; 255
    2334:	fe 01       	movw	r30, r28
    2336:	e7 5a       	subi	r30, 0xA7	; 167
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	9c 93       	st	X, r25
    2344:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	fe 01       	movw	r30, r28
    2348:	e7 5a       	subi	r30, 0xA7	; 167
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	d1 f6       	brne	.-76     	; 0x2308 <LCD_SendCommand+0xf6>
    2354:	27 c0       	rjmp	.+78     	; 0x23a4 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2356:	8e 01       	movw	r16, r28
    2358:	07 5a       	subi	r16, 0xA7	; 167
    235a:	1f 4f       	sbci	r17, 0xFF	; 255
    235c:	fe 01       	movw	r30, r28
    235e:	e5 5a       	subi	r30, 0xA5	; 165
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	de 01       	movw	r26, r28
    237a:	ab 5a       	subi	r26, 0xAB	; 171
    237c:	bf 4f       	sbci	r27, 0xFF	; 255
    237e:	fe 01       	movw	r30, r28
    2380:	e7 5a       	subi	r30, 0xA7	; 167
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	8d 93       	st	X+, r24
    238a:	9c 93       	st	X, r25
    238c:	fe 01       	movw	r30, r28
    238e:	eb 5a       	subi	r30, 0xAB	; 171
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	91 81       	ldd	r25, Z+1	; 0x01
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_SendCommand+0x184>
    239a:	fe 01       	movw	r30, r28
    239c:	eb 5a       	subi	r30, 0xAB	; 171
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    23ae:	fe 01       	movw	r30, r28
    23b0:	ef 5a       	subi	r30, 0xAF	; 175
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e8       	ldi	r26, 0x80	; 128
    23ba:	bf e3       	ldi	r27, 0x3F	; 63
    23bc:	80 83       	st	Z, r24
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	a2 83       	std	Z+2, r26	; 0x02
    23c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	8e 01       	movw	r16, r28
    23c6:	03 5b       	subi	r16, 0xB3	; 179
    23c8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ca:	fe 01       	movw	r30, r28
    23cc:	ef 5a       	subi	r30, 0xAF	; 175
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a e7       	ldi	r20, 0x7A	; 122
    23de:	55 e4       	ldi	r21, 0x45	; 69
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	f8 01       	movw	r30, r16
    23ea:	80 83       	st	Z, r24
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	a2 83       	std	Z+2, r26	; 0x02
    23f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f2:	fe 01       	movw	r30, r28
    23f4:	e3 5b       	subi	r30, 0xB3	; 179
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	44 f4       	brge	.+16     	; 0x2420 <LCD_SendCommand+0x20e>
		__ticks = 1;
    2410:	fe 01       	movw	r30, r28
    2412:	e5 5b       	subi	r30, 0xB5	; 181
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	64 c0       	rjmp	.+200    	; 0x24e8 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    2420:	fe 01       	movw	r30, r28
    2422:	e3 5b       	subi	r30, 0xB3	; 179
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	3f ef       	ldi	r19, 0xFF	; 255
    2432:	4f e7       	ldi	r20, 0x7F	; 127
    2434:	57 e4       	ldi	r21, 0x47	; 71
    2436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    243a:	18 16       	cp	r1, r24
    243c:	0c f0       	brlt	.+2      	; 0x2440 <LCD_SendCommand+0x22e>
    243e:	43 c0       	rjmp	.+134    	; 0x24c6 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2440:	fe 01       	movw	r30, r28
    2442:	ef 5a       	subi	r30, 0xAF	; 175
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8e 01       	movw	r16, r28
    2460:	05 5b       	subi	r16, 0xB5	; 181
    2462:	1f 4f       	sbci	r17, 0xFF	; 255
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	f8 01       	movw	r30, r16
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
    2476:	1f c0       	rjmp	.+62     	; 0x24b6 <LCD_SendCommand+0x2a4>
    2478:	fe 01       	movw	r30, r28
    247a:	e7 5b       	subi	r30, 0xB7	; 183
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 e9       	ldi	r24, 0x90	; 144
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
    2486:	fe 01       	movw	r30, r28
    2488:	e7 5b       	subi	r30, 0xB7	; 183
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_SendCommand+0x27e>
    2494:	fe 01       	movw	r30, r28
    2496:	e7 5b       	subi	r30, 0xB7	; 183
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	de 01       	movw	r26, r28
    24a0:	a5 5b       	subi	r26, 0xB5	; 181
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	e5 5b       	subi	r30, 0xB5	; 181
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	11 96       	adiw	r26, 0x01	; 1
    24b2:	9c 93       	st	X, r25
    24b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	fe 01       	movw	r30, r28
    24b8:	e5 5b       	subi	r30, 0xB5	; 181
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	80 81       	ld	r24, Z
    24be:	91 81       	ldd	r25, Z+1	; 0x01
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	d1 f6       	brne	.-76     	; 0x2478 <LCD_SendCommand+0x266>
    24c4:	27 c0       	rjmp	.+78     	; 0x2514 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	8e 01       	movw	r16, r28
    24c8:	05 5b       	subi	r16, 0xB5	; 181
    24ca:	1f 4f       	sbci	r17, 0xFF	; 255
    24cc:	fe 01       	movw	r30, r28
    24ce:	e3 5b       	subi	r30, 0xB3	; 179
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	f8 01       	movw	r30, r16
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	de 01       	movw	r26, r28
    24ea:	a9 5b       	subi	r26, 0xB9	; 185
    24ec:	bf 4f       	sbci	r27, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	e5 5b       	subi	r30, 0xB5	; 181
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	8d 93       	st	X+, r24
    24fa:	9c 93       	st	X, r25
    24fc:	fe 01       	movw	r30, r28
    24fe:	e9 5b       	subi	r30, 0xB9	; 185
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	91 81       	ldd	r25, Z+1	; 0x01
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_SendCommand+0x2f4>
    250a:	fe 01       	movw	r30, r28
    250c:	e9 5b       	subi	r30, 0xB9	; 185
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    2514:	de 01       	movw	r26, r28
    2516:	ad 59       	subi	r26, 0x9D	; 157
    2518:	bf 4f       	sbci	r27, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	ec 59       	subi	r30, 0x9C	; 156
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	82 95       	swap	r24
    2524:	8f 70       	andi	r24, 0x0F	; 15
    2526:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2528:	fe 01       	movw	r30, r28
    252a:	ed 59       	subi	r30, 0x9D	; 157
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	98 2f       	mov	r25, r24
    2532:	91 70       	andi	r25, 0x01	; 1
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	49 2f       	mov	r20, r25
    253a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    253e:	fe 01       	movw	r30, r28
    2540:	ed 59       	subi	r30, 0x9D	; 157
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	86 95       	lsr	r24
    2548:	98 2f       	mov	r25, r24
    254a:	91 70       	andi	r25, 0x01	; 1
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	61 e0       	ldi	r22, 0x01	; 1
    2550:	49 2f       	mov	r20, r25
    2552:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2556:	fe 01       	movw	r30, r28
    2558:	ed 59       	subi	r30, 0x9D	; 157
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	86 95       	lsr	r24
    2560:	86 95       	lsr	r24
    2562:	98 2f       	mov	r25, r24
    2564:	91 70       	andi	r25, 0x01	; 1
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	49 2f       	mov	r20, r25
    256c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2570:	fe 01       	movw	r30, r28
    2572:	ed 59       	subi	r30, 0x9D	; 157
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	86 95       	lsr	r24
    257a:	86 95       	lsr	r24
    257c:	86 95       	lsr	r24
    257e:	98 2f       	mov	r25, r24
    2580:	91 70       	andi	r25, 0x01	; 1
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    258c:	fe 01       	movw	r30, r28
    258e:	ed 5b       	subi	r30, 0xBD	; 189
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	80 83       	st	Z, r24
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	a2 83       	std	Z+2, r26	; 0x02
    25a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	8e 01       	movw	r16, r28
    25a4:	01 5c       	subi	r16, 0xC1	; 193
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	ed 5b       	subi	r30, 0xBD	; 189
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a e7       	ldi	r20, 0x7A	; 122
    25bc:	55 e4       	ldi	r21, 0x45	; 69
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	f8 01       	movw	r30, r16
    25c8:	80 83       	st	Z, r24
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	a2 83       	std	Z+2, r26	; 0x02
    25ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25d0:	fe 01       	movw	r30, r28
    25d2:	ff 96       	adiw	r30, 0x3f	; 63
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	2c f4       	brge	.+10     	; 0x25f6 <LCD_SendCommand+0x3e4>
		__ticks = 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9e af       	std	Y+62, r25	; 0x3e
    25f2:	8d af       	std	Y+61, r24	; 0x3d
    25f4:	46 c0       	rjmp	.+140    	; 0x2682 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    25f6:	fe 01       	movw	r30, r28
    25f8:	ff 96       	adiw	r30, 0x3f	; 63
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	3f ef       	ldi	r19, 0xFF	; 255
    2606:	4f e7       	ldi	r20, 0x7F	; 127
    2608:	57 e4       	ldi	r21, 0x47	; 71
    260a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    260e:	18 16       	cp	r1, r24
    2610:	64 f5       	brge	.+88     	; 0x266a <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2612:	fe 01       	movw	r30, r28
    2614:	ed 5b       	subi	r30, 0xBD	; 189
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e2       	ldi	r20, 0x20	; 32
    2626:	51 e4       	ldi	r21, 0x41	; 65
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9e af       	std	Y+62, r25	; 0x3e
    263e:	8d af       	std	Y+61, r24	; 0x3d
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <LCD_SendCommand+0x44e>
    2642:	80 e9       	ldi	r24, 0x90	; 144
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	9c af       	std	Y+60, r25	; 0x3c
    2648:	8b af       	std	Y+59, r24	; 0x3b
    264a:	8b ad       	ldd	r24, Y+59	; 0x3b
    264c:	9c ad       	ldd	r25, Y+60	; 0x3c
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_SendCommand+0x43c>
    2652:	9c af       	std	Y+60, r25	; 0x3c
    2654:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2656:	8d ad       	ldd	r24, Y+61	; 0x3d
    2658:	9e ad       	ldd	r25, Y+62	; 0x3e
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	9e af       	std	Y+62, r25	; 0x3e
    265e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2660:	8d ad       	ldd	r24, Y+61	; 0x3d
    2662:	9e ad       	ldd	r25, Y+62	; 0x3e
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	69 f7       	brne	.-38     	; 0x2642 <LCD_SendCommand+0x430>
    2668:	16 c0       	rjmp	.+44     	; 0x2696 <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266a:	fe 01       	movw	r30, r28
    266c:	ff 96       	adiw	r30, 0x3f	; 63
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e af       	std	Y+62, r25	; 0x3e
    2680:	8d af       	std	Y+61, r24	; 0x3d
    2682:	8d ad       	ldd	r24, Y+61	; 0x3d
    2684:	9e ad       	ldd	r25, Y+62	; 0x3e
    2686:	9a af       	std	Y+58, r25	; 0x3a
    2688:	89 af       	std	Y+57, r24	; 0x39
    268a:	89 ad       	ldd	r24, Y+57	; 0x39
    268c:	9a ad       	ldd	r25, Y+58	; 0x3a
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_SendCommand+0x47c>
    2692:	9a af       	std	Y+58, r25	; 0x3a
    2694:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	62 e0       	ldi	r22, 0x02	; 2
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	8d ab       	std	Y+53, r24	; 0x35
    26aa:	9e ab       	std	Y+54, r25	; 0x36
    26ac:	af ab       	std	Y+55, r26	; 0x37
    26ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	6d a9       	ldd	r22, Y+53	; 0x35
    26b2:	7e a9       	ldd	r23, Y+54	; 0x36
    26b4:	8f a9       	ldd	r24, Y+55	; 0x37
    26b6:	98 ad       	ldd	r25, Y+56	; 0x38
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a e7       	ldi	r20, 0x7A	; 122
    26be:	55 e4       	ldi	r21, 0x45	; 69
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	89 ab       	std	Y+49, r24	; 0x31
    26ca:	9a ab       	std	Y+50, r25	; 0x32
    26cc:	ab ab       	std	Y+51, r26	; 0x33
    26ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26d0:	69 a9       	ldd	r22, Y+49	; 0x31
    26d2:	7a a9       	ldd	r23, Y+50	; 0x32
    26d4:	8b a9       	ldd	r24, Y+51	; 0x33
    26d6:	9c a9       	ldd	r25, Y+52	; 0x34
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	98 ab       	std	Y+48, r25	; 0x30
    26ee:	8f a7       	std	Y+47, r24	; 0x2f
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    26f2:	69 a9       	ldd	r22, Y+49	; 0x31
    26f4:	7a a9       	ldd	r23, Y+50	; 0x32
    26f6:	8b a9       	ldd	r24, Y+51	; 0x33
    26f8:	9c a9       	ldd	r25, Y+52	; 0x34
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	6d a9       	ldd	r22, Y+53	; 0x35
    270c:	7e a9       	ldd	r23, Y+54	; 0x36
    270e:	8f a9       	ldd	r24, Y+55	; 0x37
    2710:	98 ad       	ldd	r25, Y+56	; 0x38
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	98 ab       	std	Y+48, r25	; 0x30
    2730:	8f a7       	std	Y+47, r24	; 0x2f
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <LCD_SendCommand+0x540>
    2734:	80 e9       	ldi	r24, 0x90	; 144
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	9e a7       	std	Y+46, r25	; 0x2e
    273a:	8d a7       	std	Y+45, r24	; 0x2d
    273c:	8d a5       	ldd	r24, Y+45	; 0x2d
    273e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_SendCommand+0x52e>
    2744:	9e a7       	std	Y+46, r25	; 0x2e
    2746:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8f a5       	ldd	r24, Y+47	; 0x2f
    274a:	98 a9       	ldd	r25, Y+48	; 0x30
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	98 ab       	std	Y+48, r25	; 0x30
    2750:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8f a5       	ldd	r24, Y+47	; 0x2f
    2754:	98 a9       	ldd	r25, Y+48	; 0x30
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <LCD_SendCommand+0x522>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	69 a9       	ldd	r22, Y+49	; 0x31
    275e:	7a a9       	ldd	r23, Y+50	; 0x32
    2760:	8b a9       	ldd	r24, Y+51	; 0x33
    2762:	9c a9       	ldd	r25, Y+52	; 0x34
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	98 ab       	std	Y+48, r25	; 0x30
    276e:	8f a7       	std	Y+47, r24	; 0x2f
    2770:	8f a5       	ldd	r24, Y+47	; 0x2f
    2772:	98 a9       	ldd	r25, Y+48	; 0x30
    2774:	9c a7       	std	Y+44, r25	; 0x2c
    2776:	8b a7       	std	Y+43, r24	; 0x2b
    2778:	8b a5       	ldd	r24, Y+43	; 0x2b
    277a:	9c a5       	ldd	r25, Y+44	; 0x2c
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_SendCommand+0x56a>
    2780:	9c a7       	std	Y+44, r25	; 0x2c
    2782:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a0 e8       	ldi	r26, 0x80	; 128
    2794:	bf e3       	ldi	r27, 0x3F	; 63
    2796:	8f a3       	std	Y+39, r24	; 0x27
    2798:	98 a7       	std	Y+40, r25	; 0x28
    279a:	a9 a7       	std	Y+41, r26	; 0x29
    279c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279e:	6f a1       	ldd	r22, Y+39	; 0x27
    27a0:	78 a5       	ldd	r23, Y+40	; 0x28
    27a2:	89 a5       	ldd	r24, Y+41	; 0x29
    27a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a e7       	ldi	r20, 0x7A	; 122
    27ac:	55 e4       	ldi	r21, 0x45	; 69
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8b a3       	std	Y+35, r24	; 0x23
    27b8:	9c a3       	std	Y+36, r25	; 0x24
    27ba:	ad a3       	std	Y+37, r26	; 0x25
    27bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27be:	6b a1       	ldd	r22, Y+35	; 0x23
    27c0:	7c a1       	ldd	r23, Y+36	; 0x24
    27c2:	8d a1       	ldd	r24, Y+37	; 0x25
    27c4:	9e a1       	ldd	r25, Y+38	; 0x26
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <LCD_SendCommand+0x5ce>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9a a3       	std	Y+34, r25	; 0x22
    27dc:	89 a3       	std	Y+33, r24	; 0x21
    27de:	3f c0       	rjmp	.+126    	; 0x285e <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    27e0:	6b a1       	ldd	r22, Y+35	; 0x23
    27e2:	7c a1       	ldd	r23, Y+36	; 0x24
    27e4:	8d a1       	ldd	r24, Y+37	; 0x25
    27e6:	9e a1       	ldd	r25, Y+38	; 0x26
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	6f a1       	ldd	r22, Y+39	; 0x27
    27fa:	78 a5       	ldd	r23, Y+40	; 0x28
    27fc:	89 a5       	ldd	r24, Y+41	; 0x29
    27fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9a a3       	std	Y+34, r25	; 0x22
    281e:	89 a3       	std	Y+33, r24	; 0x21
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCD_SendCommand+0x62e>
    2822:	80 e9       	ldi	r24, 0x90	; 144
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	98 a3       	std	Y+32, r25	; 0x20
    2828:	8f 8f       	std	Y+31, r24	; 0x1f
    282a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    282c:	98 a1       	ldd	r25, Y+32	; 0x20
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_SendCommand+0x61c>
    2832:	98 a3       	std	Y+32, r25	; 0x20
    2834:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	89 a1       	ldd	r24, Y+33	; 0x21
    2838:	9a a1       	ldd	r25, Y+34	; 0x22
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9a a3       	std	Y+34, r25	; 0x22
    283e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	89 a1       	ldd	r24, Y+33	; 0x21
    2842:	9a a1       	ldd	r25, Y+34	; 0x22
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <LCD_SendCommand+0x610>
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6b a1       	ldd	r22, Y+35	; 0x23
    284c:	7c a1       	ldd	r23, Y+36	; 0x24
    284e:	8d a1       	ldd	r24, Y+37	; 0x25
    2850:	9e a1       	ldd	r25, Y+38	; 0x26
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9a a3       	std	Y+34, r25	; 0x22
    285c:	89 a3       	std	Y+33, r24	; 0x21
    285e:	89 a1       	ldd	r24, Y+33	; 0x21
    2860:	9a a1       	ldd	r25, Y+34	; 0x22
    2862:	9e 8f       	std	Y+30, r25	; 0x1e
    2864:	8d 8f       	std	Y+29, r24	; 0x1d
    2866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2868:	9e 8d       	ldd	r25, Y+30	; 0x1e
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_SendCommand+0x658>
    286e:	9e 8f       	std	Y+30, r25	; 0x1e
    2870:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    2872:	de 01       	movw	r26, r28
    2874:	ad 59       	subi	r26, 0x9D	; 157
    2876:	bf 4f       	sbci	r27, 0xFF	; 255
    2878:	fe 01       	movw	r30, r28
    287a:	ec 59       	subi	r30, 0x9C	; 156
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	8f 70       	andi	r24, 0x0F	; 15
    2882:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2884:	fe 01       	movw	r30, r28
    2886:	ed 59       	subi	r30, 0x9D	; 157
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	98 2f       	mov	r25, r24
    288e:	91 70       	andi	r25, 0x01	; 1
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	49 2f       	mov	r20, r25
    2896:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    289a:	fe 01       	movw	r30, r28
    289c:	ed 59       	subi	r30, 0x9D	; 157
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	86 95       	lsr	r24
    28a4:	98 2f       	mov	r25, r24
    28a6:	91 70       	andi	r25, 0x01	; 1
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    28b2:	fe 01       	movw	r30, r28
    28b4:	ed 59       	subi	r30, 0x9D	; 157
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	86 95       	lsr	r24
    28bc:	86 95       	lsr	r24
    28be:	98 2f       	mov	r25, r24
    28c0:	91 70       	andi	r25, 0x01	; 1
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	62 e0       	ldi	r22, 0x02	; 2
    28c6:	49 2f       	mov	r20, r25
    28c8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    28cc:	fe 01       	movw	r30, r28
    28ce:	ed 59       	subi	r30, 0x9D	; 157
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	86 95       	lsr	r24
    28d6:	86 95       	lsr	r24
    28d8:	86 95       	lsr	r24
    28da:	98 2f       	mov	r25, r24
    28dc:	91 70       	andi	r25, 0x01	; 1
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	64 e0       	ldi	r22, 0x04	; 4
    28e2:	49 2f       	mov	r20, r25
    28e4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a0 e8       	ldi	r26, 0x80	; 128
    28ee:	bf e3       	ldi	r27, 0x3F	; 63
    28f0:	89 8f       	std	Y+25, r24	; 0x19
    28f2:	9a 8f       	std	Y+26, r25	; 0x1a
    28f4:	ab 8f       	std	Y+27, r26	; 0x1b
    28f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	69 8d       	ldd	r22, Y+25	; 0x19
    28fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a e7       	ldi	r20, 0x7A	; 122
    2906:	55 e4       	ldi	r21, 0x45	; 69
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8d 8b       	std	Y+21, r24	; 0x15
    2912:	9e 8b       	std	Y+22, r25	; 0x16
    2914:	af 8b       	std	Y+23, r26	; 0x17
    2916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2918:	6d 89       	ldd	r22, Y+21	; 0x15
    291a:	7e 89       	ldd	r23, Y+22	; 0x16
    291c:	8f 89       	ldd	r24, Y+23	; 0x17
    291e:	98 8d       	ldd	r25, Y+24	; 0x18
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <LCD_SendCommand+0x728>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9c 8b       	std	Y+20, r25	; 0x14
    2936:	8b 8b       	std	Y+19, r24	; 0x13
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    293a:	6d 89       	ldd	r22, Y+21	; 0x15
    293c:	7e 89       	ldd	r23, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	69 8d       	ldd	r22, Y+25	; 0x19
    2954:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
    297a:	0f c0       	rjmp	.+30     	; 0x299a <LCD_SendCommand+0x788>
    297c:	80 e9       	ldi	r24, 0x90	; 144
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	9a 8b       	std	Y+18, r25	; 0x12
    2982:	89 8b       	std	Y+17, r24	; 0x11
    2984:	89 89       	ldd	r24, Y+17	; 0x11
    2986:	9a 89       	ldd	r25, Y+18	; 0x12
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_SendCommand+0x776>
    298c:	9a 8b       	std	Y+18, r25	; 0x12
    298e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8b 89       	ldd	r24, Y+19	; 0x13
    2992:	9c 89       	ldd	r25, Y+20	; 0x14
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9c 8b       	std	Y+20, r25	; 0x14
    2998:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <LCD_SendCommand+0x76a>
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	6d 89       	ldd	r22, Y+21	; 0x15
    29a6:	7e 89       	ldd	r23, Y+22	; 0x16
    29a8:	8f 89       	ldd	r24, Y+23	; 0x17
    29aa:	98 8d       	ldd	r25, Y+24	; 0x18
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9c 8b       	std	Y+20, r25	; 0x14
    29b6:	8b 8b       	std	Y+19, r24	; 0x13
    29b8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ba:	9c 89       	ldd	r25, Y+20	; 0x14
    29bc:	98 8b       	std	Y+16, r25	; 0x10
    29be:	8f 87       	std	Y+15, r24	; 0x0f
    29c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c2:	98 89       	ldd	r25, Y+16	; 0x10
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_SendCommand+0x7b2>
    29c8:	98 8b       	std	Y+16, r25	; 0x10
    29ca:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	62 e0       	ldi	r22, 0x02	; 2
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 e8       	ldi	r26, 0x80	; 128
    29dc:	bf e3       	ldi	r27, 0x3F	; 63
    29de:	8b 87       	std	Y+11, r24	; 0x0b
    29e0:	9c 87       	std	Y+12, r25	; 0x0c
    29e2:	ad 87       	std	Y+13, r26	; 0x0d
    29e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a e7       	ldi	r20, 0x7A	; 122
    29f4:	55 e4       	ldi	r21, 0x45	; 69
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8f 83       	std	Y+7, r24	; 0x07
    2a00:	98 87       	std	Y+8, r25	; 0x08
    2a02:	a9 87       	std	Y+9, r26	; 0x09
    2a04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a06:	6f 81       	ldd	r22, Y+7	; 0x07
    2a08:	78 85       	ldd	r23, Y+8	; 0x08
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <LCD_SendCommand+0x816>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    2a26:	3f c0       	rjmp	.+126    	; 0x2aa6 <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	3f ef       	ldi	r19, 0xFF	; 255
    2a34:	4f e7       	ldi	r20, 0x7F	; 127
    2a36:	57 e4       	ldi	r21, 0x47	; 71
    2a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a3c:	18 16       	cp	r1, r24
    2a3e:	4c f5       	brge	.+82     	; 0x2a92 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	0f c0       	rjmp	.+30     	; 0x2a88 <LCD_SendCommand+0x876>
    2a6a:	80 e9       	ldi	r24, 0x90	; 144
    2a6c:	91 e0       	ldi	r25, 0x01	; 1
    2a6e:	9c 83       	std	Y+4, r25	; 0x04
    2a70:	8b 83       	std	Y+3, r24	; 0x03
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_SendCommand+0x864>
    2a7a:	9c 83       	std	Y+4, r25	; 0x04
    2a7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	69 f7       	brne	.-38     	; 0x2a6a <LCD_SendCommand+0x858>
    2a90:	14 c0       	rjmp	.+40     	; 0x2aba <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	6f 81       	ldd	r22, Y+7	; 0x07
    2a94:	78 85       	ldd	r23, Y+8	; 0x08
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <LCD_SendCommand+0x8a0>
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    2aba:	cc 59       	subi	r28, 0x9C	; 156
    2abc:	df 4f       	sbci	r29, 0xFF	; 255
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	1f 91       	pop	r17
    2ace:	0f 91       	pop	r16
    2ad0:	08 95       	ret

00002ad2 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	c4 56       	subi	r28, 0x64	; 100
    2ae0:	d0 40       	sbci	r29, 0x00	; 0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	fe 01       	movw	r30, r28
    2aee:	ec 59       	subi	r30, 0x9C	; 156
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	63 e0       	ldi	r22, 0x03	; 3
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    2afe:	fe 01       	movw	r30, r28
    2b00:	e1 5a       	subi	r30, 0xA1	; 161
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a0 e8       	ldi	r26, 0x80	; 128
    2b0a:	bf e3       	ldi	r27, 0x3F	; 63
    2b0c:	80 83       	st	Z, r24
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	a2 83       	std	Z+2, r26	; 0x02
    2b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	8e 01       	movw	r16, r28
    2b16:	05 5a       	subi	r16, 0xA5	; 165
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e1 5a       	subi	r30, 0xA1	; 161
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	4a e7       	ldi	r20, 0x7A	; 122
    2b2e:	55 e4       	ldi	r21, 0x45	; 69
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	80 83       	st	Z, r24
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	a2 83       	std	Z+2, r26	; 0x02
    2b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b42:	fe 01       	movw	r30, r28
    2b44:	e5 5a       	subi	r30, 0xA5	; 165
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	44 f4       	brge	.+16     	; 0x2b70 <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    2b60:	fe 01       	movw	r30, r28
    2b62:	e7 5a       	subi	r30, 0xA7	; 167
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	64 c0       	rjmp	.+200    	; 0x2c38 <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    2b70:	fe 01       	movw	r30, r28
    2b72:	e5 5a       	subi	r30, 0xA5	; 165
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	0c f0       	brlt	.+2      	; 0x2b90 <LCD_DisplayCharacter+0xbe>
    2b8e:	43 c0       	rjmp	.+134    	; 0x2c16 <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b90:	fe 01       	movw	r30, r28
    2b92:	e1 5a       	subi	r30, 0xA1	; 161
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	8e 01       	movw	r16, r28
    2bb0:	07 5a       	subi	r16, 0xA7	; 167
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
    2bc6:	1f c0       	rjmp	.+62     	; 0x2c06 <LCD_DisplayCharacter+0x134>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e9 5a       	subi	r30, 0xA9	; 169
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 e9       	ldi	r24, 0x90	; 144
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e9 5a       	subi	r30, 0xA9	; 169
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_DisplayCharacter+0x10e>
    2be4:	fe 01       	movw	r30, r28
    2be6:	e9 5a       	subi	r30, 0xA9	; 169
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	de 01       	movw	r26, r28
    2bf0:	a7 5a       	subi	r26, 0xA7	; 167
    2bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e7 5a       	subi	r30, 0xA7	; 167
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	11 96       	adiw	r26, 0x01	; 1
    2c02:	9c 93       	st	X, r25
    2c04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	fe 01       	movw	r30, r28
    2c08:	e7 5a       	subi	r30, 0xA7	; 167
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	91 81       	ldd	r25, Z+1	; 0x01
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	d1 f6       	brne	.-76     	; 0x2bc8 <LCD_DisplayCharacter+0xf6>
    2c14:	27 c0       	rjmp	.+78     	; 0x2c64 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c16:	8e 01       	movw	r16, r28
    2c18:	07 5a       	subi	r16, 0xA7	; 167
    2c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e5 5a       	subi	r30, 0xA5	; 165
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	f8 01       	movw	r30, r16
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	80 83       	st	Z, r24
    2c38:	de 01       	movw	r26, r28
    2c3a:	ab 5a       	subi	r26, 0xAB	; 171
    2c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e7 5a       	subi	r30, 0xA7	; 167
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	8d 93       	st	X+, r24
    2c4a:	9c 93       	st	X, r25
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	eb 5a       	subi	r30, 0xAB	; 171
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	91 81       	ldd	r25, Z+1	; 0x01
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_DisplayCharacter+0x184>
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	eb 5a       	subi	r30, 0xAB	; 171
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	62 e0       	ldi	r22, 0x02	; 2
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ef 5a       	subi	r30, 0xAF	; 175
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e8       	ldi	r26, 0x80	; 128
    2c7a:	bf e3       	ldi	r27, 0x3F	; 63
    2c7c:	80 83       	st	Z, r24
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	a2 83       	std	Z+2, r26	; 0x02
    2c82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	8e 01       	movw	r16, r28
    2c86:	03 5b       	subi	r16, 0xB3	; 179
    2c88:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 5a       	subi	r30, 0xAF	; 175
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4a e7       	ldi	r20, 0x7A	; 122
    2c9e:	55 e4       	ldi	r21, 0x45	; 69
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	f8 01       	movw	r30, r16
    2caa:	80 83       	st	Z, r24
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	a2 83       	std	Z+2, r26	; 0x02
    2cb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e3 5b       	subi	r30, 0xB3	; 179
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	5f e3       	ldi	r21, 0x3F	; 63
    2cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ccc:	88 23       	and	r24, r24
    2cce:	44 f4       	brge	.+16     	; 0x2ce0 <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 5b       	subi	r30, 0xB5	; 181
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	64 c0       	rjmp	.+200    	; 0x2da8 <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e3 5b       	subi	r30, 0xB3	; 179
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	0c f0       	brlt	.+2      	; 0x2d00 <LCD_DisplayCharacter+0x22e>
    2cfe:	43 c0       	rjmp	.+134    	; 0x2d86 <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	fe 01       	movw	r30, r28
    2d02:	ef 5a       	subi	r30, 0xAF	; 175
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8e 01       	movw	r16, r28
    2d20:	05 5b       	subi	r16, 0xB5	; 181
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	f8 01       	movw	r30, r16
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	1f c0       	rjmp	.+62     	; 0x2d76 <LCD_DisplayCharacter+0x2a4>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e7 5b       	subi	r30, 0xB7	; 183
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 e9       	ldi	r24, 0x90	; 144
    2d40:	91 e0       	ldi	r25, 0x01	; 1
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5b       	subi	r30, 0xB7	; 183
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_DisplayCharacter+0x27e>
    2d54:	fe 01       	movw	r30, r28
    2d56:	e7 5b       	subi	r30, 0xB7	; 183
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	de 01       	movw	r26, r28
    2d60:	a5 5b       	subi	r26, 0xB5	; 181
    2d62:	bf 4f       	sbci	r27, 0xFF	; 255
    2d64:	fe 01       	movw	r30, r28
    2d66:	e5 5b       	subi	r30, 0xB5	; 181
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	11 96       	adiw	r26, 0x01	; 1
    2d72:	9c 93       	st	X, r25
    2d74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	fe 01       	movw	r30, r28
    2d78:	e5 5b       	subi	r30, 0xB5	; 181
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	d1 f6       	brne	.-76     	; 0x2d38 <LCD_DisplayCharacter+0x266>
    2d84:	27 c0       	rjmp	.+78     	; 0x2dd4 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	8e 01       	movw	r16, r28
    2d88:	05 5b       	subi	r16, 0xB5	; 181
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e3 5b       	subi	r30, 0xB3	; 179
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	f8 01       	movw	r30, r16
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
    2da8:	de 01       	movw	r26, r28
    2daa:	a9 5b       	subi	r26, 0xB9	; 185
    2dac:	bf 4f       	sbci	r27, 0xFF	; 255
    2dae:	fe 01       	movw	r30, r28
    2db0:	e5 5b       	subi	r30, 0xB5	; 181
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	8d 93       	st	X+, r24
    2dba:	9c 93       	st	X, r25
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e9 5b       	subi	r30, 0xB9	; 185
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <LCD_DisplayCharacter+0x2f4>
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e9 5b       	subi	r30, 0xB9	; 185
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    2dd4:	de 01       	movw	r26, r28
    2dd6:	ad 59       	subi	r26, 0x9D	; 157
    2dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ec 59       	subi	r30, 0x9C	; 156
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	82 95       	swap	r24
    2de4:	8f 70       	andi	r24, 0x0F	; 15
    2de6:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2de8:	fe 01       	movw	r30, r28
    2dea:	ed 59       	subi	r30, 0x9D	; 157
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	98 2f       	mov	r25, r24
    2df2:	91 70       	andi	r25, 0x01	; 1
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	49 2f       	mov	r20, r25
    2dfa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ed 59       	subi	r30, 0x9D	; 157
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	86 95       	lsr	r24
    2e08:	98 2f       	mov	r25, r24
    2e0a:	91 70       	andi	r25, 0x01	; 1
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	49 2f       	mov	r20, r25
    2e12:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 59       	subi	r30, 0x9D	; 157
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	86 95       	lsr	r24
    2e20:	86 95       	lsr	r24
    2e22:	98 2f       	mov	r25, r24
    2e24:	91 70       	andi	r25, 0x01	; 1
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	62 e0       	ldi	r22, 0x02	; 2
    2e2a:	49 2f       	mov	r20, r25
    2e2c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2e30:	fe 01       	movw	r30, r28
    2e32:	ed 59       	subi	r30, 0x9D	; 157
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	86 95       	lsr	r24
    2e3a:	86 95       	lsr	r24
    2e3c:	86 95       	lsr	r24
    2e3e:	98 2f       	mov	r25, r24
    2e40:	91 70       	andi	r25, 0x01	; 1
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	64 e0       	ldi	r22, 0x04	; 4
    2e46:	49 2f       	mov	r20, r25
    2e48:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ed 5b       	subi	r30, 0xBD	; 189
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e8       	ldi	r26, 0x80	; 128
    2e58:	bf e3       	ldi	r27, 0x3F	; 63
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	8e 01       	movw	r16, r28
    2e64:	01 5c       	subi	r16, 0xC1	; 193
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ed 5b       	subi	r30, 0xBD	; 189
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a e7       	ldi	r20, 0x7A	; 122
    2e7c:	55 e4       	ldi	r21, 0x45	; 69
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	80 83       	st	Z, r24
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	a2 83       	std	Z+2, r26	; 0x02
    2e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e90:	fe 01       	movw	r30, r28
    2e92:	ff 96       	adiw	r30, 0x3f	; 63
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	2c f4       	brge	.+10     	; 0x2eb6 <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9e af       	std	Y+62, r25	; 0x3e
    2eb2:	8d af       	std	Y+61, r24	; 0x3d
    2eb4:	46 c0       	rjmp	.+140    	; 0x2f42 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ff 96       	adiw	r30, 0x3f	; 63
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	3f ef       	ldi	r19, 0xFF	; 255
    2ec6:	4f e7       	ldi	r20, 0x7F	; 127
    2ec8:	57 e4       	ldi	r21, 0x47	; 71
    2eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ece:	18 16       	cp	r1, r24
    2ed0:	64 f5       	brge	.+88     	; 0x2f2a <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ed 5b       	subi	r30, 0xBD	; 189
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e af       	std	Y+62, r25	; 0x3e
    2efe:	8d af       	std	Y+61, r24	; 0x3d
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <LCD_DisplayCharacter+0x44e>
    2f02:	80 e9       	ldi	r24, 0x90	; 144
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	9c af       	std	Y+60, r25	; 0x3c
    2f08:	8b af       	std	Y+59, r24	; 0x3b
    2f0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_DisplayCharacter+0x43c>
    2f12:	9c af       	std	Y+60, r25	; 0x3c
    2f14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	9e af       	std	Y+62, r25	; 0x3e
    2f1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f22:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	69 f7       	brne	.-38     	; 0x2f02 <LCD_DisplayCharacter+0x430>
    2f28:	16 c0       	rjmp	.+44     	; 0x2f56 <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ff 96       	adiw	r30, 0x3f	; 63
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	9e af       	std	Y+62, r25	; 0x3e
    2f40:	8d af       	std	Y+61, r24	; 0x3d
    2f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f46:	9a af       	std	Y+58, r25	; 0x3a
    2f48:	89 af       	std	Y+57, r24	; 0x39
    2f4a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <LCD_DisplayCharacter+0x47c>
    2f52:	9a af       	std	Y+58, r25	; 0x3a
    2f54:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	40 e0       	ldi	r20, 0x00	; 0
    2f5c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e8       	ldi	r26, 0x80	; 128
    2f66:	bf e3       	ldi	r27, 0x3F	; 63
    2f68:	8d ab       	std	Y+53, r24	; 0x35
    2f6a:	9e ab       	std	Y+54, r25	; 0x36
    2f6c:	af ab       	std	Y+55, r26	; 0x37
    2f6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6d a9       	ldd	r22, Y+53	; 0x35
    2f72:	7e a9       	ldd	r23, Y+54	; 0x36
    2f74:	8f a9       	ldd	r24, Y+55	; 0x37
    2f76:	98 ad       	ldd	r25, Y+56	; 0x38
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	89 ab       	std	Y+49, r24	; 0x31
    2f8a:	9a ab       	std	Y+50, r25	; 0x32
    2f8c:	ab ab       	std	Y+51, r26	; 0x33
    2f8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f90:	69 a9       	ldd	r22, Y+49	; 0x31
    2f92:	7a a9       	ldd	r23, Y+50	; 0x32
    2f94:	8b a9       	ldd	r24, Y+51	; 0x33
    2f96:	9c a9       	ldd	r25, Y+52	; 0x34
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	98 ab       	std	Y+48, r25	; 0x30
    2fae:	8f a7       	std	Y+47, r24	; 0x2f
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    2fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6d a9       	ldd	r22, Y+53	; 0x35
    2fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fce:	8f a9       	ldd	r24, Y+55	; 0x37
    2fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	98 ab       	std	Y+48, r25	; 0x30
    2ff0:	8f a7       	std	Y+47, r24	; 0x2f
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <LCD_DisplayCharacter+0x540>
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	9e a7       	std	Y+46, r25	; 0x2e
    2ffa:	8d a7       	std	Y+45, r24	; 0x2d
    2ffc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ffe:	9e a5       	ldd	r25, Y+46	; 0x2e
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <LCD_DisplayCharacter+0x52e>
    3004:	9e a7       	std	Y+46, r25	; 0x2e
    3006:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8f a5       	ldd	r24, Y+47	; 0x2f
    300a:	98 a9       	ldd	r25, Y+48	; 0x30
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	98 ab       	std	Y+48, r25	; 0x30
    3010:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8f a5       	ldd	r24, Y+47	; 0x2f
    3014:	98 a9       	ldd	r25, Y+48	; 0x30
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <LCD_DisplayCharacter+0x522>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	69 a9       	ldd	r22, Y+49	; 0x31
    301e:	7a a9       	ldd	r23, Y+50	; 0x32
    3020:	8b a9       	ldd	r24, Y+51	; 0x33
    3022:	9c a9       	ldd	r25, Y+52	; 0x34
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	98 ab       	std	Y+48, r25	; 0x30
    302e:	8f a7       	std	Y+47, r24	; 0x2f
    3030:	8f a5       	ldd	r24, Y+47	; 0x2f
    3032:	98 a9       	ldd	r25, Y+48	; 0x30
    3034:	9c a7       	std	Y+44, r25	; 0x2c
    3036:	8b a7       	std	Y+43, r24	; 0x2b
    3038:	8b a5       	ldd	r24, Y+43	; 0x2b
    303a:	9c a5       	ldd	r25, Y+44	; 0x2c
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <LCD_DisplayCharacter+0x56a>
    3040:	9c a7       	std	Y+44, r25	; 0x2c
    3042:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	41 e0       	ldi	r20, 0x01	; 1
    304a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	a0 e8       	ldi	r26, 0x80	; 128
    3054:	bf e3       	ldi	r27, 0x3F	; 63
    3056:	8f a3       	std	Y+39, r24	; 0x27
    3058:	98 a7       	std	Y+40, r25	; 0x28
    305a:	a9 a7       	std	Y+41, r26	; 0x29
    305c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305e:	6f a1       	ldd	r22, Y+39	; 0x27
    3060:	78 a5       	ldd	r23, Y+40	; 0x28
    3062:	89 a5       	ldd	r24, Y+41	; 0x29
    3064:	9a a5       	ldd	r25, Y+42	; 0x2a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	4a e7       	ldi	r20, 0x7A	; 122
    306c:	55 e4       	ldi	r21, 0x45	; 69
    306e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	8b a3       	std	Y+35, r24	; 0x23
    3078:	9c a3       	std	Y+36, r25	; 0x24
    307a:	ad a3       	std	Y+37, r26	; 0x25
    307c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    307e:	6b a1       	ldd	r22, Y+35	; 0x23
    3080:	7c a1       	ldd	r23, Y+36	; 0x24
    3082:	8d a1       	ldd	r24, Y+37	; 0x25
    3084:	9e a1       	ldd	r25, Y+38	; 0x26
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e8       	ldi	r20, 0x80	; 128
    308c:	5f e3       	ldi	r21, 0x3F	; 63
    308e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3092:	88 23       	and	r24, r24
    3094:	2c f4       	brge	.+10     	; 0x30a0 <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9a a3       	std	Y+34, r25	; 0x22
    309c:	89 a3       	std	Y+33, r24	; 0x21
    309e:	3f c0       	rjmp	.+126    	; 0x311e <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    30a0:	6b a1       	ldd	r22, Y+35	; 0x23
    30a2:	7c a1       	ldd	r23, Y+36	; 0x24
    30a4:	8d a1       	ldd	r24, Y+37	; 0x25
    30a6:	9e a1       	ldd	r25, Y+38	; 0x26
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	57 e4       	ldi	r21, 0x47	; 71
    30b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b4:	18 16       	cp	r1, r24
    30b6:	4c f5       	brge	.+82     	; 0x310a <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ba:	78 a5       	ldd	r23, Y+40	; 0x28
    30bc:	89 a5       	ldd	r24, Y+41	; 0x29
    30be:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e2       	ldi	r20, 0x20	; 32
    30c6:	51 e4       	ldi	r21, 0x41	; 65
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9a a3       	std	Y+34, r25	; 0x22
    30de:	89 a3       	std	Y+33, r24	; 0x21
    30e0:	0f c0       	rjmp	.+30     	; 0x3100 <LCD_DisplayCharacter+0x62e>
    30e2:	80 e9       	ldi	r24, 0x90	; 144
    30e4:	91 e0       	ldi	r25, 0x01	; 1
    30e6:	98 a3       	std	Y+32, r25	; 0x20
    30e8:	8f 8f       	std	Y+31, r24	; 0x1f
    30ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ec:	98 a1       	ldd	r25, Y+32	; 0x20
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <LCD_DisplayCharacter+0x61c>
    30f2:	98 a3       	std	Y+32, r25	; 0x20
    30f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f6:	89 a1       	ldd	r24, Y+33	; 0x21
    30f8:	9a a1       	ldd	r25, Y+34	; 0x22
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	9a a3       	std	Y+34, r25	; 0x22
    30fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3100:	89 a1       	ldd	r24, Y+33	; 0x21
    3102:	9a a1       	ldd	r25, Y+34	; 0x22
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	69 f7       	brne	.-38     	; 0x30e2 <LCD_DisplayCharacter+0x610>
    3108:	14 c0       	rjmp	.+40     	; 0x3132 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310a:	6b a1       	ldd	r22, Y+35	; 0x23
    310c:	7c a1       	ldd	r23, Y+36	; 0x24
    310e:	8d a1       	ldd	r24, Y+37	; 0x25
    3110:	9e a1       	ldd	r25, Y+38	; 0x26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9a a3       	std	Y+34, r25	; 0x22
    311c:	89 a3       	std	Y+33, r24	; 0x21
    311e:	89 a1       	ldd	r24, Y+33	; 0x21
    3120:	9a a1       	ldd	r25, Y+34	; 0x22
    3122:	9e 8f       	std	Y+30, r25	; 0x1e
    3124:	8d 8f       	std	Y+29, r24	; 0x1d
    3126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <LCD_DisplayCharacter+0x658>
    312e:	9e 8f       	std	Y+30, r25	; 0x1e
    3130:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    3132:	de 01       	movw	r26, r28
    3134:	ad 59       	subi	r26, 0x9D	; 157
    3136:	bf 4f       	sbci	r27, 0xFF	; 255
    3138:	fe 01       	movw	r30, r28
    313a:	ec 59       	subi	r30, 0x9C	; 156
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 81       	ld	r24, Z
    3140:	8f 70       	andi	r24, 0x0F	; 15
    3142:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3144:	fe 01       	movw	r30, r28
    3146:	ed 59       	subi	r30, 0x9D	; 157
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 81       	ld	r24, Z
    314c:	98 2f       	mov	r25, r24
    314e:	91 70       	andi	r25, 0x01	; 1
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	49 2f       	mov	r20, r25
    3156:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    315a:	fe 01       	movw	r30, r28
    315c:	ed 59       	subi	r30, 0x9D	; 157
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	86 95       	lsr	r24
    3164:	98 2f       	mov	r25, r24
    3166:	91 70       	andi	r25, 0x01	; 1
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	49 2f       	mov	r20, r25
    316e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3172:	fe 01       	movw	r30, r28
    3174:	ed 59       	subi	r30, 0x9D	; 157
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	86 95       	lsr	r24
    317c:	86 95       	lsr	r24
    317e:	98 2f       	mov	r25, r24
    3180:	91 70       	andi	r25, 0x01	; 1
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	62 e0       	ldi	r22, 0x02	; 2
    3186:	49 2f       	mov	r20, r25
    3188:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    318c:	fe 01       	movw	r30, r28
    318e:	ed 59       	subi	r30, 0x9D	; 157
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	80 81       	ld	r24, Z
    3194:	86 95       	lsr	r24
    3196:	86 95       	lsr	r24
    3198:	86 95       	lsr	r24
    319a:	98 2f       	mov	r25, r24
    319c:	91 70       	andi	r25, 0x01	; 1
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	64 e0       	ldi	r22, 0x04	; 4
    31a2:	49 2f       	mov	r20, r25
    31a4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	a0 e8       	ldi	r26, 0x80	; 128
    31ae:	bf e3       	ldi	r27, 0x3F	; 63
    31b0:	89 8f       	std	Y+25, r24	; 0x19
    31b2:	9a 8f       	std	Y+26, r25	; 0x1a
    31b4:	ab 8f       	std	Y+27, r26	; 0x1b
    31b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b8:	69 8d       	ldd	r22, Y+25	; 0x19
    31ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	55 e4       	ldi	r21, 0x45	; 69
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	8d 8b       	std	Y+21, r24	; 0x15
    31d2:	9e 8b       	std	Y+22, r25	; 0x16
    31d4:	af 8b       	std	Y+23, r26	; 0x17
    31d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31d8:	6d 89       	ldd	r22, Y+21	; 0x15
    31da:	7e 89       	ldd	r23, Y+22	; 0x16
    31dc:	8f 89       	ldd	r24, Y+23	; 0x17
    31de:	98 8d       	ldd	r25, Y+24	; 0x18
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9c 8b       	std	Y+20, r25	; 0x14
    31f6:	8b 8b       	std	Y+19, r24	; 0x13
    31f8:	3f c0       	rjmp	.+126    	; 0x3278 <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    31fa:	6d 89       	ldd	r22, Y+21	; 0x15
    31fc:	7e 89       	ldd	r23, Y+22	; 0x16
    31fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3200:	98 8d       	ldd	r25, Y+24	; 0x18
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	4c f5       	brge	.+82     	; 0x3264 <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	69 8d       	ldd	r22, Y+25	; 0x19
    3214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e2       	ldi	r20, 0x20	; 32
    3220:	51 e4       	ldi	r21, 0x41	; 65
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9c 8b       	std	Y+20, r25	; 0x14
    3238:	8b 8b       	std	Y+19, r24	; 0x13
    323a:	0f c0       	rjmp	.+30     	; 0x325a <LCD_DisplayCharacter+0x788>
    323c:	80 e9       	ldi	r24, 0x90	; 144
    323e:	91 e0       	ldi	r25, 0x01	; 1
    3240:	9a 8b       	std	Y+18, r25	; 0x12
    3242:	89 8b       	std	Y+17, r24	; 0x11
    3244:	89 89       	ldd	r24, Y+17	; 0x11
    3246:	9a 89       	ldd	r25, Y+18	; 0x12
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_DisplayCharacter+0x776>
    324c:	9a 8b       	std	Y+18, r25	; 0x12
    324e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	8b 89       	ldd	r24, Y+19	; 0x13
    3252:	9c 89       	ldd	r25, Y+20	; 0x14
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	9c 8b       	std	Y+20, r25	; 0x14
    3258:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325a:	8b 89       	ldd	r24, Y+19	; 0x13
    325c:	9c 89       	ldd	r25, Y+20	; 0x14
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	69 f7       	brne	.-38     	; 0x323c <LCD_DisplayCharacter+0x76a>
    3262:	14 c0       	rjmp	.+40     	; 0x328c <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	6d 89       	ldd	r22, Y+21	; 0x15
    3266:	7e 89       	ldd	r23, Y+22	; 0x16
    3268:	8f 89       	ldd	r24, Y+23	; 0x17
    326a:	98 8d       	ldd	r25, Y+24	; 0x18
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9c 8b       	std	Y+20, r25	; 0x14
    3276:	8b 8b       	std	Y+19, r24	; 0x13
    3278:	8b 89       	ldd	r24, Y+19	; 0x13
    327a:	9c 89       	ldd	r25, Y+20	; 0x14
    327c:	98 8b       	std	Y+16, r25	; 0x10
    327e:	8f 87       	std	Y+15, r24	; 0x0f
    3280:	8f 85       	ldd	r24, Y+15	; 0x0f
    3282:	98 89       	ldd	r25, Y+16	; 0x10
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <LCD_DisplayCharacter+0x7b2>
    3288:	98 8b       	std	Y+16, r25	; 0x10
    328a:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	62 e0       	ldi	r22, 0x02	; 2
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a0 e8       	ldi	r26, 0x80	; 128
    329c:	bf e3       	ldi	r27, 0x3F	; 63
    329e:	8b 87       	std	Y+11, r24	; 0x0b
    32a0:	9c 87       	std	Y+12, r25	; 0x0c
    32a2:	ad 87       	std	Y+13, r26	; 0x0d
    32a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	4a e7       	ldi	r20, 0x7A	; 122
    32b4:	55 e4       	ldi	r21, 0x45	; 69
    32b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	8f 83       	std	Y+7, r24	; 0x07
    32c0:	98 87       	std	Y+8, r25	; 0x08
    32c2:	a9 87       	std	Y+9, r26	; 0x09
    32c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c6:	6f 81       	ldd	r22, Y+7	; 0x07
    32c8:	78 85       	ldd	r23, Y+8	; 0x08
    32ca:	89 85       	ldd	r24, Y+9	; 0x09
    32cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e8       	ldi	r20, 0x80	; 128
    32d4:	5f e3       	ldi	r21, 0x3F	; 63
    32d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32da:	88 23       	and	r24, r24
    32dc:	2c f4       	brge	.+10     	; 0x32e8 <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
    32e6:	3f c0       	rjmp	.+126    	; 0x3366 <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    32e8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ea:	78 85       	ldd	r23, Y+8	; 0x08
    32ec:	89 85       	ldd	r24, Y+9	; 0x09
    32ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	3f ef       	ldi	r19, 0xFF	; 255
    32f4:	4f e7       	ldi	r20, 0x7F	; 127
    32f6:	57 e4       	ldi	r21, 0x47	; 71
    32f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32fc:	18 16       	cp	r1, r24
    32fe:	4c f5       	brge	.+82     	; 0x3352 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3300:	6b 85       	ldd	r22, Y+11	; 0x0b
    3302:	7c 85       	ldd	r23, Y+12	; 0x0c
    3304:	8d 85       	ldd	r24, Y+13	; 0x0d
    3306:	9e 85       	ldd	r25, Y+14	; 0x0e
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	51 e4       	ldi	r21, 0x41	; 65
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	9e 83       	std	Y+6, r25	; 0x06
    3326:	8d 83       	std	Y+5, r24	; 0x05
    3328:	0f c0       	rjmp	.+30     	; 0x3348 <LCD_DisplayCharacter+0x876>
    332a:	80 e9       	ldi	r24, 0x90	; 144
    332c:	91 e0       	ldi	r25, 0x01	; 1
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <LCD_DisplayCharacter+0x864>
    333a:	9c 83       	std	Y+4, r25	; 0x04
    333c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333e:	8d 81       	ldd	r24, Y+5	; 0x05
    3340:	9e 81       	ldd	r25, Y+6	; 0x06
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	9e 83       	std	Y+6, r25	; 0x06
    3346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3348:	8d 81       	ldd	r24, Y+5	; 0x05
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	69 f7       	brne	.-38     	; 0x332a <LCD_DisplayCharacter+0x858>
    3350:	14 c0       	rjmp	.+40     	; 0x337a <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3352:	6f 81       	ldd	r22, Y+7	; 0x07
    3354:	78 85       	ldd	r23, Y+8	; 0x08
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <LCD_DisplayCharacter+0x8a0>
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    337a:	80 91 d1 01 	lds	r24, 0x01D1
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	80 93 d1 01 	sts	0x01D1, r24
    if(col_global == MAX_NUM_COL_LCD)
    3384:	80 91 d1 01 	lds	r24, 0x01D1
    3388:	84 31       	cpi	r24, 0x14	; 20
    338a:	69 f4       	brne	.+26     	; 0x33a6 <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    338c:	80 91 d0 01 	lds	r24, 0x01D0
    3390:	8f 5f       	subi	r24, 0xFF	; 255
    3392:	80 93 d0 01 	sts	0x01D0, r24
        col_global = 0 ;
    3396:	10 92 d1 01 	sts	0x01D1, r1
        if(row_global == MAX_NUM_COL_LCD)
    339a:	80 91 d0 01 	lds	r24, 0x01D0
    339e:	84 31       	cpi	r24, 0x14	; 20
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    33a2:	10 92 d0 01 	sts	0x01D0, r1
    }
}
    33a6:	cc 59       	subi	r28, 0x9C	; 156
    33a8:	df 4f       	sbci	r29, 0xFF	; 255
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	08 95       	ret

000033be <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <LCD_DisplayString+0x6>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	9b 83       	std	Y+3, r25	; 0x03
    33cc:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    33ce:	19 82       	std	Y+1, r1	; 0x01
    33d0:	0e c0       	rjmp	.+28     	; 0x33ee <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	9b 81       	ldd	r25, Y+3	; 0x03
    33dc:	fc 01       	movw	r30, r24
    33de:	e2 0f       	add	r30, r18
    33e0:	f3 1f       	adc	r31, r19
    33e2:	80 81       	ld	r24, Z
    33e4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>
        it++;
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	9b 81       	ldd	r25, Y+3	; 0x03
    33f8:	fc 01       	movw	r30, r24
    33fa:	e2 0f       	add	r30, r18
    33fc:	f3 1f       	adc	r31, r19
    33fe:	80 81       	ld	r24, Z
    3400:	88 23       	and	r24, r24
    3402:	39 f7       	brne	.-50     	; 0x33d2 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	00 d0       	rcall	.+0      	; 0x3416 <LCD_MoveCursor+0x6>
    3416:	00 d0       	rcall	.+0      	; 0x3418 <LCD_MoveCursor+0x8>
    3418:	0f 92       	push	r0
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	8a 83       	std	Y+2, r24	; 0x02
    3420:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	3d 83       	std	Y+5, r19	; 0x05
    342a:	2c 83       	std	Y+4, r18	; 0x04
    342c:	8c 81       	ldd	r24, Y+4	; 0x04
    342e:	9d 81       	ldd	r25, Y+5	; 0x05
    3430:	81 30       	cpi	r24, 0x01	; 1
    3432:	91 05       	cpc	r25, r1
    3434:	e9 f0       	breq	.+58     	; 0x3470 <LCD_MoveCursor+0x60>
    3436:	2c 81       	ldd	r18, Y+4	; 0x04
    3438:	3d 81       	ldd	r19, Y+5	; 0x05
    343a:	22 30       	cpi	r18, 0x02	; 2
    343c:	31 05       	cpc	r19, r1
    343e:	2c f4       	brge	.+10     	; 0x344a <LCD_MoveCursor+0x3a>
    3440:	8c 81       	ldd	r24, Y+4	; 0x04
    3442:	9d 81       	ldd	r25, Y+5	; 0x05
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	61 f0       	breq	.+24     	; 0x3460 <LCD_MoveCursor+0x50>
    3448:	30 c0       	rjmp	.+96     	; 0x34aa <LCD_MoveCursor+0x9a>
    344a:	2c 81       	ldd	r18, Y+4	; 0x04
    344c:	3d 81       	ldd	r19, Y+5	; 0x05
    344e:	22 30       	cpi	r18, 0x02	; 2
    3450:	31 05       	cpc	r19, r1
    3452:	c1 f0       	breq	.+48     	; 0x3484 <LCD_MoveCursor+0x74>
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	9d 81       	ldd	r25, Y+5	; 0x05
    3458:	83 30       	cpi	r24, 0x03	; 3
    345a:	91 05       	cpc	r25, r1
    345c:	e9 f0       	breq	.+58     	; 0x3498 <LCD_MoveCursor+0x88>
    345e:	25 c0       	rjmp	.+74     	; 0x34aa <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	80 93 d1 01 	sts	0x01D1, r24
            row_global = 0 ;
    346a:	10 92 d0 01 	sts	0x01D0, r1
    346e:	1d c0       	rjmp	.+58     	; 0x34aa <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	80 5c       	subi	r24, 0xC0	; 192
    3474:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3476:	8b 81       	ldd	r24, Y+3	; 0x03
    3478:	80 93 d1 01 	sts	0x01D1, r24
            row_global = 1 ;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	80 93 d0 01 	sts	0x01D0, r24
    3482:	13 c0       	rjmp	.+38     	; 0x34aa <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	8c 5e       	subi	r24, 0xEC	; 236
    3488:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	80 93 d1 01 	sts	0x01D1, r24
                row_global = 2 ;
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	80 93 d0 01 	sts	0x01D0, r24
    3496:	09 c0       	rjmp	.+18     	; 0x34aa <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	8c 5a       	subi	r24, 0xAC	; 172
    349c:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	80 93 d1 01 	sts	0x01D1, r24
                row_global = 3 ;
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	80 93 d0 01 	sts	0x01D0, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	80 68       	ori	r24, 0x80	; 128
    34ae:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
}
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <LCD_DisplayStringRowCol+0x6>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <LCD_DisplayStringRowCol+0x8>
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	6b 83       	std	Y+3, r22	; 0x03
    34d4:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	6c 81       	ldd	r22, Y+4	; 0x04
    34da:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	9a 81       	ldd	r25, Y+2	; 0x02
    34e2:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
}
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    34f4:	df 93       	push	r29
    34f6:	cf 93       	push	r28
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    34fc:	10 92 d1 01 	sts	0x01D1, r1
    3500:	10 92 d0 01 	sts	0x01D0, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
}
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    3518:	80 91 d1 01 	lds	r24, 0x01D1
    351c:	83 31       	cpi	r24, 0x13	; 19
    351e:	89 f4       	brne	.+34     	; 0x3542 <LCD_MoveCursorRight+0x32>
    3520:	80 91 d0 01 	lds	r24, 0x01D0
    3524:	88 23       	and	r24, r24
    3526:	69 f4       	brne	.+26     	; 0x3542 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    3528:	10 92 d1 01 	sts	0x01D1, r1
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	80 93 d0 01 	sts	0x01D0, r24
        LCD_MoveCursor(row_global,col_global);
    3532:	80 91 d0 01 	lds	r24, 0x01D0
    3536:	90 91 d1 01 	lds	r25, 0x01D1
    353a:	69 2f       	mov	r22, r25
    353c:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    3540:	46 c0       	rjmp	.+140    	; 0x35ce <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    3542:	80 91 d1 01 	lds	r24, 0x01D1
    3546:	83 31       	cpi	r24, 0x13	; 19
    3548:	89 f4       	brne	.+34     	; 0x356c <LCD_MoveCursorRight+0x5c>
    354a:	80 91 d0 01 	lds	r24, 0x01D0
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	69 f4       	brne	.+26     	; 0x356c <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    3552:	10 92 d1 01 	sts	0x01D1, r1
    3556:	82 e0       	ldi	r24, 0x02	; 2
    3558:	80 93 d0 01 	sts	0x01D0, r24
        LCD_MoveCursor(row_global,col_global);
    355c:	80 91 d0 01 	lds	r24, 0x01D0
    3560:	90 91 d1 01 	lds	r25, 0x01D1
    3564:	69 2f       	mov	r22, r25
    3566:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    356a:	31 c0       	rjmp	.+98     	; 0x35ce <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    356c:	80 91 d1 01 	lds	r24, 0x01D1
    3570:	83 31       	cpi	r24, 0x13	; 19
    3572:	89 f4       	brne	.+34     	; 0x3596 <LCD_MoveCursorRight+0x86>
    3574:	80 91 d0 01 	lds	r24, 0x01D0
    3578:	82 30       	cpi	r24, 0x02	; 2
    357a:	69 f4       	brne	.+26     	; 0x3596 <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    357c:	10 92 d1 01 	sts	0x01D1, r1
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	80 93 d0 01 	sts	0x01D0, r24
        LCD_MoveCursor(row_global,col_global);
    3586:	80 91 d0 01 	lds	r24, 0x01D0
    358a:	90 91 d1 01 	lds	r25, 0x01D1
    358e:	69 2f       	mov	r22, r25
    3590:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    3594:	1c c0       	rjmp	.+56     	; 0x35ce <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    3596:	80 91 d1 01 	lds	r24, 0x01D1
    359a:	83 31       	cpi	r24, 0x13	; 19
    359c:	81 f4       	brne	.+32     	; 0x35be <LCD_MoveCursorRight+0xae>
    359e:	80 91 d0 01 	lds	r24, 0x01D0
    35a2:	83 30       	cpi	r24, 0x03	; 3
    35a4:	61 f4       	brne	.+24     	; 0x35be <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    35a6:	10 92 d1 01 	sts	0x01D1, r1
    35aa:	10 92 d0 01 	sts	0x01D0, r1
        LCD_MoveCursor(row_global,col_global);
    35ae:	80 91 d0 01 	lds	r24, 0x01D0
    35b2:	90 91 d1 01 	lds	r25, 0x01D1
    35b6:	69 2f       	mov	r22, r25
    35b8:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    35bc:	08 c0       	rjmp	.+16     	; 0x35ce <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    35be:	84 e1       	ldi	r24, 0x14	; 20
    35c0:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
        col_global++;
    35c4:	80 91 d1 01 	lds	r24, 0x01D1
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	80 93 d1 01 	sts	0x01D1, r24
    }
}
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    35dc:	80 91 d1 01 	lds	r24, 0x01D1
    35e0:	88 23       	and	r24, r24
    35e2:	91 f4       	brne	.+36     	; 0x3608 <LCD_MoveCursorLeft+0x34>
    35e4:	80 91 d0 01 	lds	r24, 0x01D0
    35e8:	88 23       	and	r24, r24
    35ea:	71 f4       	brne	.+28     	; 0x3608 <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    35ec:	83 e1       	ldi	r24, 0x13	; 19
    35ee:	80 93 d1 01 	sts	0x01D1, r24
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	80 93 d0 01 	sts	0x01D0, r24
        LCD_MoveCursor(row_global,col_global);
    35f8:	80 91 d0 01 	lds	r24, 0x01D0
    35fc:	90 91 d1 01 	lds	r25, 0x01D1
    3600:	69 2f       	mov	r22, r25
    3602:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    3606:	49 c0       	rjmp	.+146    	; 0x369a <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    3608:	80 91 d1 01 	lds	r24, 0x01D1
    360c:	88 23       	and	r24, r24
    360e:	89 f4       	brne	.+34     	; 0x3632 <LCD_MoveCursorLeft+0x5e>
    3610:	80 91 d0 01 	lds	r24, 0x01D0
    3614:	81 30       	cpi	r24, 0x01	; 1
    3616:	69 f4       	brne	.+26     	; 0x3632 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    3618:	83 e1       	ldi	r24, 0x13	; 19
    361a:	80 93 d1 01 	sts	0x01D1, r24
    361e:	10 92 d0 01 	sts	0x01D0, r1
        LCD_MoveCursor(row_global,col_global);
    3622:	80 91 d0 01 	lds	r24, 0x01D0
    3626:	90 91 d1 01 	lds	r25, 0x01D1
    362a:	69 2f       	mov	r22, r25
    362c:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    3630:	34 c0       	rjmp	.+104    	; 0x369a <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    3632:	80 91 d1 01 	lds	r24, 0x01D1
    3636:	88 23       	and	r24, r24
    3638:	91 f4       	brne	.+36     	; 0x365e <LCD_MoveCursorLeft+0x8a>
    363a:	80 91 d0 01 	lds	r24, 0x01D0
    363e:	82 30       	cpi	r24, 0x02	; 2
    3640:	71 f4       	brne	.+28     	; 0x365e <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    3642:	83 e1       	ldi	r24, 0x13	; 19
    3644:	80 93 d1 01 	sts	0x01D1, r24
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	80 93 d0 01 	sts	0x01D0, r24
        LCD_MoveCursor(row_global,col_global);
    364e:	80 91 d0 01 	lds	r24, 0x01D0
    3652:	90 91 d1 01 	lds	r25, 0x01D1
    3656:	69 2f       	mov	r22, r25
    3658:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    365c:	1e c0       	rjmp	.+60     	; 0x369a <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    365e:	80 91 d1 01 	lds	r24, 0x01D1
    3662:	88 23       	and	r24, r24
    3664:	91 f4       	brne	.+36     	; 0x368a <LCD_MoveCursorLeft+0xb6>
    3666:	80 91 d0 01 	lds	r24, 0x01D0
    366a:	83 30       	cpi	r24, 0x03	; 3
    366c:	71 f4       	brne	.+28     	; 0x368a <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    366e:	83 e1       	ldi	r24, 0x13	; 19
    3670:	80 93 d1 01 	sts	0x01D1, r24
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	80 93 d0 01 	sts	0x01D0, r24
        LCD_MoveCursor(row_global,col_global);
    367a:	80 91 d0 01 	lds	r24, 0x01D0
    367e:	90 91 d1 01 	lds	r25, 0x01D1
    3682:	69 2f       	mov	r22, r25
    3684:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    3688:	08 c0       	rjmp	.+16     	; 0x369a <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    368a:	80 e1       	ldi	r24, 0x10	; 16
    368c:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
        col_global--;
    3690:	80 91 d1 01 	lds	r24, 0x01D1
    3694:	81 50       	subi	r24, 0x01	; 1
    3696:	80 93 d1 01 	sts	0x01D1, r24
    }
    
}
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    36a8:	8c e1       	ldi	r24, 0x1C	; 28
    36aa:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
}
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    36bc:	88 e1       	ldi	r24, 0x18	; 24
    36be:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
}
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <LCD_GenerateCharacterCGRAM+0x6>
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <LCD_GenerateCharacterCGRAM+0x8>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	9b 83       	std	Y+3, r25	; 0x03
    36d6:	8a 83       	std	Y+2, r24	; 0x02
    36d8:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	08 96       	adiw	r24, 0x08	; 8
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	0e 94 09 11 	call	0x2212	; 0x2212 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    36f2:	19 82       	std	Y+1, r1	; 0x01
    36f4:	0e c0       	rjmp	.+28     	; 0x3712 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3700:	fc 01       	movw	r30, r24
    3702:	e2 0f       	add	r30, r18
    3704:	f3 1f       	adc	r31, r19
    3706:	80 81       	ld	r24, Z
    3708:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	8f 5f       	subi	r24, 0xFF	; 255
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	88 30       	cpi	r24, 0x08	; 8
    3716:	78 f3       	brcs	.-34     	; 0x36f6 <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	0f 92       	push	r0
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>
}
    3738:	0f 90       	pop	r0
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	00 d0       	rcall	.+0      	; 0x3746 <LCD_DisplayCustomCharacterRowCol+0x6>
    3746:	0f 92       	push	r0
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	89 83       	std	Y+1, r24	; 0x01
    374e:	6a 83       	std	Y+2, r22	; 0x02
    3750:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	6b 81       	ldd	r22, Y+3	; 0x03
    3756:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>
}
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	cf 91       	pop	r28
    3768:	df 91       	pop	r29
    376a:	08 95       	ret

0000376c <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62
    3774:	65 97       	sbiw	r28, 0x15	; 21
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	6a 8b       	std	Y+18, r22	; 0x12
    3782:	7b 8b       	std	Y+19, r23	; 0x13
    3784:	8c 8b       	std	Y+20, r24	; 0x14
    3786:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3788:	8a 89       	ldd	r24, Y+18	; 0x12
    378a:	9b 89       	ldd	r25, Y+19	; 0x13
    378c:	9e 01       	movw	r18, r28
    378e:	2f 5f       	subi	r18, 0xFF	; 255
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	b9 01       	movw	r22, r18
    3794:	4a e0       	ldi	r20, 0x0A	; 10
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    379c:	ce 01       	movw	r24, r28
    379e:	01 96       	adiw	r24, 0x01	; 1
    37a0:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
}
    37a4:	65 96       	adiw	r28, 0x15	; 21
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	08 95       	ret

000037b6 <Buzzer_Init>:

#include "Buzzer_interface.h"


void Buzzer_Init(uint8 PORTX , uint8 PIN )
{
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <Buzzer_Init+0x6>
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	6a 81       	ldd	r22, Y+2	; 0x02
    37c8:	42 e0       	ldi	r20, 0x02	; 2
    37ca:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
}
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <Buzzer_OnOffPositiveLogic>:


void Buzzer_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	00 d0       	rcall	.+0      	; 0x37de <Buzzer_OnOffPositiveLogic+0x6>
    37de:	0f 92       	push	r0
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	89 83       	std	Y+1, r24	; 0x01
    37e6:	6a 83       	std	Y+2, r22	; 0x02
    37e8:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	88 23       	and	r24, r24
    37ee:	31 f4       	brne	.+12     	; 0x37fc <Buzzer_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	6a 81       	ldd	r22, Y+2	; 0x02
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    37fa:	08 c0       	rjmp	.+16     	; 0x380c <Buzzer_OnOffPositiveLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    37fc:	8b 81       	ldd	r24, Y+3	; 0x03
    37fe:	81 30       	cpi	r24, 0x01	; 1
    3800:	29 f4       	brne	.+10     	; 0x380c <Buzzer_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	6a 81       	ldd	r22, Y+2	; 0x02
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    }
}
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <Buzzer_OnOffNegativeLogic>:


void Buzzer_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	00 d0       	rcall	.+0      	; 0x381e <Buzzer_OnOffNegativeLogic+0x6>
    381e:	0f 92       	push	r0
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	6a 83       	std	Y+2, r22	; 0x02
    3828:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    382a:	8b 81       	ldd	r24, Y+3	; 0x03
    382c:	88 23       	and	r24, r24
    382e:	31 f4       	brne	.+12     	; 0x383c <Buzzer_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	6a 81       	ldd	r22, Y+2	; 0x02
    3834:	41 e0       	ldi	r20, 0x01	; 1
    3836:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    383a:	08 c0       	rjmp	.+16     	; 0x384c <Buzzer_OnOffNegativeLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    383c:	8b 81       	ldd	r24, Y+3	; 0x03
    383e:	81 30       	cpi	r24, 0x01	; 1
    3840:	29 f4       	brne	.+10     	; 0x384c <Buzzer_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	6a 81       	ldd	r22, Y+2	; 0x02
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_WritePin>
    }
}
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <Buzzer_Toggle>:



void Buzzer_Toggle(uint8 PORTX , uint8 PIN)
{
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	00 d0       	rcall	.+0      	; 0x385e <Buzzer_Toggle+0x6>
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
    3862:	89 83       	std	Y+1, r24	; 0x01
    3864:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_TogglePin(PORTX,PIN);
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	6a 81       	ldd	r22, Y+2	; 0x02
    386a:	0e 94 c5 0b 	call	0x178a	; 0x178a <GPIO_TogglePin>
}
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	cf 91       	pop	r28
    3874:	df 91       	pop	r29
    3876:	08 95       	ret

00003878 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	00 d0       	rcall	.+0      	; 0x387e <BUTTON_Init+0x6>
    387e:	0f 92       	push	r0
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	6a 83       	std	Y+2, r22	; 0x02
    3888:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	6a 81       	ldd	r22, Y+2	; 0x02
    388e:	4b 81       	ldd	r20, Y+3	; 0x03
    3890:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_SetPinDirection>
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <BUTTON_GetValue+0x6>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	6a 81       	ldd	r22, Y+2	; 0x02
    38b2:	0e 94 30 0a 	call	0x1460	; 0x1460 <GPIO_ReadPin>
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	08 95       	ret

000038c0 <App_Init>:

/*  Enable inceaseing speed only when distance is safe value    */
static volatile uint8 Accelerate_Enbaled_ACCS_Danger = NO_Condition ;

void App_Init(void)
{
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62
    /*	Enable Global Interrupt  */
	sei();
    38c8:	78 94       	sei

    /*  Intialize LCD   */
    LCD_init();
    38ca:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_init>

    /*  Initialize Buzzer */
    Buzzer_Init(Buzzer_PORT,Buzzer_PIN);
    38ce:	82 e0       	ldi	r24, 0x02	; 2
    38d0:	66 e0       	ldi	r22, 0x06	; 6
    38d2:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <Buzzer_Init>

    /* Initialize Button Accelerate & ACCS & GearBox    */
    BUTTON_Init(Accelerate_BTN_PORT,Accelerate_BTN_PIN,INPUT_PIN);
    38d6:	83 e0       	ldi	r24, 0x03	; 3
    38d8:	67 e0       	ldi	r22, 0x07	; 7
    38da:	40 e0       	ldi	r20, 0x00	; 0
    38dc:	0e 94 3c 1c 	call	0x3878	; 0x3878 <BUTTON_Init>
    BUTTON_Init(ACCS_BTN_PORT,ACCS_BTN_PIN,INPUT_PIN);
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	65 e0       	ldi	r22, 0x05	; 5
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <BUTTON_Init>
    BUTTON_Init(GearBox_BTN_PORT,GearBox_BTN_PIN,INPUT_PIN);
    38ea:	83 e0       	ldi	r24, 0x03	; 3
    38ec:	66 e0       	ldi	r22, 0x06	; 6
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <BUTTON_Init>

    /*  Initialize Braking Button with EXT_INT 1    */
    INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	60 e0       	ldi	r22, 0x00	; 0
    38f8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <INT1_init>
    /*  Set call back function  */
    INT1_SetCallBack(Braking_Button_Handling);
    38fc:	86 e2       	ldi	r24, 0x26	; 38
    38fe:	9e e1       	ldi	r25, 0x1E	; 30
    3900:	0e 94 76 0e 	call	0x1cec	; 0x1cec <INT1_SetCallBack>

    /*  Initialize LEDS(BLUE,Red,Green,Yellow) all os them connected positive logic */
    LED_Init(Blue_LED_PORT,BLUE_LED_PIN);
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	65 e0       	ldi	r22, 0x05	; 5
    3908:	0e 94 77 10 	call	0x20ee	; 0x20ee <LED_Init>
    LED_Init(Red_LED_PORT,Red_LED_PIN);
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	67 e0       	ldi	r22, 0x07	; 7
    3910:	0e 94 77 10 	call	0x20ee	; 0x20ee <LED_Init>
    LED_Init(Green_LED_PORT,Green_LED_PIN);
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	64 e0       	ldi	r22, 0x04	; 4
    3918:	0e 94 77 10 	call	0x20ee	; 0x20ee <LED_Init>
    LED_Init(Yellow_LED_PORT,Yellow_LED_PIN);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	66 e0       	ldi	r22, 0x06	; 6
    3920:	0e 94 77 10 	call	0x20ee	; 0x20ee <LED_Init>

    /*  Turn Of all of this led  */
    LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN, LED_OFF);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	65 e0       	ldi	r22, 0x05	; 5
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN, LED_OFF);
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	67 e0       	ldi	r22, 0x07	; 7
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN, LED_OFF);
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	64 e0       	ldi	r22, 0x04	; 4
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN, LED_OFF);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	66 e0       	ldi	r22, 0x06	; 6
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

    /*  initialize Timer0   */
    Timer0_Init();
    394c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <Timer0_Init>

    /*  Set callback function that will called when Timeout happen to turn of buzzer and handle anything another    */
    Timer0_SetCallBack(Buzzer_timeOutOff);
    3950:	8c e8       	ldi	r24, 0x8C	; 140
    3952:	9e e1       	ldi	r25, 0x1E	; 30
    3954:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer0_SetCallBack>

    /*  Initialize ADC to be used by Potentiometer to work as RADAR(Ultrasonic)*/
    ADC_Init();
    3958:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <ADC_Init>

    /*  Intialize Potentiometer */
    POT_Init(ADC_Channel_0);
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <POT_Init>
    
    /*  Intialize Bash Board for Car*/
    //DashBoard_Init();
    /*  Initailize for small LCD*/

    DashBoard_Init_small();
    3962:	0e 94 47 20 	call	0x408e	; 0x408e <DashBoard_Init_small>
}
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <StateMachineUpdate>:



void StateMachineUpdate(void)
{
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    Hanndle_GrearBox_N_State();
    3974:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <Hanndle_GrearBox_N_State>
    Hanndle_GrearBox_D_State();
    3978:	0e 94 c5 1c 	call	0x398a	; 0x398a <Hanndle_GrearBox_D_State>
    Hanndle_GrearBox_R_State();
    397c:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <Hanndle_GrearBox_R_State>
    Buttons_Update();
    3980:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <Buttons_Update>
}
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <Hanndle_GrearBox_D_State>:


static void Hanndle_GrearBox_D_State(void)
{
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    if((ACCS_Currnet_state == ACCS_Enable) && (D_GearBox == GearBox_Current_State))
    3992:	80 91 d3 01 	lds	r24, 0x01D3
    3996:	81 30       	cpi	r24, 0x01	; 1
    3998:	41 f4       	brne	.+16     	; 0x39aa <Hanndle_GrearBox_D_State+0x20>
    399a:	80 91 d2 01 	lds	r24, 0x01D2
    399e:	81 30       	cpi	r24, 0x01	; 1
    39a0:	21 f4       	brne	.+8      	; 0x39aa <Hanndle_GrearBox_D_State+0x20>
    {
        ACCS_CatchDistance();
    39a2:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <ACCS_CatchDistance>
        /*  may be interrupt happen here so inside next function check if brake button pressed and make disable for ACCS    */
        ACCS_DicisionTake();
    39a6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <ACCS_DicisionTake>
        
    }
}
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <Hanndle_GrearBox_N_State>:



static void Hanndle_GrearBox_N_State(void)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == N_GearBox)
    39b8:	80 91 d2 01 	lds	r24, 0x01D2
    39bc:	88 23       	and	r24, r24
    39be:	89 f4       	brne	.+34     	; 0x39e2 <Hanndle_GrearBox_N_State+0x32>
    {
        if(ACCS_Currnet_state == ACCS_Enable)
    39c0:	80 91 d3 01 	lds	r24, 0x01D3
    39c4:	81 30       	cpi	r24, 0x01	; 1
    39c6:	69 f4       	brne	.+26     	; 0x39e2 <Hanndle_GrearBox_N_State+0x32>
        {
            /*  Disable ACCS if Enabled  */
            ACCS_Currnet_state = ACCS_Disable;
    39c8:	10 92 d3 01 	sts	0x01D3, r1
            /*  Turn off led of it was turned on  */
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	64 e0       	ldi	r22, 0x04	; 4
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            /*  Update LCD with new change*/
            //DashBoard_Update_ACCS_State(ACCS_Currnet_state);
            /*  Initailize for small LCD*/
            DashBoard_Update_ACCS_State_small(ACCS_Currnet_state);
    39d6:	80 91 d3 01 	lds	r24, 0x01D3
    39da:	0e 94 a9 20 	call	0x4152	; 0x4152 <DashBoard_Update_ACCS_State_small>
            
            //DashBoard_DistanceHide();
            DashBoard_DistanceHide_small();
    39de:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <DashBoard_DistanceHide_small>

        }
    }
   
}
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <Hanndle_GrearBox_R_State>:


static void Hanndle_GrearBox_R_State(void)
{
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == R_GearBox)
    39f0:	80 91 d2 01 	lds	r24, 0x01D2
    39f4:	82 30       	cpi	r24, 0x02	; 2
    39f6:	b1 f4       	brne	.+44     	; 0x3a24 <Hanndle_GrearBox_R_State+0x3c>
    {
        /*  Turn off led that work in Adaptive cruise control  as may make switch by gearBox so I need to handle this   */
        LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	66 e0       	ldi	r22, 0x06	; 6
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
        if(ACCS_Currnet_state == ACCS_Enable)
    3a02:	80 91 d3 01 	lds	r24, 0x01D3
    3a06:	81 30       	cpi	r24, 0x01	; 1
    3a08:	69 f4       	brne	.+26     	; 0x3a24 <Hanndle_GrearBox_R_State+0x3c>
        {
            /*  Disable ACCS if Enabled  */
            ACCS_Currnet_state = ACCS_Disable;
    3a0a:	10 92 d3 01 	sts	0x01D3, r1
            /*  Turn off led of it was turned on  */
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	64 e0       	ldi	r22, 0x04	; 4
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            /*  Update LCD with new change*/
            //DashBoard_Update_ACCS_State(ACCS_Currnet_state);
            /*  Initailize for small LCD*/
            DashBoard_Update_ACCS_State_small(ACCS_Currnet_state);
    3a18:	80 91 d3 01 	lds	r24, 0x01D3
    3a1c:	0e 94 a9 20 	call	0x4152	; 0x4152 <DashBoard_Update_ACCS_State_small>
            
            //DashBoard_DistanceHide();
            DashBoard_DistanceHide_small();
    3a20:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <DashBoard_DistanceHide_small>
        }
    }
}
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <Buttons_Update>:



static void Buttons_Update(void)
{   
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <Buttons_Update+0x6>
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <Buttons_Update+0x8>
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62

    /*  This variable used to carry if button is still pressed after last pressed as any action taken once with first step and if still press nothing happen    */
    static uint8 GearBox_IsStillPressed = NO_Condition;
    /*  Take current state for button  to check if still pressed*/
    uint8 GearBox_BTN_State = BUTTON_GetValue(GearBox_BTN_PORT,GearBox_BTN_PIN);
    3a36:	83 e0       	ldi	r24, 0x03	; 3
    3a38:	66 e0       	ldi	r22, 0x06	; 6
    3a3a:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <BUTTON_GetValue>
    3a3e:	8b 83       	std	Y+3, r24	; 0x03
    
    if(GearBox_BTN_State == BTN_Pressed_State)
    3a40:	8b 81       	ldd	r24, Y+3	; 0x03
    3a42:	88 23       	and	r24, r24
    3a44:	c9 f4       	brne	.+50     	; 0x3a78 <Buttons_Update+0x4e>
    {
        /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
        if(GearBox_IsStillPressed == NO_Condition)
    3a46:	80 91 df 01 	lds	r24, 0x01DF
    3a4a:	88 23       	and	r24, r24
    3a4c:	b9 f4       	brne	.+46     	; 0x3a7c <Buttons_Update+0x52>
        {
            /* turn buzzer on and give timer 0 clock and set timeout    */
            Buzzer_NotifySound();
    3a4e:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Buzzer_NotifySound>

            GearBox_IsStillPressed = YES_Condition ;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	80 93 df 01 	sts	0x01DF, r24
            /*  Go to next state for gearbox*/
            GearBox_Current_State ++ ;
    3a58:	80 91 d2 01 	lds	r24, 0x01D2
    3a5c:	8f 5f       	subi	r24, 0xFF	; 255
    3a5e:	80 93 d2 01 	sts	0x01D2, r24
            if(GearBox_Current_State == GearBox_Return_to_N  )
    3a62:	80 91 d2 01 	lds	r24, 0x01D2
    3a66:	83 30       	cpi	r24, 0x03	; 3
    3a68:	11 f4       	brne	.+4      	; 0x3a6e <Buttons_Update+0x44>
            {
                GearBox_Current_State = N_GearBox ;
    3a6a:	10 92 d2 01 	sts	0x01D2, r1
            }

            /*  call function to update gearbox state in Dashboard*/
            //DashBoard_Update_GearBox_state(GearBox_Current_State);
            /*  Initailize for small LCD*/
            DashBoard_Update_GearBox_state_small(GearBox_Current_State);
    3a6e:	80 91 d2 01 	lds	r24, 0x01D2
    3a72:	0e 94 66 20 	call	0x40cc	; 0x40cc <DashBoard_Update_GearBox_state_small>
    3a76:	02 c0       	rjmp	.+4      	; 0x3a7c <Buttons_Update+0x52>
        
    }
    else
    {
        /*  Enter this state when Button released*/
        GearBox_IsStillPressed = NO_Condition ;
    3a78:	10 92 df 01 	sts	0x01DF, r1
    }
  

    if(GearBox_Current_State == D_GearBox)
    3a7c:	80 91 d2 01 	lds	r24, 0x01D2
    3a80:	81 30       	cpi	r24, 0x01	; 1
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <Buttons_Update+0x5c>
    3a84:	3e c0       	rjmp	.+124    	; 0x3b02 <Buttons_Update+0xd8>
    {
        /*  This variable used to carry if button is still pressed after last pressed as any action taken once with first step and if still press nothing happen    */
        static uint8 ACCS_IsStillPressed = NO_Condition;
        /*  Take current state for button  to check if still pressed*/
        uint8 ACCS_BTN_State = BUTTON_GetValue(ACCS_BTN_PORT,ACCS_BTN_PIN);
    3a86:	83 e0       	ldi	r24, 0x03	; 3
    3a88:	65 e0       	ldi	r22, 0x05	; 5
    3a8a:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <BUTTON_GetValue>
    3a8e:	89 83       	std	Y+1, r24	; 0x01
        
        if(ACCS_BTN_State == BTN_Pressed_State)
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	88 23       	and	r24, r24
    3a94:	a1 f5       	brne	.+104    	; 0x3afe <Buttons_Update+0xd4>
        {
            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(ACCS_IsStillPressed == NO_Condition)
    3a96:	80 91 dd 01 	lds	r24, 0x01DD
    3a9a:	88 23       	and	r24, r24
    3a9c:	91 f5       	brne	.+100    	; 0x3b02 <Buttons_Update+0xd8>
            {
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    3a9e:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Buzzer_NotifySound>

                ACCS_IsStillPressed = YES_Condition ;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	80 93 dd 01 	sts	0x01DD, r24
                /*  change state of led that refer to ACCS*/
                LED_Toggle(Green_LED_PORT,Green_LED_PIN); 
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	64 e0       	ldi	r22, 0x04	; 4
    3aac:	0e 94 c8 10 	call	0x2190	; 0x2190 <LED_Toggle>
                if(ACCS_Currnet_state == ACCS_Disable ) 
    3ab0:	80 91 d3 01 	lds	r24, 0x01D3
    3ab4:	88 23       	and	r24, r24
    3ab6:	81 f4       	brne	.+32     	; 0x3ad8 <Buttons_Update+0xae>
                {
                    /*  Assign speed that you want to make car to keep it  */
                    Global_ACCS_Speed = Car_Speed ;
    3ab8:	80 91 d8 01 	lds	r24, 0x01D8
    3abc:	90 91 d9 01 	lds	r25, 0x01D9
    3ac0:	80 93 da 01 	sts	0x01DA, r24
                    /*  Update ACCS state with new value (Enabled)*/
                    ACCS_Currnet_state = ACCS_Enable;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	80 93 d3 01 	sts	0x01D3, r24
                    //DashBoard_Update_ACCS_State(ACCS_Currnet_state);
                    /*  Initailize for small LCD*/
                    DashBoard_Update_ACCS_State_small(ACCS_Currnet_state);
    3aca:	80 91 d3 01 	lds	r24, 0x01D3
    3ace:	0e 94 a9 20 	call	0x4152	; 0x4152 <DashBoard_Update_ACCS_State_small>
                    //DashBoard_DistanceShow();
                    DashBoard_DistanceShow_small();
    3ad2:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <DashBoard_DistanceShow_small>
    3ad6:	15 c0       	rjmp	.+42     	; 0x3b02 <Buttons_Update+0xd8>
                }
                else
                {
                    ACCS_Currnet_state = ACCS_Disable;
    3ad8:	10 92 d3 01 	sts	0x01D3, r1

                    /*  Turn off led that work in Adaptive cruise control  as may be  in not safe area and  turn off Adaptive cruise control   */
                    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	66 e0       	ldi	r22, 0x06	; 6
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
                    /*  🚩🚩🚩🚩🚩🚩🙆‍♂️🙆‍♂️🙆‍♂️ i think that I need to put diable and enable to interrupt as I may be ACCS enabled and when I disable and press braiking at same time */
                    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	67 e0       	ldi	r22, 0x07	; 7
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

                    //DashBoard_Update_ACCS_State(ACCS_Currnet_state);
                    /*  Initailize for small LCD*/
                    DashBoard_Update_ACCS_State_small(ACCS_Currnet_state);
    3af0:	80 91 d3 01 	lds	r24, 0x01D3
    3af4:	0e 94 a9 20 	call	0x4152	; 0x4152 <DashBoard_Update_ACCS_State_small>

                    
                    //DashBoard_DistanceHide();
                    DashBoard_DistanceHide_small();
    3af8:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <DashBoard_DistanceHide_small>
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <Buttons_Update+0xd8>
            }
        }
        else
        {
            /*  Enter this state when Button released*/
            ACCS_IsStillPressed = NO_Condition ;
    3afe:	10 92 dd 01 	sts	0x01DD, r1


    /*  This variable used to carry if button is still pressed after last pressed as give buzzer sound only once at the begin of press    */
    static uint8 Acccelerate_IsStillPressed = NO_Condition;
    /*  Take current state for button  to check if still pressed*/
    uint8 Acccelerate_BTN_State = BUTTON_GetValue(Accelerate_BTN_PORT,Accelerate_BTN_PIN);
    3b02:	83 e0       	ldi	r24, 0x03	; 3
    3b04:	67 e0       	ldi	r22, 0x07	; 7
    3b06:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <BUTTON_GetValue>
    3b0a:	8a 83       	std	Y+2, r24	; 0x02
    
    if(Acccelerate_BTN_State == BTN_Pressed_State)
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	88 23       	and	r24, r24
    3b10:	a9 f5       	brne	.+106    	; 0x3b7c <Buttons_Update+0x152>
    {
        LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN,LED_ON);
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	65 e0       	ldi	r22, 0x05	; 5
    3b16:	41 e0       	ldi	r20, 0x01	; 1
    3b18:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
        /*  Inrease Speed work only in two state 
        *   Case 1 : when GearBox = D and if ACCS enbaled must be Accelerate_Enbaled_ACCS_Danger variable has No condition and this mean that car isn't in danger distance with front car  OR ACCS closed actaully
        *   Case 2 : when GearBox = R
        */
        if(( (GearBox_Current_State == D_GearBox) && (Accelerate_Enbaled_ACCS_Danger == NO_Condition) )|| (GearBox_Current_State == R_GearBox) )
    3b1c:	80 91 d2 01 	lds	r24, 0x01D2
    3b20:	81 30       	cpi	r24, 0x01	; 1
    3b22:	21 f4       	brne	.+8      	; 0x3b2c <Buttons_Update+0x102>
    3b24:	80 91 db 01 	lds	r24, 0x01DB
    3b28:	88 23       	and	r24, r24
    3b2a:	21 f0       	breq	.+8      	; 0x3b34 <Buttons_Update+0x10a>
    3b2c:	80 91 d2 01 	lds	r24, 0x01D2
    3b30:	82 30       	cpi	r24, 0x02	; 2
    3b32:	d1 f4       	brne	.+52     	; 0x3b68 <Buttons_Update+0x13e>
        {
            /*  If I in ACCS Enable mode this line disable call function PID of ACCS */
            Accelerate_Enbaled_ACCS_Safe == NO_Condition;
    3b34:	80 91 c1 01 	lds	r24, 0x01C1
            
            /*  Incerease Speed of Car  */
            Car_Speed += 1;
    3b38:	80 91 d8 01 	lds	r24, 0x01D8
    3b3c:	90 91 d9 01 	lds	r25, 0x01D9
    3b40:	01 96       	adiw	r24, 0x01	; 1
    3b42:	90 93 d9 01 	sts	0x01D9, r25
    3b46:	80 93 d8 01 	sts	0x01D8, r24
            if(Car_Speed > 100)
    3b4a:	80 91 d8 01 	lds	r24, 0x01D8
    3b4e:	90 91 d9 01 	lds	r25, 0x01D9
    3b52:	85 36       	cpi	r24, 0x65	; 101
    3b54:	91 05       	cpc	r25, r1
    3b56:	34 f0       	brlt	.+12     	; 0x3b64 <Buttons_Update+0x13a>
                Car_Speed  = 100;
    3b58:	84 e6       	ldi	r24, 0x64	; 100
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	90 93 d9 01 	sts	0x01D9, r25
    3b60:	80 93 d8 01 	sts	0x01D8, r24
            /*  Display current speed   */
            DashBoard_UpdateSpeed(); 
    3b64:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <DashBoard_UpdateSpeed>
        }

        /*  the reason of this avoid make sound while accelerate BTN pressed    */
        if(Acccelerate_IsStillPressed == NO_Condition)
    3b68:	80 91 de 01 	lds	r24, 0x01DE
    3b6c:	88 23       	and	r24, r24
    3b6e:	81 f4       	brne	.+32     	; 0x3b90 <Buttons_Update+0x166>
        {
            Buzzer_NotifySound();
    3b70:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Buzzer_NotifySound>
            Acccelerate_IsStillPressed = YES_Condition ;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	80 93 de 01 	sts	0x01DE, r24
    3b7a:	0a c0       	rjmp	.+20     	; 0x3b90 <Buttons_Update+0x166>
            
        }
    }
    else
    {
        Acccelerate_IsStillPressed = NO_Condition;
    3b7c:	10 92 de 01 	sts	0x01DE, r1
        LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN,LED_OFF);
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	65 e0       	ldi	r22, 0x05	; 5
    3b84:	40 e0       	ldi	r20, 0x00	; 0
    3b86:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
        /*  Enable Again to return apply PID of ACCS if Enabled */
        Accelerate_Enbaled_ACCS_Safe = YES_Condition ;
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	80 93 c1 01 	sts	0x01C1, r24
    }

    /*  Here check if Braking Button is pressed so decrease speed of car*/
    if(Global_Braking_BTN_State ==  BTN_Pressed_State)
    3b90:	80 91 c0 01 	lds	r24, 0x01C0
    3b94:	88 23       	and	r24, r24
    3b96:	a9 f4       	brne	.+42     	; 0x3bc2 <Buttons_Update+0x198>
    {
        /*  Incerease Speed of Car  */
            Car_Speed -= 2;
    3b98:	80 91 d8 01 	lds	r24, 0x01D8
    3b9c:	90 91 d9 01 	lds	r25, 0x01D9
    3ba0:	02 97       	sbiw	r24, 0x02	; 2
    3ba2:	90 93 d9 01 	sts	0x01D9, r25
    3ba6:	80 93 d8 01 	sts	0x01D8, r24
            if(Car_Speed < 0)
    3baa:	80 91 d8 01 	lds	r24, 0x01D8
    3bae:	90 91 d9 01 	lds	r25, 0x01D9
    3bb2:	99 23       	and	r25, r25
    3bb4:	24 f4       	brge	.+8      	; 0x3bbe <Buttons_Update+0x194>
                Car_Speed  = 0;
    3bb6:	10 92 d9 01 	sts	0x01D9, r1
    3bba:	10 92 d8 01 	sts	0x01D8, r1
            /*  Display current speed   */
            DashBoard_UpdateSpeed(); 
    3bbe:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <DashBoard_UpdateSpeed>
    }

    /*  Here handle what happen when release Acceleration and Braking Button    */
    if( (GearBox_Current_State == D_GearBox ) || (GearBox_Current_State == R_GearBox ) )
    3bc2:	80 91 d2 01 	lds	r24, 0x01D2
    3bc6:	81 30       	cpi	r24, 0x01	; 1
    3bc8:	21 f0       	breq	.+8      	; 0x3bd2 <Buttons_Update+0x1a8>
    3bca:	80 91 d2 01 	lds	r24, 0x01D2
    3bce:	82 30       	cpi	r24, 0x02	; 2
    3bd0:	b1 f5       	brne	.+108    	; 0x3c3e <Buttons_Update+0x214>
    {
        /*  Here handle speed only when ACCS Enabled*/
        if( (GearBox_Current_State == D_GearBox ) && (ACCS_Currnet_state == ACCS_Enable))
    3bd2:	80 91 d2 01 	lds	r24, 0x01D2
    3bd6:	81 30       	cpi	r24, 0x01	; 1
    3bd8:	39 f4       	brne	.+14     	; 0x3be8 <Buttons_Update+0x1be>
    3bda:	80 91 d3 01 	lds	r24, 0x01D3
    3bde:	81 30       	cpi	r24, 0x01	; 1
    3be0:	19 f4       	brne	.+6      	; 0x3be8 <Buttons_Update+0x1be>
        {
            /*  Will here handle alot of things*/

            /*  Until Now update value of speed that changed in ACCS_PID Function  */
            DashBoard_UpdateSpeed();
    3be2:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <DashBoard_UpdateSpeed>
    3be6:	2b c0       	rjmp	.+86     	; 0x3c3e <Buttons_Update+0x214>
        }
        /*  Here handle Speed when ACCS Disabled and  Acceleration and Braking Button  Released */
        else if( (Global_Braking_BTN_State ==  BTN_Released_State) && (Acccelerate_BTN_State == BTN_Released_State) && (ACCS_Currnet_state == ACCS_Disable))
    3be8:	80 91 c0 01 	lds	r24, 0x01C0
    3bec:	81 30       	cpi	r24, 0x01	; 1
    3bee:	39 f5       	brne	.+78     	; 0x3c3e <Buttons_Update+0x214>
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	81 30       	cpi	r24, 0x01	; 1
    3bf4:	21 f5       	brne	.+72     	; 0x3c3e <Buttons_Update+0x214>
    3bf6:	80 91 d3 01 	lds	r24, 0x01D3
    3bfa:	88 23       	and	r24, r24
    3bfc:	01 f5       	brne	.+64     	; 0x3c3e <Buttons_Update+0x214>
        {
            static uint8 repeation = 0 ;
            repeation += 1;
    3bfe:	80 91 dc 01 	lds	r24, 0x01DC
    3c02:	8f 5f       	subi	r24, 0xFF	; 255
    3c04:	80 93 dc 01 	sts	0x01DC, r24
            if(repeation == 10)
    3c08:	80 91 dc 01 	lds	r24, 0x01DC
    3c0c:	8a 30       	cpi	r24, 0x0A	; 10
    3c0e:	b9 f4       	brne	.+46     	; 0x3c3e <Buttons_Update+0x214>
            {
                repeation = 0;
    3c10:	10 92 dc 01 	sts	0x01DC, r1
                Car_Speed -= 1;
    3c14:	80 91 d8 01 	lds	r24, 0x01D8
    3c18:	90 91 d9 01 	lds	r25, 0x01D9
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	90 93 d9 01 	sts	0x01D9, r25
    3c22:	80 93 d8 01 	sts	0x01D8, r24
                if(Car_Speed < 0)
    3c26:	80 91 d8 01 	lds	r24, 0x01D8
    3c2a:	90 91 d9 01 	lds	r25, 0x01D9
    3c2e:	99 23       	and	r25, r25
    3c30:	24 f4       	brge	.+8      	; 0x3c3a <Buttons_Update+0x210>
                    Car_Speed  = 0;
    3c32:	10 92 d9 01 	sts	0x01D9, r1
    3c36:	10 92 d8 01 	sts	0x01D8, r1
                /*  Display current speed   */
                DashBoard_UpdateSpeed(); 
    3c3a:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <DashBoard_UpdateSpeed>
            }
        }
    }


}
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <Braking_Button_Handling>:
//     LCD_DisplayString((const uint8 * )"                    ");
// }


static void Braking_Button_Handling(void)
{
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    /*  Make initial state that Button is released  */
    static uint8 Braking_BTN_State = BTN_Released_State ;
    /*  Will Enter this condition only when press button Only (this will make failling edge)  */
    if(Braking_BTN_State == BTN_Released_State)
    3c54:	80 91 c2 01 	lds	r24, 0x01C2
    3c58:	81 30       	cpi	r24, 0x01	; 1
    3c5a:	a1 f4       	brne	.+40     	; 0x3c84 <Braking_Button_Handling+0x38>
    {
        /*  So when I release utton will make Rising Edge so I need to make setup to detect this state to turn led off  */
        INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN); /*    If swap between that command and next command will face problem that If I make very short press will face problem  that led will turn on only not turn off also and this not required*/
    3c5c:	83 e0       	ldi	r24, 0x03	; 3
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <INT1_init>

        Buzzer_NotifySound();
    3c64:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Buzzer_NotifySound>

        /*  Make update to state    */
        Braking_BTN_State = BTN_Pressed_State;
    3c68:	10 92 c2 01 	sts	0x01C2, r1
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    3c6c:	80 91 c2 01 	lds	r24, 0x01C2
    3c70:	80 93 c0 01 	sts	0x01C0, r24
        /*  Turn led on  */
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	67 e0       	ldi	r22, 0x07	; 7
    3c78:	41 e0       	ldi	r20, 0x01	; 1
    3c7a:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

        //     DashBoard_DistanceHide();


        // }
        tessst();
    3c7e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <tessst>
    3c82:	14 c0       	rjmp	.+40     	; 0x3cac <Braking_Button_Handling+0x60>
    }
    /*  Will Enter this condition only when release button Only (this will make failling edge)  */
    else if(Braking_BTN_State == BTN_Pressed_State)
    3c84:	80 91 c2 01 	lds	r24, 0x01C2
    3c88:	88 23       	and	r24, r24
    3c8a:	81 f4       	brne	.+32     	; 0x3cac <Braking_Button_Handling+0x60>
    {

        INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    3c8c:	82 e0       	ldi	r24, 0x02	; 2
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <INT1_init>
        Braking_BTN_State = BTN_Released_State;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	80 93 c2 01 	sts	0x01C2, r24
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    3c9a:	80 91 c2 01 	lds	r24, 0x01C2
    3c9e:	80 93 c0 01 	sts	0x01C0, r24
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	67 e0       	ldi	r22, 0x07	; 7
    3ca6:	40 e0       	ldi	r20, 0x00	; 0
    3ca8:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
    }
}
    3cac:	cf 91       	pop	r28
    3cae:	df 91       	pop	r29
    3cb0:	08 95       	ret

00003cb2 <tessst>:


void tessst (void)
{
    3cb2:	df 93       	push	r29
    3cb4:	cf 93       	push	r28
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
        if((GearBox_Current_State == D_GearBox) && (ACCS_Currnet_state == ACCS_Enable))
    3cba:	80 91 d2 01 	lds	r24, 0x01D2
    3cbe:	81 30       	cpi	r24, 0x01	; 1
    3cc0:	b9 f4       	brne	.+46     	; 0x3cf0 <tessst+0x3e>
    3cc2:	80 91 d3 01 	lds	r24, 0x01D3
    3cc6:	81 30       	cpi	r24, 0x01	; 1
    3cc8:	99 f4       	brne	.+38     	; 0x3cf0 <tessst+0x3e>
        {
            /*	Enable Global Interrupt  */
	        sei();
    3cca:	78 94       	sei

            /*  Disable ACCS if Enabled  */
            ACCS_Currnet_state = ACCS_Disable;
    3ccc:	10 92 d3 01 	sts	0x01D3, r1

            /*  Turn off led of it was turned on as I exit from ACC System  */
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	64 e0       	ldi	r22, 0x04	; 4
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            /*  Then turn off yellow as may be close to crash   */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	66 e0       	ldi	r22, 0x06	; 6
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>


            /*  Update LCD with new change*/
            //DashBoard_Update_ACCS_State(ACCS_Currnet_state);
            /*  Initailize for small LCD*/
            DashBoard_Update_ACCS_State_small(ACCS_Currnet_state);
    3ce4:	80 91 d3 01 	lds	r24, 0x01D3
    3ce8:	0e 94 a9 20 	call	0x4152	; 0x4152 <DashBoard_Update_ACCS_State_small>

            //DashBoard_DistanceHide();
            DashBoard_DistanceHide_small();
    3cec:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <DashBoard_DistanceHide_small>

        }
}
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <Buzzer_NotifySound>:


static void Buzzer_NotifySound(void)
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    /*  initialize Timer register with zero value   */
    Timer0_UpdateValue(0);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer0_UpdateValue>
    /*  Turn Buzzer on  */
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_ON);
    3d04:	82 e0       	ldi	r24, 0x02	; 2
    3d06:	66 e0       	ldi	r22, 0x06	; 6
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <Buzzer_OnOffPositiveLogic>
    /*  Timer provide clock  */
    Timer0_ProvideClock();
    3d0e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Timer0_ProvideClock>

    /*  There are another function after timeout will turn buzzer off and stop clock for timer register  */

}
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <Buzzer_timeOutOff>:


void Buzzer_timeOutOff(void)
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    3d20:	82 e0       	ldi	r24, 0x02	; 2
    3d22:	66 e0       	ldi	r22, 0x06	; 6
    3d24:	40 e0       	ldi	r20, 0x00	; 0
    3d26:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <Buzzer_OnOffPositiveLogic>
    Timer0_StopClock();
    3d2a:	0e 94 97 07 	call	0xf2e	; 0xf2e <Timer0_StopClock>
}
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <ACCS_CatchDistance>:




static void ACCS_CatchDistance(void)
{
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <ACCS_CatchDistance+0x6>
    3d3a:	0f 92       	push	r0
    3d3c:	cd b7       	in	r28, 0x3d	; 61
    3d3e:	de b7       	in	r29, 0x3e	; 62
    * and this make cursor position that I make disable  be at last colimn in last row and will return here to continue this code here 
    * so this lead to make data overwrite in LCD 
    * "this is one scenario from a lot of scenarios "
    */
    //cli();
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <ADC_ReadChannelSingleConvertion>
    3d46:	9a 83       	std	Y+2, r25	; 0x02
    3d48:	89 83       	std	Y+1, r24	; 0x01
    distance_ACCS = (Adc_value_pure * 10) / 1023.0 ; 
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4e:	9c 01       	movw	r18, r24
    3d50:	22 0f       	add	r18, r18
    3d52:	33 1f       	adc	r19, r19
    3d54:	c9 01       	movw	r24, r18
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	82 0f       	add	r24, r18
    3d60:	93 1f       	adc	r25, r19
    3d62:	cc 01       	movw	r24, r24
    3d64:	a0 e0       	ldi	r26, 0x00	; 0
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 ec       	ldi	r19, 0xC0	; 192
    3d7c:	4f e7       	ldi	r20, 0x7F	; 127
    3d7e:	54 e4       	ldi	r21, 0x44	; 68
    3d80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	80 93 d4 01 	sts	0x01D4, r24
    3d8c:	90 93 d5 01 	sts	0x01D5, r25
    3d90:	a0 93 d6 01 	sts	0x01D6, r26
    3d94:	b0 93 d7 01 	sts	0x01D7, r27
    /*  Here trying to get first number after Sign  */
    volatile uint8 distance_after_point = ( (uint8)(distance_ACCS * 10) )  % 10;
    3d98:	80 91 d4 01 	lds	r24, 0x01D4
    3d9c:	90 91 d5 01 	lds	r25, 0x01D5
    3da0:	a0 91 d6 01 	lds	r26, 0x01D6
    3da4:	b0 91 d7 01 	lds	r27, 0x01D7
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e2       	ldi	r20, 0x20	; 32
    3db2:	51 e4       	ldi	r21, 0x41	; 65
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	bc 01       	movw	r22, r24
    3dbe:	cd 01       	movw	r24, r26
    3dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	9a e0       	ldi	r25, 0x0A	; 10
    3dca:	69 2f       	mov	r22, r25
    3dcc:	0e 94 17 21 	call	0x422e	; 0x422e <__udivmodqi4>
    3dd0:	89 2f       	mov	r24, r25
    3dd2:	8b 83       	std	Y+3, r24	; 0x03
    //LCD_MoveCursor(3,11);
    /*  For Small LCD*/
    LCD_MoveCursor(1,11);
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	6b e0       	ldi	r22, 0x0B	; 11
    3dd8:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
	LCD_intToString((uint8)distance_ACCS);
    3ddc:	80 91 d4 01 	lds	r24, 0x01D4
    3de0:	90 91 d5 01 	lds	r25, 0x01D5
    3de4:	a0 91 d6 01 	lds	r26, 0x01D6
    3de8:	b0 91 d7 01 	lds	r27, 0x01D7
    3dec:	bc 01       	movw	r22, r24
    3dee:	cd 01       	movw	r24, r26
    3df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	88 2f       	mov	r24, r24
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	a0 e0       	ldi	r26, 0x00	; 0
    3dfe:	b0 e0       	ldi	r27, 0x00	; 0
    3e00:	bc 01       	movw	r22, r24
    3e02:	cd 01       	movw	r24, r26
    3e04:	0e 94 b6 1b 	call	0x376c	; 0x376c <LCD_intToString>
	LCD_DisplayCharacter('.');
    3e08:	8e e2       	ldi	r24, 0x2E	; 46
    3e0a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>
    LCD_intToString(distance_after_point);
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	88 2f       	mov	r24, r24
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a0 e0       	ldi	r26, 0x00	; 0
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	bc 01       	movw	r22, r24
    3e1a:	cd 01       	movw	r24, r26
    3e1c:	0e 94 b6 1b 	call	0x376c	; 0x376c <LCD_intToString>
    LCD_DisplayString("M ");
    3e20:	80 e6       	ldi	r24, 0x60	; 96
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
    //sei();
}
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	cf 91       	pop	r28
    3e30:	df 91       	pop	r29
    3e32:	08 95       	ret

00003e34 <ACCS_DicisionTake>:



static void ACCS_DicisionTake(void)
{
    3e34:	df 93       	push	r29
    3e36:	cf 93       	push	r28
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <ACCS_DicisionTake+0x6>
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <ACCS_DicisionTake+0x8>
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    if((ACCS_Currnet_state == ACCS_Enable) && (D_GearBox == GearBox_Current_State))
    3e40:	80 91 d3 01 	lds	r24, 0x01D3
    3e44:	81 30       	cpi	r24, 0x01	; 1
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <ACCS_DicisionTake+0x16>
    3e48:	b3 c0       	rjmp	.+358    	; 0x3fb0 <ACCS_DicisionTake+0x17c>
    3e4a:	80 91 d2 01 	lds	r24, 0x01D2
    3e4e:	81 30       	cpi	r24, 0x01	; 1
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <ACCS_DicisionTake+0x20>
    3e52:	ae c0       	rjmp	.+348    	; 0x3fb0 <ACCS_DicisionTake+0x17c>
    {

        cli();
    3e54:	f8 94       	cli
        if((uint8)(distance_ACCS) >= 8) /*  Case 1  */
    3e56:	80 91 d4 01 	lds	r24, 0x01D4
    3e5a:	90 91 d5 01 	lds	r25, 0x01D5
    3e5e:	a0 91 d6 01 	lds	r26, 0x01D6
    3e62:	b0 91 d7 01 	lds	r27, 0x01D7
    3e66:	bc 01       	movw	r22, r24
    3e68:	cd 01       	movw	r24, r26
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	88 30       	cpi	r24, 0x08	; 8
    3e74:	a0 f0       	brcs	.+40     	; 0x3e9e <ACCS_DicisionTake+0x6a>
        {
            if(Accelerate_Enbaled_ACCS_Safe == YES_Condition)
    3e76:	80 91 c1 01 	lds	r24, 0x01C1
    3e7a:	81 30       	cpi	r24, 0x01	; 1
    3e7c:	19 f4       	brne	.+6      	; 0x3e84 <ACCS_DicisionTake+0x50>
            {
                /*  If speed decreased by I enter in this funxtion Case 3 or 4  so this function try to return to speed that must move with that assigned by ACCS   */
                ACCS_PID(ACCS_Keep_Speed);
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <ACCS_PID>
            }
            /*  Do no thing */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	66 e0       	ldi	r22, 0x06	; 6
    3e88:	40 e0       	ldi	r20, 0x00	; 0
    3e8a:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	67 e0       	ldi	r22, 0x07	; 7
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

            /*  Enable Accelerator*/
            Accelerate_Enbaled_ACCS_Danger = NO_Condition ;
    3e98:	10 92 db 01 	sts	0x01DB, r1
    3e9c:	88 c0       	rjmp	.+272    	; 0x3fae <ACCS_DicisionTake+0x17a>
        }
        else if(((uint8)(distance_ACCS) >= 6)) /*  Case 2  */
    3e9e:	80 91 d4 01 	lds	r24, 0x01D4
    3ea2:	90 91 d5 01 	lds	r25, 0x01D5
    3ea6:	a0 91 d6 01 	lds	r26, 0x01D6
    3eaa:	b0 91 d7 01 	lds	r27, 0x01D7
    3eae:	bc 01       	movw	r22, r24
    3eb0:	cd 01       	movw	r24, r26
    3eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	86 30       	cpi	r24, 0x06	; 6
    3ebc:	a0 f0       	brcs	.+40     	; 0x3ee6 <ACCS_DicisionTake+0xb2>
        {
            if(Accelerate_Enbaled_ACCS_Safe == YES_Condition)
    3ebe:	80 91 c1 01 	lds	r24, 0x01C1
    3ec2:	81 30       	cpi	r24, 0x01	; 1
    3ec4:	19 f4       	brne	.+6      	; 0x3ecc <ACCS_DicisionTake+0x98>
            {
                /*  If speed decreased by I enter in this funxtion Case 3 or 4  so this function try to return to speed that must move with that assigned by ACCS   */
                ACCS_PID(ACCS_Keep_Speed);
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <ACCS_PID>
            }
            /*  in this case only turn yellow led only */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	66 e0       	ldi	r22, 0x06	; 6
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	67 e0       	ldi	r22, 0x07	; 7
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

            /*  Enable Accelerator*/
            Accelerate_Enbaled_ACCS_Danger = NO_Condition ;
    3ee0:	10 92 db 01 	sts	0x01DB, r1
    3ee4:	64 c0       	rjmp	.+200    	; 0x3fae <ACCS_DicisionTake+0x17a>

            /*  Try to return back to speed that was make fixed*/
        }
        else if (((uint8)(distance_ACCS) >= 4)) /*  Case 3  */
    3ee6:	80 91 d4 01 	lds	r24, 0x01D4
    3eea:	90 91 d5 01 	lds	r25, 0x01D5
    3eee:	a0 91 d6 01 	lds	r26, 0x01D6
    3ef2:	b0 91 d7 01 	lds	r27, 0x01D7
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	cd 01       	movw	r24, r26
    3efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	84 30       	cpi	r24, 0x04	; 4
    3f04:	88 f0       	brcs	.+34     	; 0x3f28 <ACCS_DicisionTake+0xf4>
        {
            /*  Here car in danger case that is about to crash so shoud reduce speed   */
            ACCS_PID(ACCS_Decrease_Speed_2);
    3f06:	82 e0       	ldi	r24, 0x02	; 2
    3f08:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <ACCS_PID>

            /*  in this case turn yellow and red led on*/
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	66 e0       	ldi	r22, 0x06	; 6
    3f10:	41 e0       	ldi	r20, 0x01	; 1
    3f12:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	67 e0       	ldi	r22, 0x07	; 7
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            /*  Disacle Accelerator*/
            Accelerate_Enbaled_ACCS_Danger = YES_Condition ;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	80 93 db 01 	sts	0x01DB, r24
    3f26:	43 c0       	rjmp	.+134    	; 0x3fae <ACCS_DicisionTake+0x17a>
        }
        else if (((uint8)(distance_ACCS) >= 2)) /*  Case 4  */
    3f28:	80 91 d4 01 	lds	r24, 0x01D4
    3f2c:	90 91 d5 01 	lds	r25, 0x01D5
    3f30:	a0 91 d6 01 	lds	r26, 0x01D6
    3f34:	b0 91 d7 01 	lds	r27, 0x01D7
    3f38:	bc 01       	movw	r22, r24
    3f3a:	cd 01       	movw	r24, r26
    3f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	82 30       	cpi	r24, 0x02	; 2
    3f46:	80 f0       	brcs	.+32     	; 0x3f68 <ACCS_DicisionTake+0x134>
        {
            /*  Here car in danger case that is about to crash so shoud reduce speed   */
            ACCS_PID(ACCS_Decrease_Speed_4);
    3f48:	84 e0       	ldi	r24, 0x04	; 4
    3f4a:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <ACCS_PID>

            /*  turn yellow led on and make red led toggles continuesly with very speed */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	66 e0       	ldi	r22, 0x06	; 6
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

            LED_Toggle(Red_LED_PORT,Red_LED_PIN);
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	67 e0       	ldi	r22, 0x07	; 7
    3f5c:	0e 94 c8 10 	call	0x2190	; 0x2190 <LED_Toggle>
            /*  Disacle Accelerator*/
            Accelerate_Enbaled_ACCS_Danger = YES_Condition ;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 93 db 01 	sts	0x01DB, r24
    3f66:	23 c0       	rjmp	.+70     	; 0x3fae <ACCS_DicisionTake+0x17a>
        }   
        else if (((uint8)(distance_ACCS) >= 0)) /*  Case 5  */
    3f68:	80 91 d4 01 	lds	r24, 0x01D4
    3f6c:	90 91 d5 01 	lds	r25, 0x01D5
    3f70:	a0 91 d6 01 	lds	r26, 0x01D6
    3f74:	b0 91 d7 01 	lds	r27, 0x01D7
        {
            /*  Turn Of all leds    */
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	67 e0       	ldi	r22, 0x07	; 7
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	66 e0       	ldi	r22, 0x06	; 6
    3f86:	40 e0       	ldi	r20, 0x00	; 0
    3f88:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN,LED_OFF);
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	65 e0       	ldi	r22, 0x05	; 5
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	64 e0       	ldi	r22, 0x04	; 4
    3f9a:	40 e0       	ldi	r20, 0x00	; 0
    3f9c:	0e 94 88 10 	call	0x2110	; 0x2110 <LED_OnOffPositiveLogic>

            /*  Display Crash message   */
            LCD_ClearScreen();
    3fa0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_ClearScreen>
            LCD_DisplayString((const uint8 *)"Crushed car ):");
    3fa4:	83 e6       	ldi	r24, 0x63	; 99
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
    3fac:	ff cf       	rjmp	.-2      	; 0x3fac <ACCS_DicisionTake+0x178>

            /*  Disable all Button*/
            while(1);
        }
        
        sei();
    3fae:	78 94       	sei
    }
}
    3fb0:	0f 90       	pop	r0
    3fb2:	0f 90       	pop	r0
    3fb4:	0f 90       	pop	r0
    3fb6:	0f 90       	pop	r0
    3fb8:	cf 91       	pop	r28
    3fba:	df 91       	pop	r29
    3fbc:	08 95       	ret

00003fbe <ACCS_PID>:



static void ACCS_PID(uint8 braking_value)
{
    3fbe:	df 93       	push	r29
    3fc0:	cf 93       	push	r28
    3fc2:	00 d0       	rcall	.+0      	; 0x3fc4 <ACCS_PID+0x6>
    3fc4:	0f 92       	push	r0
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
    3fca:	8b 83       	std	Y+3, r24	; 0x03
    if (braking_value == ACCS_Keep_Speed)
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	88 23       	and	r24, r24
    3fd0:	59 f5       	brne	.+86     	; 0x4028 <ACCS_PID+0x6a>
    {
        /*  Here carry difference between actual velocity and speed must keep in ACCS_speed     */
        sint16 diff_bet_Actual_ACCS = Global_ACCS_Speed - Car_Speed;
    3fd2:	80 91 da 01 	lds	r24, 0x01DA
    3fd6:	28 2f       	mov	r18, r24
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	80 91 d8 01 	lds	r24, 0x01D8
    3fde:	90 91 d9 01 	lds	r25, 0x01D9
    3fe2:	a9 01       	movw	r20, r18
    3fe4:	48 1b       	sub	r20, r24
    3fe6:	59 0b       	sbc	r21, r25
    3fe8:	ca 01       	movw	r24, r20
    3fea:	9a 83       	std	Y+2, r25	; 0x02
    3fec:	89 83       	std	Y+1, r24	; 0x01
    //      ------------------------------------
    //      |                                   |
    // negative number                   Positive number
// ACCS_velocity - actual_speed             ACCS_velocity - actual_speed         
//  = 30 - 31 = -1                         30    - 10 = 20 
        if(diff_bet_Actual_ACCS <= 0)
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff2:	18 16       	cp	r1, r24
    3ff4:	19 06       	cpc	r1, r25
    3ff6:	4c f0       	brlt	.+18     	; 0x400a <ACCS_PID+0x4c>
        {
            Car_Speed = Global_ACCS_Speed ;
    3ff8:	80 91 da 01 	lds	r24, 0x01DA
    3ffc:	88 2f       	mov	r24, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	90 93 d9 01 	sts	0x01D9, r25
    4004:	80 93 d8 01 	sts	0x01D8, r24
    4008:	3c c0       	rjmp	.+120    	; 0x4082 <ACCS_PID+0xc4>
        }
        else if(diff_bet_Actual_ACCS > 0)
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	18 16       	cp	r1, r24
    4010:	19 06       	cpc	r1, r25
    4012:	bc f5       	brge	.+110    	; 0x4082 <ACCS_PID+0xc4>
        {
            Car_Speed += 1;
    4014:	80 91 d8 01 	lds	r24, 0x01D8
    4018:	90 91 d9 01 	lds	r25, 0x01D9
    401c:	01 96       	adiw	r24, 0x01	; 1
    401e:	90 93 d9 01 	sts	0x01D9, r25
    4022:	80 93 d8 01 	sts	0x01D8, r24
    4026:	2d c0       	rjmp	.+90     	; 0x4082 <ACCS_PID+0xc4>
        }
    }
    else if(braking_value == ACCS_Decrease_Speed_2)
    4028:	8b 81       	ldd	r24, Y+3	; 0x03
    402a:	82 30       	cpi	r24, 0x02	; 2
    402c:	a1 f4       	brne	.+40     	; 0x4056 <ACCS_PID+0x98>
    {
        Car_Speed -= 2;
    402e:	80 91 d8 01 	lds	r24, 0x01D8
    4032:	90 91 d9 01 	lds	r25, 0x01D9
    4036:	02 97       	sbiw	r24, 0x02	; 2
    4038:	90 93 d9 01 	sts	0x01D9, r25
    403c:	80 93 d8 01 	sts	0x01D8, r24
        if(Car_Speed < 0 )
    4040:	80 91 d8 01 	lds	r24, 0x01D8
    4044:	90 91 d9 01 	lds	r25, 0x01D9
    4048:	99 23       	and	r25, r25
    404a:	dc f4       	brge	.+54     	; 0x4082 <ACCS_PID+0xc4>
            Car_Speed = 0; 
    404c:	10 92 d9 01 	sts	0x01D9, r1
    4050:	10 92 d8 01 	sts	0x01D8, r1
    4054:	16 c0       	rjmp	.+44     	; 0x4082 <ACCS_PID+0xc4>
    }
    else if(braking_value == ACCS_Decrease_Speed_4)
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	84 30       	cpi	r24, 0x04	; 4
    405a:	99 f4       	brne	.+38     	; 0x4082 <ACCS_PID+0xc4>
    {
        Car_Speed -= 4;
    405c:	80 91 d8 01 	lds	r24, 0x01D8
    4060:	90 91 d9 01 	lds	r25, 0x01D9
    4064:	04 97       	sbiw	r24, 0x04	; 4
    4066:	90 93 d9 01 	sts	0x01D9, r25
    406a:	80 93 d8 01 	sts	0x01D8, r24
        if(Car_Speed < 0 )
    406e:	80 91 d8 01 	lds	r24, 0x01D8
    4072:	90 91 d9 01 	lds	r25, 0x01D9
    4076:	99 23       	and	r25, r25
    4078:	24 f4       	brge	.+8      	; 0x4082 <ACCS_PID+0xc4>
            Car_Speed = 0; 
    407a:	10 92 d9 01 	sts	0x01D9, r1
    407e:	10 92 d8 01 	sts	0x01D8, r1
    }
}
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <DashBoard_Init_small>:


/******************************************************************************/

static void DashBoard_Init_small(void)
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    /*  Display GearBox Current state  */
    LCD_MoveCursor(0,0);
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"GearBox:N");
    409e:	82 e7       	ldi	r24, 0x72	; 114
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>

    /*  Display speed */
    LCD_MoveCursor(0,9);
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	69 e0       	ldi	r22, 0x09	; 9
    40aa:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )",S:0");
    40ae:	8c e7       	ldi	r24, 0x7C	; 124
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>

    /*  Display state of Adaptive Cruise control  */
    LCD_MoveCursor(1,0);
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	60 e0       	ldi	r22, 0x00	; 0
    40ba:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"ACCS:OFF");    
    40be:	81 e8       	ldi	r24, 0x81	; 129
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
}
    40c6:	cf 91       	pop	r28
    40c8:	df 91       	pop	r29
    40ca:	08 95       	ret

000040cc <DashBoard_Update_GearBox_state_small>:

static void DashBoard_Update_GearBox_state_small(uint8 GearBox_state)
{
    40cc:	df 93       	push	r29
    40ce:	cf 93       	push	r28
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	29 97       	sbiw	r28, 0x09	; 9
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	8c 83       	std	Y+4, r24	; 0x04
    /*  Array carry All Characters For GearBox as make display easier using index*/
    uint8 GearBox_Characyer [] = {'N','D','R'};
    40e2:	ce 01       	movw	r24, r28
    40e4:	01 96       	adiw	r24, 0x01	; 1
    40e6:	9e 83       	std	Y+6, r25	; 0x06
    40e8:	8d 83       	std	Y+5, r24	; 0x05
    40ea:	e3 ec       	ldi	r30, 0xC3	; 195
    40ec:	f1 e0       	ldi	r31, 0x01	; 1
    40ee:	f8 87       	std	Y+8, r31	; 0x08
    40f0:	ef 83       	std	Y+7, r30	; 0x07
    40f2:	f3 e0       	ldi	r31, 0x03	; 3
    40f4:	f9 87       	std	Y+9, r31	; 0x09
    40f6:	ef 81       	ldd	r30, Y+7	; 0x07
    40f8:	f8 85       	ldd	r31, Y+8	; 0x08
    40fa:	00 80       	ld	r0, Z
    40fc:	8f 81       	ldd	r24, Y+7	; 0x07
    40fe:	98 85       	ldd	r25, Y+8	; 0x08
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	98 87       	std	Y+8, r25	; 0x08
    4104:	8f 83       	std	Y+7, r24	; 0x07
    4106:	ed 81       	ldd	r30, Y+5	; 0x05
    4108:	fe 81       	ldd	r31, Y+6	; 0x06
    410a:	00 82       	st	Z, r0
    410c:	8d 81       	ldd	r24, Y+5	; 0x05
    410e:	9e 81       	ldd	r25, Y+6	; 0x06
    4110:	01 96       	adiw	r24, 0x01	; 1
    4112:	9e 83       	std	Y+6, r25	; 0x06
    4114:	8d 83       	std	Y+5, r24	; 0x05
    4116:	99 85       	ldd	r25, Y+9	; 0x09
    4118:	91 50       	subi	r25, 0x01	; 1
    411a:	99 87       	std	Y+9, r25	; 0x09
    411c:	e9 85       	ldd	r30, Y+9	; 0x09
    411e:	ee 23       	and	r30, r30
    4120:	51 f7       	brne	.-44     	; 0x40f6 <DashBoard_Update_GearBox_state_small+0x2a>
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(0,8);
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	68 e0       	ldi	r22, 0x08	; 8
    4126:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    /*  Edit its state with new state given to function*/
    LCD_DisplayCharacter(GearBox_Characyer[GearBox_state]);    
    412a:	8c 81       	ldd	r24, Y+4	; 0x04
    412c:	28 2f       	mov	r18, r24
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	ce 01       	movw	r24, r28
    4132:	01 96       	adiw	r24, 0x01	; 1
    4134:	fc 01       	movw	r30, r24
    4136:	e2 0f       	add	r30, r18
    4138:	f3 1f       	adc	r31, r19
    413a:	80 81       	ld	r24, Z
    413c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>
}
    4140:	29 96       	adiw	r28, 0x09	; 9
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	cf 91       	pop	r28
    414e:	df 91       	pop	r29
    4150:	08 95       	ret

00004152 <DashBoard_Update_ACCS_State_small>:

static void DashBoard_Update_ACCS_State_small(uint8 ACCS_state)
{
    4152:	df 93       	push	r29
    4154:	cf 93       	push	r28
    4156:	00 d0       	rcall	.+0      	; 0x4158 <DashBoard_Update_ACCS_State_small+0x6>
    4158:	00 d0       	rcall	.+0      	; 0x415a <DashBoard_Update_ACCS_State_small+0x8>
    415a:	0f 92       	push	r0
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	8d 83       	std	Y+5, r24	; 0x05
    const uint8 * ACCS_String[] = {(const uint8 * )"OFF",(const uint8 * )"ON "};
    4162:	8a e8       	ldi	r24, 0x8A	; 138
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	9a 83       	std	Y+2, r25	; 0x02
    4168:	89 83       	std	Y+1, r24	; 0x01
    416a:	8e e8       	ldi	r24, 0x8E	; 142
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	9c 83       	std	Y+4, r25	; 0x04
    4170:	8b 83       	std	Y+3, r24	; 0x03
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(1,5);
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	65 e0       	ldi	r22, 0x05	; 5
    4176:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    /*  Edit its state with new state given to function*/
    LCD_DisplayString(ACCS_String[ACCS_state]);
    417a:	8d 81       	ldd	r24, Y+5	; 0x05
    417c:	88 2f       	mov	r24, r24
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	9c 01       	movw	r18, r24
    4182:	22 0f       	add	r18, r18
    4184:	33 1f       	adc	r19, r19
    4186:	ce 01       	movw	r24, r28
    4188:	01 96       	adiw	r24, 0x01	; 1
    418a:	fc 01       	movw	r30, r24
    418c:	e2 0f       	add	r30, r18
    418e:	f3 1f       	adc	r31, r19
    4190:	80 81       	ld	r24, Z
    4192:	91 81       	ldd	r25, Z+1	; 0x01
    4194:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
}
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <DashBoard_DistanceShow_small>:

static void DashBoard_DistanceShow_small(void)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(1,8);
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	68 e0       	ldi	r22, 0x08	; 8
    41b4:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )",D:");
    41b8:	82 e9       	ldi	r24, 0x92	; 146
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
 
}
    41c0:	cf 91       	pop	r28
    41c2:	df 91       	pop	r29
    41c4:	08 95       	ret

000041c6 <DashBoard_DistanceHide_small>:

static void DashBoard_DistanceHide_small(void)
{
    41c6:	df 93       	push	r29
    41c8:	cf 93       	push	r28
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(1,8);
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	68 e0       	ldi	r22, 0x08	; 8
    41d2:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"        ");
    41d6:	86 e9       	ldi	r24, 0x96	; 150
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 df 19 	call	0x33be	; 0x33be <LCD_DisplayString>
}
    41de:	cf 91       	pop	r28
    41e0:	df 91       	pop	r29
    41e2:	08 95       	ret

000041e4 <DashBoard_UpdateSpeed>:

static void DashBoard_UpdateSpeed(void)
{
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    cli();
    41ec:	f8 94       	cli
    /*  Display speed */
    LCD_MoveCursor(0,12);
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	6c e0       	ldi	r22, 0x0C	; 12
    41f2:	0e 94 08 1a 	call	0x3410	; 0x3410 <LCD_MoveCursor>
    LCD_intToString((uint8)Car_Speed);    
    41f6:	80 91 d8 01 	lds	r24, 0x01D8
    41fa:	90 91 d9 01 	lds	r25, 0x01D9
    41fe:	88 2f       	mov	r24, r24
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	a0 e0       	ldi	r26, 0x00	; 0
    4204:	b0 e0       	ldi	r27, 0x00	; 0
    4206:	bc 01       	movw	r22, r24
    4208:	cd 01       	movw	r24, r26
    420a:	0e 94 b6 1b 	call	0x376c	; 0x376c <LCD_intToString>
    LCD_DisplayCharacter(' ');
    420e:	80 e2       	ldi	r24, 0x20	; 32
    4210:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_DisplayCharacter>
    sei();
    4214:	78 94       	sei

    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	08 95       	ret

0000421c <main>:


#include "Application/Application_interface.h"
uint8 Adc_value_pure = 0;
int main()
{
    421c:	df 93       	push	r29
    421e:	cf 93       	push	r28
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
	/*	Make Initialize for Every thing*/
	App_Init();
    4224:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <App_Init>
	
	while(1)
	{
		StateMachineUpdate();
    4228:	0e 94 b6 1c 	call	0x396c	; 0x396c <StateMachineUpdate>
    422c:	fd cf       	rjmp	.-6      	; 0x4228 <main+0xc>

0000422e <__udivmodqi4>:
    422e:	99 1b       	sub	r25, r25
    4230:	79 e0       	ldi	r23, 0x09	; 9
    4232:	04 c0       	rjmp	.+8      	; 0x423c <__udivmodqi4_ep>

00004234 <__udivmodqi4_loop>:
    4234:	99 1f       	adc	r25, r25
    4236:	96 17       	cp	r25, r22
    4238:	08 f0       	brcs	.+2      	; 0x423c <__udivmodqi4_ep>
    423a:	96 1b       	sub	r25, r22

0000423c <__udivmodqi4_ep>:
    423c:	88 1f       	adc	r24, r24
    423e:	7a 95       	dec	r23
    4240:	c9 f7       	brne	.-14     	; 0x4234 <__udivmodqi4_loop>
    4242:	80 95       	com	r24
    4244:	08 95       	ret

00004246 <__prologue_saves__>:
    4246:	2f 92       	push	r2
    4248:	3f 92       	push	r3
    424a:	4f 92       	push	r4
    424c:	5f 92       	push	r5
    424e:	6f 92       	push	r6
    4250:	7f 92       	push	r7
    4252:	8f 92       	push	r8
    4254:	9f 92       	push	r9
    4256:	af 92       	push	r10
    4258:	bf 92       	push	r11
    425a:	cf 92       	push	r12
    425c:	df 92       	push	r13
    425e:	ef 92       	push	r14
    4260:	ff 92       	push	r15
    4262:	0f 93       	push	r16
    4264:	1f 93       	push	r17
    4266:	cf 93       	push	r28
    4268:	df 93       	push	r29
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	ca 1b       	sub	r28, r26
    4270:	db 0b       	sbc	r29, r27
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	09 94       	ijmp

0000427e <__epilogue_restores__>:
    427e:	2a 88       	ldd	r2, Y+18	; 0x12
    4280:	39 88       	ldd	r3, Y+17	; 0x11
    4282:	48 88       	ldd	r4, Y+16	; 0x10
    4284:	5f 84       	ldd	r5, Y+15	; 0x0f
    4286:	6e 84       	ldd	r6, Y+14	; 0x0e
    4288:	7d 84       	ldd	r7, Y+13	; 0x0d
    428a:	8c 84       	ldd	r8, Y+12	; 0x0c
    428c:	9b 84       	ldd	r9, Y+11	; 0x0b
    428e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4290:	b9 84       	ldd	r11, Y+9	; 0x09
    4292:	c8 84       	ldd	r12, Y+8	; 0x08
    4294:	df 80       	ldd	r13, Y+7	; 0x07
    4296:	ee 80       	ldd	r14, Y+6	; 0x06
    4298:	fd 80       	ldd	r15, Y+5	; 0x05
    429a:	0c 81       	ldd	r16, Y+4	; 0x04
    429c:	1b 81       	ldd	r17, Y+3	; 0x03
    429e:	aa 81       	ldd	r26, Y+2	; 0x02
    42a0:	b9 81       	ldd	r27, Y+1	; 0x01
    42a2:	ce 0f       	add	r28, r30
    42a4:	d1 1d       	adc	r29, r1
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	f8 94       	cli
    42aa:	de bf       	out	0x3e, r29	; 62
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	cd bf       	out	0x3d, r28	; 61
    42b0:	ed 01       	movw	r28, r26
    42b2:	08 95       	ret

000042b4 <itoa>:
    42b4:	fb 01       	movw	r30, r22
    42b6:	9f 01       	movw	r18, r30
    42b8:	e8 94       	clt
    42ba:	42 30       	cpi	r20, 0x02	; 2
    42bc:	c4 f0       	brlt	.+48     	; 0x42ee <itoa+0x3a>
    42be:	45 32       	cpi	r20, 0x25	; 37
    42c0:	b4 f4       	brge	.+44     	; 0x42ee <itoa+0x3a>
    42c2:	4a 30       	cpi	r20, 0x0A	; 10
    42c4:	29 f4       	brne	.+10     	; 0x42d0 <itoa+0x1c>
    42c6:	97 fb       	bst	r25, 7
    42c8:	1e f4       	brtc	.+6      	; 0x42d0 <itoa+0x1c>
    42ca:	90 95       	com	r25
    42cc:	81 95       	neg	r24
    42ce:	9f 4f       	sbci	r25, 0xFF	; 255
    42d0:	64 2f       	mov	r22, r20
    42d2:	77 27       	eor	r23, r23
    42d4:	0e 94 8b 21 	call	0x4316	; 0x4316 <__udivmodhi4>
    42d8:	80 5d       	subi	r24, 0xD0	; 208
    42da:	8a 33       	cpi	r24, 0x3A	; 58
    42dc:	0c f0       	brlt	.+2      	; 0x42e0 <itoa+0x2c>
    42de:	89 5d       	subi	r24, 0xD9	; 217
    42e0:	81 93       	st	Z+, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	00 97       	sbiw	r24, 0x00	; 0
    42e6:	a1 f7       	brne	.-24     	; 0x42d0 <itoa+0x1c>
    42e8:	16 f4       	brtc	.+4      	; 0x42ee <itoa+0x3a>
    42ea:	5d e2       	ldi	r21, 0x2D	; 45
    42ec:	51 93       	st	Z+, r21
    42ee:	10 82       	st	Z, r1
    42f0:	c9 01       	movw	r24, r18
    42f2:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <strrev>

000042f6 <strrev>:
    42f6:	dc 01       	movw	r26, r24
    42f8:	fc 01       	movw	r30, r24
    42fa:	67 2f       	mov	r22, r23
    42fc:	71 91       	ld	r23, Z+
    42fe:	77 23       	and	r23, r23
    4300:	e1 f7       	brne	.-8      	; 0x42fa <strrev+0x4>
    4302:	32 97       	sbiw	r30, 0x02	; 2
    4304:	04 c0       	rjmp	.+8      	; 0x430e <strrev+0x18>
    4306:	7c 91       	ld	r23, X
    4308:	6d 93       	st	X+, r22
    430a:	70 83       	st	Z, r23
    430c:	62 91       	ld	r22, -Z
    430e:	ae 17       	cp	r26, r30
    4310:	bf 07       	cpc	r27, r31
    4312:	c8 f3       	brcs	.-14     	; 0x4306 <strrev+0x10>
    4314:	08 95       	ret

00004316 <__udivmodhi4>:
    4316:	aa 1b       	sub	r26, r26
    4318:	bb 1b       	sub	r27, r27
    431a:	51 e1       	ldi	r21, 0x11	; 17
    431c:	07 c0       	rjmp	.+14     	; 0x432c <__udivmodhi4_ep>

0000431e <__udivmodhi4_loop>:
    431e:	aa 1f       	adc	r26, r26
    4320:	bb 1f       	adc	r27, r27
    4322:	a6 17       	cp	r26, r22
    4324:	b7 07       	cpc	r27, r23
    4326:	10 f0       	brcs	.+4      	; 0x432c <__udivmodhi4_ep>
    4328:	a6 1b       	sub	r26, r22
    432a:	b7 0b       	sbc	r27, r23

0000432c <__udivmodhi4_ep>:
    432c:	88 1f       	adc	r24, r24
    432e:	99 1f       	adc	r25, r25
    4330:	5a 95       	dec	r21
    4332:	a9 f7       	brne	.-22     	; 0x431e <__udivmodhi4_loop>
    4334:	80 95       	com	r24
    4336:	90 95       	com	r25
    4338:	bc 01       	movw	r22, r24
    433a:	cd 01       	movw	r24, r26
    433c:	08 95       	ret

0000433e <_exit>:
    433e:	f8 94       	cli

00004340 <__stop_program>:
    4340:	ff cf       	rjmp	.-2      	; 0x4340 <__stop_program>
