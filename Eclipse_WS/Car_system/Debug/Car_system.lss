
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000210  00800060  00004ff4  00005088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800270  00800270  00005298  2**0
                  ALLOC
  3 .stab         00006ac8  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000040e8  00000000  00000000  0000bd60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000fe48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0001282e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015008  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000154ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015f09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__vector_1>
       8:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__vector_2>
       c:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <main>
      8a:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ef       	ldi	r26, 0xF0	; 240
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 ef       	ldi	r24, 0xF0	; 240
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ef       	ldi	r22, 0xF0	; 240
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 99 27 	jmp	0x4f32	; 0x4f32 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 b5 27 	jmp	0x4f6a	; 0x4f6a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 bc 27 	jmp	0x4f78	; 0x4f78 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 98 27 	jmp	0x4f30	; 0x4f30 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 50       	subi	r30, 0x08	; 8
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Timer1_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T1)(void) = NULL_PTR;

    void Timer1_SetCallBack(void(*a_ptr)(void))
    {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Timer1_SetCallBack+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T1 = a_ptr;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	90 93 71 02 	sts	0x0271, r25
     f00:	80 93 70 02 	sts	0x0270, r24
    }
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <__vector_9>:

    #if((TIMER1_CURRENT_MODE == T1_NORMAL_MODE) && (NORMAL_use_T1_state == T1_TIME_DELAY))
        ISR(TIMER_1_OVF)
        {
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T1 != NULL_PTR)
     f38:	80 91 70 02 	lds	r24, 0x0270
     f3c:	90 91 71 02 	lds	r25, 0x0271
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	29 f0       	breq	.+10     	; 0xf4e <__vector_9+0x40>
            {
                g_CallBackPtr_T1();
     f44:	e0 91 70 02 	lds	r30, 0x0270
     f48:	f0 91 71 02 	lds	r31, 0x0271
     f4c:	09 95       	icall
            }
        }
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <Timer1_Init>:




void Timer1_Init(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR1A,FOC1A);
     f7c:	af e4       	ldi	r26, 0x4F	; 79
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e4       	ldi	r30, 0x4F	; 79
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	84 60       	ori	r24, 0x04	; 4
     f96:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR1A,WGM10);
     f98:	af e4       	ldi	r26, 0x4F	; 79
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ef e4       	ldi	r30, 0x4F	; 79
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1A,WGM11);
     fa6:	af e4       	ldi	r26, 0x4F	; 79
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ef e4       	ldi	r30, 0x4F	; 79
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8d 7f       	andi	r24, 0xFD	; 253
     fb2:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM12);
     fb4:	ae e4       	ldi	r26, 0x4E	; 78
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ee e4       	ldi	r30, 0x4E	; 78
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	87 7f       	andi	r24, 0xF7	; 247
     fc0:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM13);
     fc2:	ae e4       	ldi	r26, 0x4E	; 78
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ee e4       	ldi	r30, 0x4E	; 78
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7e       	andi	r24, 0xEF	; 239
     fce:	8c 93       	st	X, r24
    
    #elif(NORMAL_use_T1_state == T1_TIME_DELAY) 
    
        #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
            /*  Enable Global Interrupt  */
            SET_BIT(SREG , 7);
     fd0:	af e5       	ldi	r26, 0x5F	; 95
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ef e5       	ldi	r30, 0x5F	; 95
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	8c 93       	st	X, r24
            /*  Enable overflow Interrupt  */
            SET_BIT(TIMSK,TOIE1);
     fde:	a9 e5       	ldi	r26, 0x59	; 89
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e9 e5       	ldi	r30, 0x59	; 89
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	8c 93       	st	X, r24
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
#endif


    /*  Set TCNT0 value to Zero*/
    Timer1_UpdateValue(0) ;
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 fd 07 	call	0xffa	; 0xffa <Timer1_UpdateValue>
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <Timer1_UpdateValue>:



void Timer1_UpdateValue(uint16 Register_value)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <Timer1_UpdateValue+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Register_value;
    1008:	ec e4       	ldi	r30, 0x4C	; 76
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <Timer1_StopClock>:


void Timer1_StopClock(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = TCCR1B & (0xF8);
    1026:	ae e4       	ldi	r26, 0x4E	; 78
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ee e4       	ldi	r30, 0x4E	; 78
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	88 7f       	andi	r24, 0xF8	; 248
    1032:	8c 93       	st	X, r24
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <Timer1_ProvideClock>:


void Timer1_ProvideClock(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	98 2f       	mov	r25, r24
    104e:	98 7f       	andi	r25, 0xF8	; 248
    1050:	80 91 f8 01 	lds	r24, 0x01F8
    1054:	89 2b       	or	r24, r25
    1056:	8c 93       	st	X, r24
}
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <Timer1_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T1 == Enable_Interrupt_T1)

        void Timer1_DelayOVFInterrupt(void)
        {
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
            Timer1_ProvideClock();
    1066:	0e 94 1d 08 	call	0x103a	; 0x103a <Timer1_ProvideClock>
        }
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <Timer1_OVFDisableInterrupt>:


        void Timer1_OVFDisableInterrupt(void)
        {
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE1);   
    1078:	a9 e5       	ldi	r26, 0x59	; 89
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e9 e5       	ldi	r30, 0x59	; 89
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8b 7f       	andi	r24, 0xFB	; 251
    1084:	8c 93       	st	X, r24
        }
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <Timer1_OVFEnableInterrupt>:

        void Timer1_OVFEnableInterrupt(void)
        {
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE1);   
    1094:	a9 e5       	ldi	r26, 0x59	; 89
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e9 e5       	ldi	r30, 0x59	; 89
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	8c 93       	st	X, r24
        }
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <Timer0_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <Timer0_SetCallBack+0x6>
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	90 93 73 02 	sts	0x0273, r25
    10be:	80 93 72 02 	sts	0x0272, r24
    }
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <__vector_11>:
            } 
        }

    #elif(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE)
        ISR(TIMER_0_OVF)
        {
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T0 != NULL_PTR)
    10f6:	80 91 72 02 	lds	r24, 0x0272
    10fa:	90 91 73 02 	lds	r25, 0x0273
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_11+0x40>
            {
                g_CallBackPtr_T0();
    1102:	e0 91 72 02 	lds	r30, 0x0272
    1106:	f0 91 73 02 	lds	r31, 0x0273
    110a:	09 95       	icall
            }
        }
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <Timer0_Init>:




void Timer0_Init(void)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
        CLEAR_BIT(TIMSK,OCIE0);
    #endif


#elif(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE) 
    SET_BIT(TCCR0,WGM00);
    113a:	a3 e5       	ldi	r26, 0x53	; 83
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 e5       	ldi	r30, 0x53	; 83
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8c 93       	st	X, r24
    SET_BIT(TCCR0,WGM01);
    1148:	a3 e5       	ldi	r26, 0x53	; 83
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e3 e5       	ldi	r30, 0x53	; 83
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	88 60       	ori	r24, 0x08	; 8
    1154:	8c 93       	st	X, r24
    /*  Set Output Compare pin (OC0) behavior   */
    TCCR0 = (TCCR0 & 0xCF) | (TIMER0_ConfigTypeParam.CO_PWM_T0_value << COM00) ;
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	2f 7c       	andi	r18, 0xCF	; 207
    1164:	80 91 fa 01 	lds	r24, 0x01FA
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	82 95       	swap	r24
    116e:	92 95       	swap	r25
    1170:	90 7f       	andi	r25, 0xF0	; 240
    1172:	98 27       	eor	r25, r24
    1174:	80 7f       	andi	r24, 0xF0	; 240
    1176:	98 27       	eor	r25, r24
    1178:	82 2b       	or	r24, r18
    117a:	8c 93       	st	X, r24
    if(TIMER0_ConfigTypeParam.CO_PWM_T0_value != T0_NORMAL_PORT_OPERATION)
    117c:	80 91 fa 01 	lds	r24, 0x01FA
    1180:	88 23       	and	r24, r24
    1182:	29 f0       	breq	.+10     	; 0x118e <Timer0_Init+0x5c>
        /*  Need to set this pin to output*/
        GPIO_SetPinDirection(PORTB_ID,PIN3_ID,OUTPUT_PIN);  
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	63 e0       	ldi	r22, 0x03	; 3
    1188:	42 e0       	ldi	r20, 0x02	; 2
    118a:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
    /*  Set Clock for Timer    */
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	98 2f       	mov	r25, r24
    119a:	98 7f       	andi	r25, 0xF8	; 248
    119c:	80 91 f9 01 	lds	r24, 0x01F9
    11a0:	89 2b       	or	r24, r25
    11a2:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <Timer0_UpdateValue>
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
    11bc:	e2 e5       	ldi	r30, 0x52	; 82
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	80 83       	st	Z, r24
}
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <Timer0_StopClock>:


void Timer0_StopClock(void)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 7f       	andi	r24, 0xF8	; 248
    11e0:	8c 93       	st	X, r24
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    11f0:	a3 e5       	ldi	r26, 0x53	; 83
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e3 e5       	ldi	r30, 0x53	; 83
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	98 2f       	mov	r25, r24
    11fc:	98 7f       	andi	r25, 0xF8	; 248
    11fe:	80 91 f9 01 	lds	r24, 0x01F9
    1202:	89 2b       	or	r24, r25
    1204:	8c 93       	st	X, r24
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <Timer0_FastPWMSetOCR>:
    #endif

#elif(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE)

    void Timer0_FastPWMSetOCR(uint8 OCR_Register_value)
    {
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
        OCR0 = OCR_Register_value;
    1218:	ec e5       	ldi	r30, 0x5C	; 92
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	80 83       	st	Z, r24
    }
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <Timer0_FastPWMSetDutyCycle>:

    void Timer0_FastPWMSetDutyCycle(uint8 DutyCycle_value)
    {
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	89 83       	std	Y+1, r24	; 0x01
        OCR0 = ( ((uint16)(255)) * DutyCycle_value ) / 100 ;
    1234:	ec e5       	ldi	r30, 0x5C	; 92
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	48 2f       	mov	r20, r24
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	ca 01       	movw	r24, r20
    1240:	9c 01       	movw	r18, r24
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	c9 01       	movw	r24, r18
    1248:	96 95       	lsr	r25
    124a:	98 2f       	mov	r25, r24
    124c:	88 27       	eor	r24, r24
    124e:	97 95       	ror	r25
    1250:	87 95       	ror	r24
    1252:	82 1b       	sub	r24, r18
    1254:	93 0b       	sbc	r25, r19
    1256:	84 0f       	add	r24, r20
    1258:	95 1f       	adc	r25, r21
    125a:	24 e6       	ldi	r18, 0x64	; 100
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	b9 01       	movw	r22, r18
    1260:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__udivmodhi4>
    1264:	cb 01       	movw	r24, r22
    1266:	80 83       	st	Z, r24
    }
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <Timer0_Enable_OVR_Flow_Interrupt>:

    void Timer0_Enable_OVR_Flow_Interrupt(void)
    {
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
        
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
    1278:	a9 e5       	ldi	r26, 0x59	; 89
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e9 e5       	ldi	r30, 0x59	; 89
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	8c 93       	st	X, r24
    }
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	0f 92       	push	r0
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	57 c0       	rjmp	.+174    	; 0x1348 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	c9 01       	movw	r24, r18
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	82 0f       	add	r24, r18
    12a8:	93 1f       	adc	r25, r19
    12aa:	fc 01       	movw	r30, r24
    12ac:	e4 50       	subi	r30, 0x04	; 4
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
    12b0:	80 81       	ld	r24, Z
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	e9 f4       	brne	.+58     	; 0x12f0 <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	c9 01       	movw	r24, r18
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	fc 01       	movw	r30, r24
    12c8:	e5 50       	subi	r30, 0x05	; 5
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	40 81       	ld	r20, Z
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	c9 01       	movw	r24, r18
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	82 0f       	add	r24, r18
    12dc:	93 1f       	adc	r25, r19
    12de:	fc 01       	movw	r30, r24
    12e0:	e3 50       	subi	r30, 0x03	; 3
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	90 81       	ld	r25, Z
    12e6:	84 2f       	mov	r24, r20
    12e8:	69 2f       	mov	r22, r25
    12ea:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_SetPortDirection>
    12ee:	29 c0       	rjmp	.+82     	; 0x1342 <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	c9 01       	movw	r24, r18
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	fc 01       	movw	r30, r24
    1302:	e5 50       	subi	r30, 0x05	; 5
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	50 81       	ld	r21, Z
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	c9 01       	movw	r24, r18
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	fc 01       	movw	r30, r24
    131a:	e4 50       	subi	r30, 0x04	; 4
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	40 81       	ld	r20, Z
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	c9 01       	movw	r24, r18
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	fc 01       	movw	r30, r24
    1332:	e3 50       	subi	r30, 0x03	; 3
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	90 81       	ld	r25, Z
    1338:	85 2f       	mov	r24, r21
    133a:	64 2f       	mov	r22, r20
    133c:	49 2f       	mov	r20, r25
    133e:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <GPIO_init+0xc4>
    134e:	a5 cf       	rjmp	.-182    	; 0x129a <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_SetPinDirection+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <GPIO_SetPinDirection+0x8>
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
    136a:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	08 f0       	brcs	.+2      	; 0x1374 <GPIO_SetPinDirection+0x1c>
    1372:	d8 c1       	rjmp	.+944    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	08 f0       	brcs	.+2      	; 0x137c <GPIO_SetPinDirection+0x24>
    137a:	d4 c1       	rjmp	.+936    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <GPIO_SetPinDirection+0x3a>
    1390:	84 c0       	rjmp	.+264    	; 0x149a <GPIO_SetPinDirection+0x142>
    1392:	2c 81       	ldd	r18, Y+4	; 0x04
    1394:	3d 81       	ldd	r19, Y+5	; 0x05
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <GPIO_SetPinDirection+0x4e>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <GPIO_SetPinDirection+0x68>
    13a4:	bf c1       	rjmp	.+894    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <GPIO_SetPinDirection+0x5a>
    13b0:	e1 c0       	rjmp	.+450    	; 0x1574 <GPIO_SetPinDirection+0x21c>
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	9d 81       	ldd	r25, Y+5	; 0x05
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	91 05       	cpc	r25, r1
    13ba:	09 f4       	brne	.+2      	; 0x13be <GPIO_SetPinDirection+0x66>
    13bc:	48 c1       	rjmp	.+656    	; 0x164e <GPIO_SetPinDirection+0x2f6>
    13be:	b2 c1       	rjmp	.+868    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 23       	and	r24, r24
    13c4:	41 f5       	brne	.+80     	; 0x1416 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    13c6:	aa e3       	ldi	r26, 0x3A	; 58
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_SetPinDirection+0x8a>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	2a 95       	dec	r18
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_SetPinDirection+0x86>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    13ec:	ab e3       	ldi	r26, 0x3B	; 59
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e3       	ldi	r30, 0x3B	; 59
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_SetPinDirection+0xb2>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_SetPinDirection+0xae>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	87 c1       	rjmp	.+782    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	39 f5       	brne	.+78     	; 0x146a <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    141c:	aa e3       	ldi	r26, 0x3A	; 58
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ea e3       	ldi	r30, 0x3A	; 58
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_SetPinDirection+0xe0>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	2a 95       	dec	r18
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_SetPinDirection+0xdc>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_SetPinDirection+0x108>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_SetPinDirection+0x104>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	5d c1       	rjmp	.+698    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	09 f0       	breq	.+2      	; 0x1472 <GPIO_SetPinDirection+0x11a>
    1470:	59 c1       	rjmp	.+690    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    1472:	aa e3       	ldi	r26, 0x3A	; 58
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ea e3       	ldi	r30, 0x3A	; 58
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_SetPinDirection+0x138>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_SetPinDirection+0x134>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	45 c1       	rjmp	.+650    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 23       	and	r24, r24
    149e:	41 f5       	brne	.+80     	; 0x14f0 <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    14a0:	a7 e3       	ldi	r26, 0x37	; 55
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e7 e3       	ldi	r30, 0x37	; 55
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <GPIO_SetPinDirection+0x164>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	2a 95       	dec	r18
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <GPIO_SetPinDirection+0x160>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    14c6:	a8 e3       	ldi	r26, 0x38	; 56
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <GPIO_SetPinDirection+0x18c>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <GPIO_SetPinDirection+0x188>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	1a c1       	rjmp	.+564    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	39 f5       	brne	.+78     	; 0x1544 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    14f6:	a7 e3       	ldi	r26, 0x37	; 55
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e7 e3       	ldi	r30, 0x37	; 55
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <GPIO_SetPinDirection+0x1ba>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	2a 95       	dec	r18
    1514:	e2 f7       	brpl	.-8      	; 0x150e <GPIO_SetPinDirection+0x1b6>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <GPIO_SetPinDirection+0x1e2>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <GPIO_SetPinDirection+0x1de>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	f0 c0       	rjmp	.+480    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	09 f0       	breq	.+2      	; 0x154c <GPIO_SetPinDirection+0x1f4>
    154a:	ec c0       	rjmp	.+472    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    154c:	a7 e3       	ldi	r26, 0x37	; 55
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e7 e3       	ldi	r30, 0x37	; 55
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_SetPinDirection+0x212>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_SetPinDirection+0x20e>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	d8 c0       	rjmp	.+432    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 23       	and	r24, r24
    1578:	41 f5       	brne	.+80     	; 0x15ca <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    157a:	a4 e3       	ldi	r26, 0x34	; 52
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e4 e3       	ldi	r30, 0x34	; 52
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_SetPinDirection+0x23e>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	2a 95       	dec	r18
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_SetPinDirection+0x23a>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    15a0:	a5 e3       	ldi	r26, 0x35	; 53
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e3       	ldi	r30, 0x35	; 53
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_SetPinDirection+0x266>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_SetPinDirection+0x262>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	ad c0       	rjmp	.+346    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	39 f5       	brne	.+78     	; 0x161e <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    15d0:	a4 e3       	ldi	r26, 0x34	; 52
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e4 e3       	ldi	r30, 0x34	; 52
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_SetPinDirection+0x294>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	2a 95       	dec	r18
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_SetPinDirection+0x290>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_SetPinDirection+0x2bc>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_SetPinDirection+0x2b8>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	83 c0       	rjmp	.+262    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	09 f0       	breq	.+2      	; 0x1626 <GPIO_SetPinDirection+0x2ce>
    1624:	7f c0       	rjmp	.+254    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    1626:	a4 e3       	ldi	r26, 0x34	; 52
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e3       	ldi	r30, 0x34	; 52
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_SetPinDirection+0x2ec>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_SetPinDirection+0x2e8>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	6b c0       	rjmp	.+214    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	88 23       	and	r24, r24
    1652:	41 f5       	brne	.+80     	; 0x16a4 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    1654:	a1 e3       	ldi	r26, 0x31	; 49
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e1 e3       	ldi	r30, 0x31	; 49
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_SetPinDirection+0x318>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	2a 95       	dec	r18
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_SetPinDirection+0x314>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    167a:	a2 e3       	ldi	r26, 0x32	; 50
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e2 e3       	ldi	r30, 0x32	; 50
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_SetPinDirection+0x340>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_SetPinDirection+0x33c>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	40 c0       	rjmp	.+128    	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	39 f5       	brne	.+78     	; 0x16f8 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    16aa:	a1 e3       	ldi	r26, 0x31	; 49
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_SetPinDirection+0x36e>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	2a 95       	dec	r18
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_SetPinDirection+0x36a>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    16d0:	a2 e3       	ldi	r26, 0x32	; 50
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e2 e3       	ldi	r30, 0x32	; 50
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_SetPinDirection+0x396>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_SetPinDirection+0x392>
    16f2:	84 2b       	or	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	16 c0       	rjmp	.+44     	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	99 f4       	brne	.+38     	; 0x1724 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    16fe:	a1 e3       	ldi	r26, 0x31	; 49
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e1 e3       	ldi	r30, 0x31	; 49
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_SetPinDirection+0x3c4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_SetPinDirection+0x3c0>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <GPIO_ReadPin+0x6>
    173a:	00 d0       	rcall	.+0      	; 0x173c <GPIO_ReadPin+0x8>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1746:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	08 f0       	brcs	.+2      	; 0x1750 <GPIO_ReadPin+0x1c>
    174e:	84 c0       	rjmp	.+264    	; 0x1858 <GPIO_ReadPin+0x124>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	88 30       	cpi	r24, 0x08	; 8
    1754:	08 f0       	brcs	.+2      	; 0x1758 <GPIO_ReadPin+0x24>
    1756:	80 c0       	rjmp	.+256    	; 0x1858 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3d 83       	std	Y+5, r19	; 0x05
    1760:	2c 83       	std	Y+4, r18	; 0x04
    1762:	4c 81       	ldd	r20, Y+4	; 0x04
    1764:	5d 81       	ldd	r21, Y+5	; 0x05
    1766:	41 30       	cpi	r20, 0x01	; 1
    1768:	51 05       	cpc	r21, r1
    176a:	79 f1       	breq	.+94     	; 0x17ca <GPIO_ReadPin+0x96>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	91 05       	cpc	r25, r1
    1774:	34 f4       	brge	.+12     	; 0x1782 <GPIO_ReadPin+0x4e>
    1776:	2c 81       	ldd	r18, Y+4	; 0x04
    1778:	3d 81       	ldd	r19, Y+5	; 0x05
    177a:	21 15       	cp	r18, r1
    177c:	31 05       	cpc	r19, r1
    177e:	69 f0       	breq	.+26     	; 0x179a <GPIO_ReadPin+0x66>
    1780:	6b c0       	rjmp	.+214    	; 0x1858 <GPIO_ReadPin+0x124>
    1782:	4c 81       	ldd	r20, Y+4	; 0x04
    1784:	5d 81       	ldd	r21, Y+5	; 0x05
    1786:	42 30       	cpi	r20, 0x02	; 2
    1788:	51 05       	cpc	r21, r1
    178a:	b9 f1       	breq	.+110    	; 0x17fa <GPIO_ReadPin+0xc6>
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	91 05       	cpc	r25, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <GPIO_ReadPin+0x64>
    1796:	49 c0       	rjmp	.+146    	; 0x182a <GPIO_ReadPin+0xf6>
    1798:	5f c0       	rjmp	.+190    	; 0x1858 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    179a:	e9 e3       	ldi	r30, 0x39	; 57
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a9 01       	movw	r20, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_ReadPin+0x7e>
    17ae:	55 95       	asr	r21
    17b0:	47 95       	ror	r20
    17b2:	8a 95       	dec	r24
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_ReadPin+0x7a>
    17b6:	ca 01       	movw	r24, r20
    17b8:	81 70       	andi	r24, 0x01	; 1
    17ba:	90 70       	andi	r25, 0x00	; 0
    17bc:	88 23       	and	r24, r24
    17be:	19 f0       	breq	.+6      	; 0x17c6 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	49 c0       	rjmp	.+146    	; 0x1858 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    17c6:	19 82       	std	Y+1, r1	; 0x01
    17c8:	47 c0       	rjmp	.+142    	; 0x1858 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    17ca:	e6 e3       	ldi	r30, 0x36	; 54
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_ReadPin+0xae>
    17de:	55 95       	asr	r21
    17e0:	47 95       	ror	r20
    17e2:	8a 95       	dec	r24
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_ReadPin+0xaa>
    17e6:	ca 01       	movw	r24, r20
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	88 23       	and	r24, r24
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	31 c0       	rjmp	.+98     	; 0x1858 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    17f6:	19 82       	std	Y+1, r1	; 0x01
    17f8:	2f c0       	rjmp	.+94     	; 0x1858 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    17fa:	e3 e3       	ldi	r30, 0x33	; 51
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_ReadPin+0xde>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_ReadPin+0xda>
    1816:	ca 01       	movw	r24, r20
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	88 23       	and	r24, r24
    181e:	19 f0       	breq	.+6      	; 0x1826 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	19 c0       	rjmp	.+50     	; 0x1858 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1826:	19 82       	std	Y+1, r1	; 0x01
    1828:	17 c0       	rjmp	.+46     	; 0x1858 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    182a:	e0 e3       	ldi	r30, 0x30	; 48
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <GPIO_ReadPin+0x10e>
    183e:	55 95       	asr	r21
    1840:	47 95       	ror	r20
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <GPIO_ReadPin+0x10a>
    1846:	ca 01       	movw	r24, r20
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	90 70       	andi	r25, 0x00	; 0
    184c:	88 23       	and	r24, r24
    184e:	19 f0       	breq	.+6      	; 0x1856 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1856:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <GPIO_WritePin+0x6>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <GPIO_WritePin+0x8>
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	6a 83       	std	Y+2, r22	; 0x02
    187c:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	08 f0       	brcs	.+2      	; 0x1886 <GPIO_WritePin+0x1c>
    1884:	e4 c0       	rjmp	.+456    	; 0x1a4e <GPIO_WritePin+0x1e4>
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	08 f0       	brcs	.+2      	; 0x188e <GPIO_WritePin+0x24>
    188c:	e0 c0       	rjmp	.+448    	; 0x1a4e <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3d 83       	std	Y+5, r19	; 0x05
    1896:	2c 83       	std	Y+4, r18	; 0x04
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <GPIO_WritePin+0x3a>
    18a2:	47 c0       	rjmp	.+142    	; 0x1932 <GPIO_WritePin+0xc8>
    18a4:	2c 81       	ldd	r18, Y+4	; 0x04
    18a6:	3d 81       	ldd	r19, Y+5	; 0x05
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <GPIO_WritePin+0x4e>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	71 f0       	breq	.+28     	; 0x18d2 <GPIO_WritePin+0x68>
    18b6:	cb c0       	rjmp	.+406    	; 0x1a4e <GPIO_WritePin+0x1e4>
    18b8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ba:	3d 81       	ldd	r19, Y+5	; 0x05
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <GPIO_WritePin+0x5a>
    18c2:	67 c0       	rjmp	.+206    	; 0x1992 <GPIO_WritePin+0x128>
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <GPIO_WritePin+0x66>
    18ce:	91 c0       	rjmp	.+290    	; 0x19f2 <GPIO_WritePin+0x188>
    18d0:	be c0       	rjmp	.+380    	; 0x1a4e <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    18d8:	ab e3       	ldi	r26, 0x3B	; 59
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_WritePin+0x8c>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_WritePin+0x88>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	a7 c0       	rjmp	.+334    	; 0x1a4e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 23       	and	r24, r24
    1904:	09 f0       	breq	.+2      	; 0x1908 <GPIO_WritePin+0x9e>
    1906:	a3 c0       	rjmp	.+326    	; 0x1a4e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    1908:	ab e3       	ldi	r26, 0x3B	; 59
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	eb e3       	ldi	r30, 0x3B	; 59
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <GPIO_WritePin+0xbc>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <GPIO_WritePin+0xb8>
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	8e c0       	rjmp	.+284    	; 0x1a4e <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	a1 f4       	brne	.+40     	; 0x1960 <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1938:	a8 e3       	ldi	r26, 0x38	; 56
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e8 e3       	ldi	r30, 0x38	; 56
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_WritePin+0xec>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_WritePin+0xe8>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	77 c0       	rjmp	.+238    	; 0x1a4e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	88 23       	and	r24, r24
    1964:	09 f0       	breq	.+2      	; 0x1968 <GPIO_WritePin+0xfe>
    1966:	73 c0       	rjmp	.+230    	; 0x1a4e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1968:	a8 e3       	ldi	r26, 0x38	; 56
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e8 e3       	ldi	r30, 0x38	; 56
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <GPIO_WritePin+0x11c>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <GPIO_WritePin+0x118>
    198a:	80 95       	com	r24
    198c:	84 23       	and	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	5e c0       	rjmp	.+188    	; 0x1a4e <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	a1 f4       	brne	.+40     	; 0x19c0 <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1998:	a5 e3       	ldi	r26, 0x35	; 53
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e3       	ldi	r30, 0x35	; 53
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <GPIO_WritePin+0x14c>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <GPIO_WritePin+0x148>
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	47 c0       	rjmp	.+142    	; 0x1a4e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 23       	and	r24, r24
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <GPIO_WritePin+0x15e>
    19c6:	43 c0       	rjmp	.+134    	; 0x1a4e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    19c8:	a5 e3       	ldi	r26, 0x35	; 53
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e3       	ldi	r30, 0x35	; 53
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_WritePin+0x17c>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_WritePin+0x178>
    19ea:	80 95       	com	r24
    19ec:	84 23       	and	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	2e c0       	rjmp	.+92     	; 0x1a4e <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	a1 f4       	brne	.+40     	; 0x1a20 <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    19f8:	a2 e3       	ldi	r26, 0x32	; 50
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e2 e3       	ldi	r30, 0x32	; 50
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_WritePin+0x1ac>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_WritePin+0x1a8>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	17 c0       	rjmp	.+46     	; 0x1a4e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	88 23       	and	r24, r24
    1a24:	a1 f4       	brne	.+40     	; 0x1a4e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    1a26:	a2 e3       	ldi	r26, 0x32	; 50
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e2 e3       	ldi	r30, 0x32	; 50
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <GPIO_WritePin+0x1da>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <GPIO_WritePin+0x1d6>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
                break;

        }
    }
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <GPIO_TogglePin+0x6>
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <GPIO_TogglePin+0x8>
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <GPIO_TogglePin+0x18>
    1a74:	72 c0       	rjmp	.+228    	; 0x1b5a <GPIO_TogglePin+0xfc>
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	88 30       	cpi	r24, 0x08	; 8
    1a7a:	08 f0       	brcs	.+2      	; 0x1a7e <GPIO_TogglePin+0x20>
    1a7c:	6e c0       	rjmp	.+220    	; 0x1b5a <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	3c 83       	std	Y+4, r19	; 0x04
    1a86:	2b 83       	std	Y+3, r18	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	49 f1       	breq	.+82     	; 0x1ae4 <GPIO_TogglePin+0x86>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <GPIO_TogglePin+0x48>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	61 f0       	breq	.+24     	; 0x1abc <GPIO_TogglePin+0x5e>
    1aa4:	5a c0       	rjmp	.+180    	; 0x1b5a <GPIO_TogglePin+0xfc>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	71 f1       	breq	.+92     	; 0x1b0c <GPIO_TogglePin+0xae>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	e9 f1       	breq	.+122    	; 0x1b34 <GPIO_TogglePin+0xd6>
    1aba:	4f c0       	rjmp	.+158    	; 0x1b5a <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    1abc:	ab e3       	ldi	r26, 0x3B	; 59
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	eb e3       	ldi	r30, 0x3B	; 59
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <GPIO_TogglePin+0x7c>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <GPIO_TogglePin+0x78>
    1ade:	84 27       	eor	r24, r20
    1ae0:	8c 93       	st	X, r24
    1ae2:	3b c0       	rjmp	.+118    	; 0x1b5a <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1ae4:	a8 e3       	ldi	r26, 0x38	; 56
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e8 e3       	ldi	r30, 0x38	; 56
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <GPIO_TogglePin+0xa4>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <GPIO_TogglePin+0xa0>
    1b06:	84 27       	eor	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	27 c0       	rjmp	.+78     	; 0x1b5a <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    1b0c:	a5 e3       	ldi	r26, 0x35	; 53
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e3       	ldi	r30, 0x35	; 53
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	48 2f       	mov	r20, r24
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	02 2e       	mov	r0, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <GPIO_TogglePin+0xcc>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	0a 94       	dec	r0
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <GPIO_TogglePin+0xc8>
    1b2e:	84 27       	eor	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1b34:	a2 e3       	ldi	r26, 0x32	; 50
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e2 e3       	ldi	r30, 0x32	; 50
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <GPIO_TogglePin+0xf4>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <GPIO_TogglePin+0xf0>
    1b56:	84 27       	eor	r24, r20
    1b58:	8c 93       	st	X, r24
                break;

        }
    }

}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <GPIO_SetPortDirection+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <GPIO_SetPortDirection+0x8>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <GPIO_SetPortDirection+0x18>
    1b7e:	96 c0       	rjmp	.+300    	; 0x1cac <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3c 83       	std	Y+4, r19	; 0x04
    1b88:	2b 83       	std	Y+3, r18	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	a9 f1       	breq	.+106    	; 0x1bfe <GPIO_SetPortDirection+0x96>
    1b94:	2b 81       	ldd	r18, Y+3	; 0x03
    1b96:	3c 81       	ldd	r19, Y+4	; 0x04
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <GPIO_SetPortDirection+0x40>
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	71 f0       	breq	.+28     	; 0x1bc2 <GPIO_SetPortDirection+0x5a>
    1ba6:	82 c0       	rjmp	.+260    	; 0x1cac <GPIO_SetPortDirection+0x144>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <GPIO_SetPortDirection+0x4c>
    1bb2:	43 c0       	rjmp	.+134    	; 0x1c3a <GPIO_SetPortDirection+0xd2>
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <GPIO_SetPortDirection+0x58>
    1bbe:	5a c0       	rjmp	.+180    	; 0x1c74 <GPIO_SetPortDirection+0x10c>
    1bc0:	75 c0       	rjmp	.+234    	; 0x1cac <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	88 23       	and	r24, r24
    1bc6:	39 f4       	brne	.+14     	; 0x1bd6 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1bc8:	ea e3       	ldi	r30, 0x3A	; 58
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1bce:	eb e3       	ldi	r30, 0x3B	; 59
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	10 82       	st	Z, r1
    1bd4:	6b c0       	rjmp	.+214    	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	41 f4       	brne	.+16     	; 0x1bec <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1bdc:	ea e3       	ldi	r30, 0x3A	; 58
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1be2:	eb e3       	ldi	r30, 0x3B	; 59
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	80 83       	st	Z, r24
    1bea:	60 c0       	rjmp	.+192    	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <GPIO_SetPortDirection+0x8c>
    1bf2:	5c c0       	rjmp	.+184    	; 0x1cac <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1bf4:	ea e3       	ldi	r30, 0x3A	; 58
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	80 83       	st	Z, r24
    1bfc:	57 c0       	rjmp	.+174    	; 0x1cac <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	88 23       	and	r24, r24
    1c02:	39 f4       	brne	.+14     	; 0x1c12 <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1c04:	e7 e3       	ldi	r30, 0x37	; 55
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    1c0a:	e8 e3       	ldi	r30, 0x38	; 56
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	10 82       	st	Z, r1
    1c10:	4d c0       	rjmp	.+154    	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	41 f4       	brne	.+16     	; 0x1c28 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    1c18:	e7 e3       	ldi	r30, 0x37	; 55
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    1c1e:	e8 e3       	ldi	r30, 0x38	; 56
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	80 83       	st	Z, r24
    1c26:	42 c0       	rjmp	.+132    	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <GPIO_SetPortDirection+0xc8>
    1c2e:	3e c0       	rjmp	.+124    	; 0x1cac <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    1c30:	e7 e3       	ldi	r30, 0x37	; 55
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	80 83       	st	Z, r24
    1c38:	39 c0       	rjmp	.+114    	; 0x1cac <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	88 23       	and	r24, r24
    1c3e:	39 f4       	brne	.+14     	; 0x1c4e <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    1c40:	e4 e3       	ldi	r30, 0x34	; 52
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1c46:	e5 e3       	ldi	r30, 0x35	; 53
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	10 82       	st	Z, r1
    1c4c:	2f c0       	rjmp	.+94     	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	41 f4       	brne	.+16     	; 0x1c64 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1c54:	e4 e3       	ldi	r30, 0x34	; 52
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1c5a:	e5 e3       	ldi	r30, 0x35	; 53
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	80 83       	st	Z, r24
    1c62:	24 c0       	rjmp	.+72     	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	8f 3f       	cpi	r24, 0xFF	; 255
    1c68:	09 f5       	brne	.+66     	; 0x1cac <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    1c6a:	e4 e3       	ldi	r30, 0x34	; 52
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	80 83       	st	Z, r24
    1c72:	1c c0       	rjmp	.+56     	; 0x1cac <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	88 23       	and	r24, r24
    1c78:	39 f4       	brne	.+14     	; 0x1c88 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    1c7a:	e1 e3       	ldi	r30, 0x31	; 49
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    1c80:	e2 e3       	ldi	r30, 0x32	; 50
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	10 82       	st	Z, r1
    1c86:	12 c0       	rjmp	.+36     	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	41 f4       	brne	.+16     	; 0x1c9e <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    1c8e:	e1 e3       	ldi	r30, 0x31	; 49
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    1c94:	e2 e3       	ldi	r30, 0x32	; 50
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	80 83       	st	Z, r24
    1c9c:	07 c0       	rjmp	.+14     	; 0x1cac <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    1ca4:	e1 e3       	ldi	r30, 0x31	; 49
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <GPIO_ReadPort+0x6>
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <GPIO_ReadPort+0x8>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    1cc8:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	84 30       	cpi	r24, 0x04	; 4
    1cce:	90 f5       	brcc	.+100    	; 0x1d34 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3c 83       	std	Y+4, r19	; 0x04
    1cd8:	2b 83       	std	Y+3, r18	; 0x03
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	d1 f0       	breq	.+52     	; 0x1d18 <GPIO_ReadPort+0x5e>
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <GPIO_ReadPort+0x3e>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	61 f0       	breq	.+24     	; 0x1d0e <GPIO_ReadPort+0x54>
    1cf6:	1e c0       	rjmp	.+60     	; 0x1d34 <GPIO_ReadPort+0x7a>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	81 f0       	breq	.+32     	; 0x1d22 <GPIO_ReadPort+0x68>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	83 30       	cpi	r24, 0x03	; 3
    1d08:	91 05       	cpc	r25, r1
    1d0a:	81 f0       	breq	.+32     	; 0x1d2c <GPIO_ReadPort+0x72>
    1d0c:	13 c0       	rjmp	.+38     	; 0x1d34 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    1d0e:	e9 e3       	ldi	r30, 0x39	; 57
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	0e c0       	rjmp	.+28     	; 0x1d34 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    1d18:	e6 e3       	ldi	r30, 0x36	; 54
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    1d22:	e3 e3       	ldi	r30, 0x33	; 51
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    1d2c:	e0 e3       	ldi	r30, 0x30	; 48
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <GPIO_WritePort+0x6>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <GPIO_WritePort+0x8>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	90 f5       	brcc	.+100    	; 0x1dbe <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3c 83       	std	Y+4, r19	; 0x04
    1d62:	2b 83       	std	Y+3, r18	; 0x03
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	d1 f0       	breq	.+52     	; 0x1da2 <GPIO_WritePort+0x5e>
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <GPIO_WritePort+0x3e>
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <GPIO_WritePort+0x54>
    1d80:	1e c0       	rjmp	.+60     	; 0x1dbe <GPIO_WritePort+0x7a>
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	3c 81       	ldd	r19, Y+4	; 0x04
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	81 f0       	breq	.+32     	; 0x1dac <GPIO_WritePort+0x68>
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	81 f0       	breq	.+32     	; 0x1db6 <GPIO_WritePort+0x72>
    1d96:	13 c0       	rjmp	.+38     	; 0x1dbe <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1d98:	eb e3       	ldi	r30, 0x3B	; 59
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	80 83       	st	Z, r24
    1da0:	0e c0       	rjmp	.+28     	; 0x1dbe <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1da2:	e8 e3       	ldi	r30, 0x38	; 56
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	80 83       	st	Z, r24
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    1dac:	e5 e3       	ldi	r30, 0x35	; 53
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	80 83       	st	Z, r24
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1db6:	e2 e3       	ldi	r30, 0x32	; 50
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <GPIO_TogglePort+0x6>
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	84 30       	cpi	r24, 0x04	; 4
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <GPIO_TogglePort+0x16>
    1de0:	3e c0       	rjmp	.+124    	; 0x1e5e <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	3b 83       	std	Y+3, r19	; 0x03
    1dea:	2a 83       	std	Y+2, r18	; 0x02
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	e9 f0       	breq	.+58     	; 0x1e30 <GPIO_TogglePort+0x64>
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <GPIO_TogglePort+0x3e>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	61 f0       	breq	.+24     	; 0x1e20 <GPIO_TogglePort+0x54>
    1e08:	2a c0       	rjmp	.+84     	; 0x1e5e <GPIO_TogglePort+0x92>
    1e0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0e:	22 30       	cpi	r18, 0x02	; 2
    1e10:	31 05       	cpc	r19, r1
    1e12:	b1 f0       	breq	.+44     	; 0x1e40 <GPIO_TogglePort+0x74>
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	83 30       	cpi	r24, 0x03	; 3
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	c9 f0       	breq	.+50     	; 0x1e50 <GPIO_TogglePort+0x84>
    1e1e:	1f c0       	rjmp	.+62     	; 0x1e5e <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    1e20:	ab e3       	ldi	r26, 0x3B	; 59
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	eb e3       	ldi	r30, 0x3B	; 59
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 95       	com	r24
    1e2c:	8c 93       	st	X, r24
    1e2e:	17 c0       	rjmp	.+46     	; 0x1e5e <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    1e30:	a8 e3       	ldi	r26, 0x38	; 56
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	80 95       	com	r24
    1e3c:	8c 93       	st	X, r24
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    1e40:	a5 e3       	ldi	r26, 0x35	; 53
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 95       	com	r24
    1e4c:	8c 93       	st	X, r24
    1e4e:	07 c0       	rjmp	.+14     	; 0x1e5e <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    1e50:	a2 e3       	ldi	r26, 0x32	; 50
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e2 e3       	ldi	r30, 0x32	; 50
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 95       	com	r24
    1e5c:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    1e6a:	1f 92       	push	r1
    1e6c:	0f 92       	push	r0
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	0f 92       	push	r0
    1e72:	11 24       	eor	r1, r1
    1e74:	2f 93       	push	r18
    1e76:	3f 93       	push	r19
    1e78:	4f 93       	push	r20
    1e7a:	5f 93       	push	r21
    1e7c:	6f 93       	push	r22
    1e7e:	7f 93       	push	r23
    1e80:	8f 93       	push	r24
    1e82:	9f 93       	push	r25
    1e84:	af 93       	push	r26
    1e86:	bf 93       	push	r27
    1e88:	ef 93       	push	r30
    1e8a:	ff 93       	push	r31
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    1e94:	80 91 74 02 	lds	r24, 0x0274
    1e98:	90 91 75 02 	lds	r25, 0x0275
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	29 f0       	breq	.+10     	; 0x1eaa <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    1ea0:	e0 91 74 02 	lds	r30, 0x0274
    1ea4:	f0 91 75 02 	lds	r31, 0x0275
    1ea8:	09 95       	icall
    }
}
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	ff 91       	pop	r31
    1eb0:	ef 91       	pop	r30
    1eb2:	bf 91       	pop	r27
    1eb4:	af 91       	pop	r26
    1eb6:	9f 91       	pop	r25
    1eb8:	8f 91       	pop	r24
    1eba:	7f 91       	pop	r23
    1ebc:	6f 91       	pop	r22
    1ebe:	5f 91       	pop	r21
    1ec0:	4f 91       	pop	r20
    1ec2:	3f 91       	pop	r19
    1ec4:	2f 91       	pop	r18
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	0f 90       	pop	r0
    1ecc:	1f 90       	pop	r1
    1ece:	18 95       	reti

00001ed0 <__vector_2>:

ISR(INT1)
{
    1ed0:	1f 92       	push	r1
    1ed2:	0f 92       	push	r0
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	0f 92       	push	r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	2f 93       	push	r18
    1edc:	3f 93       	push	r19
    1ede:	4f 93       	push	r20
    1ee0:	5f 93       	push	r21
    1ee2:	6f 93       	push	r22
    1ee4:	7f 93       	push	r23
    1ee6:	8f 93       	push	r24
    1ee8:	9f 93       	push	r25
    1eea:	af 93       	push	r26
    1eec:	bf 93       	push	r27
    1eee:	ef 93       	push	r30
    1ef0:	ff 93       	push	r31
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    1efa:	80 91 76 02 	lds	r24, 0x0276
    1efe:	90 91 77 02 	lds	r25, 0x0277
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	29 f0       	breq	.+10     	; 0x1f10 <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    1f06:	e0 91 76 02 	lds	r30, 0x0276
    1f0a:	f0 91 77 02 	lds	r31, 0x0277
    1f0e:	09 95       	icall
    }
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <__vector_3>:

ISR(INT2)
{
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	4f 93       	push	r20
    1f46:	5f 93       	push	r21
    1f48:	6f 93       	push	r22
    1f4a:	7f 93       	push	r23
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	af 93       	push	r26
    1f52:	bf 93       	push	r27
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    1f60:	80 91 78 02 	lds	r24, 0x0278
    1f64:	90 91 79 02 	lds	r25, 0x0279
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	29 f0       	breq	.+10     	; 0x1f76 <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    1f6c:	e0 91 78 02 	lds	r30, 0x0278
    1f70:	f0 91 79 02 	lds	r31, 0x0279
    1f74:	09 95       	icall
    }
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <INT0_SetCallBack+0x6>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	90 93 75 02 	sts	0x0275, r25
    1fb2:	80 93 74 02 	sts	0x0274, r24
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <INT1_SetCallBack+0x6>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	90 93 77 02 	sts	0x0277, r25
    1fd6:	80 93 76 02 	sts	0x0276, r24
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <INT2_SetCallBack+0x6>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	90 93 79 02 	sts	0x0279, r25
    1ffa:	80 93 78 02 	sts	0x0278, r24
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <INT0_init+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	4a 81       	ldd	r20, Y+2	; 0x02
    201c:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    2020:	a5 e5       	ldi	r26, 0x55	; 85
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e5 e5       	ldi	r30, 0x55	; 85
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	98 2f       	mov	r25, r24
    202c:	9c 7f       	andi	r25, 0xFC	; 252
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	89 2b       	or	r24, r25
    2032:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    2034:	ab e5       	ldi	r26, 0x5B	; 91
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	eb e5       	ldi	r30, 0x5B	; 91
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	80 64       	ori	r24, 0x40	; 64
    2040:	8c 93       	st	X, r24
}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <INT1_init+0x6>
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	63 e0       	ldi	r22, 0x03	; 3
    205e:	4a 81       	ldd	r20, Y+2	; 0x02
    2060:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    2064:	a5 e5       	ldi	r26, 0x55	; 85
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e5 e5       	ldi	r30, 0x55	; 85
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	28 2f       	mov	r18, r24
    2070:	23 7f       	andi	r18, 0xF3	; 243
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	82 2b       	or	r24, r18
    2082:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    2084:	ab e5       	ldi	r26, 0x5B	; 91
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	eb e5       	ldi	r30, 0x5B	; 91
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 68       	ori	r24, 0x80	; 128
    2090:	8c 93       	st	X, r24
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <INT2_init+0x6>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	62 e0       	ldi	r22, 0x02	; 2
    20ae:	4a 81       	ldd	r20, Y+2	; 0x02
    20b0:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	41 f4       	brne	.+16     	; 0x20ca <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    20ba:	a4 e5       	ldi	r26, 0x54	; 84
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e4 e5       	ldi	r30, 0x54	; 84
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8f 7b       	andi	r24, 0xBF	; 191
    20c6:	8c 93       	st	X, r24
    20c8:	0a c0       	rjmp	.+20     	; 0x20de <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	39 f4       	brne	.+14     	; 0x20de <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    20d0:	a4 e5       	ldi	r26, 0x54	; 84
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e4 e5       	ldi	r30, 0x54	; 84
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	80 64       	ori	r24, 0x40	; 64
    20dc:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    20de:	ab e5       	ldi	r26, 0x5B	; 91
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	eb e5       	ldi	r30, 0x5B	; 91
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	80 62       	ori	r24, 0x20	; 32
    20ea:	8c 93       	st	X, r24
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <INT0_DeInit>:


void INT0_DeInit(void)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    20fe:	ab e5       	ldi	r26, 0x5B	; 91
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	eb e5       	ldi	r30, 0x5B	; 91
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 7b       	andi	r24, 0xBF	; 191
    210a:	8c 93       	st	X, r24
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <INT1_DeInit>:


void INT1_DeInit(void)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    211a:	ab e5       	ldi	r26, 0x5B	; 91
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	eb e5       	ldi	r30, 0x5B	; 91
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	8f 77       	andi	r24, 0x7F	; 127
    2126:	8c 93       	st	X, r24
}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <INT2_DeInit>:

void INT2_DeInit(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    2136:	ab e5       	ldi	r26, 0x5B	; 91
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	eb e5       	ldi	r30, 0x5B	; 91
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 7d       	andi	r24, 0xDF	; 223
    2142:	8c 93       	st	X, r24
}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	0f 92       	push	r0
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	87 70       	andi	r24, 0x07	; 7
    215a:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    215c:	a7 e2       	ldi	r26, 0x27	; 39
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e7 e2       	ldi	r30, 0x27	; 39
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	98 2f       	mov	r25, r24
    2168:	90 7e       	andi	r25, 0xE0	; 224
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	89 2b       	or	r24, r25
    216e:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    2170:	a6 e2       	ldi	r26, 0x26	; 38
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e6 e2       	ldi	r30, 0x26	; 38
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	80 64       	ori	r24, 0x40	; 64
    217c:	8c 93       	st	X, r24
}
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <ADC_Init>:

void ADC_Init(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    218e:	a7 e2       	ldi	r26, 0x27	; 39
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e7 e2       	ldi	r30, 0x27	; 39
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	28 2f       	mov	r18, r24
    219a:	2f 73       	andi	r18, 0x3F	; 63
    219c:	80 91 ff 01 	lds	r24, 0x01FF
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	00 24       	eor	r0, r0
    21a6:	96 95       	lsr	r25
    21a8:	87 95       	ror	r24
    21aa:	07 94       	ror	r0
    21ac:	96 95       	lsr	r25
    21ae:	87 95       	ror	r24
    21b0:	07 94       	ror	r0
    21b2:	98 2f       	mov	r25, r24
    21b4:	80 2d       	mov	r24, r0
    21b6:	82 2b       	or	r24, r18
    21b8:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    21ba:	80 91 00 02 	lds	r24, 0x0200
    21be:	88 23       	and	r24, r24
    21c0:	41 f4       	brne	.+16     	; 0x21d2 <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    21c2:	a7 e2       	ldi	r26, 0x27	; 39
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e7 e2       	ldi	r30, 0x27	; 39
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	8f 7d       	andi	r24, 0xDF	; 223
    21ce:	8c 93       	st	X, r24
    21d0:	0b c0       	rjmp	.+22     	; 0x21e8 <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    21d2:	80 91 00 02 	lds	r24, 0x0200
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	39 f4       	brne	.+14     	; 0x21e8 <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    21da:	a7 e2       	ldi	r26, 0x27	; 39
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e7 e2       	ldi	r30, 0x27	; 39
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	80 62       	ori	r24, 0x20	; 32
    21e6:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    21e8:	a6 e2       	ldi	r26, 0x26	; 38
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e6 e2       	ldi	r30, 0x26	; 38
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 68       	ori	r24, 0x80	; 128
    21f4:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    21f6:	80 91 fe 01 	lds	r24, 0x01FE
    21fa:	88 23       	and	r24, r24
    21fc:	99 f1       	breq	.+102    	; 0x2264 <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    21fe:	80 91 fe 01 	lds	r24, 0x01FE
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	79 f4       	brne	.+30     	; 0x2224 <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    2206:	a6 e2       	ldi	r26, 0x26	; 38
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e6 e2       	ldi	r30, 0x26	; 38
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 62       	ori	r24, 0x20	; 32
    2212:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    2214:	a0 e5       	ldi	r26, 0x50	; 80
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e5       	ldi	r30, 0x50	; 80
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8f 70       	andi	r24, 0x0F	; 15
    2220:	8c 93       	st	X, r24
    2222:	20 c0       	rjmp	.+64     	; 0x2264 <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    2224:	80 91 fe 01 	lds	r24, 0x01FE
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	e1 f4       	brne	.+56     	; 0x2264 <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    222c:	a6 e2       	ldi	r26, 0x26	; 38
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e6 e2       	ldi	r30, 0x26	; 38
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 62       	ori	r24, 0x20	; 32
    2238:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    223a:	a0 e5       	ldi	r26, 0x50	; 80
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e0 e5       	ldi	r30, 0x50	; 80
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	28 2f       	mov	r18, r24
    2246:	2f 70       	andi	r18, 0x0F	; 15
    2248:	80 91 02 02 	lds	r24, 0x0202
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	82 95       	swap	r24
    2256:	92 95       	swap	r25
    2258:	90 7f       	andi	r25, 0xF0	; 240
    225a:	98 27       	eor	r25, r24
    225c:	80 7f       	andi	r24, 0xF0	; 240
    225e:	98 27       	eor	r25, r24
    2260:	82 2b       	or	r24, r18
    2262:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    2264:	a6 e2       	ldi	r26, 0x26	; 38
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e6 e2       	ldi	r30, 0x26	; 38
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	98 2f       	mov	r25, r24
    2270:	98 7f       	andi	r25, 0xF8	; 248
    2272:	80 91 01 02 	lds	r24, 0x0201
    2276:	87 70       	andi	r24, 0x07	; 7
    2278:	89 2b       	or	r24, r25
    227a:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    227c:	a6 e2       	ldi	r26, 0x26	; 38
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e6 e2       	ldi	r30, 0x26	; 38
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	87 7f       	andi	r24, 0xF7	; 247
    2288:	8c 93       	st	X, r24
    #endif
        
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	0f 92       	push	r0
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	0e 94 a5 10 	call	0x214a	; 0x214a <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    22a2:	e6 e2       	ldi	r30, 0x26	; 38
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	80 71       	andi	r24, 0x10	; 16
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	b9 f3       	breq	.-18     	; 0x22a2 <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    22b4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <ADC_ReadConversionRegister>
    22b8:	90 93 7b 02 	sts	0x027B, r25
    22bc:	80 93 7a 02 	sts	0x027A, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    22c0:	a6 e2       	ldi	r26, 0x26	; 38
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e6 e2       	ldi	r30, 0x26	; 38
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	80 61       	ori	r24, 0x10	; 16
    22cc:	8c 93       	st	X, r24
    return ADC_conversion_value;
    22ce:	80 91 7a 02 	lds	r24, 0x027A
    22d2:	90 91 7b 02 	lds	r25, 0x027B
}
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	0e 94 a5 10 	call	0x214a	; 0x214a <ADC_OnlyStartConversionGeneral>
}
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <ADC_ReadConversionRegister+0x6>
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    2302:	1a 82       	std	Y+2, r1	; 0x02
    2304:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    2306:	80 91 00 02 	lds	r24, 0x0200
    230a:	88 23       	and	r24, r24
    230c:	b9 f4       	brne	.+46     	; 0x233c <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    230e:	e4 e2       	ldi	r30, 0x24	; 36
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    231c:	e5 e2       	ldi	r30, 0x25	; 37
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	83 70       	andi	r24, 0x03	; 3
    2328:	90 70       	andi	r25, 0x00	; 0
    232a:	38 2f       	mov	r19, r24
    232c:	22 27       	eor	r18, r18
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	82 2b       	or	r24, r18
    2334:	93 2b       	or	r25, r19
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	20 c0       	rjmp	.+64     	; 0x237c <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    233c:	80 91 00 02 	lds	r24, 0x0200
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	e1 f4       	brne	.+56     	; 0x237c <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    2344:	e4 e2       	ldi	r30, 0x24	; 36
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	82 95       	swap	r24
    234c:	86 95       	lsr	r24
    234e:	86 95       	lsr	r24
    2350:	83 70       	andi	r24, 0x03	; 3
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	90 70       	andi	r25, 0x00	; 0
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    235c:	e5 e2       	ldi	r30, 0x25	; 37
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9c 01       	movw	r18, r24
    2368:	22 0f       	add	r18, r18
    236a:	33 1f       	adc	r19, r19
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	82 2b       	or	r24, r18
    2376:	93 2b       	or	r25, r19
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	0f 92       	push	r0
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	69 81       	ldd	r22, Y+1	; 0x01
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>

}
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <POT_GetValue+0x6>
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	89 83       	std	Y+1, r24	; 0x01
    
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <LED_Init+0x6>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	6a 81       	ldd	r22, Y+2	; 0x02
    23d4:	42 e0       	ldi	r20, 0x02	; 2
    23d6:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <LED_OnOffPositiveLogic+0x6>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	6a 83       	std	Y+2, r22	; 0x02
    23f4:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	88 23       	and	r24, r24
    23fa:	31 f4       	brne	.+12     	; 0x2408 <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	29 f4       	brne	.+10     	; 0x2418 <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	6a 81       	ldd	r22, Y+2	; 0x02
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    }


}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <LED_OnOffNegativeLogic+0x6>
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	6a 83       	std	Y+2, r22	; 0x02
    2434:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	88 23       	and	r24, r24
    243a:	31 f4       	brne	.+12     	; 0x2448 <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	6a 81       	ldd	r22, Y+2	; 0x02
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2446:	08 c0       	rjmp	.+16     	; 0x2458 <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	29 f4       	brne	.+10     	; 0x2458 <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	6a 81       	ldd	r22, Y+2	; 0x02
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    }


}
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <LED_Toggle+0x6>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	6a 81       	ldd	r22, Y+2	; 0x02
    2476:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <GPIO_TogglePin>
}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	63 e0       	ldi	r22, 0x03	; 3
    2490:	42 e0       	ldi	r20, 0x02	; 2
    2492:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	42 e0       	ldi	r20, 0x02	; 2
    249c:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	42 e0       	ldi	r20, 0x02	; 2
    24a6:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	42 e0       	ldi	r20, 0x02	; 2
    24b0:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	42 e0       	ldi	r20, 0x02	; 2
    24ba:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	64 e0       	ldi	r22, 0x04	; 4
    24c2:	42 e0       	ldi	r20, 0x02	; 2
    24c4:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    24ce:	88 e2       	ldi	r24, 0x28	; 40
    24d0:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    24d4:	8c e0       	ldi	r24, 0x0C	; 12
    24d6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
}
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	c4 56       	subi	r28, 0x64	; 100
    24f4:	d0 40       	sbci	r29, 0x00	; 0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	fe 01       	movw	r30, r28
    2502:	ec 59       	subi	r30, 0x9C	; 156
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	63 e0       	ldi	r22, 0x03	; 3
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2512:	fe 01       	movw	r30, r28
    2514:	e1 5a       	subi	r30, 0xA1	; 161
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e8       	ldi	r26, 0x80	; 128
    251e:	bf e3       	ldi	r27, 0x3F	; 63
    2520:	80 83       	st	Z, r24
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	a2 83       	std	Z+2, r26	; 0x02
    2526:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	8e 01       	movw	r16, r28
    252a:	05 5a       	subi	r16, 0xA5	; 165
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e1 5a       	subi	r30, 0xA1	; 161
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	60 81       	ld	r22, Z
    2536:	71 81       	ldd	r23, Z+1	; 0x01
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	93 81       	ldd	r25, Z+3	; 0x03
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	55 e4       	ldi	r21, 0x45	; 69
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	f8 01       	movw	r30, r16
    254e:	80 83       	st	Z, r24
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	a2 83       	std	Z+2, r26	; 0x02
    2554:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2556:	fe 01       	movw	r30, r28
    2558:	e5 5a       	subi	r30, 0xA5	; 165
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	44 f4       	brge	.+16     	; 0x2584 <LCD_SendCommand+0x9e>
		__ticks = 1;
    2574:	fe 01       	movw	r30, r28
    2576:	e7 5a       	subi	r30, 0xA7	; 167
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
    2582:	64 c0       	rjmp	.+200    	; 0x264c <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    2584:	fe 01       	movw	r30, r28
    2586:	e5 5a       	subi	r30, 0xA5	; 165
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	3f ef       	ldi	r19, 0xFF	; 255
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	57 e4       	ldi	r21, 0x47	; 71
    259a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	0c f0       	brlt	.+2      	; 0x25a4 <LCD_SendCommand+0xbe>
    25a2:	43 c0       	rjmp	.+134    	; 0x262a <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	fe 01       	movw	r30, r28
    25a6:	e1 5a       	subi	r30, 0xA1	; 161
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8e 01       	movw	r16, r28
    25c4:	07 5a       	subi	r16, 0xA7	; 167
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	f8 01       	movw	r30, r16
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
    25da:	1f c0       	rjmp	.+62     	; 0x261a <LCD_SendCommand+0x134>
    25dc:	fe 01       	movw	r30, r28
    25de:	e9 5a       	subi	r30, 0xA9	; 169
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 e9       	ldi	r24, 0x90	; 144
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ea:	fe 01       	movw	r30, r28
    25ec:	e9 5a       	subi	r30, 0xA9	; 169
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_SendCommand+0x10e>
    25f8:	fe 01       	movw	r30, r28
    25fa:	e9 5a       	subi	r30, 0xA9	; 169
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	de 01       	movw	r26, r28
    2604:	a7 5a       	subi	r26, 0xA7	; 167
    2606:	bf 4f       	sbci	r27, 0xFF	; 255
    2608:	fe 01       	movw	r30, r28
    260a:	e7 5a       	subi	r30, 0xA7	; 167
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	9c 93       	st	X, r25
    2618:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	fe 01       	movw	r30, r28
    261c:	e7 5a       	subi	r30, 0xA7	; 167
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	d1 f6       	brne	.-76     	; 0x25dc <LCD_SendCommand+0xf6>
    2628:	27 c0       	rjmp	.+78     	; 0x2678 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	8e 01       	movw	r16, r28
    262c:	07 5a       	subi	r16, 0xA7	; 167
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	fe 01       	movw	r30, r28
    2632:	e5 5a       	subi	r30, 0xA5	; 165
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	f8 01       	movw	r30, r16
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	de 01       	movw	r26, r28
    264e:	ab 5a       	subi	r26, 0xAB	; 171
    2650:	bf 4f       	sbci	r27, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	e7 5a       	subi	r30, 0xA7	; 167
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	8d 93       	st	X+, r24
    265e:	9c 93       	st	X, r25
    2660:	fe 01       	movw	r30, r28
    2662:	eb 5a       	subi	r30, 0xAB	; 171
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <LCD_SendCommand+0x184>
    266e:	fe 01       	movw	r30, r28
    2670:	eb 5a       	subi	r30, 0xAB	; 171
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	62 e0       	ldi	r22, 0x02	; 2
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2682:	fe 01       	movw	r30, r28
    2684:	ef 5a       	subi	r30, 0xAF	; 175
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e8       	ldi	r26, 0x80	; 128
    268e:	bf e3       	ldi	r27, 0x3F	; 63
    2690:	80 83       	st	Z, r24
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	a2 83       	std	Z+2, r26	; 0x02
    2696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	8e 01       	movw	r16, r28
    269a:	03 5b       	subi	r16, 0xB3	; 179
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	ef 5a       	subi	r30, 0xAF	; 175
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a e7       	ldi	r20, 0x7A	; 122
    26b2:	55 e4       	ldi	r21, 0x45	; 69
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	80 83       	st	Z, r24
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	a2 83       	std	Z+2, r26	; 0x02
    26c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c6:	fe 01       	movw	r30, r28
    26c8:	e3 5b       	subi	r30, 0xB3	; 179
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e8       	ldi	r20, 0x80	; 128
    26da:	5f e3       	ldi	r21, 0x3F	; 63
    26dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e0:	88 23       	and	r24, r24
    26e2:	44 f4       	brge	.+16     	; 0x26f4 <LCD_SendCommand+0x20e>
		__ticks = 1;
    26e4:	fe 01       	movw	r30, r28
    26e6:	e5 5b       	subi	r30, 0xB5	; 181
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	64 c0       	rjmp	.+200    	; 0x27bc <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    26f4:	fe 01       	movw	r30, r28
    26f6:	e3 5b       	subi	r30, 0xB3	; 179
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	0c f0       	brlt	.+2      	; 0x2714 <LCD_SendCommand+0x22e>
    2712:	43 c0       	rjmp	.+134    	; 0x279a <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	fe 01       	movw	r30, r28
    2716:	ef 5a       	subi	r30, 0xAF	; 175
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8e 01       	movw	r16, r28
    2734:	05 5b       	subi	r16, 0xB5	; 181
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	f8 01       	movw	r30, r16
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
    274a:	1f c0       	rjmp	.+62     	; 0x278a <LCD_SendCommand+0x2a4>
    274c:	fe 01       	movw	r30, r28
    274e:	e7 5b       	subi	r30, 0xB7	; 183
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 e9       	ldi	r24, 0x90	; 144
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	fe 01       	movw	r30, r28
    275c:	e7 5b       	subi	r30, 0xB7	; 183
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_SendCommand+0x27e>
    2768:	fe 01       	movw	r30, r28
    276a:	e7 5b       	subi	r30, 0xB7	; 183
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	de 01       	movw	r26, r28
    2774:	a5 5b       	subi	r26, 0xB5	; 181
    2776:	bf 4f       	sbci	r27, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	e5 5b       	subi	r30, 0xB5	; 181
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	11 96       	adiw	r26, 0x01	; 1
    2786:	9c 93       	st	X, r25
    2788:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	fe 01       	movw	r30, r28
    278c:	e5 5b       	subi	r30, 0xB5	; 181
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	d1 f6       	brne	.-76     	; 0x274c <LCD_SendCommand+0x266>
    2798:	27 c0       	rjmp	.+78     	; 0x27e8 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	8e 01       	movw	r16, r28
    279c:	05 5b       	subi	r16, 0xB5	; 181
    279e:	1f 4f       	sbci	r17, 0xFF	; 255
    27a0:	fe 01       	movw	r30, r28
    27a2:	e3 5b       	subi	r30, 0xB3	; 179
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	f8 01       	movw	r30, r16
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	de 01       	movw	r26, r28
    27be:	a9 5b       	subi	r26, 0xB9	; 185
    27c0:	bf 4f       	sbci	r27, 0xFF	; 255
    27c2:	fe 01       	movw	r30, r28
    27c4:	e5 5b       	subi	r30, 0xB5	; 181
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	8d 93       	st	X+, r24
    27ce:	9c 93       	st	X, r25
    27d0:	fe 01       	movw	r30, r28
    27d2:	e9 5b       	subi	r30, 0xB9	; 185
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_SendCommand+0x2f4>
    27de:	fe 01       	movw	r30, r28
    27e0:	e9 5b       	subi	r30, 0xB9	; 185
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    27e8:	de 01       	movw	r26, r28
    27ea:	ad 59       	subi	r26, 0x9D	; 157
    27ec:	bf 4f       	sbci	r27, 0xFF	; 255
    27ee:	fe 01       	movw	r30, r28
    27f0:	ec 59       	subi	r30, 0x9C	; 156
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	82 95       	swap	r24
    27f8:	8f 70       	andi	r24, 0x0F	; 15
    27fa:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    27fc:	fe 01       	movw	r30, r28
    27fe:	ed 59       	subi	r30, 0x9D	; 157
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	98 2f       	mov	r25, r24
    2806:	91 70       	andi	r25, 0x01	; 1
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	49 2f       	mov	r20, r25
    280e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2812:	fe 01       	movw	r30, r28
    2814:	ed 59       	subi	r30, 0x9D	; 157
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	86 95       	lsr	r24
    281c:	98 2f       	mov	r25, r24
    281e:	91 70       	andi	r25, 0x01	; 1
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	49 2f       	mov	r20, r25
    2826:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    282a:	fe 01       	movw	r30, r28
    282c:	ed 59       	subi	r30, 0x9D	; 157
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	86 95       	lsr	r24
    2834:	86 95       	lsr	r24
    2836:	98 2f       	mov	r25, r24
    2838:	91 70       	andi	r25, 0x01	; 1
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	62 e0       	ldi	r22, 0x02	; 2
    283e:	49 2f       	mov	r20, r25
    2840:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2844:	fe 01       	movw	r30, r28
    2846:	ed 59       	subi	r30, 0x9D	; 157
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	86 95       	lsr	r24
    284e:	86 95       	lsr	r24
    2850:	86 95       	lsr	r24
    2852:	98 2f       	mov	r25, r24
    2854:	91 70       	andi	r25, 0x01	; 1
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	64 e0       	ldi	r22, 0x04	; 4
    285a:	49 2f       	mov	r20, r25
    285c:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2860:	fe 01       	movw	r30, r28
    2862:	ed 5b       	subi	r30, 0xBD	; 189
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a0 e8       	ldi	r26, 0x80	; 128
    286c:	bf e3       	ldi	r27, 0x3F	; 63
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	8e 01       	movw	r16, r28
    2878:	01 5c       	subi	r16, 0xC1	; 193
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	ed 5b       	subi	r30, 0xBD	; 189
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4a e7       	ldi	r20, 0x7A	; 122
    2890:	55 e4       	ldi	r21, 0x45	; 69
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	80 83       	st	Z, r24
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	a2 83       	std	Z+2, r26	; 0x02
    28a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a4:	fe 01       	movw	r30, r28
    28a6:	ff 96       	adiw	r30, 0x3f	; 63
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_SendCommand+0x3e4>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e af       	std	Y+62, r25	; 0x3e
    28c6:	8d af       	std	Y+61, r24	; 0x3d
    28c8:	46 c0       	rjmp	.+140    	; 0x2956 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    28ca:	fe 01       	movw	r30, r28
    28cc:	ff 96       	adiw	r30, 0x3f	; 63
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	64 f5       	brge	.+88     	; 0x293e <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	fe 01       	movw	r30, r28
    28e8:	ed 5b       	subi	r30, 0xBD	; 189
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9e af       	std	Y+62, r25	; 0x3e
    2912:	8d af       	std	Y+61, r24	; 0x3d
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <LCD_SendCommand+0x44e>
    2916:	80 e9       	ldi	r24, 0x90	; 144
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	9c af       	std	Y+60, r25	; 0x3c
    291c:	8b af       	std	Y+59, r24	; 0x3b
    291e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2920:	9c ad       	ldd	r25, Y+60	; 0x3c
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_SendCommand+0x43c>
    2926:	9c af       	std	Y+60, r25	; 0x3c
    2928:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292a:	8d ad       	ldd	r24, Y+61	; 0x3d
    292c:	9e ad       	ldd	r25, Y+62	; 0x3e
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	9e af       	std	Y+62, r25	; 0x3e
    2932:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2934:	8d ad       	ldd	r24, Y+61	; 0x3d
    2936:	9e ad       	ldd	r25, Y+62	; 0x3e
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f7       	brne	.-38     	; 0x2916 <LCD_SendCommand+0x430>
    293c:	16 c0       	rjmp	.+44     	; 0x296a <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	fe 01       	movw	r30, r28
    2940:	ff 96       	adiw	r30, 0x3f	; 63
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9e af       	std	Y+62, r25	; 0x3e
    2954:	8d af       	std	Y+61, r24	; 0x3d
    2956:	8d ad       	ldd	r24, Y+61	; 0x3d
    2958:	9e ad       	ldd	r25, Y+62	; 0x3e
    295a:	9a af       	std	Y+58, r25	; 0x3a
    295c:	89 af       	std	Y+57, r24	; 0x39
    295e:	89 ad       	ldd	r24, Y+57	; 0x39
    2960:	9a ad       	ldd	r25, Y+58	; 0x3a
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_SendCommand+0x47c>
    2966:	9a af       	std	Y+58, r25	; 0x3a
    2968:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	62 e0       	ldi	r22, 0x02	; 2
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a0 e8       	ldi	r26, 0x80	; 128
    297a:	bf e3       	ldi	r27, 0x3F	; 63
    297c:	8d ab       	std	Y+53, r24	; 0x35
    297e:	9e ab       	std	Y+54, r25	; 0x36
    2980:	af ab       	std	Y+55, r26	; 0x37
    2982:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	6d a9       	ldd	r22, Y+53	; 0x35
    2986:	7e a9       	ldd	r23, Y+54	; 0x36
    2988:	8f a9       	ldd	r24, Y+55	; 0x37
    298a:	98 ad       	ldd	r25, Y+56	; 0x38
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a e7       	ldi	r20, 0x7A	; 122
    2992:	55 e4       	ldi	r21, 0x45	; 69
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	89 ab       	std	Y+49, r24	; 0x31
    299e:	9a ab       	std	Y+50, r25	; 0x32
    29a0:	ab ab       	std	Y+51, r26	; 0x33
    29a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29a4:	69 a9       	ldd	r22, Y+49	; 0x31
    29a6:	7a a9       	ldd	r23, Y+50	; 0x32
    29a8:	8b a9       	ldd	r24, Y+51	; 0x33
    29aa:	9c a9       	ldd	r25, Y+52	; 0x34
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	98 ab       	std	Y+48, r25	; 0x30
    29c2:	8f a7       	std	Y+47, r24	; 0x2f
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    29c6:	69 a9       	ldd	r22, Y+49	; 0x31
    29c8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ca:	8b a9       	ldd	r24, Y+51	; 0x33
    29cc:	9c a9       	ldd	r25, Y+52	; 0x34
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	4c f5       	brge	.+82     	; 0x2a30 <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29de:	6d a9       	ldd	r22, Y+53	; 0x35
    29e0:	7e a9       	ldd	r23, Y+54	; 0x36
    29e2:	8f a9       	ldd	r24, Y+55	; 0x37
    29e4:	98 ad       	ldd	r25, Y+56	; 0x38
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	98 ab       	std	Y+48, r25	; 0x30
    2a04:	8f a7       	std	Y+47, r24	; 0x2f
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <LCD_SendCommand+0x540>
    2a08:	80 e9       	ldi	r24, 0x90	; 144
    2a0a:	91 e0       	ldi	r25, 0x01	; 1
    2a0c:	9e a7       	std	Y+46, r25	; 0x2e
    2a0e:	8d a7       	std	Y+45, r24	; 0x2d
    2a10:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a12:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_SendCommand+0x52e>
    2a18:	9e a7       	std	Y+46, r25	; 0x2e
    2a1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	98 ab       	std	Y+48, r25	; 0x30
    2a24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a28:	98 a9       	ldd	r25, Y+48	; 0x30
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <LCD_SendCommand+0x522>
    2a2e:	14 c0       	rjmp	.+40     	; 0x2a58 <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a30:	69 a9       	ldd	r22, Y+49	; 0x31
    2a32:	7a a9       	ldd	r23, Y+50	; 0x32
    2a34:	8b a9       	ldd	r24, Y+51	; 0x33
    2a36:	9c a9       	ldd	r25, Y+52	; 0x34
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	98 ab       	std	Y+48, r25	; 0x30
    2a42:	8f a7       	std	Y+47, r24	; 0x2f
    2a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a46:	98 a9       	ldd	r25, Y+48	; 0x30
    2a48:	9c a7       	std	Y+44, r25	; 0x2c
    2a4a:	8b a7       	std	Y+43, r24	; 0x2b
    2a4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <LCD_SendCommand+0x56a>
    2a54:	9c a7       	std	Y+44, r25	; 0x2c
    2a56:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 e8       	ldi	r26, 0x80	; 128
    2a68:	bf e3       	ldi	r27, 0x3F	; 63
    2a6a:	8f a3       	std	Y+39, r24	; 0x27
    2a6c:	98 a7       	std	Y+40, r25	; 0x28
    2a6e:	a9 a7       	std	Y+41, r26	; 0x29
    2a70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	6f a1       	ldd	r22, Y+39	; 0x27
    2a74:	78 a5       	ldd	r23, Y+40	; 0x28
    2a76:	89 a5       	ldd	r24, Y+41	; 0x29
    2a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a e7       	ldi	r20, 0x7A	; 122
    2a80:	55 e4       	ldi	r21, 0x45	; 69
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	8b a3       	std	Y+35, r24	; 0x23
    2a8c:	9c a3       	std	Y+36, r25	; 0x24
    2a8e:	ad a3       	std	Y+37, r26	; 0x25
    2a90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a92:	6b a1       	ldd	r22, Y+35	; 0x23
    2a94:	7c a1       	ldd	r23, Y+36	; 0x24
    2a96:	8d a1       	ldd	r24, Y+37	; 0x25
    2a98:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <LCD_SendCommand+0x5ce>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9a a3       	std	Y+34, r25	; 0x22
    2ab0:	89 a3       	std	Y+33, r24	; 0x21
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    2ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aba:	9e a1       	ldd	r25, Y+38	; 0x26
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	4c f5       	brge	.+82     	; 0x2b1e <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	6f a1       	ldd	r22, Y+39	; 0x27
    2ace:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9a a3       	std	Y+34, r25	; 0x22
    2af2:	89 a3       	std	Y+33, r24	; 0x21
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <LCD_SendCommand+0x62e>
    2af6:	80 e9       	ldi	r24, 0x90	; 144
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	98 a3       	std	Y+32, r25	; 0x20
    2afc:	8f 8f       	std	Y+31, r24	; 0x1f
    2afe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b00:	98 a1       	ldd	r25, Y+32	; 0x20
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_SendCommand+0x61c>
    2b06:	98 a3       	std	Y+32, r25	; 0x20
    2b08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	9a a3       	std	Y+34, r25	; 0x22
    2b12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b14:	89 a1       	ldd	r24, Y+33	; 0x21
    2b16:	9a a1       	ldd	r25, Y+34	; 0x22
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	69 f7       	brne	.-38     	; 0x2af6 <LCD_SendCommand+0x610>
    2b1c:	14 c0       	rjmp	.+40     	; 0x2b46 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b20:	7c a1       	ldd	r23, Y+36	; 0x24
    2b22:	8d a1       	ldd	r24, Y+37	; 0x25
    2b24:	9e a1       	ldd	r25, Y+38	; 0x26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9a a3       	std	Y+34, r25	; 0x22
    2b30:	89 a3       	std	Y+33, r24	; 0x21
    2b32:	89 a1       	ldd	r24, Y+33	; 0x21
    2b34:	9a a1       	ldd	r25, Y+34	; 0x22
    2b36:	9e 8f       	std	Y+30, r25	; 0x1e
    2b38:	8d 8f       	std	Y+29, r24	; 0x1d
    2b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_SendCommand+0x658>
    2b42:	9e 8f       	std	Y+30, r25	; 0x1e
    2b44:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    2b46:	de 01       	movw	r26, r28
    2b48:	ad 59       	subi	r26, 0x9D	; 157
    2b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ec 59       	subi	r30, 0x9C	; 156
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 70       	andi	r24, 0x0F	; 15
    2b56:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ed 59       	subi	r30, 0x9D	; 157
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	98 2f       	mov	r25, r24
    2b62:	91 70       	andi	r25, 0x01	; 1
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	49 2f       	mov	r20, r25
    2b6a:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ed 59       	subi	r30, 0x9D	; 157
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	86 95       	lsr	r24
    2b78:	98 2f       	mov	r25, r24
    2b7a:	91 70       	andi	r25, 0x01	; 1
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	49 2f       	mov	r20, r25
    2b82:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2b86:	fe 01       	movw	r30, r28
    2b88:	ed 59       	subi	r30, 0x9D	; 157
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 81       	ld	r24, Z
    2b8e:	86 95       	lsr	r24
    2b90:	86 95       	lsr	r24
    2b92:	98 2f       	mov	r25, r24
    2b94:	91 70       	andi	r25, 0x01	; 1
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	62 e0       	ldi	r22, 0x02	; 2
    2b9a:	49 2f       	mov	r20, r25
    2b9c:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ed 59       	subi	r30, 0x9D	; 157
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	86 95       	lsr	r24
    2baa:	86 95       	lsr	r24
    2bac:	86 95       	lsr	r24
    2bae:	98 2f       	mov	r25, r24
    2bb0:	91 70       	andi	r25, 0x01	; 1
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	64 e0       	ldi	r22, 0x04	; 4
    2bb6:	49 2f       	mov	r20, r25
    2bb8:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e8       	ldi	r26, 0x80	; 128
    2bc2:	bf e3       	ldi	r27, 0x3F	; 63
    2bc4:	89 8f       	std	Y+25, r24	; 0x19
    2bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    2bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4a e7       	ldi	r20, 0x7A	; 122
    2bda:	55 e4       	ldi	r21, 0x45	; 69
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8d 8b       	std	Y+21, r24	; 0x15
    2be6:	9e 8b       	std	Y+22, r25	; 0x16
    2be8:	af 8b       	std	Y+23, r26	; 0x17
    2bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bec:	6d 89       	ldd	r22, Y+21	; 0x15
    2bee:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c00:	88 23       	and	r24, r24
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <LCD_SendCommand+0x728>
		__ticks = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9c 8b       	std	Y+20, r25	; 0x14
    2c0a:	8b 8b       	std	Y+19, r24	; 0x13
    2c0c:	3f c0       	rjmp	.+126    	; 0x2c8c <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    2c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c10:	7e 89       	ldd	r23, Y+22	; 0x16
    2c12:	8f 89       	ldd	r24, Y+23	; 0x17
    2c14:	98 8d       	ldd	r25, Y+24	; 0x18
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	4c f5       	brge	.+82     	; 0x2c78 <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c26:	69 8d       	ldd	r22, Y+25	; 0x19
    2c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	51 e4       	ldi	r21, 0x41	; 65
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9c 8b       	std	Y+20, r25	; 0x14
    2c4c:	8b 8b       	std	Y+19, r24	; 0x13
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <LCD_SendCommand+0x788>
    2c50:	80 e9       	ldi	r24, 0x90	; 144
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	9a 8b       	std	Y+18, r25	; 0x12
    2c56:	89 8b       	std	Y+17, r24	; 0x11
    2c58:	89 89       	ldd	r24, Y+17	; 0x11
    2c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <LCD_SendCommand+0x776>
    2c60:	9a 8b       	std	Y+18, r25	; 0x12
    2c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	9c 89       	ldd	r25, Y+20	; 0x14
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c70:	9c 89       	ldd	r25, Y+20	; 0x14
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <LCD_SendCommand+0x76a>
    2c76:	14 c0       	rjmp	.+40     	; 0x2ca0 <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9c 8b       	std	Y+20, r25	; 0x14
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	98 8b       	std	Y+16, r25	; 0x10
    2c92:	8f 87       	std	Y+15, r24	; 0x0f
    2c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c96:	98 89       	ldd	r25, Y+16	; 0x10
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_SendCommand+0x7b2>
    2c9c:	98 8b       	std	Y+16, r25	; 0x10
    2c9e:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	62 e0       	ldi	r22, 0x02	; 2
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e8       	ldi	r26, 0x80	; 128
    2cb0:	bf e3       	ldi	r27, 0x3F	; 63
    2cb2:	8b 87       	std	Y+11, r24	; 0x0b
    2cb4:	9c 87       	std	Y+12, r25	; 0x0c
    2cb6:	ad 87       	std	Y+13, r26	; 0x0d
    2cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a e7       	ldi	r20, 0x7A	; 122
    2cc8:	55 e4       	ldi	r21, 0x45	; 69
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8f 83       	std	Y+7, r24	; 0x07
    2cd4:	98 87       	std	Y+8, r25	; 0x08
    2cd6:	a9 87       	std	Y+9, r26	; 0x09
    2cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <LCD_SendCommand+0x816>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <LCD_SendCommand+0x876>
    2d3e:	80 e9       	ldi	r24, 0x90	; 144
    2d40:	91 e0       	ldi	r25, 0x01	; 1
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_SendCommand+0x864>
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <LCD_SendCommand+0x858>
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <LCD_SendCommand+0x8a0>
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    2d8e:	cc 59       	subi	r28, 0x9C	; 156
    2d90:	df 4f       	sbci	r29, 0xFF	; 255
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	1f 91       	pop	r17
    2da2:	0f 91       	pop	r16
    2da4:	08 95       	ret

00002da6 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	c4 56       	subi	r28, 0x64	; 100
    2db4:	d0 40       	sbci	r29, 0x00	; 0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ec 59       	subi	r30, 0x9C	; 156
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	63 e0       	ldi	r22, 0x03	; 3
    2dcc:	41 e0       	ldi	r20, 0x01	; 1
    2dce:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e1 5a       	subi	r30, 0xA1	; 161
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	a0 e8       	ldi	r26, 0x80	; 128
    2dde:	bf e3       	ldi	r27, 0x3F	; 63
    2de0:	80 83       	st	Z, r24
    2de2:	91 83       	std	Z+1, r25	; 0x01
    2de4:	a2 83       	std	Z+2, r26	; 0x02
    2de6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	8e 01       	movw	r16, r28
    2dea:	05 5a       	subi	r16, 0xA5	; 165
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	fe 01       	movw	r30, r28
    2df0:	e1 5a       	subi	r30, 0xA1	; 161
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	4a e7       	ldi	r20, 0x7A	; 122
    2e02:	55 e4       	ldi	r21, 0x45	; 69
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	f8 01       	movw	r30, r16
    2e0e:	80 83       	st	Z, r24
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	a2 83       	std	Z+2, r26	; 0x02
    2e14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e16:	fe 01       	movw	r30, r28
    2e18:	e5 5a       	subi	r30, 0xA5	; 165
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	44 f4       	brge	.+16     	; 0x2e44 <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    2e34:	fe 01       	movw	r30, r28
    2e36:	e7 5a       	subi	r30, 0xA7	; 167
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    2e42:	64 c0       	rjmp	.+200    	; 0x2f0c <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    2e44:	fe 01       	movw	r30, r28
    2e46:	e5 5a       	subi	r30, 0xA5	; 165
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	60 81       	ld	r22, Z
    2e4c:	71 81       	ldd	r23, Z+1	; 0x01
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	0c f0       	brlt	.+2      	; 0x2e64 <LCD_DisplayCharacter+0xbe>
    2e62:	43 c0       	rjmp	.+134    	; 0x2eea <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e64:	fe 01       	movw	r30, r28
    2e66:	e1 5a       	subi	r30, 0xA1	; 161
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e2       	ldi	r20, 0x20	; 32
    2e78:	51 e4       	ldi	r21, 0x41	; 65
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8e 01       	movw	r16, r28
    2e84:	07 5a       	subi	r16, 0xA7	; 167
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	f8 01       	movw	r30, r16
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
    2e9a:	1f c0       	rjmp	.+62     	; 0x2eda <LCD_DisplayCharacter+0x134>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e9 5a       	subi	r30, 0xA9	; 169
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 e9       	ldi	r24, 0x90	; 144
    2ea4:	91 e0       	ldi	r25, 0x01	; 1
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	80 83       	st	Z, r24
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e9 5a       	subi	r30, 0xA9	; 169
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	91 81       	ldd	r25, Z+1	; 0x01
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <LCD_DisplayCharacter+0x10e>
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e9 5a       	subi	r30, 0xA9	; 169
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec2:	de 01       	movw	r26, r28
    2ec4:	a7 5a       	subi	r26, 0xA7	; 167
    2ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e7 5a       	subi	r30, 0xA7	; 167
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	11 96       	adiw	r26, 0x01	; 1
    2ed6:	9c 93       	st	X, r25
    2ed8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	fe 01       	movw	r30, r28
    2edc:	e7 5a       	subi	r30, 0xA7	; 167
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	d1 f6       	brne	.-76     	; 0x2e9c <LCD_DisplayCharacter+0xf6>
    2ee8:	27 c0       	rjmp	.+78     	; 0x2f38 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	8e 01       	movw	r16, r28
    2eec:	07 5a       	subi	r16, 0xA7	; 167
    2eee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e5 5a       	subi	r30, 0xA5	; 165
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	82 81       	ldd	r24, Z+2	; 0x02
    2efc:	93 81       	ldd	r25, Z+3	; 0x03
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	f8 01       	movw	r30, r16
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	de 01       	movw	r26, r28
    2f0e:	ab 5a       	subi	r26, 0xAB	; 171
    2f10:	bf 4f       	sbci	r27, 0xFF	; 255
    2f12:	fe 01       	movw	r30, r28
    2f14:	e7 5a       	subi	r30, 0xA7	; 167
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	8d 93       	st	X+, r24
    2f1e:	9c 93       	st	X, r25
    2f20:	fe 01       	movw	r30, r28
    2f22:	eb 5a       	subi	r30, 0xAB	; 171
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_DisplayCharacter+0x184>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	eb 5a       	subi	r30, 0xAB	; 171
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	62 e0       	ldi	r22, 0x02	; 2
    2f3c:	41 e0       	ldi	r20, 0x01	; 1
    2f3e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    2f42:	fe 01       	movw	r30, r28
    2f44:	ef 5a       	subi	r30, 0xAF	; 175
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e8       	ldi	r26, 0x80	; 128
    2f4e:	bf e3       	ldi	r27, 0x3F	; 63
    2f50:	80 83       	st	Z, r24
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	a2 83       	std	Z+2, r26	; 0x02
    2f56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	8e 01       	movw	r16, r28
    2f5a:	03 5b       	subi	r16, 0xB3	; 179
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ef 5a       	subi	r30, 0xAF	; 175
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a e7       	ldi	r20, 0x7A	; 122
    2f72:	55 e4       	ldi	r21, 0x45	; 69
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	80 83       	st	Z, r24
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	a2 83       	std	Z+2, r26	; 0x02
    2f84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f86:	fe 01       	movw	r30, r28
    2f88:	e3 5b       	subi	r30, 0xB3	; 179
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e8       	ldi	r20, 0x80	; 128
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	44 f4       	brge	.+16     	; 0x2fb4 <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e5 5b       	subi	r30, 0xB5	; 181
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
    2fb2:	64 c0       	rjmp	.+200    	; 0x307c <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e3 5b       	subi	r30, 0xB3	; 179
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	60 81       	ld	r22, Z
    2fbc:	71 81       	ldd	r23, Z+1	; 0x01
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	3f ef       	ldi	r19, 0xFF	; 255
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	57 e4       	ldi	r21, 0x47	; 71
    2fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fce:	18 16       	cp	r1, r24
    2fd0:	0c f0       	brlt	.+2      	; 0x2fd4 <LCD_DisplayCharacter+0x22e>
    2fd2:	43 c0       	rjmp	.+134    	; 0x305a <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ef 5a       	subi	r30, 0xAF	; 175
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	8e 01       	movw	r16, r28
    2ff4:	05 5b       	subi	r16, 0xB5	; 181
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	f8 01       	movw	r30, r16
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	80 83       	st	Z, r24
    300a:	1f c0       	rjmp	.+62     	; 0x304a <LCD_DisplayCharacter+0x2a4>
    300c:	fe 01       	movw	r30, r28
    300e:	e7 5b       	subi	r30, 0xB7	; 183
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 e9       	ldi	r24, 0x90	; 144
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	fe 01       	movw	r30, r28
    301c:	e7 5b       	subi	r30, 0xB7	; 183
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <LCD_DisplayCharacter+0x27e>
    3028:	fe 01       	movw	r30, r28
    302a:	e7 5b       	subi	r30, 0xB7	; 183
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3032:	de 01       	movw	r26, r28
    3034:	a5 5b       	subi	r26, 0xB5	; 181
    3036:	bf 4f       	sbci	r27, 0xFF	; 255
    3038:	fe 01       	movw	r30, r28
    303a:	e5 5b       	subi	r30, 0xB5	; 181
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	11 96       	adiw	r26, 0x01	; 1
    3046:	9c 93       	st	X, r25
    3048:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	fe 01       	movw	r30, r28
    304c:	e5 5b       	subi	r30, 0xB5	; 181
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	d1 f6       	brne	.-76     	; 0x300c <LCD_DisplayCharacter+0x266>
    3058:	27 c0       	rjmp	.+78     	; 0x30a8 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	8e 01       	movw	r16, r28
    305c:	05 5b       	subi	r16, 0xB5	; 181
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
    3060:	fe 01       	movw	r30, r28
    3062:	e3 5b       	subi	r30, 0xB3	; 179
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	60 81       	ld	r22, Z
    3068:	71 81       	ldd	r23, Z+1	; 0x01
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	f8 01       	movw	r30, r16
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	de 01       	movw	r26, r28
    307e:	a9 5b       	subi	r26, 0xB9	; 185
    3080:	bf 4f       	sbci	r27, 0xFF	; 255
    3082:	fe 01       	movw	r30, r28
    3084:	e5 5b       	subi	r30, 0xB5	; 181
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	8d 93       	st	X+, r24
    308e:	9c 93       	st	X, r25
    3090:	fe 01       	movw	r30, r28
    3092:	e9 5b       	subi	r30, 0xB9	; 185
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <LCD_DisplayCharacter+0x2f4>
    309e:	fe 01       	movw	r30, r28
    30a0:	e9 5b       	subi	r30, 0xB9	; 185
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    30a8:	de 01       	movw	r26, r28
    30aa:	ad 59       	subi	r26, 0x9D	; 157
    30ac:	bf 4f       	sbci	r27, 0xFF	; 255
    30ae:	fe 01       	movw	r30, r28
    30b0:	ec 59       	subi	r30, 0x9C	; 156
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	82 95       	swap	r24
    30b8:	8f 70       	andi	r24, 0x0F	; 15
    30ba:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    30bc:	fe 01       	movw	r30, r28
    30be:	ed 59       	subi	r30, 0x9D	; 157
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	98 2f       	mov	r25, r24
    30c6:	91 70       	andi	r25, 0x01	; 1
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	49 2f       	mov	r20, r25
    30ce:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    30d2:	fe 01       	movw	r30, r28
    30d4:	ed 59       	subi	r30, 0x9D	; 157
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	86 95       	lsr	r24
    30dc:	98 2f       	mov	r25, r24
    30de:	91 70       	andi	r25, 0x01	; 1
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	61 e0       	ldi	r22, 0x01	; 1
    30e4:	49 2f       	mov	r20, r25
    30e6:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    30ea:	fe 01       	movw	r30, r28
    30ec:	ed 59       	subi	r30, 0x9D	; 157
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	86 95       	lsr	r24
    30f4:	86 95       	lsr	r24
    30f6:	98 2f       	mov	r25, r24
    30f8:	91 70       	andi	r25, 0x01	; 1
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	62 e0       	ldi	r22, 0x02	; 2
    30fe:	49 2f       	mov	r20, r25
    3100:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    3104:	fe 01       	movw	r30, r28
    3106:	ed 59       	subi	r30, 0x9D	; 157
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	86 95       	lsr	r24
    310e:	86 95       	lsr	r24
    3110:	86 95       	lsr	r24
    3112:	98 2f       	mov	r25, r24
    3114:	91 70       	andi	r25, 0x01	; 1
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	64 e0       	ldi	r22, 0x04	; 4
    311a:	49 2f       	mov	r20, r25
    311c:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    3120:	fe 01       	movw	r30, r28
    3122:	ed 5b       	subi	r30, 0xBD	; 189
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a0 e8       	ldi	r26, 0x80	; 128
    312c:	bf e3       	ldi	r27, 0x3F	; 63
    312e:	80 83       	st	Z, r24
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	a2 83       	std	Z+2, r26	; 0x02
    3134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3136:	8e 01       	movw	r16, r28
    3138:	01 5c       	subi	r16, 0xC1	; 193
    313a:	1f 4f       	sbci	r17, 0xFF	; 255
    313c:	fe 01       	movw	r30, r28
    313e:	ed 5b       	subi	r30, 0xBD	; 189
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	60 81       	ld	r22, Z
    3144:	71 81       	ldd	r23, Z+1	; 0x01
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	93 81       	ldd	r25, Z+3	; 0x03
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a e7       	ldi	r20, 0x7A	; 122
    3150:	55 e4       	ldi	r21, 0x45	; 69
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	f8 01       	movw	r30, r16
    315c:	80 83       	st	Z, r24
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	a2 83       	std	Z+2, r26	; 0x02
    3162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3164:	fe 01       	movw	r30, r28
    3166:	ff 96       	adiw	r30, 0x3f	; 63
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	2c f4       	brge	.+10     	; 0x318a <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9e af       	std	Y+62, r25	; 0x3e
    3186:	8d af       	std	Y+61, r24	; 0x3d
    3188:	46 c0       	rjmp	.+140    	; 0x3216 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    318a:	fe 01       	movw	r30, r28
    318c:	ff 96       	adiw	r30, 0x3f	; 63
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	64 f5       	brge	.+88     	; 0x31fe <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	fe 01       	movw	r30, r28
    31a8:	ed 5b       	subi	r30, 0xBD	; 189
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e af       	std	Y+62, r25	; 0x3e
    31d2:	8d af       	std	Y+61, r24	; 0x3d
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <LCD_DisplayCharacter+0x44e>
    31d6:	80 e9       	ldi	r24, 0x90	; 144
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	9c af       	std	Y+60, r25	; 0x3c
    31dc:	8b af       	std	Y+59, r24	; 0x3b
    31de:	8b ad       	ldd	r24, Y+59	; 0x3b
    31e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_DisplayCharacter+0x43c>
    31e6:	9c af       	std	Y+60, r25	; 0x3c
    31e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9e af       	std	Y+62, r25	; 0x3e
    31f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <LCD_DisplayCharacter+0x430>
    31fc:	16 c0       	rjmp	.+44     	; 0x322a <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e af       	std	Y+62, r25	; 0x3e
    3214:	8d af       	std	Y+61, r24	; 0x3d
    3216:	8d ad       	ldd	r24, Y+61	; 0x3d
    3218:	9e ad       	ldd	r25, Y+62	; 0x3e
    321a:	9a af       	std	Y+58, r25	; 0x3a
    321c:	89 af       	std	Y+57, r24	; 0x39
    321e:	89 ad       	ldd	r24, Y+57	; 0x39
    3220:	9a ad       	ldd	r25, Y+58	; 0x3a
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_DisplayCharacter+0x47c>
    3226:	9a af       	std	Y+58, r25	; 0x3a
    3228:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	62 e0       	ldi	r22, 0x02	; 2
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	a0 e8       	ldi	r26, 0x80	; 128
    323a:	bf e3       	ldi	r27, 0x3F	; 63
    323c:	8d ab       	std	Y+53, r24	; 0x35
    323e:	9e ab       	std	Y+54, r25	; 0x36
    3240:	af ab       	std	Y+55, r26	; 0x37
    3242:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3244:	6d a9       	ldd	r22, Y+53	; 0x35
    3246:	7e a9       	ldd	r23, Y+54	; 0x36
    3248:	8f a9       	ldd	r24, Y+55	; 0x37
    324a:	98 ad       	ldd	r25, Y+56	; 0x38
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	4a e7       	ldi	r20, 0x7A	; 122
    3252:	55 e4       	ldi	r21, 0x45	; 69
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	89 ab       	std	Y+49, r24	; 0x31
    325e:	9a ab       	std	Y+50, r25	; 0x32
    3260:	ab ab       	std	Y+51, r26	; 0x33
    3262:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3264:	69 a9       	ldd	r22, Y+49	; 0x31
    3266:	7a a9       	ldd	r23, Y+50	; 0x32
    3268:	8b a9       	ldd	r24, Y+51	; 0x33
    326a:	9c a9       	ldd	r25, Y+52	; 0x34
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	40 e8       	ldi	r20, 0x80	; 128
    3272:	5f e3       	ldi	r21, 0x3F	; 63
    3274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3278:	88 23       	and	r24, r24
    327a:	2c f4       	brge	.+10     	; 0x3286 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	98 ab       	std	Y+48, r25	; 0x30
    3282:	8f a7       	std	Y+47, r24	; 0x2f
    3284:	3f c0       	rjmp	.+126    	; 0x3304 <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    3286:	69 a9       	ldd	r22, Y+49	; 0x31
    3288:	7a a9       	ldd	r23, Y+50	; 0x32
    328a:	8b a9       	ldd	r24, Y+51	; 0x33
    328c:	9c a9       	ldd	r25, Y+52	; 0x34
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	3f ef       	ldi	r19, 0xFF	; 255
    3292:	4f e7       	ldi	r20, 0x7F	; 127
    3294:	57 e4       	ldi	r21, 0x47	; 71
    3296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329a:	18 16       	cp	r1, r24
    329c:	4c f5       	brge	.+82     	; 0x32f0 <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329e:	6d a9       	ldd	r22, Y+53	; 0x35
    32a0:	7e a9       	ldd	r23, Y+54	; 0x36
    32a2:	8f a9       	ldd	r24, Y+55	; 0x37
    32a4:	98 ad       	ldd	r25, Y+56	; 0x38
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e2       	ldi	r20, 0x20	; 32
    32ac:	51 e4       	ldi	r21, 0x41	; 65
    32ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	bc 01       	movw	r22, r24
    32b8:	cd 01       	movw	r24, r26
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	98 ab       	std	Y+48, r25	; 0x30
    32c4:	8f a7       	std	Y+47, r24	; 0x2f
    32c6:	0f c0       	rjmp	.+30     	; 0x32e6 <LCD_DisplayCharacter+0x540>
    32c8:	80 e9       	ldi	r24, 0x90	; 144
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	9e a7       	std	Y+46, r25	; 0x2e
    32ce:	8d a7       	std	Y+45, r24	; 0x2d
    32d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    32d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <LCD_DisplayCharacter+0x52e>
    32d8:	9e a7       	std	Y+46, r25	; 0x2e
    32da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32de:	98 a9       	ldd	r25, Y+48	; 0x30
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	98 ab       	std	Y+48, r25	; 0x30
    32e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e8:	98 a9       	ldd	r25, Y+48	; 0x30
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	69 f7       	brne	.-38     	; 0x32c8 <LCD_DisplayCharacter+0x522>
    32ee:	14 c0       	rjmp	.+40     	; 0x3318 <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f0:	69 a9       	ldd	r22, Y+49	; 0x31
    32f2:	7a a9       	ldd	r23, Y+50	; 0x32
    32f4:	8b a9       	ldd	r24, Y+51	; 0x33
    32f6:	9c a9       	ldd	r25, Y+52	; 0x34
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	98 ab       	std	Y+48, r25	; 0x30
    3302:	8f a7       	std	Y+47, r24	; 0x2f
    3304:	8f a5       	ldd	r24, Y+47	; 0x2f
    3306:	98 a9       	ldd	r25, Y+48	; 0x30
    3308:	9c a7       	std	Y+44, r25	; 0x2c
    330a:	8b a7       	std	Y+43, r24	; 0x2b
    330c:	8b a5       	ldd	r24, Y+43	; 0x2b
    330e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <LCD_DisplayCharacter+0x56a>
    3314:	9c a7       	std	Y+44, r25	; 0x2c
    3316:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	62 e0       	ldi	r22, 0x02	; 2
    331c:	41 e0       	ldi	r20, 0x01	; 1
    331e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	a0 e8       	ldi	r26, 0x80	; 128
    3328:	bf e3       	ldi	r27, 0x3F	; 63
    332a:	8f a3       	std	Y+39, r24	; 0x27
    332c:	98 a7       	std	Y+40, r25	; 0x28
    332e:	a9 a7       	std	Y+41, r26	; 0x29
    3330:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3332:	6f a1       	ldd	r22, Y+39	; 0x27
    3334:	78 a5       	ldd	r23, Y+40	; 0x28
    3336:	89 a5       	ldd	r24, Y+41	; 0x29
    3338:	9a a5       	ldd	r25, Y+42	; 0x2a
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a e7       	ldi	r20, 0x7A	; 122
    3340:	55 e4       	ldi	r21, 0x45	; 69
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8b a3       	std	Y+35, r24	; 0x23
    334c:	9c a3       	std	Y+36, r25	; 0x24
    334e:	ad a3       	std	Y+37, r26	; 0x25
    3350:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3352:	6b a1       	ldd	r22, Y+35	; 0x23
    3354:	7c a1       	ldd	r23, Y+36	; 0x24
    3356:	8d a1       	ldd	r24, Y+37	; 0x25
    3358:	9e a1       	ldd	r25, Y+38	; 0x26
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	2c f4       	brge	.+10     	; 0x3374 <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9a a3       	std	Y+34, r25	; 0x22
    3370:	89 a3       	std	Y+33, r24	; 0x21
    3372:	3f c0       	rjmp	.+126    	; 0x33f2 <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    3374:	6b a1       	ldd	r22, Y+35	; 0x23
    3376:	7c a1       	ldd	r23, Y+36	; 0x24
    3378:	8d a1       	ldd	r24, Y+37	; 0x25
    337a:	9e a1       	ldd	r25, Y+38	; 0x26
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	3f ef       	ldi	r19, 0xFF	; 255
    3380:	4f e7       	ldi	r20, 0x7F	; 127
    3382:	57 e4       	ldi	r21, 0x47	; 71
    3384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3388:	18 16       	cp	r1, r24
    338a:	4c f5       	brge	.+82     	; 0x33de <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338c:	6f a1       	ldd	r22, Y+39	; 0x27
    338e:	78 a5       	ldd	r23, Y+40	; 0x28
    3390:	89 a5       	ldd	r24, Y+41	; 0x29
    3392:	9a a5       	ldd	r25, Y+42	; 0x2a
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9a a3       	std	Y+34, r25	; 0x22
    33b2:	89 a3       	std	Y+33, r24	; 0x21
    33b4:	0f c0       	rjmp	.+30     	; 0x33d4 <LCD_DisplayCharacter+0x62e>
    33b6:	80 e9       	ldi	r24, 0x90	; 144
    33b8:	91 e0       	ldi	r25, 0x01	; 1
    33ba:	98 a3       	std	Y+32, r25	; 0x20
    33bc:	8f 8f       	std	Y+31, r24	; 0x1f
    33be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c0:	98 a1       	ldd	r25, Y+32	; 0x20
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <LCD_DisplayCharacter+0x61c>
    33c6:	98 a3       	std	Y+32, r25	; 0x20
    33c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ca:	89 a1       	ldd	r24, Y+33	; 0x21
    33cc:	9a a1       	ldd	r25, Y+34	; 0x22
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	9a a3       	std	Y+34, r25	; 0x22
    33d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d4:	89 a1       	ldd	r24, Y+33	; 0x21
    33d6:	9a a1       	ldd	r25, Y+34	; 0x22
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	69 f7       	brne	.-38     	; 0x33b6 <LCD_DisplayCharacter+0x610>
    33dc:	14 c0       	rjmp	.+40     	; 0x3406 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33de:	6b a1       	ldd	r22, Y+35	; 0x23
    33e0:	7c a1       	ldd	r23, Y+36	; 0x24
    33e2:	8d a1       	ldd	r24, Y+37	; 0x25
    33e4:	9e a1       	ldd	r25, Y+38	; 0x26
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	9a a3       	std	Y+34, r25	; 0x22
    33f0:	89 a3       	std	Y+33, r24	; 0x21
    33f2:	89 a1       	ldd	r24, Y+33	; 0x21
    33f4:	9a a1       	ldd	r25, Y+34	; 0x22
    33f6:	9e 8f       	std	Y+30, r25	; 0x1e
    33f8:	8d 8f       	std	Y+29, r24	; 0x1d
    33fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <LCD_DisplayCharacter+0x658>
    3402:	9e 8f       	std	Y+30, r25	; 0x1e
    3404:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    3406:	de 01       	movw	r26, r28
    3408:	ad 59       	subi	r26, 0x9D	; 157
    340a:	bf 4f       	sbci	r27, 0xFF	; 255
    340c:	fe 01       	movw	r30, r28
    340e:	ec 59       	subi	r30, 0x9C	; 156
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	80 81       	ld	r24, Z
    3414:	8f 70       	andi	r24, 0x0F	; 15
    3416:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3418:	fe 01       	movw	r30, r28
    341a:	ed 59       	subi	r30, 0x9D	; 157
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	98 2f       	mov	r25, r24
    3422:	91 70       	andi	r25, 0x01	; 1
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	49 2f       	mov	r20, r25
    342a:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    342e:	fe 01       	movw	r30, r28
    3430:	ed 59       	subi	r30, 0x9D	; 157
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	86 95       	lsr	r24
    3438:	98 2f       	mov	r25, r24
    343a:	91 70       	andi	r25, 0x01	; 1
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	61 e0       	ldi	r22, 0x01	; 1
    3440:	49 2f       	mov	r20, r25
    3442:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3446:	fe 01       	movw	r30, r28
    3448:	ed 59       	subi	r30, 0x9D	; 157
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	80 81       	ld	r24, Z
    344e:	86 95       	lsr	r24
    3450:	86 95       	lsr	r24
    3452:	98 2f       	mov	r25, r24
    3454:	91 70       	andi	r25, 0x01	; 1
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	62 e0       	ldi	r22, 0x02	; 2
    345a:	49 2f       	mov	r20, r25
    345c:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    3460:	fe 01       	movw	r30, r28
    3462:	ed 59       	subi	r30, 0x9D	; 157
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	86 95       	lsr	r24
    346a:	86 95       	lsr	r24
    346c:	86 95       	lsr	r24
    346e:	98 2f       	mov	r25, r24
    3470:	91 70       	andi	r25, 0x01	; 1
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	64 e0       	ldi	r22, 0x04	; 4
    3476:	49 2f       	mov	r20, r25
    3478:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 e8       	ldi	r26, 0x80	; 128
    3482:	bf e3       	ldi	r27, 0x3F	; 63
    3484:	89 8f       	std	Y+25, r24	; 0x19
    3486:	9a 8f       	std	Y+26, r25	; 0x1a
    3488:	ab 8f       	std	Y+27, r26	; 0x1b
    348a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	69 8d       	ldd	r22, Y+25	; 0x19
    348e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a e7       	ldi	r20, 0x7A	; 122
    349a:	55 e4       	ldi	r21, 0x45	; 69
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8d 8b       	std	Y+21, r24	; 0x15
    34a6:	9e 8b       	std	Y+22, r25	; 0x16
    34a8:	af 8b       	std	Y+23, r26	; 0x17
    34aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ac:	6d 89       	ldd	r22, Y+21	; 0x15
    34ae:	7e 89       	ldd	r23, Y+22	; 0x16
    34b0:	8f 89       	ldd	r24, Y+23	; 0x17
    34b2:	98 8d       	ldd	r25, Y+24	; 0x18
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    34ce:	6d 89       	ldd	r22, Y+21	; 0x15
    34d0:	7e 89       	ldd	r23, Y+22	; 0x16
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	69 8d       	ldd	r22, Y+25	; 0x19
    34e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9c 8b       	std	Y+20, r25	; 0x14
    350c:	8b 8b       	std	Y+19, r24	; 0x13
    350e:	0f c0       	rjmp	.+30     	; 0x352e <LCD_DisplayCharacter+0x788>
    3510:	80 e9       	ldi	r24, 0x90	; 144
    3512:	91 e0       	ldi	r25, 0x01	; 1
    3514:	9a 8b       	std	Y+18, r25	; 0x12
    3516:	89 8b       	std	Y+17, r24	; 0x11
    3518:	89 89       	ldd	r24, Y+17	; 0x11
    351a:	9a 89       	ldd	r25, Y+18	; 0x12
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <LCD_DisplayCharacter+0x776>
    3520:	9a 8b       	std	Y+18, r25	; 0x12
    3522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8b 89       	ldd	r24, Y+19	; 0x13
    3526:	9c 89       	ldd	r25, Y+20	; 0x14
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9c 8b       	std	Y+20, r25	; 0x14
    352c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <LCD_DisplayCharacter+0x76a>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6d 89       	ldd	r22, Y+21	; 0x15
    353a:	7e 89       	ldd	r23, Y+22	; 0x16
    353c:	8f 89       	ldd	r24, Y+23	; 0x17
    353e:	98 8d       	ldd	r25, Y+24	; 0x18
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	98 8b       	std	Y+16, r25	; 0x10
    3552:	8f 87       	std	Y+15, r24	; 0x0f
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LCD_DisplayCharacter+0x7b2>
    355c:	98 8b       	std	Y+16, r25	; 0x10
    355e:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	62 e0       	ldi	r22, 0x02	; 2
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	a0 e8       	ldi	r26, 0x80	; 128
    3570:	bf e3       	ldi	r27, 0x3F	; 63
    3572:	8b 87       	std	Y+11, r24	; 0x0b
    3574:	9c 87       	std	Y+12, r25	; 0x0c
    3576:	ad 87       	std	Y+13, r26	; 0x0d
    3578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357a:	6b 85       	ldd	r22, Y+11	; 0x0b
    357c:	7c 85       	ldd	r23, Y+12	; 0x0c
    357e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3580:	9e 85       	ldd	r25, Y+14	; 0x0e
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	4a e7       	ldi	r20, 0x7A	; 122
    3588:	55 e4       	ldi	r21, 0x45	; 69
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	8f 83       	std	Y+7, r24	; 0x07
    3594:	98 87       	std	Y+8, r25	; 0x08
    3596:	a9 87       	std	Y+9, r26	; 0x09
    3598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    359a:	6f 81       	ldd	r22, Y+7	; 0x07
    359c:	78 85       	ldd	r23, Y+8	; 0x08
    359e:	89 85       	ldd	r24, Y+9	; 0x09
    35a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e8       	ldi	r20, 0x80	; 128
    35a8:	5f e3       	ldi	r21, 0x3F	; 63
    35aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ae:	88 23       	and	r24, r24
    35b0:	2c f4       	brge	.+10     	; 0x35bc <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	9e 83       	std	Y+6, r25	; 0x06
    35b8:	8d 83       	std	Y+5, r24	; 0x05
    35ba:	3f c0       	rjmp	.+126    	; 0x363a <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	3f ef       	ldi	r19, 0xFF	; 255
    35c8:	4f e7       	ldi	r20, 0x7F	; 127
    35ca:	57 e4       	ldi	r21, 0x47	; 71
    35cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d0:	18 16       	cp	r1, r24
    35d2:	4c f5       	brge	.+82     	; 0x3626 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35da:	9e 85       	ldd	r25, Y+14	; 0x0e
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e2       	ldi	r20, 0x20	; 32
    35e2:	51 e4       	ldi	r21, 0x41	; 65
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9e 83       	std	Y+6, r25	; 0x06
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	0f c0       	rjmp	.+30     	; 0x361c <LCD_DisplayCharacter+0x876>
    35fe:	80 e9       	ldi	r24, 0x90	; 144
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	9c 83       	std	Y+4, r25	; 0x04
    3604:	8b 83       	std	Y+3, r24	; 0x03
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	9c 81       	ldd	r25, Y+4	; 0x04
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <LCD_DisplayCharacter+0x864>
    360e:	9c 83       	std	Y+4, r25	; 0x04
    3610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	8d 81       	ldd	r24, Y+5	; 0x05
    3614:	9e 81       	ldd	r25, Y+6	; 0x06
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	9e 83       	std	Y+6, r25	; 0x06
    361a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	69 f7       	brne	.-38     	; 0x35fe <LCD_DisplayCharacter+0x858>
    3624:	14 c0       	rjmp	.+40     	; 0x364e <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3626:	6f 81       	ldd	r22, Y+7	; 0x07
    3628:	78 85       	ldd	r23, Y+8	; 0x08
    362a:	89 85       	ldd	r24, Y+9	; 0x09
    362c:	9a 85       	ldd	r25, Y+10	; 0x0a
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	9a 83       	std	Y+2, r25	; 0x02
    3640:	89 83       	std	Y+1, r24	; 0x01
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	9a 81       	ldd	r25, Y+2	; 0x02
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <LCD_DisplayCharacter+0x8a0>
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    364e:	80 91 7d 02 	lds	r24, 0x027D
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	80 93 7d 02 	sts	0x027D, r24
    if(col_global == MAX_NUM_COL_LCD)
    3658:	80 91 7d 02 	lds	r24, 0x027D
    365c:	84 31       	cpi	r24, 0x14	; 20
    365e:	69 f4       	brne	.+26     	; 0x367a <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    3660:	80 91 7c 02 	lds	r24, 0x027C
    3664:	8f 5f       	subi	r24, 0xFF	; 255
    3666:	80 93 7c 02 	sts	0x027C, r24
        col_global = 0 ;
    366a:	10 92 7d 02 	sts	0x027D, r1
        if(row_global == MAX_NUM_COL_LCD)
    366e:	80 91 7c 02 	lds	r24, 0x027C
    3672:	84 31       	cpi	r24, 0x14	; 20
    3674:	11 f4       	brne	.+4      	; 0x367a <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    3676:	10 92 7c 02 	sts	0x027C, r1
    }
}
    367a:	cc 59       	subi	r28, 0x9C	; 156
    367c:	df 4f       	sbci	r29, 0xFF	; 255
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	00 d0       	rcall	.+0      	; 0x3698 <LCD_DisplayString+0x6>
    3698:	0f 92       	push	r0
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	9b 83       	std	Y+3, r25	; 0x03
    36a0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    36a2:	19 82       	std	Y+1, r1	; 0x01
    36a4:	0e c0       	rjmp	.+28     	; 0x36c2 <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	28 2f       	mov	r18, r24
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	9b 81       	ldd	r25, Y+3	; 0x03
    36b0:	fc 01       	movw	r30, r24
    36b2:	e2 0f       	add	r30, r18
    36b4:	f3 1f       	adc	r31, r19
    36b6:	80 81       	ld	r24, Z
    36b8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
        it++;
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	8f 5f       	subi	r24, 0xFF	; 255
    36c0:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	28 2f       	mov	r18, r24
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	9b 81       	ldd	r25, Y+3	; 0x03
    36cc:	fc 01       	movw	r30, r24
    36ce:	e2 0f       	add	r30, r18
    36d0:	f3 1f       	adc	r31, r19
    36d2:	80 81       	ld	r24, Z
    36d4:	88 23       	and	r24, r24
    36d6:	39 f7       	brne	.-50     	; 0x36a6 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <LCD_MoveCursor+0x6>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <LCD_MoveCursor+0x8>
    36ec:	0f 92       	push	r0
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	8a 83       	std	Y+2, r24	; 0x02
    36f4:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	3d 83       	std	Y+5, r19	; 0x05
    36fe:	2c 83       	std	Y+4, r18	; 0x04
    3700:	8c 81       	ldd	r24, Y+4	; 0x04
    3702:	9d 81       	ldd	r25, Y+5	; 0x05
    3704:	81 30       	cpi	r24, 0x01	; 1
    3706:	91 05       	cpc	r25, r1
    3708:	e9 f0       	breq	.+58     	; 0x3744 <LCD_MoveCursor+0x60>
    370a:	2c 81       	ldd	r18, Y+4	; 0x04
    370c:	3d 81       	ldd	r19, Y+5	; 0x05
    370e:	22 30       	cpi	r18, 0x02	; 2
    3710:	31 05       	cpc	r19, r1
    3712:	2c f4       	brge	.+10     	; 0x371e <LCD_MoveCursor+0x3a>
    3714:	8c 81       	ldd	r24, Y+4	; 0x04
    3716:	9d 81       	ldd	r25, Y+5	; 0x05
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	61 f0       	breq	.+24     	; 0x3734 <LCD_MoveCursor+0x50>
    371c:	30 c0       	rjmp	.+96     	; 0x377e <LCD_MoveCursor+0x9a>
    371e:	2c 81       	ldd	r18, Y+4	; 0x04
    3720:	3d 81       	ldd	r19, Y+5	; 0x05
    3722:	22 30       	cpi	r18, 0x02	; 2
    3724:	31 05       	cpc	r19, r1
    3726:	c1 f0       	breq	.+48     	; 0x3758 <LCD_MoveCursor+0x74>
    3728:	8c 81       	ldd	r24, Y+4	; 0x04
    372a:	9d 81       	ldd	r25, Y+5	; 0x05
    372c:	83 30       	cpi	r24, 0x03	; 3
    372e:	91 05       	cpc	r25, r1
    3730:	e9 f0       	breq	.+58     	; 0x376c <LCD_MoveCursor+0x88>
    3732:	25 c0       	rjmp	.+74     	; 0x377e <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	80 93 7d 02 	sts	0x027D, r24
            row_global = 0 ;
    373e:	10 92 7c 02 	sts	0x027C, r1
    3742:	1d c0       	rjmp	.+58     	; 0x377e <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	80 5c       	subi	r24, 0xC0	; 192
    3748:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    374a:	8b 81       	ldd	r24, Y+3	; 0x03
    374c:	80 93 7d 02 	sts	0x027D, r24
            row_global = 1 ;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	80 93 7c 02 	sts	0x027C, r24
    3756:	13 c0       	rjmp	.+38     	; 0x377e <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	8c 5e       	subi	r24, 0xEC	; 236
    375c:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	80 93 7d 02 	sts	0x027D, r24
                row_global = 2 ;
    3764:	82 e0       	ldi	r24, 0x02	; 2
    3766:	80 93 7c 02 	sts	0x027C, r24
    376a:	09 c0       	rjmp	.+18     	; 0x377e <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	8c 5a       	subi	r24, 0xAC	; 172
    3770:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	80 93 7d 02 	sts	0x027D, r24
                row_global = 3 ;
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	80 93 7c 02 	sts	0x027C, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	80 68       	ori	r24, 0x80	; 128
    3782:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	00 d0       	rcall	.+0      	; 0x379c <LCD_DisplayStringRowCol+0x6>
    379c:	00 d0       	rcall	.+0      	; 0x379e <LCD_DisplayStringRowCol+0x8>
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01
    37a6:	6b 83       	std	Y+3, r22	; 0x03
    37a8:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	6c 81       	ldd	r22, Y+4	; 0x04
    37ae:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	9a 81       	ldd	r25, Y+2	; 0x02
    37b6:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
}
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    37d0:	10 92 7d 02 	sts	0x027D, r1
    37d4:	10 92 7c 02 	sts	0x027C, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
}
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	08 95       	ret

000037e4 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    37ec:	80 91 7d 02 	lds	r24, 0x027D
    37f0:	83 31       	cpi	r24, 0x13	; 19
    37f2:	89 f4       	brne	.+34     	; 0x3816 <LCD_MoveCursorRight+0x32>
    37f4:	80 91 7c 02 	lds	r24, 0x027C
    37f8:	88 23       	and	r24, r24
    37fa:	69 f4       	brne	.+26     	; 0x3816 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    37fc:	10 92 7d 02 	sts	0x027D, r1
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	80 93 7c 02 	sts	0x027C, r24
        LCD_MoveCursor(row_global,col_global);
    3806:	80 91 7c 02 	lds	r24, 0x027C
    380a:	90 91 7d 02 	lds	r25, 0x027D
    380e:	69 2f       	mov	r22, r25
    3810:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    3814:	46 c0       	rjmp	.+140    	; 0x38a2 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    3816:	80 91 7d 02 	lds	r24, 0x027D
    381a:	83 31       	cpi	r24, 0x13	; 19
    381c:	89 f4       	brne	.+34     	; 0x3840 <LCD_MoveCursorRight+0x5c>
    381e:	80 91 7c 02 	lds	r24, 0x027C
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	69 f4       	brne	.+26     	; 0x3840 <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    3826:	10 92 7d 02 	sts	0x027D, r1
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	80 93 7c 02 	sts	0x027C, r24
        LCD_MoveCursor(row_global,col_global);
    3830:	80 91 7c 02 	lds	r24, 0x027C
    3834:	90 91 7d 02 	lds	r25, 0x027D
    3838:	69 2f       	mov	r22, r25
    383a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    383e:	31 c0       	rjmp	.+98     	; 0x38a2 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    3840:	80 91 7d 02 	lds	r24, 0x027D
    3844:	83 31       	cpi	r24, 0x13	; 19
    3846:	89 f4       	brne	.+34     	; 0x386a <LCD_MoveCursorRight+0x86>
    3848:	80 91 7c 02 	lds	r24, 0x027C
    384c:	82 30       	cpi	r24, 0x02	; 2
    384e:	69 f4       	brne	.+26     	; 0x386a <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    3850:	10 92 7d 02 	sts	0x027D, r1
    3854:	83 e0       	ldi	r24, 0x03	; 3
    3856:	80 93 7c 02 	sts	0x027C, r24
        LCD_MoveCursor(row_global,col_global);
    385a:	80 91 7c 02 	lds	r24, 0x027C
    385e:	90 91 7d 02 	lds	r25, 0x027D
    3862:	69 2f       	mov	r22, r25
    3864:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    3868:	1c c0       	rjmp	.+56     	; 0x38a2 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    386a:	80 91 7d 02 	lds	r24, 0x027D
    386e:	83 31       	cpi	r24, 0x13	; 19
    3870:	81 f4       	brne	.+32     	; 0x3892 <LCD_MoveCursorRight+0xae>
    3872:	80 91 7c 02 	lds	r24, 0x027C
    3876:	83 30       	cpi	r24, 0x03	; 3
    3878:	61 f4       	brne	.+24     	; 0x3892 <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    387a:	10 92 7d 02 	sts	0x027D, r1
    387e:	10 92 7c 02 	sts	0x027C, r1
        LCD_MoveCursor(row_global,col_global);
    3882:	80 91 7c 02 	lds	r24, 0x027C
    3886:	90 91 7d 02 	lds	r25, 0x027D
    388a:	69 2f       	mov	r22, r25
    388c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    3890:	08 c0       	rjmp	.+16     	; 0x38a2 <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    3892:	84 e1       	ldi	r24, 0x14	; 20
    3894:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
        col_global++;
    3898:	80 91 7d 02 	lds	r24, 0x027D
    389c:	8f 5f       	subi	r24, 0xFF	; 255
    389e:	80 93 7d 02 	sts	0x027D, r24
    }
}
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    38a8:	df 93       	push	r29
    38aa:	cf 93       	push	r28
    38ac:	cd b7       	in	r28, 0x3d	; 61
    38ae:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    38b0:	80 91 7d 02 	lds	r24, 0x027D
    38b4:	88 23       	and	r24, r24
    38b6:	91 f4       	brne	.+36     	; 0x38dc <LCD_MoveCursorLeft+0x34>
    38b8:	80 91 7c 02 	lds	r24, 0x027C
    38bc:	88 23       	and	r24, r24
    38be:	71 f4       	brne	.+28     	; 0x38dc <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    38c0:	83 e1       	ldi	r24, 0x13	; 19
    38c2:	80 93 7d 02 	sts	0x027D, r24
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	80 93 7c 02 	sts	0x027C, r24
        LCD_MoveCursor(row_global,col_global);
    38cc:	80 91 7c 02 	lds	r24, 0x027C
    38d0:	90 91 7d 02 	lds	r25, 0x027D
    38d4:	69 2f       	mov	r22, r25
    38d6:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    38da:	49 c0       	rjmp	.+146    	; 0x396e <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    38dc:	80 91 7d 02 	lds	r24, 0x027D
    38e0:	88 23       	and	r24, r24
    38e2:	89 f4       	brne	.+34     	; 0x3906 <LCD_MoveCursorLeft+0x5e>
    38e4:	80 91 7c 02 	lds	r24, 0x027C
    38e8:	81 30       	cpi	r24, 0x01	; 1
    38ea:	69 f4       	brne	.+26     	; 0x3906 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    38ec:	83 e1       	ldi	r24, 0x13	; 19
    38ee:	80 93 7d 02 	sts	0x027D, r24
    38f2:	10 92 7c 02 	sts	0x027C, r1
        LCD_MoveCursor(row_global,col_global);
    38f6:	80 91 7c 02 	lds	r24, 0x027C
    38fa:	90 91 7d 02 	lds	r25, 0x027D
    38fe:	69 2f       	mov	r22, r25
    3900:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    3904:	34 c0       	rjmp	.+104    	; 0x396e <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    3906:	80 91 7d 02 	lds	r24, 0x027D
    390a:	88 23       	and	r24, r24
    390c:	91 f4       	brne	.+36     	; 0x3932 <LCD_MoveCursorLeft+0x8a>
    390e:	80 91 7c 02 	lds	r24, 0x027C
    3912:	82 30       	cpi	r24, 0x02	; 2
    3914:	71 f4       	brne	.+28     	; 0x3932 <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    3916:	83 e1       	ldi	r24, 0x13	; 19
    3918:	80 93 7d 02 	sts	0x027D, r24
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 7c 02 	sts	0x027C, r24
        LCD_MoveCursor(row_global,col_global);
    3922:	80 91 7c 02 	lds	r24, 0x027C
    3926:	90 91 7d 02 	lds	r25, 0x027D
    392a:	69 2f       	mov	r22, r25
    392c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    3930:	1e c0       	rjmp	.+60     	; 0x396e <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    3932:	80 91 7d 02 	lds	r24, 0x027D
    3936:	88 23       	and	r24, r24
    3938:	91 f4       	brne	.+36     	; 0x395e <LCD_MoveCursorLeft+0xb6>
    393a:	80 91 7c 02 	lds	r24, 0x027C
    393e:	83 30       	cpi	r24, 0x03	; 3
    3940:	71 f4       	brne	.+28     	; 0x395e <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    3942:	83 e1       	ldi	r24, 0x13	; 19
    3944:	80 93 7d 02 	sts	0x027D, r24
    3948:	82 e0       	ldi	r24, 0x02	; 2
    394a:	80 93 7c 02 	sts	0x027C, r24
        LCD_MoveCursor(row_global,col_global);
    394e:	80 91 7c 02 	lds	r24, 0x027C
    3952:	90 91 7d 02 	lds	r25, 0x027D
    3956:	69 2f       	mov	r22, r25
    3958:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    395c:	08 c0       	rjmp	.+16     	; 0x396e <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    395e:	80 e1       	ldi	r24, 0x10	; 16
    3960:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
        col_global--;
    3964:	80 91 7d 02 	lds	r24, 0x027D
    3968:	81 50       	subi	r24, 0x01	; 1
    396a:	80 93 7d 02 	sts	0x027D, r24
    }
    
}
    396e:	cf 91       	pop	r28
    3970:	df 91       	pop	r29
    3972:	08 95       	ret

00003974 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    397c:	8c e1       	ldi	r24, 0x1C	; 28
    397e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
}
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    3990:	88 e1       	ldi	r24, 0x18	; 24
    3992:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
}
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    399c:	df 93       	push	r29
    399e:	cf 93       	push	r28
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <LCD_GenerateCharacterCGRAM+0x6>
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <LCD_GenerateCharacterCGRAM+0x8>
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
    39a8:	9b 83       	std	Y+3, r25	; 0x03
    39aa:	8a 83       	std	Y+2, r24	; 0x02
    39ac:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    39ae:	8c 81       	ldd	r24, Y+4	; 0x04
    39b0:	88 2f       	mov	r24, r24
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	08 96       	adiw	r24, 0x08	; 8
    39b6:	88 0f       	add	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    39c6:	19 82       	std	Y+1, r1	; 0x01
    39c8:	0e c0       	rjmp	.+28     	; 0x39e6 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	28 2f       	mov	r18, r24
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	8a 81       	ldd	r24, Y+2	; 0x02
    39d2:	9b 81       	ldd	r25, Y+3	; 0x03
    39d4:	fc 01       	movw	r30, r24
    39d6:	e2 0f       	add	r30, r18
    39d8:	f3 1f       	adc	r31, r19
    39da:	80 81       	ld	r24, Z
    39dc:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	8f 5f       	subi	r24, 0xFF	; 255
    39e4:	89 83       	std	Y+1, r24	; 0x01
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
    39e8:	88 30       	cpi	r24, 0x08	; 8
    39ea:	78 f3       	brcs	.-34     	; 0x39ca <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	08 95       	ret

000039fa <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    39fa:	df 93       	push	r29
    39fc:	cf 93       	push	r28
    39fe:	0f 92       	push	r0
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
}
    3a0c:	0f 90       	pop	r0
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	08 95       	ret

00003a14 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <LCD_DisplayCustomCharacterRowCol+0x6>
    3a1a:	0f 92       	push	r0
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	6a 83       	std	Y+2, r22	; 0x02
    3a24:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	6b 81       	ldd	r22, Y+3	; 0x03
    3a2a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
}
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	08 95       	ret

00003a40 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	65 97       	sbiw	r28, 0x15	; 21
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	6a 8b       	std	Y+18, r22	; 0x12
    3a56:	7b 8b       	std	Y+19, r23	; 0x13
    3a58:	8c 8b       	std	Y+20, r24	; 0x14
    3a5a:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3a5c:	8a 89       	ldd	r24, Y+18	; 0x12
    3a5e:	9b 89       	ldd	r25, Y+19	; 0x13
    3a60:	9e 01       	movw	r18, r28
    3a62:	2f 5f       	subi	r18, 0xFF	; 255
    3a64:	3f 4f       	sbci	r19, 0xFF	; 255
    3a66:	b9 01       	movw	r22, r18
    3a68:	4a e0       	ldi	r20, 0x0A	; 10
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    3a70:	ce 01       	movw	r24, r28
    3a72:	01 96       	adiw	r24, 0x01	; 1
    3a74:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
}
    3a78:	65 96       	adiw	r28, 0x15	; 21
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <Keypad_4X3_AdjustKeyNumber>:


#if(KEYPAD_COL_NUM == 3)

static uint8 Keypad_4X3_AdjustKeyNumber(uint8 Button_Number)
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <Keypad_4X3_AdjustKeyNumber+0x6>
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <Keypad_4X3_AdjustKeyNumber+0x8>
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	8a 83       	std	Y+2, r24	; 0x02
    uint8 pressed_key = 0;
    3a98:	19 82       	std	Y+1, r1	; 0x01
    switch (Button_Number)
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	28 2f       	mov	r18, r24
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	3c 83       	std	Y+4, r19	; 0x04
    3aa2:	2b 83       	std	Y+3, r18	; 0x03
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa8:	8a 30       	cpi	r24, 0x0A	; 10
    3aaa:	91 05       	cpc	r25, r1
    3aac:	81 f0       	breq	.+32     	; 0x3ace <Keypad_4X3_AdjustKeyNumber+0x44>
    3aae:	2b 81       	ldd	r18, Y+3	; 0x03
    3ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ab2:	2a 30       	cpi	r18, 0x0A	; 10
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	9c f0       	brlt	.+38     	; 0x3ade <Keypad_4X3_AdjustKeyNumber+0x54>
    3ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aba:	9c 81       	ldd	r25, Y+4	; 0x04
    3abc:	8b 30       	cpi	r24, 0x0B	; 11
    3abe:	91 05       	cpc	r25, r1
    3ac0:	49 f0       	breq	.+18     	; 0x3ad4 <Keypad_4X3_AdjustKeyNumber+0x4a>
    3ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ac6:	2c 30       	cpi	r18, 0x0C	; 12
    3ac8:	31 05       	cpc	r19, r1
    3aca:	31 f0       	breq	.+12     	; 0x3ad8 <Keypad_4X3_AdjustKeyNumber+0x4e>
    3acc:	08 c0       	rjmp	.+16     	; 0x3ade <Keypad_4X3_AdjustKeyNumber+0x54>
    {
        case 10 :
            pressed_key = '*';
    3ace:	8a e2       	ldi	r24, 0x2A	; 42
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	07 c0       	rjmp	.+14     	; 0x3ae2 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 11 : 
            pressed_key = 0;
    3ad4:	19 82       	std	Y+1, r1	; 0x01
    3ad6:	05 c0       	rjmp	.+10     	; 0x3ae2 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 12 : 
            pressed_key = '#';
    3ad8:	83 e2       	ldi	r24, 0x23	; 35
    3ada:	89 83       	std	Y+1, r24	; 0x01
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        default :
            pressed_key = Button_Number;   // if Button_Number =1  --> so will return 1 (as no mapping need like case 10 , 11 , 12)
    3ade:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae0:	89 83       	std	Y+1, r24	; 0x01
            break;
    }
    return pressed_key;
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ae4:	0f 90       	pop	r0
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <Keypad_init>:


/**************************                   Functions Definition                   **************************/

void Keypad_init(void)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	00 d0       	rcall	.+0      	; 0x3af8 <Keypad_init+0x6>
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    3afc:	1a 82       	std	Y+2, r1	; 0x02
    3afe:	0f c0       	rjmp	.+30     	; 0x3b1e <Keypad_init+0x2c>
        {
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)

            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN_PULLUP );
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	fc 01       	movw	r30, r24
    3b08:	e2 5b       	subi	r30, 0xB2	; 178
    3b0a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b0c:	90 81       	ld	r25, Z
    3b0e:	82 e0       	ldi	r24, 0x02	; 2
    3b10:	69 2f       	mov	r22, r25
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	8f 5f       	subi	r24, 0xFF	; 255
    3b1c:	8a 83       	std	Y+2, r24	; 0x02
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	84 30       	cpi	r24, 0x04	; 4
    3b22:	70 f3       	brcs	.-36     	; 0x3b00 <Keypad_init+0xe>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3b24:	19 82       	std	Y+1, r1	; 0x01
    3b26:	1b c0       	rjmp	.+54     	; 0x3b5e <Keypad_init+0x6c>
        {
            GPIO_SetPinDirection(KEYPAD_COL_PORT , sequelizeCOL[it] , OUTPUT_PIN );
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	88 2f       	mov	r24, r24
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	fc 01       	movw	r30, r24
    3b30:	e5 5b       	subi	r30, 0xB5	; 181
    3b32:	fd 4f       	sbci	r31, 0xFD	; 253
    3b34:	90 81       	ld	r25, Z
    3b36:	83 e0       	ldi	r24, 0x03	; 3
    3b38:	69 2f       	mov	r22, r25
    3b3a:	42 e0       	ldi	r20, 0x02	; 2
    3b3c:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	88 2f       	mov	r24, r24
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	fc 01       	movw	r30, r24
    3b48:	e5 5b       	subi	r30, 0xB5	; 181
    3b4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b4c:	90 81       	ld	r25, Z
    3b4e:	83 e0       	ldi	r24, 0x03	; 3
    3b50:	69 2f       	mov	r22, r25
    3b52:	41 e0       	ldi	r20, 0x01	; 1
    3b54:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	8f 5f       	subi	r24, 0xFF	; 255
    3b5c:	89 83       	std	Y+1, r24	; 0x01
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	83 30       	cpi	r24, 0x03	; 3
    3b62:	10 f3       	brcs	.-60     	; 0x3b28 <Keypad_init+0x36>
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_LOW );// set all columns to low
            #endif
        }

    #endif
}
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <Keypad_GetPressedKey>:


sint8 Keypad_GetPressedKey(void)
{
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	00 d0       	rcall	.+0      	; 0x3b74 <Keypad_GetPressedKey+0x6>
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <Keypad_GetPressedKey+0x8>
    3b76:	00 d0       	rcall	.+0      	; 0x3b78 <Keypad_GetPressedKey+0xa>
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3b7c:	1d 82       	std	Y+5, r1	; 0x05
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <Keypad_GetPressedKey+0x30>
                {
                    GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3b80:	8d 81       	ldd	r24, Y+5	; 0x05
    3b82:	88 2f       	mov	r24, r24
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	fc 01       	movw	r30, r24
    3b88:	e5 5b       	subi	r30, 0xB5	; 181
    3b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b8c:	90 81       	ld	r25, Z
    3b8e:	83 e0       	ldi	r24, 0x03	; 3
    3b90:	69 2f       	mov	r22, r25
    3b92:	41 e0       	ldi	r20, 0x01	; 1
    3b94:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	8f 5f       	subi	r24, 0xFF	; 255
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	83 30       	cpi	r24, 0x03	; 3
    3ba2:	70 f3       	brcs	.-36     	; 0x3b80 <Keypad_GetPressedKey+0x12>
            #endif

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
    3ba4:	8f ef       	ldi	r24, 0xFF	; 255
    3ba6:	9f ef       	ldi	r25, 0xFF	; 255
    3ba8:	9a 83       	std	Y+2, r25	; 0x02
    3baa:	89 83       	std	Y+1, r24	; 0x01
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3bac:	1c 82       	std	Y+4, r1	; 0x04
    3bae:	45 c0       	rjmp	.+138    	; 0x3c3a <Keypad_GetPressedKey+0xcc>
                {
                    // set  one column with value want to read to loop in rows to read which key from this column pressed
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
    3bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb2:	88 2f       	mov	r24, r24
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	e5 5b       	subi	r30, 0xB5	; 181
    3bba:	fd 4f       	sbci	r31, 0xFD	; 253
    3bbc:	90 81       	ld	r25, Z
    3bbe:	83 e0       	ldi	r24, 0x03	; 3
    3bc0:	69 2f       	mov	r22, r25
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3bc8:	1b 82       	std	Y+3, r1	; 0x03
    3bca:	25 c0       	rjmp	.+74     	; 0x3c16 <Keypad_GetPressedKey+0xa8>
                    {
                        if(GPIO_ReadPin(KEYPAD_ROW_PORT,sequelizeROW[row]) == KEYPAD_PRESSED_STATE)
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	88 2f       	mov	r24, r24
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	e2 5b       	subi	r30, 0xB2	; 178
    3bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    3bd8:	90 81       	ld	r25, Z
    3bda:	82 e0       	ldi	r24, 0x02	; 2
    3bdc:	69 2f       	mov	r22, r25
    3bde:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_ReadPin>
    3be2:	88 23       	and	r24, r24
    3be4:	a9 f4       	brne	.+42     	; 0x3c10 <Keypad_GetPressedKey+0xa2>
                        {
                            #if(KEYPAD_COL_NUM == 3)
                                pressed_key = Keypad_4X3_AdjustKeyNumber((row*KEYPAD_COL_NUM)+col+1);
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	c9 01       	movw	r24, r18
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	82 0f       	add	r24, r18
    3bf4:	93 1f       	adc	r25, r19
    3bf6:	98 2f       	mov	r25, r24
    3bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfa:	89 0f       	add	r24, r25
    3bfc:	8f 5f       	subi	r24, 0xFF	; 255
    3bfe:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <Keypad_4X3_AdjustKeyNumber>
    3c02:	88 2f       	mov	r24, r24
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01

                            pressed_BTN_IsReleased = TRUE;
                            /*store last pressed BTN*/
                            pressed_BTN = row ;
                        #endif
                            return pressed_key ;
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	8e 83       	std	Y+6, r24	; 0x06
    3c0e:	1b c0       	rjmp	.+54     	; 0x3c46 <Keypad_GetPressedKey+0xd8>
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	8b 83       	std	Y+3, r24	; 0x03
    3c16:	8b 81       	ldd	r24, Y+3	; 0x03
    3c18:	84 30       	cpi	r24, 0x04	; 4
    3c1a:	c0 f2       	brcs	.-80     	; 0x3bcc <Keypad_GetPressedKey+0x5e>
                                //          |     I mean this step
                                //          |
                                //          \/
                    // retrive change happen to make same thing to next column
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL [col] , LOGIC_HIGH ); // set all columns to High
    3c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1e:	88 2f       	mov	r24, r24
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	fc 01       	movw	r30, r24
    3c24:	e5 5b       	subi	r30, 0xB5	; 181
    3c26:	fd 4f       	sbci	r31, 0xFD	; 253
    3c28:	90 81       	ld	r25, Z
    3c2a:	83 e0       	ldi	r24, 0x03	; 3
    3c2c:	69 2f       	mov	r22, r25
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3c34:	8c 81       	ldd	r24, Y+4	; 0x04
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	8c 83       	std	Y+4, r24	; 0x04
    3c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3c:	83 30       	cpi	r24, 0x03	; 3
    3c3e:	08 f4       	brcc	.+2      	; 0x3c42 <Keypad_GetPressedKey+0xd4>
    3c40:	b7 cf       	rjmp	.-146    	; 0x3bb0 <Keypad_GetPressedKey+0x42>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_LOW ); // set all columns to low
                    #endif

                }
                return pressed_key ;
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	8e 83       	std	Y+6, r24	; 0x06
    3c46:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            

    #endif

}
    3c48:	26 96       	adiw	r28, 0x06	; 6
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <Buzzer_Init>:

#include "Buzzer_interface.h"


void Buzzer_Init(uint8 PORTX , uint8 PIN )
{
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <Buzzer_Init+0x6>
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	6a 81       	ldd	r22, Y+2	; 0x02
    3c6c:	42 e0       	ldi	r20, 0x02	; 2
    3c6e:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
}
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <Buzzer_OnOffPositiveLogic>:


void Buzzer_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <Buzzer_OnOffPositiveLogic+0x6>
    3c82:	0f 92       	push	r0
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	89 83       	std	Y+1, r24	; 0x01
    3c8a:	6a 83       	std	Y+2, r22	; 0x02
    3c8c:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	88 23       	and	r24, r24
    3c92:	31 f4       	brne	.+12     	; 0x3ca0 <Buzzer_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	6a 81       	ldd	r22, Y+2	; 0x02
    3c98:	40 e0       	ldi	r20, 0x00	; 0
    3c9a:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    3c9e:	08 c0       	rjmp	.+16     	; 0x3cb0 <Buzzer_OnOffPositiveLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	81 30       	cpi	r24, 0x01	; 1
    3ca4:	29 f4       	brne	.+10     	; 0x3cb0 <Buzzer_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	6a 81       	ldd	r22, Y+2	; 0x02
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    }
}
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	cf 91       	pop	r28
    3cb8:	df 91       	pop	r29
    3cba:	08 95       	ret

00003cbc <Buzzer_OnOffNegativeLogic>:


void Buzzer_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3cbc:	df 93       	push	r29
    3cbe:	cf 93       	push	r28
    3cc0:	00 d0       	rcall	.+0      	; 0x3cc2 <Buzzer_OnOffNegativeLogic+0x6>
    3cc2:	0f 92       	push	r0
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	89 83       	std	Y+1, r24	; 0x01
    3cca:	6a 83       	std	Y+2, r22	; 0x02
    3ccc:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	88 23       	and	r24, r24
    3cd2:	31 f4       	brne	.+12     	; 0x3ce0 <Buzzer_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	6a 81       	ldd	r22, Y+2	; 0x02
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    3cde:	08 c0       	rjmp	.+16     	; 0x3cf0 <Buzzer_OnOffNegativeLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	81 30       	cpi	r24, 0x01	; 1
    3ce4:	29 f4       	brne	.+10     	; 0x3cf0 <Buzzer_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	6a 81       	ldd	r22, Y+2	; 0x02
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    }
}
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <Buzzer_Toggle>:



void Buzzer_Toggle(uint8 PORTX , uint8 PIN)
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	00 d0       	rcall	.+0      	; 0x3d02 <Buzzer_Toggle+0x6>
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_TogglePin(PORTX,PIN);
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	6a 81       	ldd	r22, Y+2	; 0x02
    3d0e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <GPIO_TogglePin>
}
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	08 95       	ret

00003d1c <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3d1c:	df 93       	push	r29
    3d1e:	cf 93       	push	r28
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <BUTTON_Init+0x6>
    3d22:	0f 92       	push	r0
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	89 83       	std	Y+1, r24	; 0x01
    3d2a:	6a 83       	std	Y+2, r22	; 0x02
    3d2c:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	6a 81       	ldd	r22, Y+2	; 0x02
    3d32:	4b 81       	ldd	r20, Y+3	; 0x03
    3d34:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
}
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <BUTTON_GetValue+0x6>
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	89 83       	std	Y+1, r24	; 0x01
    3d50:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	6a 81       	ldd	r22, Y+2	; 0x02
    3d56:	0e 94 9a 0b 	call	0x1734	; 0x1734 <GPIO_ReadPin>
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	cf 91       	pop	r28
    3d60:	df 91       	pop	r29
    3d62:	08 95       	ret

00003d64 <App_StateMachineUpdate>:
uint8 Buzzer_Timer0_OVF_count = 0 ;

/*  👀👀 Function called inside While(1) Loop  */

void App_StateMachineUpdate(void)
{
    3d64:	df 93       	push	r29
    3d66:	cf 93       	push	r28
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    Hanndle_GrearBox_N_State();
    3d6c:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Hanndle_GrearBox_N_State>

    // Hanndle_GrearBox_D_State();

    Hanndle_GrearBox_R_State();
    3d70:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <Hanndle_GrearBox_R_State>

    /*  it was used to take dicision as button are pressed and this function handle everything  */
    // Buttons_Update();

    APP_KeypadUpdate();
    3d74:	0e 94 2e 22 	call	0x445c	; 0x445c <APP_KeypadUpdate>

    Braking_LongPressHandle();
    3d78:	0e 94 2c 24 	call	0x4858	; 0x4858 <Braking_LongPressHandle>

    App_CarSpeedUpdate ();
    3d7c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <App_CarSpeedUpdate>

    App_GetDiffCarSpeed_and_limit();
    3d80:	0e 94 79 20 	call	0x40f2	; 0x40f2 <App_GetDiffCarSpeed_and_limit>

    /*  make continous update for dashboard if I in page 2   */
    DashBoard_DrivingMonetoring_continous_Status_update();
    3d84:	0e 94 20 21 	call	0x4240	; 0x4240 <DashBoard_DrivingMonetoring_continous_Status_update>
    
    /*  used to update time if I in page 4*/
    DashBoard_updateTime();
    3d88:	0e 94 45 24 	call	0x488a	; 0x488a <DashBoard_updateTime>

}
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	08 95       	ret

00003d92 <Hanndle_GrearBox_D_State>:


static void Hanndle_GrearBox_D_State(void)
{
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	0f 92       	push	r0
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    3d9c:	80 91 7f 02 	lds	r24, 0x027F
       // ACCS_CatchDistance();
        /*  may be interrupt happen here so inside next function check if brake button pressed and make disable for ACCS    */
       // ACCS_DicisionTake();
        
    }
}
    3da0:	0f 90       	pop	r0
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <Hanndle_GrearBox_N_State>:



static void Hanndle_GrearBox_N_State(void)
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == N_GearBox)
    3db0:	80 91 7e 02 	lds	r24, 0x027E
    3db4:	88 23       	and	r24, r24
    3db6:	51 f4       	brne	.+20     	; 0x3dcc <Hanndle_GrearBox_N_State+0x24>
    {
        if(CCS_Currnet_state == CCS_Enable)
    3db8:	80 91 7f 02 	lds	r24, 0x027F
    3dbc:	81 30       	cpi	r24, 0x01	; 1
    3dbe:	31 f4       	brne	.+12     	; 0x3dcc <Hanndle_GrearBox_N_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    3dc0:	10 92 7f 02 	sts	0x027F, r1
            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    3dc4:	80 91 7f 02 	lds	r24, 0x027F
    3dc8:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
           // DashBoard_DistanceHide_small();

        }
    }
   
}
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	08 95       	ret

00003dd2 <Hanndle_GrearBox_R_State>:


static void Hanndle_GrearBox_R_State(void)
{
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == R_GearBox)
    3dda:	80 91 7e 02 	lds	r24, 0x027E
    3dde:	82 30       	cpi	r24, 0x02	; 2
    3de0:	f1 f4       	brne	.+60     	; 0x3e1e <Hanndle_GrearBox_R_State+0x4c>
    {
        /*  Turn off led that work in Adaptive cruise control  as may make switch by gearBox so I need to handle this   */
        //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
        if(CCS_Currnet_state == CCS_Enable)
    3de2:	80 91 7f 02 	lds	r24, 0x027F
    3de6:	81 30       	cpi	r24, 0x01	; 1
    3de8:	31 f4       	brne	.+12     	; 0x3df6 <Hanndle_GrearBox_R_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    3dea:	10 92 7f 02 	sts	0x027F, r1

            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    3dee:	80 91 7f 02 	lds	r24, 0x027F
    3df2:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
            
            //DashBoard_DistanceHide();
            //DashBoard_DistanceHide_small();
        }

        if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    3df6:	80 91 82 02 	lds	r24, 0x0282
    3dfa:	81 30       	cpi	r24, 0x01	; 1
    3dfc:	31 f4       	brne	.+12     	; 0x3e0a <Hanndle_GrearBox_R_State+0x38>
        {
            DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    3dfe:	10 92 82 02 	sts	0x0282, r1
            /*  Update in LCD */
            DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    3e02:	80 91 82 02 	lds	r24, 0x0282
    3e06:	0e 94 e6 20 	call	0x41cc	; 0x41cc <DahBoard_Update_DrivingMonetoring_State>

        }

        /*  If it was Speed Limiter enabled should disabled and update in LCD*/
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    3e0a:	80 91 80 02 	lds	r24, 0x0280
    3e0e:	81 30       	cpi	r24, 0x01	; 1
    3e10:	31 f4       	brne	.+12     	; 0x3e1e <Hanndle_GrearBox_R_State+0x4c>
        {
            /*  Disable BA Sysystem */
            SpeedLimit_Current__State = SpeedLimit_Disable ;
    3e12:	10 92 80 02 	sts	0x0280, r1
            
            /*  Update LCD with new change*/
            DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    3e16:	80 91 80 02 	lds	r24, 0x0280
    3e1a:	0e 94 40 20 	call	0x4080	; 0x4080 <DashBoard_Update_SpeedLimiter_State>
        }

    }
}
    3e1e:	cf 91       	pop	r28
    3e20:	df 91       	pop	r29
    3e22:	08 95       	ret

00003e24 <App_Init>:




void App_Init(void)
{
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    /*	Enable Global Interrupt  */
	sei();
    3e2c:	78 94       	sei

    /*  Intialize LCD   */
    LCD_init();
    3e2e:	0e 94 42 12 	call	0x2484	; 0x2484 <LCD_init>

    /*  Initalize New custom character */
    LCD_GenerateCharacterCGRAM(LCD_Page_Not_Selected,POS_LCD_Page_Not_Selected);
    3e32:	83 e1       	ldi	r24, 0x13	; 19
    3e34:	92 e0       	ldi	r25, 0x02	; 2
    3e36:	60 e0       	ldi	r22, 0x00	; 0
    3e38:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Page_Selected,POS_LCD_Page_Selected);
    3e3c:	8b e1       	ldi	r24, 0x1B	; 27
    3e3e:	92 e0       	ldi	r25, 0x02	; 2
    3e40:	61 e0       	ldi	r22, 0x01	; 1
    3e42:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Right_ICON,POS_LCD_Right_ICON);
    3e46:	83 e2       	ldi	r24, 0x23	; 35
    3e48:	92 e0       	ldi	r25, 0x02	; 2
    3e4a:	62 e0       	ldi	r22, 0x02	; 2
    3e4c:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_False_ICON,POS_LCD_False_ICON);
    3e50:	8b e2       	ldi	r24, 0x2B	; 43
    3e52:	92 e0       	ldi	r25, 0x02	; 2
    3e54:	63 e0       	ldi	r22, 0x03	; 3
    3e56:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Mute_ICON,POS_LCD_Mute_ICON);
    3e5a:	83 e3       	ldi	r24, 0x33	; 51
    3e5c:	92 e0       	ldi	r25, 0x02	; 2
    3e5e:	64 e0       	ldi	r22, 0x04	; 4
    3e60:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Skull_ICON,POS_LCD_Skull_ICON);
    3e64:	8b e3       	ldi	r24, 0x3B	; 59
    3e66:	92 e0       	ldi	r25, 0x02	; 2
    3e68:	65 e0       	ldi	r22, 0x05	; 5
    3e6a:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Alarm_ICON,POS_LCD_Alarm_ICON);
    3e6e:	83 e4       	ldi	r24, 0x43	; 67
    3e70:	92 e0       	ldi	r25, 0x02	; 2
    3e72:	66 e0       	ldi	r22, 0x06	; 6
    3e74:	0e 94 ce 1c 	call	0x399c	; 0x399c <LCD_GenerateCharacterCGRAM>

    /*  Initialize Buzzer */
    Buzzer_Init(Buzzer_PORT,Buzzer_PIN);
    3e78:	82 e0       	ldi	r24, 0x02	; 2
    3e7a:	66 e0       	ldi	r22, 0x06	; 6
    3e7c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <Buzzer_Init>


    /*  Initialize Braking Button with EXT_INT 1    */
    INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    3e80:	82 e0       	ldi	r24, 0x02	; 2
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	0e 94 26 10 	call	0x204c	; 0x204c <INT1_init>
    /*  Set call back function  */
    INT1_SetCallBack(Braking_Button_Handling);
    3e88:	81 ed       	ldi	r24, 0xD1	; 209
    3e8a:	93 e2       	ldi	r25, 0x23	; 35
    3e8c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <INT1_SetCallBack>

    /*  Initialize LEDS(Red,Yellow) all os them connected positive logic */

    LED_Init(Red_LED_PORT,Red_LED_PIN);
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	67 e0       	ldi	r22, 0x07	; 7
    3e94:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LED_Init>
    LED_Init(Yellow_LED_PORT,Yellow_LED_PIN);
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	66 e0       	ldi	r22, 0x06	; 6
    3e9c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LED_Init>

    /*  Initailize Relay Pin  */
    GPIO_SetPinDirection(Relay_PORT,Relay_PIN,OUTPUT_PIN);
    3ea0:	82 e0       	ldi	r24, 0x02	; 2
    3ea2:	67 e0       	ldi	r22, 0x07	; 7
    3ea4:	42 e0       	ldi	r20, 0x02	; 2
    3ea6:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>

    /*  Initialize pins that control direction for DC motor  */
    GPIO_SetPinDirection(DC_RIR_1_PORT,DC_RIR_1_PIN,OUTPUT_PIN);
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	65 e0       	ldi	r22, 0x05	; 5
    3eae:	42 e0       	ldi	r20, 0x02	; 2
    3eb0:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>
    GPIO_SetPinDirection(DC_RIR_2_PORT,DC_RIR_2_PIN,OUTPUT_PIN);
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	66 e0       	ldi	r22, 0x06	; 6
    3eb8:	42 e0       	ldi	r20, 0x02	; 2
    3eba:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_SetPinDirection>


    /*  Turn Of all of this led  */
    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN, LED_OFF);
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	67 e0       	ldi	r22, 0x07	; 7
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN, LED_OFF);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	66 e0       	ldi	r22, 0x06	; 6
    3ecc:	40 e0       	ldi	r20, 0x00	; 0
    3ece:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>

    /*  initialize Timer0   */
    Timer0_Init();
    3ed2:	0e 94 99 08 	call	0x1132	; 0x1132 <Timer0_Init>
    

    /*  Set callback function that will called when Timeout happen to turn of buzzer and handle anything another    */
    // Timer0_SetCallBack(Buzzer_timeOutOff);
    Timer0_SetCallBack(TImer0_OVF_Handling_Fun);
    3ed6:	8a eb       	ldi	r24, 0xBA	; 186
    3ed8:	96 e2       	ldi	r25, 0x26	; 38
    3eda:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Timer0_SetCallBack>
    
    /*  Enable Overflow Interrupt  */
    Timer0_Enable_OVR_Flow_Interrupt();
    3ede:	0e 94 38 09 	call	0x1270	; 0x1270 <Timer0_Enable_OVR_Flow_Interrupt>
    // Timer1_Init();

    // /*  Set callback for finction that will hanle DM and Time */
    // Timer1_SetCallBack(App_TimeOut_handle_DM_Time);

    Timer1_ProvideClock();
    3ee2:	0e 94 1d 08 	call	0x103a	; 0x103a <Timer1_ProvideClock>

    /*  Initialize ADC to be used by Potentiometer to accelerate  */
    ADC_Init();
    3ee6:	0e 94 c3 10 	call	0x2186	; 0x2186 <ADC_Init>

    /*  Intialize Potentiometer */
    POT_Init(ADC_Channel_0);
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	0e 94 c5 11 	call	0x238a	; 0x238a <POT_Init>

    /*  Initailize Keypad  */
    Keypad_init();
    3ef0:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <Keypad_init>

    /*  Intialize Bash Board for Car*/
    DashBoard_Init();
    3ef4:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <DashBoard_Init>
    /*✍️LCD_SMALL_LARGE*/
    //DashBoard_Init_small();
}
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	08 95       	ret

00003efe <DashBoard_Init>:


static void DashBoard_Init(void)
{
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    cli();
    3f06:	f8 94       	cli
    LCD_MoveCursor(0,0);
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"DM Status:");
    3f10:	80 e6       	ldi	r24, 0x60	; 96
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    /*  call function that will handle status for DM  */
    DashBoard_DrivingMonetoring_Status_update();
    3f18:	0e 94 00 21 	call	0x4200	; 0x4200 <DashBoard_DrivingMonetoring_Status_update>

    /*  Display GearBox Current state  */
    LCD_MoveCursor(0,14);
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	6e e0       	ldi	r22, 0x0E	; 14
    3f20:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"GB : N");
    3f24:	8b e6       	ldi	r24, 0x6B	; 107
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>

    /*  Display speed */
    LCD_MoveCursor(1,11);
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	6b e0       	ldi	r22, 0x0B	; 11
    3f30:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"SP:"); 
    3f34:	82 e7       	ldi	r24, 0x72	; 114
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    /*  Call function that catch current speed to dispaly  */
    App_CarSpeedUpdate();
    3f3c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <App_CarSpeedUpdate>

    /*  Display state of Adaptive Cruise control  */
    LCD_MoveCursor(2,0);
    3f40:	82 e0       	ldi	r24, 0x02	; 2
    3f42:	60 e0       	ldi	r22, 0x00	; 0
    3f44:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"CC:");
    3f48:	86 e7       	ldi	r24, 0x76	; 118
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f50:	83 e0       	ldi	r24, 0x03	; 3
    3f52:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" BA:");
    3f56:	8a e7       	ldi	r24, 0x7A	; 122
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" SL:");
    3f64:	8f e7       	ldi	r24, 0x7F	; 127
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f6c:	83 e0       	ldi	r24, 0x03	; 3
    3f6e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" DM:");
    3f72:	84 e8       	ldi	r24, 0x84	; 132
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f7a:	83 e0       	ldi	r24, 0x03	; 3
    3f7c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>

    /*  call function that Display pages and @ first when start program I will be in Page 2 */
    APP_DashBoardPage_update();
    3f80:	0e 94 2d 21 	call	0x425a	; 0x425a <APP_DashBoardPage_update>
    sei();
    3f84:	78 94       	sei
}
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <DashBoard_Update_GearBox_state>:



static void DashBoard_Update_GearBox_state(uint8 GearBox_state)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	29 97       	sbiw	r28, 0x09	; 9
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	8c 83       	std	Y+4, r24	; 0x04
    cli();
    3fa2:	f8 94       	cli
    /*  Array carry All Characters For GearBox as make display easier using index*/
    uint8 GearBox_Characyer [] = {'N','D','R'};
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	01 96       	adiw	r24, 0x01	; 1
    3fa8:	9e 83       	std	Y+6, r25	; 0x06
    3faa:	8d 83       	std	Y+5, r24	; 0x05
    3fac:	ec e5       	ldi	r30, 0x5C	; 92
    3fae:	f2 e0       	ldi	r31, 0x02	; 2
    3fb0:	f8 87       	std	Y+8, r31	; 0x08
    3fb2:	ef 83       	std	Y+7, r30	; 0x07
    3fb4:	f3 e0       	ldi	r31, 0x03	; 3
    3fb6:	f9 87       	std	Y+9, r31	; 0x09
    3fb8:	ef 81       	ldd	r30, Y+7	; 0x07
    3fba:	f8 85       	ldd	r31, Y+8	; 0x08
    3fbc:	00 80       	ld	r0, Z
    3fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    3fc0:	98 85       	ldd	r25, Y+8	; 0x08
    3fc2:	01 96       	adiw	r24, 0x01	; 1
    3fc4:	98 87       	std	Y+8, r25	; 0x08
    3fc6:	8f 83       	std	Y+7, r24	; 0x07
    3fc8:	ed 81       	ldd	r30, Y+5	; 0x05
    3fca:	fe 81       	ldd	r31, Y+6	; 0x06
    3fcc:	00 82       	st	Z, r0
    3fce:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd2:	01 96       	adiw	r24, 0x01	; 1
    3fd4:	9e 83       	std	Y+6, r25	; 0x06
    3fd6:	8d 83       	std	Y+5, r24	; 0x05
    3fd8:	99 85       	ldd	r25, Y+9	; 0x09
    3fda:	91 50       	subi	r25, 0x01	; 1
    3fdc:	99 87       	std	Y+9, r25	; 0x09
    3fde:	e9 85       	ldd	r30, Y+9	; 0x09
    3fe0:	ee 23       	and	r30, r30
    3fe2:	51 f7       	brne	.-44     	; 0x3fb8 <DashBoard_Update_GearBox_state+0x2c>
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(0,19);
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	63 e1       	ldi	r22, 0x13	; 19
    3fe8:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    /*  Edit its state with new state given to function*/
    LCD_DisplayCharacter(GearBox_Characyer[GearBox_state]);
    3fec:	8c 81       	ldd	r24, Y+4	; 0x04
    3fee:	28 2f       	mov	r18, r24
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	01 96       	adiw	r24, 0x01	; 1
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	e2 0f       	add	r30, r18
    3ffa:	f3 1f       	adc	r31, r19
    3ffc:	80 81       	ld	r24, Z
    3ffe:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    sei();
    4002:	78 94       	sei
}
    4004:	29 96       	adiw	r28, 0x09	; 9
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	08 95       	ret

00004016 <DashBoard_Update_CCS_State>:

static void DashBoard_Update_CCS_State(uint8 ACCS_state)
{
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	0f 92       	push	r0
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	89 83       	std	Y+1, r24	; 0x01
    cli();
    4022:	f8 94       	cli
        
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,3);
    4024:	82 e0       	ldi	r24, 0x02	; 2
    4026:	63 e0       	ldi	r22, 0x03	; 3
    4028:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        //LCD_MoveCursor(0,4);

        /*  Edit its state with new state given to function*/
        if(CCS_Currnet_state == CCS_Enable)
    402c:	80 91 7f 02 	lds	r24, 0x027F
    4030:	81 30       	cpi	r24, 0x01	; 1
    4032:	21 f4       	brne	.+8      	; 0x403c <DashBoard_Update_CCS_State+0x26>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    4034:	82 e0       	ldi	r24, 0x02	; 2
    4036:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    403a:	03 c0       	rjmp	.+6      	; 0x4042 <DashBoard_Update_CCS_State+0x2c>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    403c:	83 e0       	ldi	r24, 0x03	; 3
    403e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>

    sei();
    4042:	78 94       	sei
}
    4044:	0f 90       	pop	r0
    4046:	cf 91       	pop	r28
    4048:	df 91       	pop	r29
    404a:	08 95       	ret

0000404c <DashBoard_Update_BrakingAssist_State>:

static void DashBoard_Update_BrakingAssist_State(uint8 BA_state)
{
    404c:	df 93       	push	r29
    404e:	cf 93       	push	r28
    4050:	0f 92       	push	r0
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	89 83       	std	Y+1, r24	; 0x01
    cli();
    4058:	f8 94       	cli
    /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,8);
    405a:	82 e0       	ldi	r24, 0x02	; 2
    405c:	68 e0       	ldi	r22, 0x08	; 8
    405e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
            /*  Edit its state with new state given to function*/
        if(BA_state == BrakingAssist_Enable)
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	81 30       	cpi	r24, 0x01	; 1
    4066:	21 f4       	brne	.+8      	; 0x4070 <DashBoard_Update_BrakingAssist_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    406e:	03 c0       	rjmp	.+6      	; 0x4076 <DashBoard_Update_BrakingAssist_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    4070:	83 e0       	ldi	r24, 0x03	; 3
    4072:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    sei();
    4076:	78 94       	sei
}
    4078:	0f 90       	pop	r0
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <DashBoard_Update_SpeedLimiter_State>:


static void DashBoard_Update_SpeedLimiter_State(uint8 SL_state)
{
    4080:	df 93       	push	r29
    4082:	cf 93       	push	r28
    4084:	0f 92       	push	r0
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	89 83       	std	Y+1, r24	; 0x01
    cli();
    408c:	f8 94       	cli
    /*  Should don't change state of CCS before that I in page 2 that has this feature  else will happen LCD data corruption    */
    // if(Page_Current_State == Page_2_LCD)
    // {
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,13);
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	6d e0       	ldi	r22, 0x0D	; 13
    4092:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        //LCD_MoveCursor(0,6);

        /*  Edit its state with new state given to function*/
        if(SL_state == SpeedLimit_Enable)
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	81 30       	cpi	r24, 0x01	; 1
    409a:	21 f4       	brne	.+8      	; 0x40a4 <DashBoard_Update_SpeedLimiter_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    40a2:	03 c0       	rjmp	.+6      	; 0x40aa <DashBoard_Update_SpeedLimiter_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    40a4:	83 e0       	ldi	r24, 0x03	; 3
    40a6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    // }
    sei();
    40aa:	78 94       	sei
}
    40ac:	0f 90       	pop	r0
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <DashBoard_updateSpeedLimitValue>:


static void DashBoard_updateSpeedLimitValue(void)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_3_LCD)
    40bc:	80 91 52 02 	lds	r24, 0x0252
    40c0:	82 30       	cpi	r24, 0x02	; 2
    40c2:	a1 f4       	brne	.+40     	; 0x40ec <DashBoard_updateSpeedLimitValue+0x38>
    {
        cli();
    40c4:	f8 94       	cli
        //Global_Speed_Limiter_value
        LCD_MoveCursor(0,7);
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	67 e0       	ldi	r22, 0x07	; 7
    40ca:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        LCD_intToString(Global_Speed_Limiter_value);
    40ce:	80 91 54 02 	lds	r24, 0x0254
    40d2:	88 2f       	mov	r24, r24
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	a0 e0       	ldi	r26, 0x00	; 0
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
        LCD_DisplayString("KMH ");
    40e2:	89 e8       	ldi	r24, 0x89	; 137
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        sei();
    40ea:	78 94       	sei
    }
}
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <App_GetDiffCarSpeed_and_limit>:


static void App_GetDiffCarSpeed_and_limit(void)
{
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    if(Car_Speed > Global_Speed_Limiter_value)
    40fa:	80 91 54 02 	lds	r24, 0x0254
    40fe:	28 2f       	mov	r18, r24
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	80 91 83 02 	lds	r24, 0x0283
    4106:	90 91 84 02 	lds	r25, 0x0284
    410a:	28 17       	cp	r18, r24
    410c:	39 07       	cpc	r19, r25
    410e:	1c f4       	brge	.+6      	; 0x4116 <App_GetDiffCarSpeed_and_limit+0x24>
    {
        /*  Update Status  */
        Speed_limit_Current_Status = Speed_Limit_Failed ;
    4110:	10 92 89 02 	sts	0x0289, r1
    4114:	0e c0       	rjmp	.+28     	; 0x4132 <App_GetDiffCarSpeed_and_limit+0x40>
    }
    else if(Car_Speed <= Global_Speed_Limiter_value)
    4116:	80 91 54 02 	lds	r24, 0x0254
    411a:	28 2f       	mov	r18, r24
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	80 91 83 02 	lds	r24, 0x0283
    4122:	90 91 84 02 	lds	r25, 0x0284
    4126:	28 17       	cp	r18, r24
    4128:	39 07       	cpc	r19, r25
    412a:	1c f0       	brlt	.+6      	; 0x4132 <App_GetDiffCarSpeed_and_limit+0x40>
    {
        Speed_limit_Current_Status = Speed_Limit_Meet ;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	80 93 89 02 	sts	0x0289, r24
    }
    if(Page_Current_State == Page_3_LCD)
    4132:	80 91 52 02 	lds	r24, 0x0252
    4136:	82 30       	cpi	r24, 0x02	; 2
    4138:	19 f4       	brne	.+6      	; 0x4140 <App_GetDiffCarSpeed_and_limit+0x4e>
    {
        /*  Make update in LCD  and give sound notify  */
        DashBoard_SpeedLimit_status_update();
    413a:	0e 94 bd 20 	call	0x417a	; 0x417a <DashBoard_SpeedLimit_status_update>
    413e:	1a c0       	rjmp	.+52     	; 0x4174 <App_GetDiffCarSpeed_and_limit+0x82>
    }
    else /* give sound notify  */
    {
        if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Meet))
    4140:	80 91 80 02 	lds	r24, 0x0280
    4144:	81 30       	cpi	r24, 0x01	; 1
    4146:	51 f4       	brne	.+20     	; 0x415c <App_GetDiffCarSpeed_and_limit+0x6a>
    4148:	80 91 89 02 	lds	r24, 0x0289
    414c:	81 30       	cpi	r24, 0x01	; 1
    414e:	31 f4       	brne	.+12     	; 0x415c <App_GetDiffCarSpeed_and_limit+0x6a>
        {
            GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	67 e0       	ldi	r22, 0x07	; 7
    4154:	40 e0       	ldi	r20, 0x00	; 0
    4156:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    415a:	0c c0       	rjmp	.+24     	; 0x4174 <App_GetDiffCarSpeed_and_limit+0x82>
        }
        else if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Failed))
    415c:	80 91 80 02 	lds	r24, 0x0280
    4160:	81 30       	cpi	r24, 0x01	; 1
    4162:	41 f4       	brne	.+16     	; 0x4174 <App_GetDiffCarSpeed_and_limit+0x82>
    4164:	80 91 89 02 	lds	r24, 0x0289
    4168:	88 23       	and	r24, r24
    416a:	21 f4       	brne	.+8      	; 0x4174 <App_GetDiffCarSpeed_and_limit+0x82>
        {
            GPIO_TogglePin(Relay_PORT,Relay_PIN);
    416c:	82 e0       	ldi	r24, 0x02	; 2
    416e:	67 e0       	ldi	r22, 0x07	; 7
    4170:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <GPIO_TogglePin>
        }
    }
}
    4174:	cf 91       	pop	r28
    4176:	df 91       	pop	r29
    4178:	08 95       	ret

0000417a <DashBoard_SpeedLimit_status_update>:

static void DashBoard_SpeedLimit_status_update(void)
{
    417a:	df 93       	push	r29
    417c:	cf 93       	push	r28
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    // if(Page_Current_State == Page_3_LCD)
    // {
        cli();
    4182:	f8 94       	cli
        LCD_MoveCursor(1,9);
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	69 e0       	ldi	r22, 0x09	; 9
    4188:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    418c:	80 91 80 02 	lds	r24, 0x0280
    4190:	81 30       	cpi	r24, 0x01	; 1
    4192:	a9 f4       	brne	.+42     	; 0x41be <DashBoard_SpeedLimit_status_update+0x44>
        {
            if(Speed_limit_Current_Status == Speed_Limit_Meet)
    4194:	80 91 89 02 	lds	r24, 0x0289
    4198:	81 30       	cpi	r24, 0x01	; 1
    419a:	49 f4       	brne	.+18     	; 0x41ae <DashBoard_SpeedLimit_status_update+0x34>
            {
                LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    419c:	84 e0       	ldi	r24, 0x04	; 4
    419e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
                /*  stop sound of relay  */
                GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	67 e0       	ldi	r22, 0x07	; 7
    41a6:	40 e0       	ldi	r20, 0x00	; 0
    41a8:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    41ac:	0b c0       	rjmp	.+22     	; 0x41c4 <DashBoard_SpeedLimit_status_update+0x4a>
            }
            else
            {
                LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    41ae:	86 e0       	ldi	r24, 0x06	; 6
    41b0:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
                /*  Action Will taken notify user  as it sound of relay switch*/
                GPIO_TogglePin(Relay_PORT,Relay_PIN);
    41b4:	82 e0       	ldi	r24, 0x02	; 2
    41b6:	67 e0       	ldi	r22, 0x07	; 7
    41b8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <GPIO_TogglePin>
    41bc:	03 c0       	rjmp	.+6      	; 0x41c4 <DashBoard_SpeedLimit_status_update+0x4a>
            }
        }
        else 
        {
            LCD_DisplayCharacter('D'); //system disabled
    41be:	84 e4       	ldi	r24, 0x44	; 68
    41c0:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
        }
        sei();
    41c4:	78 94       	sei
    // }
}
    41c6:	cf 91       	pop	r28
    41c8:	df 91       	pop	r29
    41ca:	08 95       	ret

000041cc <DahBoard_Update_DrivingMonetoring_State>:

static void DahBoard_Update_DrivingMonetoring_State(uint8 DM_state)
{
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	0f 92       	push	r0
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    41d6:	89 83       	std	Y+1, r24	; 0x01
    cli();
    41d8:	f8 94       	cli
    /*  Go to index that display current Driving Monetoring state*/
    LCD_MoveCursor(2,18);
    41da:	82 e0       	ldi	r24, 0x02	; 2
    41dc:	62 e1       	ldi	r22, 0x12	; 18
    41de:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>

    if(DM_state == DirivingMonetoring_Enable)
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	81 30       	cpi	r24, 0x01	; 1
    41e6:	21 f4       	brne	.+8      	; 0x41f0 <DahBoard_Update_DrivingMonetoring_State+0x24>
    {
        LCD_DisplayCharacter(POS_LCD_Right_ICON);
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    41ee:	03 c0       	rjmp	.+6      	; 0x41f6 <DahBoard_Update_DrivingMonetoring_State+0x2a>
    }
    else 
    {
        LCD_DisplayCharacter(POS_LCD_False_ICON);
    41f0:	83 e0       	ldi	r24, 0x03	; 3
    41f2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    }

    sei();
    41f6:	78 94       	sei

}
    41f8:	0f 90       	pop	r0
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	08 95       	ret

00004200 <DashBoard_DrivingMonetoring_Status_update>:

static void DashBoard_DrivingMonetoring_Status_update(void)
{
    4200:	df 93       	push	r29
    4202:	cf 93       	push	r28
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    cli();
    4208:	f8 94       	cli
    // اكتب ام الفانكشن ده لما تيجي 👀👀
    LCD_MoveCursor(0,10);
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	6a e0       	ldi	r22, 0x0A	; 10
    420e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    4212:	80 91 82 02 	lds	r24, 0x0282
    4216:	81 30       	cpi	r24, 0x01	; 1
    4218:	61 f4       	brne	.+24     	; 0x4232 <DashBoard_DrivingMonetoring_Status_update+0x32>
    {
        if(DrivingMonetoring_Current_Status == DM_Meet)
    421a:	80 91 55 02 	lds	r24, 0x0255
    421e:	81 30       	cpi	r24, 0x01	; 1
    4220:	21 f4       	brne	.+8      	; 0x422a <DashBoard_DrivingMonetoring_Status_update+0x2a>
        {
            LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    4222:	84 e0       	ldi	r24, 0x04	; 4
    4224:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    4228:	07 c0       	rjmp	.+14     	; 0x4238 <DashBoard_DrivingMonetoring_Status_update+0x38>
        }
        else
        {
            LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    422a:	86 e0       	ldi	r24, 0x06	; 6
    422c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    4230:	03 c0       	rjmp	.+6      	; 0x4238 <DashBoard_DrivingMonetoring_Status_update+0x38>
        }
    }
    else
    {
        LCD_DisplayCharacter('D'); //system disabled
    4232:	84 e4       	ldi	r24, 0x44	; 68
    4234:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    }
    sei();
    4238:	78 94       	sei
}
    423a:	cf 91       	pop	r28
    423c:	df 91       	pop	r29
    423e:	08 95       	ret

00004240 <DashBoard_DrivingMonetoring_continous_Status_update>:

static void DashBoard_DrivingMonetoring_continous_Status_update(void)
{
    4240:	df 93       	push	r29
    4242:	cf 93       	push	r28
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_2_LCD)
    4248:	80 91 52 02 	lds	r24, 0x0252
    424c:	81 30       	cpi	r24, 0x01	; 1
    424e:	11 f4       	brne	.+4      	; 0x4254 <DashBoard_DrivingMonetoring_continous_Status_update+0x14>
    {
        DashBoard_DrivingMonetoring_Status_update();
    4250:	0e 94 00 21 	call	0x4200	; 0x4200 <DashBoard_DrivingMonetoring_Status_update>
    }
}
    4254:	cf 91       	pop	r28
    4256:	df 91       	pop	r29
    4258:	08 95       	ret

0000425a <APP_DashBoardPage_update>:




static void APP_DashBoardPage_update(void)
{
    425a:	df 93       	push	r29
    425c:	cf 93       	push	r28
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	65 97       	sbiw	r28, 0x15	; 21
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    
    uint8 pages_option [4][4] = { {POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected} };
    426e:	ce 01       	movw	r24, r28
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	9a 8b       	std	Y+18, r25	; 0x12
    4274:	89 8b       	std	Y+17, r24	; 0x11
    4276:	ef e5       	ldi	r30, 0x5F	; 95
    4278:	f2 e0       	ldi	r31, 0x02	; 2
    427a:	fc 8b       	std	Y+20, r31	; 0x14
    427c:	eb 8b       	std	Y+19, r30	; 0x13
    427e:	f0 e1       	ldi	r31, 0x10	; 16
    4280:	fd 8b       	std	Y+21, r31	; 0x15
    4282:	eb 89       	ldd	r30, Y+19	; 0x13
    4284:	fc 89       	ldd	r31, Y+20	; 0x14
    4286:	00 80       	ld	r0, Z
    4288:	8b 89       	ldd	r24, Y+19	; 0x13
    428a:	9c 89       	ldd	r25, Y+20	; 0x14
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	9c 8b       	std	Y+20, r25	; 0x14
    4290:	8b 8b       	std	Y+19, r24	; 0x13
    4292:	e9 89       	ldd	r30, Y+17	; 0x11
    4294:	fa 89       	ldd	r31, Y+18	; 0x12
    4296:	00 82       	st	Z, r0
    4298:	89 89       	ldd	r24, Y+17	; 0x11
    429a:	9a 89       	ldd	r25, Y+18	; 0x12
    429c:	01 96       	adiw	r24, 0x01	; 1
    429e:	9a 8b       	std	Y+18, r25	; 0x12
    42a0:	89 8b       	std	Y+17, r24	; 0x11
    42a2:	9d 89       	ldd	r25, Y+21	; 0x15
    42a4:	91 50       	subi	r25, 0x01	; 1
    42a6:	9d 8b       	std	Y+21, r25	; 0x15
    42a8:	ed 89       	ldd	r30, Y+21	; 0x15
    42aa:	ee 23       	and	r30, r30
    42ac:	51 f7       	brne	.-44     	; 0x4282 <APP_DashBoardPage_update+0x28>
    cli();
    42ae:	f8 94       	cli
    LCD_MoveCursor(3,8);
    42b0:	83 e0       	ldi	r24, 0x03	; 3
    42b2:	68 e0       	ldi	r22, 0x08	; 8
    42b4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    /*  Display indicator for current page  */
    LCD_DisplayCharacter(pages_option[Page_Current_State][0]);
    42b8:	80 91 52 02 	lds	r24, 0x0252
    42bc:	99 27       	eor	r25, r25
    42be:	87 fd       	sbrc	r24, 7
    42c0:	90 95       	com	r25
    42c2:	9c 01       	movw	r18, r24
    42c4:	22 0f       	add	r18, r18
    42c6:	33 1f       	adc	r19, r19
    42c8:	22 0f       	add	r18, r18
    42ca:	33 1f       	adc	r19, r19
    42cc:	ce 01       	movw	r24, r28
    42ce:	01 96       	adiw	r24, 0x01	; 1
    42d0:	fc 01       	movw	r30, r24
    42d2:	e2 0f       	add	r30, r18
    42d4:	f3 1f       	adc	r31, r19
    42d6:	80 81       	ld	r24, Z
    42d8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][1]);
    42dc:	80 91 52 02 	lds	r24, 0x0252
    42e0:	99 27       	eor	r25, r25
    42e2:	87 fd       	sbrc	r24, 7
    42e4:	90 95       	com	r25
    42e6:	9c 01       	movw	r18, r24
    42e8:	22 0f       	add	r18, r18
    42ea:	33 1f       	adc	r19, r19
    42ec:	22 0f       	add	r18, r18
    42ee:	33 1f       	adc	r19, r19
    42f0:	ce 01       	movw	r24, r28
    42f2:	01 96       	adiw	r24, 0x01	; 1
    42f4:	82 0f       	add	r24, r18
    42f6:	93 1f       	adc	r25, r19
    42f8:	fc 01       	movw	r30, r24
    42fa:	31 96       	adiw	r30, 0x01	; 1
    42fc:	80 81       	ld	r24, Z
    42fe:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][2]);
    4302:	80 91 52 02 	lds	r24, 0x0252
    4306:	99 27       	eor	r25, r25
    4308:	87 fd       	sbrc	r24, 7
    430a:	90 95       	com	r25
    430c:	88 0f       	add	r24, r24
    430e:	99 1f       	adc	r25, r25
    4310:	01 96       	adiw	r24, 0x01	; 1
    4312:	9c 01       	movw	r18, r24
    4314:	22 0f       	add	r18, r18
    4316:	33 1f       	adc	r19, r19
    4318:	ce 01       	movw	r24, r28
    431a:	01 96       	adiw	r24, 0x01	; 1
    431c:	fc 01       	movw	r30, r24
    431e:	e2 0f       	add	r30, r18
    4320:	f3 1f       	adc	r31, r19
    4322:	80 81       	ld	r24, Z
    4324:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][3]);
    4328:	80 91 52 02 	lds	r24, 0x0252
    432c:	99 27       	eor	r25, r25
    432e:	87 fd       	sbrc	r24, 7
    4330:	90 95       	com	r25
    4332:	9c 01       	movw	r18, r24
    4334:	22 0f       	add	r18, r18
    4336:	33 1f       	adc	r19, r19
    4338:	22 0f       	add	r18, r18
    433a:	33 1f       	adc	r19, r19
    433c:	ce 01       	movw	r24, r28
    433e:	01 96       	adiw	r24, 0x01	; 1
    4340:	82 0f       	add	r24, r18
    4342:	93 1f       	adc	r25, r19
    4344:	fc 01       	movw	r30, r24
    4346:	33 96       	adiw	r30, 0x03	; 3
    4348:	80 81       	ld	r24, Z
    434a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    sei();
    434e:	78 94       	sei
}
    4350:	65 96       	adiw	r28, 0x15	; 21
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	cf 91       	pop	r28
    435e:	df 91       	pop	r29
    4360:	08 95       	ret

00004362 <APP_DashBoard_SwitchPages>:




static void APP_DashBoard_SwitchPages(void)
{
    4362:	df 93       	push	r29
    4364:	cf 93       	push	r28
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
    cli();
    436a:	f8 94       	cli
    LCD_MoveCursor(0,0);
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	60 e0       	ldi	r22, 0x00	; 0
    4370:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString("              ");
    4374:	8e e8       	ldi	r24, 0x8E	; 142
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    LCD_MoveCursor(1,0);
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    LCD_DisplayString("           ");
    4384:	8d e9       	ldi	r24, 0x9D	; 157
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    /*  Main window that I start with  */
    if(Page_Current_State == Page_2_LCD)
    438c:	80 91 52 02 	lds	r24, 0x0252
    4390:	81 30       	cpi	r24, 0x01	; 1
    4392:	59 f4       	brne	.+22     	; 0x43aa <APP_DashBoard_SwitchPages+0x48>
    {
        /*  display data for Driving monetoring */
        LCD_MoveCursor(0,0);
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	60 e0       	ldi	r22, 0x00	; 0
    4398:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        LCD_DisplayString((const uint8 * )"DM Status:");
    439c:	80 e6       	ldi	r24, 0x60	; 96
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        /*  Call function that will handle status for DM */
        DashBoard_DrivingMonetoring_Status_update();
    43a4:	0e 94 00 21 	call	0x4200	; 0x4200 <DashBoard_DrivingMonetoring_Status_update>
    43a8:	55 c0       	rjmp	.+170    	; 0x4454 <APP_DashBoard_SwitchPages+0xf2>
    }
    else if(Page_Current_State == Page_1_LCD)
    43aa:	80 91 52 02 	lds	r24, 0x0252
    43ae:	88 23       	and	r24, r24
    43b0:	f1 f4       	brne	.+60     	; 0x43ee <APP_DashBoard_SwitchPages+0x8c>
    {
        if(BrakingAssist_Current_State == BrakingAssist_Enable)
    43b2:	80 91 81 02 	lds	r24, 0x0281
    43b6:	81 30       	cpi	r24, 0x01	; 1
    43b8:	89 f4       	brne	.+34     	; 0x43dc <APP_DashBoard_SwitchPages+0x7a>
        {
            LCD_MoveCursor(0,0);
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
            LCD_DisplayString("DIS : ");
    43c2:	89 ea       	ldi	r24, 0xA9	; 169
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
            LCD_MoveCursor(1,0);
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	60 e0       	ldi	r22, 0x00	; 0
    43ce:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
            LCD_DisplayString("Status : ");
    43d2:	80 eb       	ldi	r24, 0xB0	; 176
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    43da:	3c c0       	rjmp	.+120    	; 0x4454 <APP_DashBoard_SwitchPages+0xf2>
        }
        else 
        {
            LCD_MoveCursor(0,0);
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
            LCD_DisplayString("Disabled");
    43e4:	8a eb       	ldi	r24, 0xBA	; 186
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    43ec:	33 c0       	rjmp	.+102    	; 0x4454 <APP_DashBoard_SwitchPages+0xf2>
        }

    }
    else if(Page_Current_State == Page_3_LCD)
    43ee:	80 91 52 02 	lds	r24, 0x0252
    43f2:	82 30       	cpi	r24, 0x02	; 2
    43f4:	09 f5       	brne	.+66     	; 0x4438 <APP_DashBoard_SwitchPages+0xd6>
    {
        LCD_MoveCursor(0,0);
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	60 e0       	ldi	r22, 0x00	; 0
    43fa:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        LCD_DisplayString("SLIM : ");
    43fe:	83 ec       	ldi	r24, 0xC3	; 195
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        LCD_intToString(Global_Speed_Limiter_value);
    4406:	80 91 54 02 	lds	r24, 0x0254
    440a:	88 2f       	mov	r24, r24
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	a0 e0       	ldi	r26, 0x00	; 0
    4410:	b0 e0       	ldi	r27, 0x00	; 0
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
        LCD_DisplayString("KMH ");
    441a:	89 e8       	ldi	r24, 0x89	; 137
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        LCD_MoveCursor(1,0);
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        LCD_DisplayString("Status : ");
    442a:	80 eb       	ldi	r24, 0xB0	; 176
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        /* update Icons of speed limit status  */
        DashBoard_SpeedLimit_status_update();
    4432:	0e 94 bd 20 	call	0x417a	; 0x417a <DashBoard_SpeedLimit_status_update>
    4436:	0e c0       	rjmp	.+28     	; 0x4454 <APP_DashBoard_SwitchPages+0xf2>
    }
    else if(Page_Current_State == Page_4_LCD)
    4438:	80 91 52 02 	lds	r24, 0x0252
    443c:	83 30       	cpi	r24, 0x03	; 3
    443e:	51 f4       	brne	.+20     	; 0x4454 <APP_DashBoard_SwitchPages+0xf2>
    {
        LCD_MoveCursor(0,0);
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	60 e0       	ldi	r22, 0x00	; 0
    4444:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        LCD_DisplayString("D=18/3/2024");
    4448:	8b ec       	ldi	r24, 0xCB	; 203
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        DashBoard_updateTime();
    4450:	0e 94 45 24 	call	0x488a	; 0x488a <DashBoard_updateTime>

        

    }
    sei();
    4454:	78 94       	sei
}
    4456:	cf 91       	pop	r28
    4458:	df 91       	pop	r29
    445a:	08 95       	ret

0000445c <APP_KeypadUpdate>:


static void APP_KeypadUpdate(void)
{
    445c:	df 93       	push	r29
    445e:	cf 93       	push	r28
    4460:	0f 92       	push	r0
    4462:	cd b7       	in	r28, 0x3d	; 61
    4464:	de b7       	in	r29, 0x3e	; 62

    static uint8 BrakingAssit_IsStillPressed = NO_Condition ;

    static uint8 DrivingMonetoring_IsStillPressed = NO_Condition ;

    volatile sint8 local_currentValue_keypad = Keypad_GetPressedKey();/* Take last keypad pressed button */
    4466:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <Keypad_GetPressedKey>
    446a:	89 83       	std	Y+1, r24	; 0x01


/* (Button 1️⃣) Handle GearBox Button   */

    /*  👀👀👀👀👀👀GearBox switch only happen when press on gearbox and brake button in same time  */
    if( (local_currentValue_keypad == Keypad_GearBox_pressed_value) && (Global_Braking_BTN_State == BTN_Pressed_State) )
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	82 30       	cpi	r24, 0x02	; 2
    4470:	29 f5       	brne	.+74     	; 0x44bc <APP_KeypadUpdate+0x60>
    4472:	80 91 53 02 	lds	r24, 0x0253
    4476:	88 23       	and	r24, r24
    4478:	09 f5       	brne	.+66     	; 0x44bc <APP_KeypadUpdate+0x60>
    // if((local_currentValue_keypad == Keypad_GearBox_pressed_value))
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ;//old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    447a:	10 92 92 02 	sts	0x0292, r1
    447e:	10 92 91 02 	sts	0x0291, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	80 93 55 02 	sts	0x0255, r24

        /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
        if(GearBox_IsStillPressed == NO_Condition)
    4488:	80 91 9f 02 	lds	r24, 0x029F
    448c:	88 23       	and	r24, r24
    448e:	c1 f4       	brne	.+48     	; 0x44c0 <APP_KeypadUpdate+0x64>
        {
            GearBox_IsStillPressed = YES_Condition ;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	80 93 9f 02 	sts	0x029F, r24
            /* turn buzzer on and give timer 0 clock and set timeout    */
            // Buzzer_NotifySound();
            Buzzer_GiveSound = YES_Condition; 
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	80 93 93 02 	sts	0x0293, r24

            /*  Go to next state for gearbox*/
            GearBox_Current_State ++ ;
    449c:	80 91 7e 02 	lds	r24, 0x027E
    44a0:	8f 5f       	subi	r24, 0xFF	; 255
    44a2:	80 93 7e 02 	sts	0x027E, r24
            if(GearBox_Current_State == GearBox_Return_to_N  )
    44a6:	80 91 7e 02 	lds	r24, 0x027E
    44aa:	83 30       	cpi	r24, 0x03	; 3
    44ac:	11 f4       	brne	.+4      	; 0x44b2 <APP_KeypadUpdate+0x56>
            {
                GearBox_Current_State = N_GearBox ;
    44ae:	10 92 7e 02 	sts	0x027E, r1
                
            }

            /*  call function to update gearbox state in Dashboard*/
            DashBoard_Update_GearBox_state(GearBox_Current_State);
    44b2:	80 91 7e 02 	lds	r24, 0x027E
    44b6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <DashBoard_Update_GearBox_state>
    44ba:	02 c0       	rjmp	.+4      	; 0x44c0 <APP_KeypadUpdate+0x64>
        
    }
    else
    {
        /*  Enter this state when Button released*/
        GearBox_IsStillPressed = NO_Condition ;
    44bc:	10 92 9f 02 	sts	0x029F, r1
    }

    /*  There buttons shouldn't take any action except on D mode like(Cruise Control , Braking Assist and Speed limiter)*/
    if(GearBox_Current_State == D_GearBox)
    44c0:	80 91 7e 02 	lds	r24, 0x027E
    44c4:	81 30       	cpi	r24, 0x01	; 1
    44c6:	09 f0       	breq	.+2      	; 0x44ca <APP_KeypadUpdate+0x6e>
    44c8:	b5 c0       	rjmp	.+362    	; 0x4634 <APP_KeypadUpdate+0x1d8>
    {
/* (Button 2️⃣) Handle Cruise Control system   */
        if(local_currentValue_keypad == Keypad_CCS_pressed_value) 
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	88 23       	and	r24, r24
    44ce:	21 f5       	brne	.+72     	; 0x4518 <APP_KeypadUpdate+0xbc>
        {
            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ;//old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    44d0:	10 92 92 02 	sts	0x0292, r1
    44d4:	10 92 91 02 	sts	0x0291, r1

            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	80 93 55 02 	sts	0x0255, r24

            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(CCS_IsStillPressed == NO_Condition)
    44de:	80 91 9e 02 	lds	r24, 0x029E
    44e2:	88 23       	and	r24, r24
    44e4:	d9 f4       	brne	.+54     	; 0x451c <APP_KeypadUpdate+0xc0>
            {
                CCS_IsStillPressed = YES_Condition ;
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	80 93 9e 02 	sts	0x029E, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                // Buzzer_NotifySound();
                Buzzer_GiveSound = YES_Condition; 
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	80 93 93 02 	sts	0x0293, r24

                if(CCS_Currnet_state == CCS_Disable ) 
    44f2:	80 91 7f 02 	lds	r24, 0x027F
    44f6:	88 23       	and	r24, r24
    44f8:	41 f4       	brne	.+16     	; 0x450a <APP_KeypadUpdate+0xae>
                {
                    
                    /*  Update ACCS state with new value (Enabled)*/
                    CCS_Currnet_state = CCS_Enable;
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	80 93 7f 02 	sts	0x027F, r24
                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    4500:	80 91 7f 02 	lds	r24, 0x027F
    4504:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
    4508:	09 c0       	rjmp	.+18     	; 0x451c <APP_KeypadUpdate+0xc0>
                    //DashBoard_DistanceShow();
                    //DashBoard_DistanceShow_small();
                }
                else
                {
                    CCS_Currnet_state = CCS_Disable;
    450a:	10 92 7f 02 	sts	0x027F, r1
                    /*  Turn off led that work in Adaptive cruise control  as may be  in not safe area and  turn off Adaptive cruise control   */
                    //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
                    /*  🚩🚩🚩🚩🚩🚩🙆‍♂️🙆‍♂️🙆‍♂️ i think that I need to put diable and enable to interrupt as I may be ACCS enabled and when I disable and press braiking at same time */
                    //LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);

                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    450e:	80 91 7f 02 	lds	r24, 0x027F
    4512:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
    4516:	02 c0       	rjmp	.+4      	; 0x451c <APP_KeypadUpdate+0xc0>
            
        }
        else
        {
            /*  Enter this state when Button released*/
            CCS_IsStillPressed = NO_Condition ;
    4518:	10 92 9e 02 	sts	0x029E, r1
        }
/* (Button 3️⃣) Handle Speed Limiter system   */
        /*  Handle Speed Limiter System Button   */
        if(local_currentValue_keypad == Keypad_SpeedLimit_ON_OFF_pressed_value) 
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	88 30       	cpi	r24, 0x08	; 8
    4520:	49 f5       	brne	.+82     	; 0x4574 <APP_KeypadUpdate+0x118>
        {
            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ;//old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    4522:	10 92 92 02 	sts	0x0292, r1
    4526:	10 92 91 02 	sts	0x0291, r1

            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ; 
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	80 93 55 02 	sts	0x0255, r24


            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(SL_ON_OFFIsStillPressed == NO_Condition)
    4530:	80 91 9b 02 	lds	r24, 0x029B
    4534:	88 23       	and	r24, r24
    4536:	01 f5       	brne	.+64     	; 0x4578 <APP_KeypadUpdate+0x11c>
            {
                SL_ON_OFFIsStillPressed = YES_Condition ;
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	80 93 9b 02 	sts	0x029B, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                // Buzzer_NotifySound();
                Buzzer_GiveSound = YES_Condition; 
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	80 93 93 02 	sts	0x0293, r24

                if(SpeedLimit_Current__State == SpeedLimit_Disable)
    4544:	80 91 80 02 	lds	r24, 0x0280
    4548:	88 23       	and	r24, r24
    454a:	41 f4       	brne	.+16     	; 0x455c <APP_KeypadUpdate+0x100>
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Enable ;
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	80 93 80 02 	sts	0x0280, r24
                    /*  Call updater for Speed limiter state */
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    4552:	80 91 80 02 	lds	r24, 0x0280
    4556:	0e 94 40 20 	call	0x4080	; 0x4080 <DashBoard_Update_SpeedLimiter_State>
    455a:	0e c0       	rjmp	.+28     	; 0x4578 <APP_KeypadUpdate+0x11c>
                }
                else 
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Disable ;
    455c:	10 92 80 02 	sts	0x0280, r1
                    /*  Call updater for Speed limiter state */   
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    4560:	80 91 80 02 	lds	r24, 0x0280
    4564:	0e 94 40 20 	call	0x4080	; 0x4080 <DashBoard_Update_SpeedLimiter_State>
                    /*  stop sound of relay  as may be close this system and I also my speed higher than limit speed */
                    GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    4568:	82 e0       	ldi	r24, 0x02	; 2
    456a:	67 e0       	ldi	r22, 0x07	; 7
    456c:	40 e0       	ldi	r20, 0x00	; 0
    456e:	0e 94 35 0c 	call	0x186a	; 0x186a <GPIO_WritePin>
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <APP_KeypadUpdate+0x11c>
                }
            }  
        }
        else
        {
            SL_ON_OFFIsStillPressed = NO_Condition ;
    4574:	10 92 9b 02 	sts	0x029B, r1
        } 

/* (Button 4️⃣) Handle Braking Assist system   */
        if(local_currentValue_keypad == Keypad_BrakingAssist_pressed_value)
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	8a 32       	cpi	r24, 0x2A	; 42
    457c:	51 f5       	brne	.+84     	; 0x45d2 <APP_KeypadUpdate+0x176>
        {
            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ; //old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    457e:	10 92 92 02 	sts	0x0292, r1
    4582:	10 92 91 02 	sts	0x0291, r1
            
            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	80 93 55 02 	sts	0x0255, r24

            if(BrakingAssit_IsStillPressed == NO_Condition)
    458c:	80 91 98 02 	lds	r24, 0x0298
    4590:	88 23       	and	r24, r24
    4592:	09 f5       	brne	.+66     	; 0x45d6 <APP_KeypadUpdate+0x17a>
            {
                BrakingAssit_IsStillPressed = YES_Condition ;
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	80 93 98 02 	sts	0x0298, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                // Buzzer_NotifySound();
                Buzzer_GiveSound = YES_Condition; 
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	80 93 93 02 	sts	0x0293, r24

                if(BrakingAssist_Current_State == BrakingAssist_Disable)
    45a0:	80 91 81 02 	lds	r24, 0x0281
    45a4:	88 23       	and	r24, r24
    45a6:	41 f4       	brne	.+16     	; 0x45b8 <APP_KeypadUpdate+0x15c>
                {
                    BrakingAssist_Current_State = BrakingAssist_Enable ;
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	80 93 81 02 	sts	0x0281, r24
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    45ae:	80 91 81 02 	lds	r24, 0x0281
    45b2:	0e 94 26 20 	call	0x404c	; 0x404c <DashBoard_Update_BrakingAssist_State>
    45b6:	06 c0       	rjmp	.+12     	; 0x45c4 <APP_KeypadUpdate+0x168>
                }
                else
                {
                    BrakingAssist_Current_State = BrakingAssist_Disable ;
    45b8:	10 92 81 02 	sts	0x0281, r1
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    45bc:	80 91 81 02 	lds	r24, 0x0281
    45c0:	0e 94 26 20 	call	0x404c	; 0x404c <DashBoard_Update_BrakingAssist_State>
                }
                /*  As if I in page braking Assist and Enable or disable  need to update*/
                if(Page_Current_State == Page_1_LCD)
    45c4:	80 91 52 02 	lds	r24, 0x0252
    45c8:	88 23       	and	r24, r24
    45ca:	29 f4       	brne	.+10     	; 0x45d6 <APP_KeypadUpdate+0x17a>
                {
                    APP_DashBoard_SwitchPages();    
    45cc:	0e 94 b1 21 	call	0x4362	; 0x4362 <APP_DashBoard_SwitchPages>
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <APP_KeypadUpdate+0x17a>
                }
            }
        }
        else 
        {
            BrakingAssit_IsStillPressed = NO_Condition ;
    45d2:	10 92 98 02 	sts	0x0298, r1
        }

        /* (Button 10) Handle Driving monetoring Button   */
        if(local_currentValue_keypad == Keypad_DrivingMonetoring_pressed_value)
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	83 32       	cpi	r24, 0x23	; 35
    45da:	51 f5       	brne	.+84     	; 0x4630 <APP_KeypadUpdate+0x1d4>
        {
            if(DrivingMonetoring_IsStillPressed == NO_Condition)
    45dc:	80 91 97 02 	lds	r24, 0x0297
    45e0:	88 23       	and	r24, r24
    45e2:	41 f5       	brne	.+80     	; 0x4634 <APP_KeypadUpdate+0x1d8>
            {
                DrivingMonetoring_IsStillPressed = YES_Condition ;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	80 93 97 02 	sts	0x0297, r24

                /* turn buzzer on and give timer 0 clock and set timeout    */
                //Buzzer_NotifySound();
                Buzzer_GiveSound = YES_Condition; 
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	80 93 93 02 	sts	0x0293, r24
                
                if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    45f0:	80 91 82 02 	lds	r24, 0x0282
    45f4:	88 23       	and	r24, r24
    45f6:	a9 f4       	brne	.+42     	; 0x4622 <APP_KeypadUpdate+0x1c6>
                {
                    DrivingMonetoring_Current_State = DirivingMonetoring_Enable ;
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	80 93 82 02 	sts	0x0282, r24
                    /*  Update in LCD   */
                    DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    45fe:	80 91 82 02 	lds	r24, 0x0282
    4602:	0e 94 e6 20 	call	0x41cc	; 0x41cc <DahBoard_Update_DrivingMonetoring_State>
                    
                    /*  Provide clock to Timer 1 to start count  */
                    Timer1_ProvideClock();
    4606:	0e 94 1d 08 	call	0x103a	; 0x103a <Timer1_ProvideClock>
                    /*  Load timer with value that when overflow occur will happen after 1 second  */
                    Timer1_UpdateValue(Value_Loading_Timer1);
    460a:	8b e7       	ldi	r24, 0x7B	; 123
    460c:	91 ee       	ldi	r25, 0xE1	; 225
    460e:	0e 94 fd 07 	call	0xffa	; 0xffa <Timer1_UpdateValue>

                    /*  Make counter start from zero Again  */
                    // TimeOut_Counter = 0 ;//old one when I use timer1
                    Timer0_Overflow_counter_DM = 0 ;
    4612:	10 92 92 02 	sts	0x0292, r1
    4616:	10 92 91 02 	sts	0x0291, r1

                    /*  intialize that will meeting state at first  */
                    DrivingMonetoring_Current_Status = DM_Meet ;
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	80 93 55 02 	sts	0x0255, r24
    4620:	09 c0       	rjmp	.+18     	; 0x4634 <APP_KeypadUpdate+0x1d8>
                }  
                else
                {
                    DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    4622:	10 92 82 02 	sts	0x0282, r1
                    /*  Update in LCD */
                    DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    4626:	80 91 82 02 	lds	r24, 0x0282
    462a:	0e 94 e6 20 	call	0x41cc	; 0x41cc <DahBoard_Update_DrivingMonetoring_State>
    462e:	02 c0       	rjmp	.+4      	; 0x4634 <APP_KeypadUpdate+0x1d8>
                
            }
        }
        else
        {
            DrivingMonetoring_IsStillPressed = NO_Condition ;
    4630:	10 92 97 02 	sts	0x0297, r1

    }

/* (Button 5️⃣) Handle switch to right screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_R_pressed_value)
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	83 30       	cpi	r24, 0x03	; 3
    4638:	f1 f4       	brne	.+60     	; 0x4676 <APP_KeypadUpdate+0x21a>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ;//old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    463a:	10 92 92 02 	sts	0x0292, r1
    463e:	10 92 91 02 	sts	0x0291, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	80 93 55 02 	sts	0x0255, r24

        if(R_Page_IsStillPressed == NO_Condition)
    4648:	80 91 9d 02 	lds	r24, 0x029D
    464c:	88 23       	and	r24, r24
    464e:	a9 f4       	brne	.+42     	; 0x467a <APP_KeypadUpdate+0x21e>
        {
            R_Page_IsStillPressed = YES_Condition ;
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	80 93 9d 02 	sts	0x029D, r24
            Page_Current_State++ ; /*   Move one right page*/
    4656:	80 91 52 02 	lds	r24, 0x0252
    465a:	8f 5f       	subi	r24, 0xFF	; 255
    465c:	80 93 52 02 	sts	0x0252, r24
            if(Page_Current_State == 4) /*  Exceed page 3 so it need to handle and return to page one  */
    4660:	80 91 52 02 	lds	r24, 0x0252
    4664:	84 30       	cpi	r24, 0x04	; 4
    4666:	11 f4       	brne	.+4      	; 0x466c <APP_KeypadUpdate+0x210>
            {
                Page_Current_State = Page_1_LCD ;
    4668:	10 92 52 02 	sts	0x0252, r1
            }
            /*  Call function that handle change in first two */
            APP_DashBoard_SwitchPages();
    466c:	0e 94 b1 21 	call	0x4362	; 0x4362 <APP_DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            APP_DashBoardPage_update();
    4670:	0e 94 2d 21 	call	0x425a	; 0x425a <APP_DashBoardPage_update>
    4674:	02 c0       	rjmp	.+4      	; 0x467a <APP_KeypadUpdate+0x21e>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        R_Page_IsStillPressed = NO_Condition ;
    4676:	10 92 9d 02 	sts	0x029D, r1
    }


/* (Button 6️⃣) Handle switch to left screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_L_pressed_value)
    467a:	89 81       	ldd	r24, Y+1	; 0x01
    467c:	81 30       	cpi	r24, 0x01	; 1
    467e:	f9 f4       	brne	.+62     	; 0x46be <APP_KeypadUpdate+0x262>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ; //old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    4680:	10 92 92 02 	sts	0x0292, r1
    4684:	10 92 91 02 	sts	0x0291, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	80 93 55 02 	sts	0x0255, r24

        if(L_Page_IsStillPressed == NO_Condition)
    468e:	80 91 9c 02 	lds	r24, 0x029C
    4692:	88 23       	and	r24, r24
    4694:	b1 f4       	brne	.+44     	; 0x46c2 <APP_KeypadUpdate+0x266>
        {
            L_Page_IsStillPressed = YES_Condition ;
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	80 93 9c 02 	sts	0x029C, r24
            Page_Current_State-- ; /*   Move one right page*/
    469c:	80 91 52 02 	lds	r24, 0x0252
    46a0:	81 50       	subi	r24, 0x01	; 1
    46a2:	80 93 52 02 	sts	0x0252, r24
            if(Page_Current_State == -1) /*  Exceed page 3 so it need to handle and return to page one  */
    46a6:	80 91 52 02 	lds	r24, 0x0252
    46aa:	8f 3f       	cpi	r24, 0xFF	; 255
    46ac:	19 f4       	brne	.+6      	; 0x46b4 <APP_KeypadUpdate+0x258>
            {
                Page_Current_State = Page_4_LCD ;
    46ae:	83 e0       	ldi	r24, 0x03	; 3
    46b0:	80 93 52 02 	sts	0x0252, r24
            }
            /*  Call function that handle change in first two */
            APP_DashBoard_SwitchPages();
    46b4:	0e 94 b1 21 	call	0x4362	; 0x4362 <APP_DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            APP_DashBoardPage_update();
    46b8:	0e 94 2d 21 	call	0x425a	; 0x425a <APP_DashBoardPage_update>
    46bc:	02 c0       	rjmp	.+4      	; 0x46c2 <APP_KeypadUpdate+0x266>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        L_Page_IsStillPressed = NO_Condition ;
    46be:	10 92 9c 02 	sts	0x029C, r1

/* (Button 7️⃣) Handle increase in speed limit   */
    /*  Handle Increasing part for speed limiter    */
    static uint8 SL_FirstTime_INC = YES_Condition ;
    static uint8 SL_INC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Inc_pressed_value)
    46c2:	89 81       	ldd	r24, Y+1	; 0x01
    46c4:	89 30       	cpi	r24, 0x09	; 9
    46c6:	71 f5       	brne	.+92     	; 0x4724 <APP_KeypadUpdate+0x2c8>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ; //old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    46c8:	10 92 92 02 	sts	0x0292, r1
    46cc:	10 92 91 02 	sts	0x0291, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	80 93 55 02 	sts	0x0255, r24
        if(SL_FirstTime_INC == YES_Condition )
    46d6:	80 91 5a 02 	lds	r24, 0x025A
    46da:	81 30       	cpi	r24, 0x01	; 1
    46dc:	61 f4       	brne	.+24     	; 0x46f6 <APP_KeypadUpdate+0x29a>
        {
            if(Global_Speed_Limiter_value < Max_Speed_Limit_value)
    46de:	80 91 54 02 	lds	r24, 0x0254
    46e2:	88 37       	cpi	r24, 0x78	; 120
    46e4:	28 f4       	brcc	.+10     	; 0x46f0 <APP_KeypadUpdate+0x294>
            {
                Global_Speed_Limiter_value += 5; 
    46e6:	80 91 54 02 	lds	r24, 0x0254
    46ea:	8b 5f       	subi	r24, 0xFB	; 251
    46ec:	80 93 54 02 	sts	0x0254, r24
            }
                SL_FirstTime_INC = NO_Condition ;
    46f0:	10 92 5a 02 	sts	0x025A, r1
    46f4:	14 c0       	rjmp	.+40     	; 0x471e <APP_KeypadUpdate+0x2c2>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_INC_repeation += 1;
    46f6:	80 91 96 02 	lds	r24, 0x0296
    46fa:	8f 5f       	subi	r24, 0xFF	; 255
    46fc:	80 93 96 02 	sts	0x0296, r24
            if(SL_INC_repeation == 3)
    4700:	80 91 96 02 	lds	r24, 0x0296
    4704:	83 30       	cpi	r24, 0x03	; 3
    4706:	59 f4       	brne	.+22     	; 0x471e <APP_KeypadUpdate+0x2c2>
            {
                SL_INC_repeation = 0;
    4708:	10 92 96 02 	sts	0x0296, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                if(Global_Speed_Limiter_value < Max_Speed_Limit_value)
    470c:	80 91 54 02 	lds	r24, 0x0254
    4710:	88 37       	cpi	r24, 0x78	; 120
    4712:	28 f4       	brcc	.+10     	; 0x471e <APP_KeypadUpdate+0x2c2>
                {
                    Global_Speed_Limiter_value += 5; 
    4714:	80 91 54 02 	lds	r24, 0x0254
    4718:	8b 5f       	subi	r24, 0xFB	; 251
    471a:	80 93 54 02 	sts	0x0254, r24
                }
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    471e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <DashBoard_updateSpeedLimitValue>
    4722:	05 c0       	rjmp	.+10     	; 0x472e <APP_KeypadUpdate+0x2d2>

    }
    else
    {
        SL_FirstTime_INC = YES_Condition ;
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	80 93 5a 02 	sts	0x025A, r24
        SL_INC_repeation = 0;
    472a:	10 92 96 02 	sts	0x0296, r1

/* (Button 8️⃣) Handle decrease in speed limit   */
    /*  Handle Decreasing part for speed limiter    */
    static uint8 SL_FirstTime_DEC = YES_Condition ;
    static uint8 SL_DEC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Dec_pressed_value)
    472e:	89 81       	ldd	r24, Y+1	; 0x01
    4730:	87 30       	cpi	r24, 0x07	; 7
    4732:	71 f5       	brne	.+92     	; 0x4790 <APP_KeypadUpdate+0x334>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ;//old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    4734:	10 92 92 02 	sts	0x0292, r1
    4738:	10 92 91 02 	sts	0x0291, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	80 93 55 02 	sts	0x0255, r24

        if(SL_FirstTime_DEC == YES_Condition )
    4742:	80 91 59 02 	lds	r24, 0x0259
    4746:	81 30       	cpi	r24, 0x01	; 1
    4748:	61 f4       	brne	.+24     	; 0x4762 <APP_KeypadUpdate+0x306>
        {
            if(Global_Speed_Limiter_value > Min_speed_Limit_value)
    474a:	80 91 54 02 	lds	r24, 0x0254
    474e:	85 31       	cpi	r24, 0x15	; 21
    4750:	28 f0       	brcs	.+10     	; 0x475c <APP_KeypadUpdate+0x300>
            {
                Global_Speed_Limiter_value -= 5;    
    4752:	80 91 54 02 	lds	r24, 0x0254
    4756:	85 50       	subi	r24, 0x05	; 5
    4758:	80 93 54 02 	sts	0x0254, r24
            }
            SL_FirstTime_DEC = NO_Condition ;
    475c:	10 92 59 02 	sts	0x0259, r1
    4760:	14 c0       	rjmp	.+40     	; 0x478a <APP_KeypadUpdate+0x32e>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_DEC_repeation += 1;
    4762:	80 91 95 02 	lds	r24, 0x0295
    4766:	8f 5f       	subi	r24, 0xFF	; 255
    4768:	80 93 95 02 	sts	0x0295, r24
            if(SL_DEC_repeation == 3)
    476c:	80 91 95 02 	lds	r24, 0x0295
    4770:	83 30       	cpi	r24, 0x03	; 3
    4772:	59 f4       	brne	.+22     	; 0x478a <APP_KeypadUpdate+0x32e>
            {
                SL_DEC_repeation = 0;
    4774:	10 92 95 02 	sts	0x0295, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                if(Global_Speed_Limiter_value > Min_speed_Limit_value)
    4778:	80 91 54 02 	lds	r24, 0x0254
    477c:	85 31       	cpi	r24, 0x15	; 21
    477e:	28 f0       	brcs	.+10     	; 0x478a <APP_KeypadUpdate+0x32e>
                {
                    Global_Speed_Limiter_value -= 5;    
    4780:	80 91 54 02 	lds	r24, 0x0254
    4784:	85 50       	subi	r24, 0x05	; 5
    4786:	80 93 54 02 	sts	0x0254, r24
                }
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    478a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <DashBoard_updateSpeedLimitValue>
    478e:	05 c0       	rjmp	.+10     	; 0x479a <APP_KeypadUpdate+0x33e>

    }
    else
    {
        SL_FirstTime_DEC = YES_Condition ;
    4790:	81 e0       	ldi	r24, 0x01	; 1
    4792:	80 93 59 02 	sts	0x0259, r24
        SL_DEC_repeation = 0;
    4796:	10 92 95 02 	sts	0x0295, r1

    }

}
    479a:	0f 90       	pop	r0
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	08 95       	ret

000047a2 <Braking_Button_Handling>:




static void Braking_Button_Handling(void)
{
    47a2:	df 93       	push	r29
    47a4:	cf 93       	push	r28
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    /*  Make initial state that Button is released  */
    static uint8 Braking_BTN_State = BTN_Released_State ;
    /*  Will Enter this condition only when press button Only (this will make failling edge)  */
    if(Braking_BTN_State == BTN_Released_State)
    47aa:	80 91 5b 02 	lds	r24, 0x025B
    47ae:	81 30       	cpi	r24, 0x01	; 1
    47b0:	a9 f4       	brne	.+42     	; 0x47dc <Braking_Button_Handling+0x3a>
    {
        /*  So when I release utton will make Rising Edge so I need to make setup to detect this state to turn led off  */
        INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN); /*    If swap between that command and next command will face problem that If I make very short press will face problem  that led will turn on only not turn off also and this not required*/
    47b2:	83 e0       	ldi	r24, 0x03	; 3
    47b4:	60 e0       	ldi	r22, 0x00	; 0
    47b6:	0e 94 26 10 	call	0x204c	; 0x204c <INT1_init>

        // Buzzer_NotifySound();
        Buzzer_GiveSound = YES_Condition; 
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	80 93 93 02 	sts	0x0293, r24

        /*  Make update to state    */
        Braking_BTN_State = BTN_Pressed_State;
    47c0:	10 92 5b 02 	sts	0x025B, r1
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    47c4:	80 91 5b 02 	lds	r24, 0x025B
    47c8:	80 93 53 02 	sts	0x0253, r24
        /*  Turn led on  */
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	67 e0       	ldi	r22, 0x07	; 7
    47d0:	41 e0       	ldi	r20, 0x01	; 1
    47d2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>

        //     DashBoard_DistanceHide();


        // }
        tessst();
    47d6:	0e 94 05 24 	call	0x480a	; 0x480a <tessst>
    47da:	14 c0       	rjmp	.+40     	; 0x4804 <Braking_Button_Handling+0x62>
    }
    /*  Will Enter this condition only when release button Only (this will make failling edge)  */
    else if(Braking_BTN_State == BTN_Pressed_State)
    47dc:	80 91 5b 02 	lds	r24, 0x025B
    47e0:	88 23       	and	r24, r24
    47e2:	81 f4       	brne	.+32     	; 0x4804 <Braking_Button_Handling+0x62>
    {

        INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    47e4:	82 e0       	ldi	r24, 0x02	; 2
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	0e 94 26 10 	call	0x204c	; 0x204c <INT1_init>
        Braking_BTN_State = BTN_Released_State;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	80 93 5b 02 	sts	0x025B, r24
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    47f2:	80 91 5b 02 	lds	r24, 0x025B
    47f6:	80 93 53 02 	sts	0x0253, r24
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	67 e0       	ldi	r22, 0x07	; 7
    47fe:	40 e0       	ldi	r20, 0x00	; 0
    4800:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
    }
}
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <tessst>:


void tessst (void)
{
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
        if((GearBox_Current_State == D_GearBox))
    4812:	80 91 7e 02 	lds	r24, 0x027E
    4816:	81 30       	cpi	r24, 0x01	; 1
    4818:	e1 f4       	brne	.+56     	; 0x4852 <tessst+0x48>
        {
            /*	Enable Global Interrupt  */
	        sei();
    481a:	78 94       	sei
            /*  If it was CCS enabled should disabled and update in LCD*/
            if(CCS_Currnet_state == CCS_Enable)
    481c:	80 91 7f 02 	lds	r24, 0x027F
    4820:	81 30       	cpi	r24, 0x01	; 1
    4822:	31 f4       	brne	.+12     	; 0x4830 <tessst+0x26>
            {
                /*  Disable ACCS if Enabled  */
                CCS_Currnet_state = CCS_Disable;
    4824:	10 92 7f 02 	sts	0x027F, r1

                /*  Update LCD with new change*/
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    4828:	80 91 7f 02 	lds	r24, 0x027F
    482c:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
            }

            /*  If it was Braking Assist enabled should disabled and update in LCD*/
            if(BrakingAssist_Current_State == BrakingAssist_Enable)
    4830:	80 91 81 02 	lds	r24, 0x0281
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	31 f4       	brne	.+12     	; 0x4844 <tessst+0x3a>
            {
                /*  Disable BA Sysystem */
                BrakingAssist_Current_State = BrakingAssist_Disable ;
    4838:	10 92 81 02 	sts	0x0281, r1

                /*  Update LCD with new change*/
                DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    483c:	80 91 81 02 	lds	r24, 0x0281
    4840:	0e 94 26 20 	call	0x404c	; 0x404c <DashBoard_Update_BrakingAssist_State>
            //DashBoard_DistanceHide_small();


            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ;//old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    4844:	10 92 92 02 	sts	0x0292, r1
    4848:	10 92 91 02 	sts	0x0291, r1

            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	80 93 55 02 	sts	0x0255, r24

        }
}
    4852:	cf 91       	pop	r28
    4854:	df 91       	pop	r29
    4856:	08 95       	ret

00004858 <Braking_LongPressHandle>:


void Braking_LongPressHandle(void)
{
    4858:	df 93       	push	r29
    485a:	cf 93       	push	r28
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    if(Global_Braking_BTN_State == BTN_Pressed_State)
    4860:	80 91 53 02 	lds	r24, 0x0253
    4864:	88 23       	and	r24, r24
    4866:	71 f4       	brne	.+28     	; 0x4884 <Braking_LongPressHandle+0x2c>
    {
        /*  ⚠️Here make disable for Cruise control sysytem (CCS) as there bug 
        *   when press in brake system if CCS is enaled will disaled but during  pressing brake if CCS activated again will not handled
        */
        if(CCS_Currnet_state == CCS_Enable)
    4868:	80 91 7f 02 	lds	r24, 0x027F
    486c:	81 30       	cpi	r24, 0x01	; 1
    486e:	31 f4       	brne	.+12     	; 0x487c <Braking_LongPressHandle+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    4870:	10 92 7f 02 	sts	0x027F, r1

            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    4874:	80 91 7f 02 	lds	r24, 0x027F
    4878:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
        *   As system can't handle this so Here I handle this bug
        */
        
        /*  Make counter with zero to start count from zero for DM */
        //TimeOut_Counter = 0 ; //old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    487c:	10 92 92 02 	sts	0x0292, r1
    4880:	10 92 91 02 	sts	0x0291, r1
    }
}
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <DashBoard_updateTime>:




static void DashBoard_updateTime(void)
{
    488a:	df 93       	push	r29
    488c:	cf 93       	push	r28
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_4_LCD)
    4892:	80 91 52 02 	lds	r24, 0x0252
    4896:	83 30       	cpi	r24, 0x03	; 3
    4898:	09 f0       	breq	.+2      	; 0x489c <DashBoard_updateTime+0x12>
    489a:	65 c0       	rjmp	.+202    	; 0x4966 <DashBoard_updateTime+0xdc>
    {
        LCD_MoveCursor(1,0);
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        LCD_DisplayString("T=");if(Clock_hour < 10)
    48a4:	87 ed       	ldi	r24, 0xD7	; 215
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    48ac:	80 91 58 02 	lds	r24, 0x0258
    48b0:	8a 30       	cpi	r24, 0x0A	; 10
    48b2:	70 f4       	brcc	.+28     	; 0x48d0 <DashBoard_updateTime+0x46>
        {
            LCD_DisplayCharacter(' ');
    48b4:	80 e2       	ldi	r24, 0x20	; 32
    48b6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
            LCD_intToString(Clock_hour);
    48ba:	80 91 58 02 	lds	r24, 0x0258
    48be:	88 2f       	mov	r24, r24
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	a0 e0       	ldi	r26, 0x00	; 0
    48c4:	b0 e0       	ldi	r27, 0x00	; 0
    48c6:	bc 01       	movw	r22, r24
    48c8:	cd 01       	movw	r24, r26
    48ca:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
    48ce:	0a c0       	rjmp	.+20     	; 0x48e4 <DashBoard_updateTime+0x5a>
        }
        else
        {
            LCD_intToString(Clock_hour);
    48d0:	80 91 58 02 	lds	r24, 0x0258
    48d4:	88 2f       	mov	r24, r24
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	a0 e0       	ldi	r26, 0x00	; 0
    48da:	b0 e0       	ldi	r27, 0x00	; 0
    48dc:	bc 01       	movw	r22, r24
    48de:	cd 01       	movw	r24, r26
    48e0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
        }
        LCD_DisplayCharacter(':');
    48e4:	8a e3       	ldi	r24, 0x3A	; 58
    48e6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
        if(Clock_min < 10)
    48ea:	80 91 57 02 	lds	r24, 0x0257
    48ee:	8a 30       	cpi	r24, 0x0A	; 10
    48f0:	70 f4       	brcc	.+28     	; 0x490e <DashBoard_updateTime+0x84>
        {
            LCD_DisplayCharacter(' ');
    48f2:	80 e2       	ldi	r24, 0x20	; 32
    48f4:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
            LCD_intToString(Clock_min);
    48f8:	80 91 57 02 	lds	r24, 0x0257
    48fc:	88 2f       	mov	r24, r24
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	a0 e0       	ldi	r26, 0x00	; 0
    4902:	b0 e0       	ldi	r27, 0x00	; 0
    4904:	bc 01       	movw	r22, r24
    4906:	cd 01       	movw	r24, r26
    4908:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
    490c:	0a c0       	rjmp	.+20     	; 0x4922 <DashBoard_updateTime+0x98>
        }
        else
        {
            LCD_intToString(Clock_min);
    490e:	80 91 57 02 	lds	r24, 0x0257
    4912:	88 2f       	mov	r24, r24
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	a0 e0       	ldi	r26, 0x00	; 0
    4918:	b0 e0       	ldi	r27, 0x00	; 0
    491a:	bc 01       	movw	r22, r24
    491c:	cd 01       	movw	r24, r26
    491e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
        }
        LCD_DisplayCharacter(':');
    4922:	8a e3       	ldi	r24, 0x3A	; 58
    4924:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
        if(Clock_sec < 10)
    4928:	80 91 56 02 	lds	r24, 0x0256
    492c:	8a 30       	cpi	r24, 0x0A	; 10
    492e:	70 f4       	brcc	.+28     	; 0x494c <DashBoard_updateTime+0xc2>
        {
            LCD_DisplayCharacter(' ');
    4930:	80 e2       	ldi	r24, 0x20	; 32
    4932:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
            LCD_intToString(Clock_sec);
    4936:	80 91 56 02 	lds	r24, 0x0256
    493a:	88 2f       	mov	r24, r24
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	a0 e0       	ldi	r26, 0x00	; 0
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	bc 01       	movw	r22, r24
    4944:	cd 01       	movw	r24, r26
    4946:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
    494a:	0a c0       	rjmp	.+20     	; 0x4960 <DashBoard_updateTime+0xd6>
        }
        else
        {
            LCD_intToString(Clock_sec);
    494c:	80 91 56 02 	lds	r24, 0x0256
    4950:	88 2f       	mov	r24, r24
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	a0 e0       	ldi	r26, 0x00	; 0
    4956:	b0 e0       	ldi	r27, 0x00	; 0
    4958:	bc 01       	movw	r22, r24
    495a:	cd 01       	movw	r24, r26
    495c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
        }
        LCD_DisplayCharacter(' ');
    4960:	80 e2       	ldi	r24, 0x20	; 32
    4962:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
        
    }
}
    4966:	cf 91       	pop	r28
    4968:	df 91       	pop	r29
    496a:	08 95       	ret

0000496c <ACCS_CatchDistance>:

static void ACCS_CatchDistance(void)
{
    496c:	df 93       	push	r29
    496e:	cf 93       	push	r28
    4970:	00 d0       	rcall	.+0      	; 0x4972 <ACCS_CatchDistance+0x6>
    4972:	0f 92       	push	r0
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
    * as may be before printing point(.) and number after point  press braking button and this lead to call DashBoard_DistanceHide() function
    * and this make cursor position that I make disable  be at last colimn in last row and will return here to continue this code here 
    * so this lead to make data overwrite in LCD 
    * "this is one scenario from a lot of scenarios "
    */
    cli();
    4978:	f8 94       	cli
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	0e 94 48 11 	call	0x2290	; 0x2290 <ADC_ReadChannelSingleConvertion>
    4980:	9a 83       	std	Y+2, r25	; 0x02
    4982:	89 83       	std	Y+1, r24	; 0x01
    distance_ACCS = (Adc_value_pure * 10) / 1023.0 ; 
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	9a 81       	ldd	r25, Y+2	; 0x02
    4988:	9c 01       	movw	r18, r24
    498a:	22 0f       	add	r18, r18
    498c:	33 1f       	adc	r19, r19
    498e:	c9 01       	movw	r24, r18
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	88 0f       	add	r24, r24
    4996:	99 1f       	adc	r25, r25
    4998:	82 0f       	add	r24, r18
    499a:	93 1f       	adc	r25, r19
    499c:	cc 01       	movw	r24, r24
    499e:	a0 e0       	ldi	r26, 0x00	; 0
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	bc 01       	movw	r22, r24
    49a4:	cd 01       	movw	r24, r26
    49a6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	bc 01       	movw	r22, r24
    49b0:	cd 01       	movw	r24, r26
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 ec       	ldi	r19, 0xC0	; 192
    49b6:	4f e7       	ldi	r20, 0x7F	; 127
    49b8:	54 e4       	ldi	r21, 0x44	; 68
    49ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	80 93 85 02 	sts	0x0285, r24
    49c6:	90 93 86 02 	sts	0x0286, r25
    49ca:	a0 93 87 02 	sts	0x0287, r26
    49ce:	b0 93 88 02 	sts	0x0288, r27
    /*  Here trying to get first number after Sign  */
    volatile uint8 distance_after_point = ( (uint8)(distance_ACCS * 10) )  % 10;
    49d2:	80 91 85 02 	lds	r24, 0x0285
    49d6:	90 91 86 02 	lds	r25, 0x0286
    49da:	a0 91 87 02 	lds	r26, 0x0287
    49de:	b0 91 88 02 	lds	r27, 0x0288
    49e2:	bc 01       	movw	r22, r24
    49e4:	cd 01       	movw	r24, r26
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e2       	ldi	r20, 0x20	; 32
    49ec:	51 e4       	ldi	r21, 0x41	; 65
    49ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	9a e0       	ldi	r25, 0x0A	; 10
    4a04:	69 2f       	mov	r22, r25
    4a06:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__udivmodqi4>
    4a0a:	89 2f       	mov	r24, r25
    4a0c:	8b 83       	std	Y+3, r24	; 0x03
    LCD_MoveCursor(3,11);
    4a0e:	83 e0       	ldi	r24, 0x03	; 3
    4a10:	6b e0       	ldi	r22, 0x0B	; 11
    4a12:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
    /*  For Small LCD*/
    //LCD_MoveCursor(1,11);
	LCD_intToString((uint8)distance_ACCS);
    4a16:	80 91 85 02 	lds	r24, 0x0285
    4a1a:	90 91 86 02 	lds	r25, 0x0286
    4a1e:	a0 91 87 02 	lds	r26, 0x0287
    4a22:	b0 91 88 02 	lds	r27, 0x0288
    4a26:	bc 01       	movw	r22, r24
    4a28:	cd 01       	movw	r24, r26
    4a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	88 2f       	mov	r24, r24
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	a0 e0       	ldi	r26, 0x00	; 0
    4a38:	b0 e0       	ldi	r27, 0x00	; 0
    4a3a:	bc 01       	movw	r22, r24
    4a3c:	cd 01       	movw	r24, r26
    4a3e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
	LCD_DisplayCharacter('.');
    4a42:	8e e2       	ldi	r24, 0x2E	; 46
    4a44:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_DisplayCharacter>
    LCD_intToString(distance_after_point);
    4a48:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4a:	88 2f       	mov	r24, r24
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	a0 e0       	ldi	r26, 0x00	; 0
    4a50:	b0 e0       	ldi	r27, 0x00	; 0
    4a52:	bc 01       	movw	r22, r24
    4a54:	cd 01       	movw	r24, r26
    4a56:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
    LCD_DisplayString("M ");
    4a5a:	8a ed       	ldi	r24, 0xDA	; 218
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    sei();
    4a62:	78 94       	sei
}
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	0f 90       	pop	r0
    4a6a:	cf 91       	pop	r28
    4a6c:	df 91       	pop	r29
    4a6e:	08 95       	ret

00004a70 <ACCS_DicisionTake>:



static void ACCS_DicisionTake(void)
{
    4a70:	df 93       	push	r29
    4a72:	cf 93       	push	r28
    4a74:	00 d0       	rcall	.+0      	; 0x4a76 <ACCS_DicisionTake+0x6>
    4a76:	00 d0       	rcall	.+0      	; 0x4a78 <ACCS_DicisionTake+0x8>
    4a78:	cd b7       	in	r28, 0x3d	; 61
    4a7a:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    4a7c:	80 91 7f 02 	lds	r24, 0x027F
    4a80:	81 30       	cpi	r24, 0x01	; 1
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <ACCS_DicisionTake+0x16>
    4a84:	8b c0       	rjmp	.+278    	; 0x4b9c <ACCS_DicisionTake+0x12c>
    4a86:	80 91 7e 02 	lds	r24, 0x027E
    4a8a:	81 30       	cpi	r24, 0x01	; 1
    4a8c:	09 f0       	breq	.+2      	; 0x4a90 <ACCS_DicisionTake+0x20>
    4a8e:	86 c0       	rjmp	.+268    	; 0x4b9c <ACCS_DicisionTake+0x12c>
    {

        cli();
    4a90:	f8 94       	cli
        if((uint8)(distance_ACCS) >= 8) /*  Case 1  */
    4a92:	80 91 85 02 	lds	r24, 0x0285
    4a96:	90 91 86 02 	lds	r25, 0x0286
    4a9a:	a0 91 87 02 	lds	r26, 0x0287
    4a9e:	b0 91 88 02 	lds	r27, 0x0288
    4aa2:	bc 01       	movw	r22, r24
    4aa4:	cd 01       	movw	r24, r26
    4aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	88 30       	cpi	r24, 0x08	; 8
    4ab0:	58 f0       	brcs	.+22     	; 0x4ac8 <ACCS_DicisionTake+0x58>
        {
            
            /*  Do no thing */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	66 e0       	ldi	r22, 0x06	; 6
    4ab6:	40 e0       	ldi	r20, 0x00	; 0
    4ab8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	67 e0       	ldi	r22, 0x07	; 7
    4ac0:	40 e0       	ldi	r20, 0x00	; 0
    4ac2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
    4ac6:	69 c0       	rjmp	.+210    	; 0x4b9a <ACCS_DicisionTake+0x12a>

           
        }
        else if(((uint8)(distance_ACCS) >= 6)) /*  Case 2  */
    4ac8:	80 91 85 02 	lds	r24, 0x0285
    4acc:	90 91 86 02 	lds	r25, 0x0286
    4ad0:	a0 91 87 02 	lds	r26, 0x0287
    4ad4:	b0 91 88 02 	lds	r27, 0x0288
    4ad8:	bc 01       	movw	r22, r24
    4ada:	cd 01       	movw	r24, r26
    4adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	86 30       	cpi	r24, 0x06	; 6
    4ae6:	58 f0       	brcs	.+22     	; 0x4afe <ACCS_DicisionTake+0x8e>
        {
           
            /*  in this case only turn yellow led only */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	66 e0       	ldi	r22, 0x06	; 6
    4aec:	41 e0       	ldi	r20, 0x01	; 1
    4aee:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	67 e0       	ldi	r22, 0x07	; 7
    4af6:	40 e0       	ldi	r20, 0x00	; 0
    4af8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
    4afc:	4e c0       	rjmp	.+156    	; 0x4b9a <ACCS_DicisionTake+0x12a>

          

            /*  Try to return back to speed that was make fixed*/
        }
        else if (((uint8)(distance_ACCS) >= 4)) /*  Case 3  */
    4afe:	80 91 85 02 	lds	r24, 0x0285
    4b02:	90 91 86 02 	lds	r25, 0x0286
    4b06:	a0 91 87 02 	lds	r26, 0x0287
    4b0a:	b0 91 88 02 	lds	r27, 0x0288
    4b0e:	bc 01       	movw	r22, r24
    4b10:	cd 01       	movw	r24, r26
    4b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	84 30       	cpi	r24, 0x04	; 4
    4b1c:	58 f0       	brcs	.+22     	; 0x4b34 <ACCS_DicisionTake+0xc4>
        {
            

            /*  in this case turn yellow and red led on*/
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4b1e:	80 e0       	ldi	r24, 0x00	; 0
    4b20:	66 e0       	ldi	r22, 0x06	; 6
    4b22:	41 e0       	ldi	r20, 0x01	; 1
    4b24:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>

            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	67 e0       	ldi	r22, 0x07	; 7
    4b2c:	41 e0       	ldi	r20, 0x01	; 1
    4b2e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
    4b32:	33 c0       	rjmp	.+102    	; 0x4b9a <ACCS_DicisionTake+0x12a>

        }
        else if (((uint8)(distance_ACCS) >= 2)) /*  Case 4  */
    4b34:	80 91 85 02 	lds	r24, 0x0285
    4b38:	90 91 86 02 	lds	r25, 0x0286
    4b3c:	a0 91 87 02 	lds	r26, 0x0287
    4b40:	b0 91 88 02 	lds	r27, 0x0288
    4b44:	bc 01       	movw	r22, r24
    4b46:	cd 01       	movw	r24, r26
    4b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	82 30       	cpi	r24, 0x02	; 2
    4b52:	50 f0       	brcs	.+20     	; 0x4b68 <ACCS_DicisionTake+0xf8>
        {


            /*  turn yellow led on and make red led toggles continuesly with very speed */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	66 e0       	ldi	r22, 0x06	; 6
    4b58:	41 e0       	ldi	r20, 0x01	; 1
    4b5a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>

            LED_Toggle(Red_LED_PORT,Red_LED_PIN);
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	67 e0       	ldi	r22, 0x07	; 7
    4b62:	0e 94 32 12 	call	0x2464	; 0x2464 <LED_Toggle>
    4b66:	19 c0       	rjmp	.+50     	; 0x4b9a <ACCS_DicisionTake+0x12a>

        }   
        else if (((uint8)(distance_ACCS) >= 0)) /*  Case 5  */
    4b68:	80 91 85 02 	lds	r24, 0x0285
    4b6c:	90 91 86 02 	lds	r25, 0x0286
    4b70:	a0 91 87 02 	lds	r26, 0x0287
    4b74:	b0 91 88 02 	lds	r27, 0x0288
        {
            /*  Turn Of all leds    */
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	67 e0       	ldi	r22, 0x07	; 7
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	66 e0       	ldi	r22, 0x06	; 6
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <LED_OnOffPositiveLogic>


            /*  Display Crash message   */
            LCD_ClearScreen();
    4b8c:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <LCD_ClearScreen>
            LCD_DisplayString((const uint8 *)"Crushed car ):");
    4b90:	8d ed       	ldi	r24, 0xDD	; 221
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
    4b98:	ff cf       	rjmp	.-2      	; 0x4b98 <ACCS_DicisionTake+0x128>

            /*  Disable all Button*/
            while(1);
        }
        
        sei();
    4b9a:	78 94       	sei
    }
}
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	0f 90       	pop	r0
    4ba2:	0f 90       	pop	r0
    4ba4:	cf 91       	pop	r28
    4ba6:	df 91       	pop	r29
    4ba8:	08 95       	ret

00004baa <App_CarSpeedUpdate>:

static void App_CarSpeedUpdate(void)
{
    4baa:	df 93       	push	r29
    4bac:	cf 93       	push	r28
    4bae:	00 d0       	rcall	.+0      	; 0x4bb0 <App_CarSpeedUpdate+0x6>
    4bb0:	cd b7       	in	r28, 0x3d	; 61
    4bb2:	de b7       	in	r29, 0x3e	; 62
    static volatile uint16 Prev_Adc_value_pure = 0;
    /*  Read current value for Potentiometer that work as Accelerator  */
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);  
    4bb4:	80 e0       	ldi	r24, 0x00	; 0
    4bb6:	0e 94 48 11 	call	0x2290	; 0x2290 <ADC_ReadChannelSingleConvertion>
    4bba:	9a 83       	std	Y+2, r25	; 0x02
    4bbc:	89 83       	std	Y+1, r24	; 0x01
    /*  Get speed that be assigned depend on next condition state  */ 
    Temp_Speed = (uint8)( ( (200) * ((uint32) Adc_value_pure)  ) / 1023 ) ;
    4bbe:	89 81       	ldd	r24, Y+1	; 0x01
    4bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc2:	cc 01       	movw	r24, r24
    4bc4:	a0 e0       	ldi	r26, 0x00	; 0
    4bc6:	b0 e0       	ldi	r27, 0x00	; 0
    4bc8:	28 ec       	ldi	r18, 0xC8	; 200
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__mulsi3>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	2f ef       	ldi	r18, 0xFF	; 255
    4bde:	33 e0       	ldi	r19, 0x03	; 3
    4be0:	40 e0       	ldi	r20, 0x00	; 0
    4be2:	50 e0       	ldi	r21, 0x00	; 0
    4be4:	bc 01       	movw	r22, r24
    4be6:	cd 01       	movw	r24, r26
    4be8:	0e 94 6e 27 	call	0x4edc	; 0x4edc <__udivmodsi4>
    4bec:	da 01       	movw	r26, r20
    4bee:	c9 01       	movw	r24, r18
    4bf0:	80 93 a3 02 	sts	0x02A3, r24

    Diff_between_ADCS =  (sint16)Prev_Adc_value_pure - (sint16)Adc_value_pure;
    4bf4:	80 91 a0 02 	lds	r24, 0x02A0
    4bf8:	90 91 a1 02 	lds	r25, 0x02A1
    4bfc:	9c 01       	movw	r18, r24
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	9a 81       	ldd	r25, Y+2	; 0x02
    4c02:	a9 01       	movw	r20, r18
    4c04:	48 1b       	sub	r20, r24
    4c06:	59 0b       	sbc	r21, r25
    4c08:	ca 01       	movw	r24, r20
    4c0a:	90 93 a5 02 	sts	0x02A5, r25
    4c0e:	80 93 a4 02 	sts	0x02A4, r24

    if((Diff_between_ADCS > 19) || (Diff_between_ADCS < -19)) // by try found that potentiometer in real life its value vary with max change = 15 so I want change greater than 25 in CCR or CR to accept it as human change not noise in potentiometer
    4c12:	80 91 a4 02 	lds	r24, 0x02A4
    4c16:	90 91 a5 02 	lds	r25, 0x02A5
    4c1a:	84 31       	cpi	r24, 0x14	; 20
    4c1c:	91 05       	cpc	r25, r1
    4c1e:	44 f4       	brge	.+16     	; 0x4c30 <App_CarSpeedUpdate+0x86>
    4c20:	80 91 a4 02 	lds	r24, 0x02A4
    4c24:	90 91 a5 02 	lds	r25, 0x02A5
    4c28:	5f ef       	ldi	r21, 0xFF	; 255
    4c2a:	8d 3e       	cpi	r24, 0xED	; 237
    4c2c:	95 07       	cpc	r25, r21
    4c2e:	d4 f4       	brge	.+52     	; 0x4c64 <App_CarSpeedUpdate+0xba>
    {
        Car_Speed = Temp_Speed ;
    4c30:	80 91 a3 02 	lds	r24, 0x02A3
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	90 93 84 02 	sts	0x0284, r25
    4c3c:	80 93 83 02 	sts	0x0283, r24
        Timer0_Overflow_counter_DM =0 ; // when there are new change in potentiometer (accelemetor) reset time counter for Driving monetering 
    4c40:	10 92 92 02 	sts	0x0292, r1
    4c44:	10 92 91 02 	sts	0x0291, r1
        
        if((CCS_Currnet_state == CCS_Enable) && (GearBox_Current_State == D_GearBox))
    4c48:	80 91 7f 02 	lds	r24, 0x027F
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	51 f4       	brne	.+20     	; 0x4c64 <App_CarSpeedUpdate+0xba>
    4c50:	80 91 7e 02 	lds	r24, 0x027E
    4c54:	81 30       	cpi	r24, 0x01	; 1
    4c56:	31 f4       	brne	.+12     	; 0x4c64 <App_CarSpeedUpdate+0xba>
        {
            /*  As in requirement Cruise control will be Disabled when press in accelerator pedal if I in "D" Gearbox  and CCS was activated */
            CCS_Currnet_state = CCS_Disable ;
    4c58:	10 92 7f 02 	sts	0x027F, r1
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    4c5c:	80 91 7f 02 	lds	r24, 0x027F
    4c60:	0e 94 0b 20 	call	0x4016	; 0x4016 <DashBoard_Update_CCS_State>
        }
    }
        cli();
    4c64:	f8 94       	cli
        LCD_MoveCursor(1,14);
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	6e e0       	ldi	r22, 0x0E	; 14
    4c6a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        // LCD_MoveCursor(0,0);
        LCD_intToString((uint8)Car_Speed) ;
    4c6e:	80 91 83 02 	lds	r24, 0x0283
    4c72:	90 91 84 02 	lds	r25, 0x0284
    4c76:	88 2f       	mov	r24, r24
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	a0 e0       	ldi	r26, 0x00	; 0
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	bc 01       	movw	r22, r24
    4c80:	cd 01       	movw	r24, r26
    4c82:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <LCD_intToString>
        LCD_DisplayString("KM ");
    4c86:	8c ee       	ldi	r24, 0xEC	; 236
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0e 94 49 1b 	call	0x3692	; 0x3692 <LCD_DisplayString>
        // LCD_intToString(Adc_value_pure) ;
        // LCD_DisplayString(" ");

        */

        sei();
    4c8e:	78 94       	sei
    /*  Save last change in Speed variable that will display in LCD  */
    Prev_Adc_value_pure = Adc_value_pure ;
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	9a 81       	ldd	r25, Y+2	; 0x02
    4c94:	90 93 a1 02 	sts	0x02A1, r25
    4c98:	80 93 a0 02 	sts	0x02A0, r24

}
    4c9c:	0f 90       	pop	r0
    4c9e:	0f 90       	pop	r0
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	08 95       	ret

00004ca6 <App_TimeOut_handle_DM_Time>:


static void App_TimeOut_handle_DM_Time(void)
{
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62
    /*  Increament by one*/
    TimeOut_Counter++;
    4cae:	80 91 8b 02 	lds	r24, 0x028B
    4cb2:	8f 5f       	subi	r24, 0xFF	; 255
    4cb4:	80 93 8b 02 	sts	0x028B, r24
    Timer1_UpdateValue(Value_Loading_Timer1);
    4cb8:	8b e7       	ldi	r24, 0x7B	; 123
    4cba:	91 ee       	ldi	r25, 0xE1	; 225
    4cbc:	0e 94 fd 07 	call	0xffa	; 0xffa <Timer1_UpdateValue>

    /*  No need to increment this variable as DM disabled  */
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    4cc0:	80 91 82 02 	lds	r24, 0x0282
    4cc4:	88 23       	and	r24, r24
    4cc6:	11 f4       	brne	.+4      	; 0x4ccc <App_TimeOut_handle_DM_Time+0x26>
    {
        TimeOut_Counter = 0 ;
    4cc8:	10 92 8b 02 	sts	0x028B, r1
    }

    if(TimeOut_Counter == 5)
    4ccc:	80 91 8b 02 	lds	r24, 0x028B
    4cd0:	85 30       	cpi	r24, 0x05	; 5
    4cd2:	21 f4       	brne	.+8      	; 0x4cdc <App_TimeOut_handle_DM_Time+0x36>
    {
        TimeOut_Counter = 0;
    4cd4:	10 92 8b 02 	sts	0x028B, r1
        /*  Here happen time out that it may be user is in Sleep  */
        DrivingMonetoring_Current_Status = DM_Failed ;
    4cd8:	10 92 55 02 	sts	0x0255, r1

    }

    Clock_sec ++ ;
    4cdc:	80 91 56 02 	lds	r24, 0x0256
    4ce0:	8f 5f       	subi	r24, 0xFF	; 255
    4ce2:	80 93 56 02 	sts	0x0256, r24
    if(Clock_sec == 60)
    4ce6:	80 91 56 02 	lds	r24, 0x0256
    4cea:	8c 33       	cpi	r24, 0x3C	; 60
    4cec:	39 f4       	brne	.+14     	; 0x4cfc <App_TimeOut_handle_DM_Time+0x56>
    {
        Clock_sec =  0 ;
    4cee:	10 92 56 02 	sts	0x0256, r1
        Clock_min ++;
    4cf2:	80 91 57 02 	lds	r24, 0x0257
    4cf6:	8f 5f       	subi	r24, 0xFF	; 255
    4cf8:	80 93 57 02 	sts	0x0257, r24
    }
    if(Clock_min == 60)
    4cfc:	80 91 57 02 	lds	r24, 0x0257
    4d00:	8c 33       	cpi	r24, 0x3C	; 60
    4d02:	39 f4       	brne	.+14     	; 0x4d12 <App_TimeOut_handle_DM_Time+0x6c>
    {
        Clock_min = 0 ;
    4d04:	10 92 57 02 	sts	0x0257, r1
        Clock_hour ++;
    4d08:	80 91 58 02 	lds	r24, 0x0258
    4d0c:	8f 5f       	subi	r24, 0xFF	; 255
    4d0e:	80 93 58 02 	sts	0x0258, r24
    }

    /*  Display total distance  */
    Accumulative_Distance += (Car_Speed / 100.0);
    4d12:	80 91 83 02 	lds	r24, 0x0283
    4d16:	90 91 84 02 	lds	r25, 0x0284
    4d1a:	aa 27       	eor	r26, r26
    4d1c:	97 fd       	sbrc	r25, 7
    4d1e:	a0 95       	com	r26
    4d20:	ba 2f       	mov	r27, r26
    4d22:	bc 01       	movw	r22, r24
    4d24:	cd 01       	movw	r24, r26
    4d26:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	bc 01       	movw	r22, r24
    4d30:	cd 01       	movw	r24, r26
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	48 ec       	ldi	r20, 0xC8	; 200
    4d38:	52 e4       	ldi	r21, 0x42	; 66
    4d3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22
    4d42:	20 91 8c 02 	lds	r18, 0x028C
    4d46:	30 91 8d 02 	lds	r19, 0x028D
    4d4a:	40 91 8e 02 	lds	r20, 0x028E
    4d4e:	50 91 8f 02 	lds	r21, 0x028F
    4d52:	bc 01       	movw	r22, r24
    4d54:	cd 01       	movw	r24, r26
    4d56:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	cb 01       	movw	r24, r22
    4d5e:	80 93 8c 02 	sts	0x028C, r24
    4d62:	90 93 8d 02 	sts	0x028D, r25
    4d66:	a0 93 8e 02 	sts	0x028E, r26
    4d6a:	b0 93 8f 02 	sts	0x028F, r27

}
    4d6e:	cf 91       	pop	r28
    4d70:	df 91       	pop	r29
    4d72:	08 95       	ret

00004d74 <TImer0_OVF_Handling_Fun>:

static void TImer0_OVF_Handling_Fun(void)
{
    4d74:	df 93       	push	r29
    4d76:	cf 93       	push	r28
    4d78:	cd b7       	in	r28, 0x3d	; 61
    4d7a:	de b7       	in	r29, 0x3e	; 62
    Timer0_Overflow_counter_DM++; 
    4d7c:	80 91 91 02 	lds	r24, 0x0291
    4d80:	90 91 92 02 	lds	r25, 0x0292
    4d84:	01 96       	adiw	r24, 0x01	; 1
    4d86:	90 93 92 02 	sts	0x0292, r25
    4d8a:	80 93 91 02 	sts	0x0291, r24
    /*  No need to increment this variable as DM disabled  */
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    4d8e:	80 91 82 02 	lds	r24, 0x0282
    4d92:	88 23       	and	r24, r24
    4d94:	29 f4       	brne	.+10     	; 0x4da0 <TImer0_OVF_Handling_Fun+0x2c>
    {
        Timer0_Overflow_counter_DM = 0 ;
    4d96:	10 92 92 02 	sts	0x0292, r1
    4d9a:	10 92 91 02 	sts	0x0291, r1
    4d9e:	0d c0       	rjmp	.+26     	; 0x4dba <TImer0_OVF_Handling_Fun+0x46>
    }

    else if(Timer0_Overflow_counter_DM == Timer0_OVF_5_sec_DrivingMonetoring)
    4da0:	80 91 91 02 	lds	r24, 0x0291
    4da4:	90 91 92 02 	lds	r25, 0x0292
    4da8:	85 35       	cpi	r24, 0x55	; 85
    4daa:	91 05       	cpc	r25, r1
    4dac:	31 f4       	brne	.+12     	; 0x4dba <TImer0_OVF_Handling_Fun+0x46>
    {
        Timer0_Overflow_counter_DM = 0;
    4dae:	10 92 92 02 	sts	0x0292, r1
    4db2:	10 92 91 02 	sts	0x0291, r1
        /*  Here happen time out that it may be user is in Sleep  */
        DrivingMonetoring_Current_Status = DM_Failed ;
    4db6:	10 92 55 02 	sts	0x0255, r1

    }
    
    if(Buzzer_GiveSound == YES_Condition )
    4dba:	80 91 93 02 	lds	r24, 0x0293
    4dbe:	81 30       	cpi	r24, 0x01	; 1
    4dc0:	b1 f4       	brne	.+44     	; 0x4dee <TImer0_OVF_Handling_Fun+0x7a>
    {
        Buzzer_Timer0_OVF_count++;
    4dc2:	80 91 94 02 	lds	r24, 0x0294
    4dc6:	8f 5f       	subi	r24, 0xFF	; 255
    4dc8:	80 93 94 02 	sts	0x0294, r24
        Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_ON);
    4dcc:	82 e0       	ldi	r24, 0x02	; 2
    4dce:	66 e0       	ldi	r22, 0x06	; 6
    4dd0:	41 e0       	ldi	r20, 0x01	; 1
    4dd2:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <Buzzer_OnOffPositiveLogic>
        if(Buzzer_Timer0_OVF_count == Timer0_OVF_Buzzer_Notify_sound)
    4dd6:	80 91 94 02 	lds	r24, 0x0294
    4dda:	83 30       	cpi	r24, 0x03	; 3
    4ddc:	71 f4       	brne	.+28     	; 0x4dfa <TImer0_OVF_Handling_Fun+0x86>
        {
            Buzzer_GiveSound = NO_Condition ;
    4dde:	10 92 93 02 	sts	0x0293, r1
            Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    4de2:	82 e0       	ldi	r24, 0x02	; 2
    4de4:	66 e0       	ldi	r22, 0x06	; 6
    4de6:	40 e0       	ldi	r20, 0x00	; 0
    4de8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <Buzzer_OnOffPositiveLogic>
    4dec:	06 c0       	rjmp	.+12     	; 0x4dfa <TImer0_OVF_Handling_Fun+0x86>
        }
    }
    else if(Buzzer_GiveSound == NO_Condition)
    4dee:	80 91 93 02 	lds	r24, 0x0293
    4df2:	88 23       	and	r24, r24
    4df4:	11 f4       	brne	.+4      	; 0x4dfa <TImer0_OVF_Handling_Fun+0x86>
    {
        Buzzer_Timer0_OVF_count = 0;
    4df6:	10 92 94 02 	sts	0x0294, r1
    }


    Timer0_Overflow_Counter_RTClock++;
    4dfa:	80 91 90 02 	lds	r24, 0x0290
    4dfe:	8f 5f       	subi	r24, 0xFF	; 255
    4e00:	80 93 90 02 	sts	0x0290, r24
    if(Timer0_Overflow_Counter_RTClock == Timer0_OVF_1_sec_RTClock)
    4e04:	80 91 90 02 	lds	r24, 0x0290
    4e08:	84 36       	cpi	r24, 0x64	; 100
    4e0a:	e9 f4       	brne	.+58     	; 0x4e46 <TImer0_OVF_Handling_Fun+0xd2>
    {
        Timer0_Overflow_Counter_RTClock = 0;
    4e0c:	10 92 90 02 	sts	0x0290, r1
        /*  This is part for update real time clock  */
        Clock_sec ++ ;
    4e10:	80 91 56 02 	lds	r24, 0x0256
    4e14:	8f 5f       	subi	r24, 0xFF	; 255
    4e16:	80 93 56 02 	sts	0x0256, r24
        if(Clock_sec == 60)
    4e1a:	80 91 56 02 	lds	r24, 0x0256
    4e1e:	8c 33       	cpi	r24, 0x3C	; 60
    4e20:	39 f4       	brne	.+14     	; 0x4e30 <TImer0_OVF_Handling_Fun+0xbc>
        {
            Clock_sec =  0 ;
    4e22:	10 92 56 02 	sts	0x0256, r1
            Clock_min ++;
    4e26:	80 91 57 02 	lds	r24, 0x0257
    4e2a:	8f 5f       	subi	r24, 0xFF	; 255
    4e2c:	80 93 57 02 	sts	0x0257, r24
        }
        if(Clock_min == 60)
    4e30:	80 91 57 02 	lds	r24, 0x0257
    4e34:	8c 33       	cpi	r24, 0x3C	; 60
    4e36:	39 f4       	brne	.+14     	; 0x4e46 <TImer0_OVF_Handling_Fun+0xd2>
        {
            Clock_min = 0 ;
    4e38:	10 92 57 02 	sts	0x0257, r1
            Clock_hour ++;
    4e3c:	80 91 58 02 	lds	r24, 0x0258
    4e40:	8f 5f       	subi	r24, 0xFF	; 255
    4e42:	80 93 58 02 	sts	0x0258, r24
        }
    }


}
    4e46:	cf 91       	pop	r28
    4e48:	df 91       	pop	r29
    4e4a:	08 95       	ret

00004e4c <main>:


#include "Application/Application_interface.h"
uint8 Adc_value_pure = 0;
int main()
{
    4e4c:	df 93       	push	r29
    4e4e:	cf 93       	push	r28
    4e50:	cd b7       	in	r28, 0x3d	; 61
    4e52:	de b7       	in	r29, 0x3e	; 62
	/*	Make Initialize for Every thing*/
	App_Init();
    4e54:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <App_Init>
	
	while(1)
	{
		App_StateMachineUpdate();
    4e58:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <App_StateMachineUpdate>
    4e5c:	fd cf       	rjmp	.-6      	; 0x4e58 <main+0xc>

00004e5e <__mulsi3>:
    4e5e:	62 9f       	mul	r22, r18
    4e60:	d0 01       	movw	r26, r0
    4e62:	73 9f       	mul	r23, r19
    4e64:	f0 01       	movw	r30, r0
    4e66:	82 9f       	mul	r24, r18
    4e68:	e0 0d       	add	r30, r0
    4e6a:	f1 1d       	adc	r31, r1
    4e6c:	64 9f       	mul	r22, r20
    4e6e:	e0 0d       	add	r30, r0
    4e70:	f1 1d       	adc	r31, r1
    4e72:	92 9f       	mul	r25, r18
    4e74:	f0 0d       	add	r31, r0
    4e76:	83 9f       	mul	r24, r19
    4e78:	f0 0d       	add	r31, r0
    4e7a:	74 9f       	mul	r23, r20
    4e7c:	f0 0d       	add	r31, r0
    4e7e:	65 9f       	mul	r22, r21
    4e80:	f0 0d       	add	r31, r0
    4e82:	99 27       	eor	r25, r25
    4e84:	72 9f       	mul	r23, r18
    4e86:	b0 0d       	add	r27, r0
    4e88:	e1 1d       	adc	r30, r1
    4e8a:	f9 1f       	adc	r31, r25
    4e8c:	63 9f       	mul	r22, r19
    4e8e:	b0 0d       	add	r27, r0
    4e90:	e1 1d       	adc	r30, r1
    4e92:	f9 1f       	adc	r31, r25
    4e94:	bd 01       	movw	r22, r26
    4e96:	cf 01       	movw	r24, r30
    4e98:	11 24       	eor	r1, r1
    4e9a:	08 95       	ret

00004e9c <__udivmodqi4>:
    4e9c:	99 1b       	sub	r25, r25
    4e9e:	79 e0       	ldi	r23, 0x09	; 9
    4ea0:	04 c0       	rjmp	.+8      	; 0x4eaa <__udivmodqi4_ep>

00004ea2 <__udivmodqi4_loop>:
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	96 17       	cp	r25, r22
    4ea6:	08 f0       	brcs	.+2      	; 0x4eaa <__udivmodqi4_ep>
    4ea8:	96 1b       	sub	r25, r22

00004eaa <__udivmodqi4_ep>:
    4eaa:	88 1f       	adc	r24, r24
    4eac:	7a 95       	dec	r23
    4eae:	c9 f7       	brne	.-14     	; 0x4ea2 <__udivmodqi4_loop>
    4eb0:	80 95       	com	r24
    4eb2:	08 95       	ret

00004eb4 <__udivmodhi4>:
    4eb4:	aa 1b       	sub	r26, r26
    4eb6:	bb 1b       	sub	r27, r27
    4eb8:	51 e1       	ldi	r21, 0x11	; 17
    4eba:	07 c0       	rjmp	.+14     	; 0x4eca <__udivmodhi4_ep>

00004ebc <__udivmodhi4_loop>:
    4ebc:	aa 1f       	adc	r26, r26
    4ebe:	bb 1f       	adc	r27, r27
    4ec0:	a6 17       	cp	r26, r22
    4ec2:	b7 07       	cpc	r27, r23
    4ec4:	10 f0       	brcs	.+4      	; 0x4eca <__udivmodhi4_ep>
    4ec6:	a6 1b       	sub	r26, r22
    4ec8:	b7 0b       	sbc	r27, r23

00004eca <__udivmodhi4_ep>:
    4eca:	88 1f       	adc	r24, r24
    4ecc:	99 1f       	adc	r25, r25
    4ece:	5a 95       	dec	r21
    4ed0:	a9 f7       	brne	.-22     	; 0x4ebc <__udivmodhi4_loop>
    4ed2:	80 95       	com	r24
    4ed4:	90 95       	com	r25
    4ed6:	bc 01       	movw	r22, r24
    4ed8:	cd 01       	movw	r24, r26
    4eda:	08 95       	ret

00004edc <__udivmodsi4>:
    4edc:	a1 e2       	ldi	r26, 0x21	; 33
    4ede:	1a 2e       	mov	r1, r26
    4ee0:	aa 1b       	sub	r26, r26
    4ee2:	bb 1b       	sub	r27, r27
    4ee4:	fd 01       	movw	r30, r26
    4ee6:	0d c0       	rjmp	.+26     	; 0x4f02 <__udivmodsi4_ep>

00004ee8 <__udivmodsi4_loop>:
    4ee8:	aa 1f       	adc	r26, r26
    4eea:	bb 1f       	adc	r27, r27
    4eec:	ee 1f       	adc	r30, r30
    4eee:	ff 1f       	adc	r31, r31
    4ef0:	a2 17       	cp	r26, r18
    4ef2:	b3 07       	cpc	r27, r19
    4ef4:	e4 07       	cpc	r30, r20
    4ef6:	f5 07       	cpc	r31, r21
    4ef8:	20 f0       	brcs	.+8      	; 0x4f02 <__udivmodsi4_ep>
    4efa:	a2 1b       	sub	r26, r18
    4efc:	b3 0b       	sbc	r27, r19
    4efe:	e4 0b       	sbc	r30, r20
    4f00:	f5 0b       	sbc	r31, r21

00004f02 <__udivmodsi4_ep>:
    4f02:	66 1f       	adc	r22, r22
    4f04:	77 1f       	adc	r23, r23
    4f06:	88 1f       	adc	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	1a 94       	dec	r1
    4f0c:	69 f7       	brne	.-38     	; 0x4ee8 <__udivmodsi4_loop>
    4f0e:	60 95       	com	r22
    4f10:	70 95       	com	r23
    4f12:	80 95       	com	r24
    4f14:	90 95       	com	r25
    4f16:	9b 01       	movw	r18, r22
    4f18:	ac 01       	movw	r20, r24
    4f1a:	bd 01       	movw	r22, r26
    4f1c:	cf 01       	movw	r24, r30
    4f1e:	08 95       	ret

00004f20 <__prologue_saves__>:
    4f20:	2f 92       	push	r2
    4f22:	3f 92       	push	r3
    4f24:	4f 92       	push	r4
    4f26:	5f 92       	push	r5
    4f28:	6f 92       	push	r6
    4f2a:	7f 92       	push	r7
    4f2c:	8f 92       	push	r8
    4f2e:	9f 92       	push	r9
    4f30:	af 92       	push	r10
    4f32:	bf 92       	push	r11
    4f34:	cf 92       	push	r12
    4f36:	df 92       	push	r13
    4f38:	ef 92       	push	r14
    4f3a:	ff 92       	push	r15
    4f3c:	0f 93       	push	r16
    4f3e:	1f 93       	push	r17
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	ca 1b       	sub	r28, r26
    4f4a:	db 0b       	sbc	r29, r27
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	09 94       	ijmp

00004f58 <__epilogue_restores__>:
    4f58:	2a 88       	ldd	r2, Y+18	; 0x12
    4f5a:	39 88       	ldd	r3, Y+17	; 0x11
    4f5c:	48 88       	ldd	r4, Y+16	; 0x10
    4f5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f60:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f62:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f64:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f66:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f68:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f6a:	b9 84       	ldd	r11, Y+9	; 0x09
    4f6c:	c8 84       	ldd	r12, Y+8	; 0x08
    4f6e:	df 80       	ldd	r13, Y+7	; 0x07
    4f70:	ee 80       	ldd	r14, Y+6	; 0x06
    4f72:	fd 80       	ldd	r15, Y+5	; 0x05
    4f74:	0c 81       	ldd	r16, Y+4	; 0x04
    4f76:	1b 81       	ldd	r17, Y+3	; 0x03
    4f78:	aa 81       	ldd	r26, Y+2	; 0x02
    4f7a:	b9 81       	ldd	r27, Y+1	; 0x01
    4f7c:	ce 0f       	add	r28, r30
    4f7e:	d1 1d       	adc	r29, r1
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    4f8a:	ed 01       	movw	r28, r26
    4f8c:	08 95       	ret

00004f8e <itoa>:
    4f8e:	fb 01       	movw	r30, r22
    4f90:	9f 01       	movw	r18, r30
    4f92:	e8 94       	clt
    4f94:	42 30       	cpi	r20, 0x02	; 2
    4f96:	c4 f0       	brlt	.+48     	; 0x4fc8 <itoa+0x3a>
    4f98:	45 32       	cpi	r20, 0x25	; 37
    4f9a:	b4 f4       	brge	.+44     	; 0x4fc8 <itoa+0x3a>
    4f9c:	4a 30       	cpi	r20, 0x0A	; 10
    4f9e:	29 f4       	brne	.+10     	; 0x4faa <itoa+0x1c>
    4fa0:	97 fb       	bst	r25, 7
    4fa2:	1e f4       	brtc	.+6      	; 0x4faa <itoa+0x1c>
    4fa4:	90 95       	com	r25
    4fa6:	81 95       	neg	r24
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	64 2f       	mov	r22, r20
    4fac:	77 27       	eor	r23, r23
    4fae:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__udivmodhi4>
    4fb2:	80 5d       	subi	r24, 0xD0	; 208
    4fb4:	8a 33       	cpi	r24, 0x3A	; 58
    4fb6:	0c f0       	brlt	.+2      	; 0x4fba <itoa+0x2c>
    4fb8:	89 5d       	subi	r24, 0xD9	; 217
    4fba:	81 93       	st	Z+, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	00 97       	sbiw	r24, 0x00	; 0
    4fc0:	a1 f7       	brne	.-24     	; 0x4faa <itoa+0x1c>
    4fc2:	16 f4       	brtc	.+4      	; 0x4fc8 <itoa+0x3a>
    4fc4:	5d e2       	ldi	r21, 0x2D	; 45
    4fc6:	51 93       	st	Z+, r21
    4fc8:	10 82       	st	Z, r1
    4fca:	c9 01       	movw	r24, r18
    4fcc:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <strrev>

00004fd0 <strrev>:
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	67 2f       	mov	r22, r23
    4fd6:	71 91       	ld	r23, Z+
    4fd8:	77 23       	and	r23, r23
    4fda:	e1 f7       	brne	.-8      	; 0x4fd4 <strrev+0x4>
    4fdc:	32 97       	sbiw	r30, 0x02	; 2
    4fde:	04 c0       	rjmp	.+8      	; 0x4fe8 <strrev+0x18>
    4fe0:	7c 91       	ld	r23, X
    4fe2:	6d 93       	st	X+, r22
    4fe4:	70 83       	st	Z, r23
    4fe6:	62 91       	ld	r22, -Z
    4fe8:	ae 17       	cp	r26, r30
    4fea:	bf 07       	cpc	r27, r31
    4fec:	c8 f3       	brcs	.-14     	; 0x4fe0 <strrev+0x10>
    4fee:	08 95       	ret

00004ff0 <_exit>:
    4ff0:	f8 94       	cli

00004ff2 <__stop_program>:
    4ff2:	ff cf       	rjmp	.-2      	; 0x4ff2 <__stop_program>
