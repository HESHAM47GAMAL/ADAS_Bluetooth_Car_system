
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00004212  000042a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800114  00800114  0000435a  2**0
                  ALLOC
  3 .stab         000058c8  00000000  00000000  0000435c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003736  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d35a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d49a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d60a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001013e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000112d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_1>
       8:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__vector_2>
       c:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <main>
      8a:	0c 94 07 21 	jmp	0x420e	; 0x420e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer0_SetCallBack+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	90 93 15 01 	sts	0x0115, r25
     b5c:	80 93 14 01 	sts	0x0114, r24
    }
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <__vector_11>:

    #if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
        ISR(TIMER_0_OVF)
        {
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T0 != NULL_PTR)
     b94:	80 91 14 01 	lds	r24, 0x0114
     b98:	90 91 15 01 	lds	r25, 0x0115
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	29 f0       	breq	.+10     	; 0xbaa <__vector_11+0x40>
            {
                g_CallBackPtr_T0();
     ba0:	e0 91 14 01 	lds	r30, 0x0114
     ba4:	f0 91 15 01 	lds	r31, 0x0115
     ba8:	09 95       	icall
            }
        }
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <Timer0_Init>:




void Timer0_Init(void)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR0,FOC0);
     bd8:	a3 e5       	ldi	r26, 0x53	; 83
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e3 e5       	ldi	r30, 0x53	; 83
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 68       	ori	r24, 0x80	; 128
     be4:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR0,WGM00);
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8f 7b       	andi	r24, 0xBF	; 191
     bf2:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,WGM01);
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	87 7f       	andi	r24, 0xF7	; 247
     c00:	8c 93       	st	X, r24
    #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
     c02:	af e5       	ldi	r26, 0x5F	; 95
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	ef e5       	ldi	r30, 0x5F	; 95
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 68       	ori	r24, 0x80	; 128
     c0e:	8c 93       	st	X, r24
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
     c10:	a9 e5       	ldi	r26, 0x59	; 89
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e9 e5       	ldi	r30, 0x59	; 89
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	81 60       	ori	r24, 0x01	; 1
     c1c:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0e 94 15 06 	call	0xc2a	; 0xc2a <Timer0_UpdateValue>
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
     c36:	e2 e5       	ldi	r30, 0x52	; 82
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	80 83       	st	Z, r24
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <Timer0_StopClock>:


void Timer0_StopClock(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
     c4e:	a3 e5       	ldi	r26, 0x53	; 83
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e3 e5       	ldi	r30, 0x53	; 83
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	88 7f       	andi	r24, 0xF8	; 248
     c5a:	8c 93       	st	X, r24
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
     c6a:	a3 e5       	ldi	r26, 0x53	; 83
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e3 e5       	ldi	r30, 0x53	; 83
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	98 2f       	mov	r25, r24
     c76:	98 7f       	andi	r25, 0xF8	; 248
     c78:	80 91 b2 00 	lds	r24, 0x00B2
     c7c:	89 2b       	or	r24, r25
     c7e:	8c 93       	st	X, r24
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <Timer0_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T0 == Enable_Interrupt_T0)

        void Timer0_DelayOVFInterrupt(void)
        {
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
            Timer0_ProvideClock();
     c8e:	0e 94 31 06 	call	0xc62	; 0xc62 <Timer0_ProvideClock>
        }
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <Timer0_OVFDisableInterrupt>:


        void Timer0_OVFDisableInterrupt(void)
        {
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE0);   
     ca0:	a9 e5       	ldi	r26, 0x59	; 89
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e9 e5       	ldi	r30, 0x59	; 89
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8c 93       	st	X, r24
        }
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <Timer0_OVFEnableInterrupt>:

        void Timer0_OVFEnableInterrupt(void)
        {
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE0);   
     cbc:	a9 e5       	ldi	r26, 0x59	; 89
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e9 e5       	ldi	r30, 0x59	; 89
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	81 60       	ori	r24, 0x01	; 1
     cc8:	8c 93       	st	X, r24
        }
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     cda:	19 82       	std	Y+1, r1	; 0x01
     cdc:	57 c0       	rjmp	.+174    	; 0xd8c <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	c9 01       	movw	r24, r18
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	fc 01       	movw	r30, r24
     cf0:	ec 54       	subi	r30, 0x4C	; 76
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 81       	ld	r24, Z
     cf6:	88 30       	cpi	r24, 0x08	; 8
     cf8:	e9 f4       	brne	.+58     	; 0xd34 <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	c9 01       	movw	r24, r18
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	fc 01       	movw	r30, r24
     d0c:	ed 54       	subi	r30, 0x4D	; 77
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	40 81       	ld	r20, Z
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	c9 01       	movw	r24, r18
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	fc 01       	movw	r30, r24
     d24:	eb 54       	subi	r30, 0x4B	; 75
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	90 81       	ld	r25, Z
     d2a:	84 2f       	mov	r24, r20
     d2c:	69 2f       	mov	r22, r25
     d2e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_SetPortDirection>
     d32:	29 c0       	rjmp	.+82     	; 0xd86 <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	c9 01       	movw	r24, r18
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	fc 01       	movw	r30, r24
     d46:	ed 54       	subi	r30, 0x4D	; 77
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	50 81       	ld	r21, Z
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	c9 01       	movw	r24, r18
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	82 0f       	add	r24, r18
     d5a:	93 1f       	adc	r25, r19
     d5c:	fc 01       	movw	r30, r24
     d5e:	ec 54       	subi	r30, 0x4C	; 76
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	40 81       	ld	r20, Z
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	c9 01       	movw	r24, r18
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	fc 01       	movw	r30, r24
     d76:	eb 54       	subi	r30, 0x4B	; 75
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	90 81       	ld	r25, Z
     d7c:	85 2f       	mov	r24, r21
     d7e:	64 2f       	mov	r22, r20
     d80:	49 2f       	mov	r20, r25
     d82:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <GPIO_init+0xc4>
     d92:	a5 cf       	rjmp	.-182    	; 0xcde <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <GPIO_SetPinDirection+0x6>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <GPIO_SetPinDirection+0x8>
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <GPIO_SetPinDirection+0x1c>
     db6:	d8 c1       	rjmp	.+944    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	88 30       	cpi	r24, 0x08	; 8
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <GPIO_SetPinDirection+0x24>
     dbe:	d4 c1       	rjmp	.+936    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3d 83       	std	Y+5, r19	; 0x05
     dc8:	2c 83       	std	Y+4, r18	; 0x04
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <GPIO_SetPinDirection+0x3a>
     dd4:	84 c0       	rjmp	.+264    	; 0xede <GPIO_SetPinDirection+0x142>
     dd6:	2c 81       	ldd	r18, Y+4	; 0x04
     dd8:	3d 81       	ldd	r19, Y+5	; 0x05
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	2c f4       	brge	.+10     	; 0xdea <GPIO_SetPinDirection+0x4e>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	9d 81       	ldd	r25, Y+5	; 0x05
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	71 f0       	breq	.+28     	; 0xe04 <GPIO_SetPinDirection+0x68>
     de8:	bf c1       	rjmp	.+894    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
     dea:	2c 81       	ldd	r18, Y+4	; 0x04
     dec:	3d 81       	ldd	r19, Y+5	; 0x05
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <GPIO_SetPinDirection+0x5a>
     df4:	e1 c0       	rjmp	.+450    	; 0xfb8 <GPIO_SetPinDirection+0x21c>
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	9d 81       	ldd	r25, Y+5	; 0x05
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	91 05       	cpc	r25, r1
     dfe:	09 f4       	brne	.+2      	; 0xe02 <GPIO_SetPinDirection+0x66>
     e00:	48 c1       	rjmp	.+656    	; 0x1092 <GPIO_SetPinDirection+0x2f6>
     e02:	b2 c1       	rjmp	.+868    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 23       	and	r24, r24
     e08:	41 f5       	brne	.+80     	; 0xe5a <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
     e0a:	aa e3       	ldi	r26, 0x3A	; 58
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e3       	ldi	r30, 0x3A	; 58
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_SetPinDirection+0x8a>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	2a 95       	dec	r18
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_SetPinDirection+0x86>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
     e30:	ab e3       	ldi	r26, 0x3B	; 59
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e3       	ldi	r30, 0x3B	; 59
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <GPIO_SetPinDirection+0xb2>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <GPIO_SetPinDirection+0xae>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	87 c1       	rjmp	.+782    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	39 f5       	brne	.+78     	; 0xeae <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
     e60:	aa e3       	ldi	r26, 0x3A	; 58
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ea e3       	ldi	r30, 0x3A	; 58
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_SetPinDirection+0xe0>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	2a 95       	dec	r18
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_SetPinDirection+0xdc>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
     e86:	ab e3       	ldi	r26, 0x3B	; 59
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	eb e3       	ldi	r30, 0x3B	; 59
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <GPIO_SetPinDirection+0x108>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <GPIO_SetPinDirection+0x104>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	5d c1       	rjmp	.+698    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <GPIO_SetPinDirection+0x11a>
     eb4:	59 c1       	rjmp	.+690    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
     eb6:	aa e3       	ldi	r26, 0x3A	; 58
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e3       	ldi	r30, 0x3A	; 58
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_SetPinDirection+0x138>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_SetPinDirection+0x134>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	45 c1       	rjmp	.+650    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 23       	and	r24, r24
     ee2:	41 f5       	brne	.+80     	; 0xf34 <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
     ee4:	a7 e3       	ldi	r26, 0x37	; 55
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e3       	ldi	r30, 0x37	; 55
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_SetPinDirection+0x164>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	2a 95       	dec	r18
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_SetPinDirection+0x160>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
     f0a:	a8 e3       	ldi	r26, 0x38	; 56
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e8 e3       	ldi	r30, 0x38	; 56
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_SetPinDirection+0x18c>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_SetPinDirection+0x188>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	1a c1       	rjmp	.+564    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	39 f5       	brne	.+78     	; 0xf88 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
     f3a:	a7 e3       	ldi	r26, 0x37	; 55
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e7 e3       	ldi	r30, 0x37	; 55
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_SetPinDirection+0x1ba>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	2a 95       	dec	r18
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_SetPinDirection+0x1b6>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
     f60:	a8 e3       	ldi	r26, 0x38	; 56
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e3       	ldi	r30, 0x38	; 56
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <GPIO_SetPinDirection+0x1e2>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <GPIO_SetPinDirection+0x1de>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	f0 c0       	rjmp	.+480    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	09 f0       	breq	.+2      	; 0xf90 <GPIO_SetPinDirection+0x1f4>
     f8e:	ec c0       	rjmp	.+472    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
     f90:	a7 e3       	ldi	r26, 0x37	; 55
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e7 e3       	ldi	r30, 0x37	; 55
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_SetPinDirection+0x212>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <GPIO_SetPinDirection+0x20e>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	d8 c0       	rjmp	.+432    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 23       	and	r24, r24
     fbc:	41 f5       	brne	.+80     	; 0x100e <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
     fbe:	a4 e3       	ldi	r26, 0x34	; 52
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_SetPinDirection+0x23e>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_SetPinDirection+0x23a>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
     fe4:	a5 e3       	ldi	r26, 0x35	; 53
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e3       	ldi	r30, 0x35	; 53
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <GPIO_SetPinDirection+0x266>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <GPIO_SetPinDirection+0x262>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	ad c0       	rjmp	.+346    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	39 f5       	brne	.+78     	; 0x1062 <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    1014:	a4 e3       	ldi	r26, 0x34	; 52
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e4 e3       	ldi	r30, 0x34	; 52
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_SetPinDirection+0x294>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	2a 95       	dec	r18
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_SetPinDirection+0x290>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    103a:	a5 e3       	ldi	r26, 0x35	; 53
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e3       	ldi	r30, 0x35	; 53
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <GPIO_SetPinDirection+0x2bc>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <GPIO_SetPinDirection+0x2b8>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	83 c0       	rjmp	.+262    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	09 f0       	breq	.+2      	; 0x106a <GPIO_SetPinDirection+0x2ce>
    1068:	7f c0       	rjmp	.+254    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <GPIO_SetPinDirection+0x2ec>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <GPIO_SetPinDirection+0x2e8>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	6b c0       	rjmp	.+214    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 23       	and	r24, r24
    1096:	41 f5       	brne	.+80     	; 0x10e8 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    1098:	a1 e3       	ldi	r26, 0x31	; 49
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_SetPinDirection+0x318>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	2a 95       	dec	r18
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_SetPinDirection+0x314>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    10be:	a2 e3       	ldi	r26, 0x32	; 50
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <GPIO_SetPinDirection+0x340>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <GPIO_SetPinDirection+0x33c>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	40 c0       	rjmp	.+128    	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	39 f5       	brne	.+78     	; 0x113c <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    10ee:	a1 e3       	ldi	r26, 0x31	; 49
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_SetPinDirection+0x36e>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	2a 95       	dec	r18
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_SetPinDirection+0x36a>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_SetPinDirection+0x396>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_SetPinDirection+0x392>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	99 f4       	brne	.+38     	; 0x1168 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    1142:	a1 e3       	ldi	r26, 0x31	; 49
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e1 e3       	ldi	r30, 0x31	; 49
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_SetPinDirection+0x3c4>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_SetPinDirection+0x3c0>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <GPIO_ReadPin+0x6>
    117e:	00 d0       	rcall	.+0      	; 0x1180 <GPIO_ReadPin+0x8>
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	8a 83       	std	Y+2, r24	; 0x02
    1188:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    118a:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	08 f0       	brcs	.+2      	; 0x1194 <GPIO_ReadPin+0x1c>
    1192:	84 c0       	rjmp	.+264    	; 0x129c <GPIO_ReadPin+0x124>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	88 30       	cpi	r24, 0x08	; 8
    1198:	08 f0       	brcs	.+2      	; 0x119c <GPIO_ReadPin+0x24>
    119a:	80 c0       	rjmp	.+256    	; 0x129c <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	3d 83       	std	Y+5, r19	; 0x05
    11a4:	2c 83       	std	Y+4, r18	; 0x04
    11a6:	4c 81       	ldd	r20, Y+4	; 0x04
    11a8:	5d 81       	ldd	r21, Y+5	; 0x05
    11aa:	41 30       	cpi	r20, 0x01	; 1
    11ac:	51 05       	cpc	r21, r1
    11ae:	79 f1       	breq	.+94     	; 0x120e <GPIO_ReadPin+0x96>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	91 05       	cpc	r25, r1
    11b8:	34 f4       	brge	.+12     	; 0x11c6 <GPIO_ReadPin+0x4e>
    11ba:	2c 81       	ldd	r18, Y+4	; 0x04
    11bc:	3d 81       	ldd	r19, Y+5	; 0x05
    11be:	21 15       	cp	r18, r1
    11c0:	31 05       	cpc	r19, r1
    11c2:	69 f0       	breq	.+26     	; 0x11de <GPIO_ReadPin+0x66>
    11c4:	6b c0       	rjmp	.+214    	; 0x129c <GPIO_ReadPin+0x124>
    11c6:	4c 81       	ldd	r20, Y+4	; 0x04
    11c8:	5d 81       	ldd	r21, Y+5	; 0x05
    11ca:	42 30       	cpi	r20, 0x02	; 2
    11cc:	51 05       	cpc	r21, r1
    11ce:	b9 f1       	breq	.+110    	; 0x123e <GPIO_ReadPin+0xc6>
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <GPIO_ReadPin+0x64>
    11da:	49 c0       	rjmp	.+146    	; 0x126e <GPIO_ReadPin+0xf6>
    11dc:	5f c0       	rjmp	.+190    	; 0x129c <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    11de:	e9 e3       	ldi	r30, 0x39	; 57
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_ReadPin+0x7e>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_ReadPin+0x7a>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	90 70       	andi	r25, 0x00	; 0
    1200:	88 23       	and	r24, r24
    1202:	19 f0       	breq	.+6      	; 0x120a <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	49 c0       	rjmp	.+146    	; 0x129c <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    120a:	19 82       	std	Y+1, r1	; 0x01
    120c:	47 c0       	rjmp	.+142    	; 0x129c <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    120e:	e6 e3       	ldi	r30, 0x36	; 54
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <GPIO_ReadPin+0xae>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <GPIO_ReadPin+0xaa>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	31 c0       	rjmp	.+98     	; 0x129c <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	2f c0       	rjmp	.+94     	; 0x129c <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    123e:	e3 e3       	ldi	r30, 0x33	; 51
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_ReadPin+0xde>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_ReadPin+0xda>
    125a:	ca 01       	movw	r24, r20
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f0       	breq	.+6      	; 0x126a <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	19 c0       	rjmp	.+50     	; 0x129c <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	17 c0       	rjmp	.+46     	; 0x129c <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    126e:	e0 e3       	ldi	r30, 0x30	; 48
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_ReadPin+0x10e>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_ReadPin+0x10a>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	88 23       	and	r24, r24
    1292:	19 f0       	breq	.+6      	; 0x129a <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	01 c0       	rjmp	.+2      	; 0x129c <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    129a:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_WritePin+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <GPIO_WritePin+0x8>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	6a 83       	std	Y+2, r22	; 0x02
    12c0:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <GPIO_WritePin+0x1c>
    12c8:	e4 c0       	rjmp	.+456    	; 0x1492 <GPIO_WritePin+0x1e4>
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	88 30       	cpi	r24, 0x08	; 8
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <GPIO_WritePin+0x24>
    12d0:	e0 c0       	rjmp	.+448    	; 0x1492 <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <GPIO_WritePin+0x3a>
    12e6:	47 c0       	rjmp	.+142    	; 0x1376 <GPIO_WritePin+0xc8>
    12e8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ea:	3d 81       	ldd	r19, Y+5	; 0x05
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	2c f4       	brge	.+10     	; 0x12fc <GPIO_WritePin+0x4e>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	71 f0       	breq	.+28     	; 0x1316 <GPIO_WritePin+0x68>
    12fa:	cb c0       	rjmp	.+406    	; 0x1492 <GPIO_WritePin+0x1e4>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <GPIO_WritePin+0x5a>
    1306:	67 c0       	rjmp	.+206    	; 0x13d6 <GPIO_WritePin+0x128>
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	09 f4       	brne	.+2      	; 0x1314 <GPIO_WritePin+0x66>
    1312:	91 c0       	rjmp	.+290    	; 0x1436 <GPIO_WritePin+0x188>
    1314:	be c0       	rjmp	.+380    	; 0x1492 <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	a1 f4       	brne	.+40     	; 0x1344 <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    131c:	ab e3       	ldi	r26, 0x3B	; 59
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	eb e3       	ldi	r30, 0x3B	; 59
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_WritePin+0x8c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_WritePin+0x88>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	a7 c0       	rjmp	.+334    	; 0x1492 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 23       	and	r24, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <GPIO_WritePin+0x9e>
    134a:	a3 c0       	rjmp	.+326    	; 0x1492 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    134c:	ab e3       	ldi	r26, 0x3B	; 59
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e3       	ldi	r30, 0x3B	; 59
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_WritePin+0xbc>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_WritePin+0xb8>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	8e c0       	rjmp	.+284    	; 0x1492 <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	a1 f4       	brne	.+40     	; 0x13a4 <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    137c:	a8 e3       	ldi	r26, 0x38	; 56
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e8 e3       	ldi	r30, 0x38	; 56
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_WritePin+0xec>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_WritePin+0xe8>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	77 c0       	rjmp	.+238    	; 0x1492 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 23       	and	r24, r24
    13a8:	09 f0       	breq	.+2      	; 0x13ac <GPIO_WritePin+0xfe>
    13aa:	73 c0       	rjmp	.+230    	; 0x1492 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_WritePin+0x11c>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_WritePin+0x118>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	5e c0       	rjmp	.+188    	; 0x1492 <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	a1 f4       	brne	.+40     	; 0x1404 <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    13dc:	a5 e3       	ldi	r26, 0x35	; 53
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e3       	ldi	r30, 0x35	; 53
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_WritePin+0x14c>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_WritePin+0x148>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	47 c0       	rjmp	.+142    	; 0x1492 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 23       	and	r24, r24
    1408:	09 f0       	breq	.+2      	; 0x140c <GPIO_WritePin+0x15e>
    140a:	43 c0       	rjmp	.+134    	; 0x1492 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    140c:	a5 e3       	ldi	r26, 0x35	; 53
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e3       	ldi	r30, 0x35	; 53
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_WritePin+0x17c>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_WritePin+0x178>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	2e c0       	rjmp	.+92     	; 0x1492 <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	a1 f4       	brne	.+40     	; 0x1464 <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    143c:	a2 e3       	ldi	r26, 0x32	; 50
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_WritePin+0x1ac>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_WritePin+0x1a8>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	17 c0       	rjmp	.+46     	; 0x1492 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 23       	and	r24, r24
    1468:	a1 f4       	brne	.+40     	; 0x1492 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    146a:	a2 e3       	ldi	r26, 0x32	; 50
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e2 e3       	ldi	r30, 0x32	; 50
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_WritePin+0x1da>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_WritePin+0x1d6>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
                break;

        }
    }
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_TogglePin+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <GPIO_TogglePin+0x8>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <GPIO_TogglePin+0x18>
    14b8:	72 c0       	rjmp	.+228    	; 0x159e <GPIO_TogglePin+0xfc>
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <GPIO_TogglePin+0x20>
    14c0:	6e c0       	rjmp	.+220    	; 0x159e <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3c 83       	std	Y+4, r19	; 0x04
    14ca:	2b 83       	std	Y+3, r18	; 0x03
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	49 f1       	breq	.+82     	; 0x1528 <GPIO_TogglePin+0x86>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <GPIO_TogglePin+0x48>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	61 f0       	breq	.+24     	; 0x1500 <GPIO_TogglePin+0x5e>
    14e8:	5a c0       	rjmp	.+180    	; 0x159e <GPIO_TogglePin+0xfc>
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	71 f1       	breq	.+92     	; 0x1550 <GPIO_TogglePin+0xae>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	e9 f1       	breq	.+122    	; 0x1578 <GPIO_TogglePin+0xd6>
    14fe:	4f c0       	rjmp	.+158    	; 0x159e <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    1500:	ab e3       	ldi	r26, 0x3B	; 59
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	eb e3       	ldi	r30, 0x3B	; 59
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <GPIO_TogglePin+0x7c>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <GPIO_TogglePin+0x78>
    1522:	84 27       	eor	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	3b c0       	rjmp	.+118    	; 0x159e <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1528:	a8 e3       	ldi	r26, 0x38	; 56
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e8 e3       	ldi	r30, 0x38	; 56
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_TogglePin+0xa4>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_TogglePin+0xa0>
    154a:	84 27       	eor	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	27 c0       	rjmp	.+78     	; 0x159e <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    1550:	a5 e3       	ldi	r26, 0x35	; 53
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e5 e3       	ldi	r30, 0x35	; 53
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_TogglePin+0xcc>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_TogglePin+0xc8>
    1572:	84 27       	eor	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	13 c0       	rjmp	.+38     	; 0x159e <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_TogglePin+0xf4>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_TogglePin+0xf0>
    159a:	84 27       	eor	r24, r20
    159c:	8c 93       	st	X, r24
                break;

        }
    }

}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_SetPortDirection+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_SetPortDirection+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <GPIO_SetPortDirection+0x18>
    15c2:	96 c0       	rjmp	.+300    	; 0x16f0 <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3c 83       	std	Y+4, r19	; 0x04
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	a9 f1       	breq	.+106    	; 0x1642 <GPIO_SetPortDirection+0x96>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <GPIO_SetPortDirection+0x40>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	71 f0       	breq	.+28     	; 0x1606 <GPIO_SetPortDirection+0x5a>
    15ea:	82 c0       	rjmp	.+260    	; 0x16f0 <GPIO_SetPortDirection+0x144>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <GPIO_SetPortDirection+0x4c>
    15f6:	43 c0       	rjmp	.+134    	; 0x167e <GPIO_SetPortDirection+0xd2>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <GPIO_SetPortDirection+0x58>
    1602:	5a c0       	rjmp	.+180    	; 0x16b8 <GPIO_SetPortDirection+0x10c>
    1604:	75 c0       	rjmp	.+234    	; 0x16f0 <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	88 23       	and	r24, r24
    160a:	39 f4       	brne	.+14     	; 0x161a <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    160c:	ea e3       	ldi	r30, 0x3A	; 58
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	10 82       	st	Z, r1
    1618:	6b c0       	rjmp	.+214    	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	41 f4       	brne	.+16     	; 0x1630 <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1620:	ea e3       	ldi	r30, 0x3A	; 58
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	80 83       	st	Z, r24
    162e:	60 c0       	rjmp	.+192    	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	8f 3f       	cpi	r24, 0xFF	; 255
    1634:	09 f0       	breq	.+2      	; 0x1638 <GPIO_SetPortDirection+0x8c>
    1636:	5c c0       	rjmp	.+184    	; 0x16f0 <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1638:	ea e3       	ldi	r30, 0x3A	; 58
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	80 83       	st	Z, r24
    1640:	57 c0       	rjmp	.+174    	; 0x16f0 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	39 f4       	brne	.+14     	; 0x1656 <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1648:	e7 e3       	ldi	r30, 0x37	; 55
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	10 82       	st	Z, r1
    1654:	4d c0       	rjmp	.+154    	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	41 f4       	brne	.+16     	; 0x166c <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    165c:	e7 e3       	ldi	r30, 0x37	; 55
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    1662:	e8 e3       	ldi	r30, 0x38	; 56
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	80 83       	st	Z, r24
    166a:	42 c0       	rjmp	.+132    	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	8f 3f       	cpi	r24, 0xFF	; 255
    1670:	09 f0       	breq	.+2      	; 0x1674 <GPIO_SetPortDirection+0xc8>
    1672:	3e c0       	rjmp	.+124    	; 0x16f0 <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    1674:	e7 e3       	ldi	r30, 0x37	; 55
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	80 83       	st	Z, r24
    167c:	39 c0       	rjmp	.+114    	; 0x16f0 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	88 23       	and	r24, r24
    1682:	39 f4       	brne	.+14     	; 0x1692 <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    1684:	e4 e3       	ldi	r30, 0x34	; 52
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    168a:	e5 e3       	ldi	r30, 0x35	; 53
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	10 82       	st	Z, r1
    1690:	2f c0       	rjmp	.+94     	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	41 f4       	brne	.+16     	; 0x16a8 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1698:	e4 e3       	ldi	r30, 0x34	; 52
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	80 83       	st	Z, r24
    16a6:	24 c0       	rjmp	.+72     	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	8f 3f       	cpi	r24, 0xFF	; 255
    16ac:	09 f5       	brne	.+66     	; 0x16f0 <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    16ae:	e4 e3       	ldi	r30, 0x34	; 52
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	80 83       	st	Z, r24
    16b6:	1c c0       	rjmp	.+56     	; 0x16f0 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	88 23       	and	r24, r24
    16bc:	39 f4       	brne	.+14     	; 0x16cc <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    16c4:	e2 e3       	ldi	r30, 0x32	; 50
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	10 82       	st	Z, r1
    16ca:	12 c0       	rjmp	.+36     	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	41 f4       	brne	.+16     	; 0x16e2 <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    16d2:	e1 e3       	ldi	r30, 0x31	; 49
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    16d8:	e2 e3       	ldi	r30, 0x32	; 50
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	80 83       	st	Z, r24
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	8f 3f       	cpi	r24, 0xFF	; 255
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    16e8:	e1 e3       	ldi	r30, 0x31	; 49
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <GPIO_ReadPort+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <GPIO_ReadPort+0x8>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    170c:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	90 f5       	brcc	.+100    	; 0x1778 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3c 83       	std	Y+4, r19	; 0x04
    171c:	2b 83       	std	Y+3, r18	; 0x03
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	d1 f0       	breq	.+52     	; 0x175c <GPIO_ReadPort+0x5e>
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	2c f4       	brge	.+10     	; 0x173c <GPIO_ReadPort+0x3e>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	61 f0       	breq	.+24     	; 0x1752 <GPIO_ReadPort+0x54>
    173a:	1e c0       	rjmp	.+60     	; 0x1778 <GPIO_ReadPort+0x7a>
    173c:	2b 81       	ldd	r18, Y+3	; 0x03
    173e:	3c 81       	ldd	r19, Y+4	; 0x04
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	81 f0       	breq	.+32     	; 0x1766 <GPIO_ReadPort+0x68>
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	83 30       	cpi	r24, 0x03	; 3
    174c:	91 05       	cpc	r25, r1
    174e:	81 f0       	breq	.+32     	; 0x1770 <GPIO_ReadPort+0x72>
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    1752:	e9 e3       	ldi	r30, 0x39	; 57
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    175c:	e6 e3       	ldi	r30, 0x36	; 54
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    1766:	e3 e3       	ldi	r30, 0x33	; 51
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	04 c0       	rjmp	.+8      	; 0x1778 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    1770:	e0 e3       	ldi	r30, 0x30	; 48
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    1778:	89 81       	ldd	r24, Y+1	; 0x01
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <GPIO_WritePort+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <GPIO_WritePort+0x8>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	90 f5       	brcc	.+100    	; 0x1802 <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3c 83       	std	Y+4, r19	; 0x04
    17a6:	2b 83       	std	Y+3, r18	; 0x03
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	d1 f0       	breq	.+52     	; 0x17e6 <GPIO_WritePort+0x5e>
    17b2:	2b 81       	ldd	r18, Y+3	; 0x03
    17b4:	3c 81       	ldd	r19, Y+4	; 0x04
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <GPIO_WritePort+0x3e>
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	61 f0       	breq	.+24     	; 0x17dc <GPIO_WritePort+0x54>
    17c4:	1e c0       	rjmp	.+60     	; 0x1802 <GPIO_WritePort+0x7a>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	81 f0       	breq	.+32     	; 0x17f0 <GPIO_WritePort+0x68>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	91 05       	cpc	r25, r1
    17d8:	81 f0       	breq	.+32     	; 0x17fa <GPIO_WritePort+0x72>
    17da:	13 c0       	rjmp	.+38     	; 0x1802 <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    17dc:	eb e3       	ldi	r30, 0x3B	; 59
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	80 83       	st	Z, r24
    17e4:	0e c0       	rjmp	.+28     	; 0x1802 <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    17e6:	e8 e3       	ldi	r30, 0x38	; 56
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	80 83       	st	Z, r24
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	80 83       	st	Z, r24
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    17fa:	e2 e3       	ldi	r30, 0x32	; 50
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_TogglePort+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	08 f0       	brcs	.+2      	; 0x1826 <GPIO_TogglePort+0x16>
    1824:	3e c0       	rjmp	.+124    	; 0x18a2 <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3b 83       	std	Y+3, r19	; 0x03
    182e:	2a 83       	std	Y+2, r18	; 0x02
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	e9 f0       	breq	.+58     	; 0x1874 <GPIO_TogglePort+0x64>
    183a:	2a 81       	ldd	r18, Y+2	; 0x02
    183c:	3b 81       	ldd	r19, Y+3	; 0x03
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	2c f4       	brge	.+10     	; 0x184e <GPIO_TogglePort+0x3e>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 f0       	breq	.+24     	; 0x1864 <GPIO_TogglePort+0x54>
    184c:	2a c0       	rjmp	.+84     	; 0x18a2 <GPIO_TogglePort+0x92>
    184e:	2a 81       	ldd	r18, Y+2	; 0x02
    1850:	3b 81       	ldd	r19, Y+3	; 0x03
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	b1 f0       	breq	.+44     	; 0x1884 <GPIO_TogglePort+0x74>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	c9 f0       	breq	.+50     	; 0x1894 <GPIO_TogglePort+0x84>
    1862:	1f c0       	rjmp	.+62     	; 0x18a2 <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    1864:	ab e3       	ldi	r26, 0x3B	; 59
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	eb e3       	ldi	r30, 0x3B	; 59
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 95       	com	r24
    1870:	8c 93       	st	X, r24
    1872:	17 c0       	rjmp	.+46     	; 0x18a2 <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    1874:	a8 e3       	ldi	r26, 0x38	; 56
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e8 e3       	ldi	r30, 0x38	; 56
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 95       	com	r24
    1880:	8c 93       	st	X, r24
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e3       	ldi	r30, 0x35	; 53
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 95       	com	r24
    1890:	8c 93       	st	X, r24
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    1894:	a2 e3       	ldi	r26, 0x32	; 50
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 95       	com	r24
    18a0:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	ef 93       	push	r30
    18ce:	ff 93       	push	r31
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    18d8:	80 91 16 01 	lds	r24, 0x0116
    18dc:	90 91 17 01 	lds	r25, 0x0117
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	29 f0       	breq	.+10     	; 0x18ee <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    18e4:	e0 91 16 01 	lds	r30, 0x0116
    18e8:	f0 91 17 01 	lds	r31, 0x0117
    18ec:	09 95       	icall
    }
}
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	ff 91       	pop	r31
    18f4:	ef 91       	pop	r30
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	7f 91       	pop	r23
    1900:	6f 91       	pop	r22
    1902:	5f 91       	pop	r21
    1904:	4f 91       	pop	r20
    1906:	3f 91       	pop	r19
    1908:	2f 91       	pop	r18
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <__vector_2>:

ISR(INT1)
{
    1914:	1f 92       	push	r1
    1916:	0f 92       	push	r0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	0f 92       	push	r0
    191c:	11 24       	eor	r1, r1
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    193e:	80 91 18 01 	lds	r24, 0x0118
    1942:	90 91 19 01 	lds	r25, 0x0119
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	29 f0       	breq	.+10     	; 0x1954 <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    194a:	e0 91 18 01 	lds	r30, 0x0118
    194e:	f0 91 19 01 	lds	r31, 0x0119
    1952:	09 95       	icall
    }
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <__vector_3>:

ISR(INT2)
{
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    19a4:	80 91 1a 01 	lds	r24, 0x011A
    19a8:	90 91 1b 01 	lds	r25, 0x011B
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	29 f0       	breq	.+10     	; 0x19ba <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    19b0:	e0 91 1a 01 	lds	r30, 0x011A
    19b4:	f0 91 1b 01 	lds	r31, 0x011B
    19b8:	09 95       	icall
    }
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	ff 91       	pop	r31
    19c0:	ef 91       	pop	r30
    19c2:	bf 91       	pop	r27
    19c4:	af 91       	pop	r26
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	7f 91       	pop	r23
    19cc:	6f 91       	pop	r22
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	3f 91       	pop	r19
    19d4:	2f 91       	pop	r18
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <INT0_SetCallBack+0x6>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	90 93 17 01 	sts	0x0117, r25
    19f6:	80 93 16 01 	sts	0x0116, r24
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <INT1_SetCallBack+0x6>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	90 93 19 01 	sts	0x0119, r25
    1a1a:	80 93 18 01 	sts	0x0118, r24
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <INT2_SetCallBack+0x6>
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	90 93 1b 01 	sts	0x011B, r25
    1a3e:	80 93 1a 01 	sts	0x011A, r24
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <INT0_init+0x6>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	62 e0       	ldi	r22, 0x02	; 2
    1a5e:	4a 81       	ldd	r20, Y+2	; 0x02
    1a60:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    1a64:	a5 e5       	ldi	r26, 0x55	; 85
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e5 e5       	ldi	r30, 0x55	; 85
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	98 2f       	mov	r25, r24
    1a70:	9c 7f       	andi	r25, 0xFC	; 252
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	89 2b       	or	r24, r25
    1a76:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    1a78:	ab e5       	ldi	r26, 0x5B	; 91
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e5       	ldi	r30, 0x5B	; 91
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	80 64       	ori	r24, 0x40	; 64
    1a84:	8c 93       	st	X, r24
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <INT1_init+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	63 e0       	ldi	r22, 0x03	; 3
    1aa2:	4a 81       	ldd	r20, Y+2	; 0x02
    1aa4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    1aa8:	a5 e5       	ldi	r26, 0x55	; 85
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e5       	ldi	r30, 0x55	; 85
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	23 7f       	andi	r18, 0xF3	; 243
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	82 2b       	or	r24, r18
    1ac6:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    1ac8:	ab e5       	ldi	r26, 0x5B	; 91
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	eb e5       	ldi	r30, 0x5B	; 91
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 68       	ori	r24, 0x80	; 128
    1ad4:	8c 93       	st	X, r24
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <INT2_init+0x6>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	4a 81       	ldd	r20, Y+2	; 0x02
    1af4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	41 f4       	brne	.+16     	; 0x1b0e <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    1afe:	a4 e5       	ldi	r26, 0x54	; 84
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e4 e5       	ldi	r30, 0x54	; 84
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 7b       	andi	r24, 0xBF	; 191
    1b0a:	8c 93       	st	X, r24
    1b0c:	0a c0       	rjmp	.+20     	; 0x1b22 <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	39 f4       	brne	.+14     	; 0x1b22 <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    1b14:	a4 e5       	ldi	r26, 0x54	; 84
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e4 e5       	ldi	r30, 0x54	; 84
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 64       	ori	r24, 0x40	; 64
    1b20:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    1b22:	ab e5       	ldi	r26, 0x5B	; 91
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	eb e5       	ldi	r30, 0x5B	; 91
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 62       	ori	r24, 0x20	; 32
    1b2e:	8c 93       	st	X, r24
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <INT0_DeInit>:


void INT0_DeInit(void)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    1b42:	ab e5       	ldi	r26, 0x5B	; 91
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	eb e5       	ldi	r30, 0x5B	; 91
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8f 7b       	andi	r24, 0xBF	; 191
    1b4e:	8c 93       	st	X, r24
}
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <INT1_DeInit>:


void INT1_DeInit(void)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    1b5e:	ab e5       	ldi	r26, 0x5B	; 91
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	eb e5       	ldi	r30, 0x5B	; 91
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 77       	andi	r24, 0x7F	; 127
    1b6a:	8c 93       	st	X, r24
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <INT2_DeInit>:

void INT2_DeInit(void)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    1b7a:	ab e5       	ldi	r26, 0x5B	; 91
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	eb e5       	ldi	r30, 0x5B	; 91
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	8c 93       	st	X, r24
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	87 70       	andi	r24, 0x07	; 7
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    1ba0:	a7 e2       	ldi	r26, 0x27	; 39
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e7 e2       	ldi	r30, 0x27	; 39
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	98 2f       	mov	r25, r24
    1bac:	90 7e       	andi	r25, 0xE0	; 224
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	89 2b       	or	r24, r25
    1bb2:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    1bb4:	a6 e2       	ldi	r26, 0x26	; 38
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e6 e2       	ldi	r30, 0x26	; 38
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 64       	ori	r24, 0x40	; 64
    1bc0:	8c 93       	st	X, r24
}
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <ADC_Init>:

void ADC_Init(void)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    1bd2:	a7 e2       	ldi	r26, 0x27	; 39
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e7 e2       	ldi	r30, 0x27	; 39
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	2f 73       	andi	r18, 0x3F	; 63
    1be0:	80 91 b7 00 	lds	r24, 0x00B7
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	00 24       	eor	r0, r0
    1bea:	96 95       	lsr	r25
    1bec:	87 95       	ror	r24
    1bee:	07 94       	ror	r0
    1bf0:	96 95       	lsr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	07 94       	ror	r0
    1bf6:	98 2f       	mov	r25, r24
    1bf8:	80 2d       	mov	r24, r0
    1bfa:	82 2b       	or	r24, r18
    1bfc:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    1bfe:	80 91 b8 00 	lds	r24, 0x00B8
    1c02:	88 23       	and	r24, r24
    1c04:	41 f4       	brne	.+16     	; 0x1c16 <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    1c06:	a7 e2       	ldi	r26, 0x27	; 39
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e7 e2       	ldi	r30, 0x27	; 39
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 7d       	andi	r24, 0xDF	; 223
    1c12:	8c 93       	st	X, r24
    1c14:	0b c0       	rjmp	.+22     	; 0x1c2c <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    1c16:	80 91 b8 00 	lds	r24, 0x00B8
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	39 f4       	brne	.+14     	; 0x1c2c <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    1c1e:	a7 e2       	ldi	r26, 0x27	; 39
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e7 e2       	ldi	r30, 0x27	; 39
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 62       	ori	r24, 0x20	; 32
    1c2a:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    1c2c:	a6 e2       	ldi	r26, 0x26	; 38
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e6 e2       	ldi	r30, 0x26	; 38
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 68       	ori	r24, 0x80	; 128
    1c38:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    1c3a:	80 91 b6 00 	lds	r24, 0x00B6
    1c3e:	88 23       	and	r24, r24
    1c40:	99 f1       	breq	.+102    	; 0x1ca8 <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    1c42:	80 91 b6 00 	lds	r24, 0x00B6
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	79 f4       	brne	.+30     	; 0x1c68 <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    1c4a:	a6 e2       	ldi	r26, 0x26	; 38
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e6 e2       	ldi	r30, 0x26	; 38
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 62       	ori	r24, 0x20	; 32
    1c56:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    1c58:	a0 e5       	ldi	r26, 0x50	; 80
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e0 e5       	ldi	r30, 0x50	; 80
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 70       	andi	r24, 0x0F	; 15
    1c64:	8c 93       	st	X, r24
    1c66:	20 c0       	rjmp	.+64     	; 0x1ca8 <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    1c68:	80 91 b6 00 	lds	r24, 0x00B6
    1c6c:	82 30       	cpi	r24, 0x02	; 2
    1c6e:	e1 f4       	brne	.+56     	; 0x1ca8 <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    1c70:	a6 e2       	ldi	r26, 0x26	; 38
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e6 e2       	ldi	r30, 0x26	; 38
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 62       	ori	r24, 0x20	; 32
    1c7c:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    1c7e:	a0 e5       	ldi	r26, 0x50	; 80
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e0 e5       	ldi	r30, 0x50	; 80
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	28 2f       	mov	r18, r24
    1c8a:	2f 70       	andi	r18, 0x0F	; 15
    1c8c:	80 91 ba 00 	lds	r24, 0x00BA
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	82 95       	swap	r24
    1c9a:	92 95       	swap	r25
    1c9c:	90 7f       	andi	r25, 0xF0	; 240
    1c9e:	98 27       	eor	r25, r24
    1ca0:	80 7f       	andi	r24, 0xF0	; 240
    1ca2:	98 27       	eor	r25, r24
    1ca4:	82 2b       	or	r24, r18
    1ca6:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    1ca8:	a6 e2       	ldi	r26, 0x26	; 38
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e6 e2       	ldi	r30, 0x26	; 38
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	98 7f       	andi	r25, 0xF8	; 248
    1cb6:	80 91 b9 00 	lds	r24, 0x00B9
    1cba:	87 70       	andi	r24, 0x07	; 7
    1cbc:	89 2b       	or	r24, r25
    1cbe:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    1cc0:	a6 e2       	ldi	r26, 0x26	; 38
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e6 e2       	ldi	r30, 0x26	; 38
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	87 7f       	andi	r24, 0xF7	; 247
    1ccc:	8c 93       	st	X, r24
    #endif
        
}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    1ce6:	e6 e2       	ldi	r30, 0x26	; 38
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	80 71       	andi	r24, 0x10	; 16
    1cf2:	90 70       	andi	r25, 0x00	; 0
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	b9 f3       	breq	.-18     	; 0x1ce6 <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    1cf8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <ADC_ReadConversionRegister>
    1cfc:	90 93 1d 01 	sts	0x011D, r25
    1d00:	80 93 1c 01 	sts	0x011C, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    1d04:	a6 e2       	ldi	r26, 0x26	; 38
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e6 e2       	ldi	r30, 0x26	; 38
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 61       	ori	r24, 0x10	; 16
    1d10:	8c 93       	st	X, r24
    return ADC_conversion_value;
    1d12:	80 91 1c 01 	lds	r24, 0x011C
    1d16:	90 91 1d 01 	lds	r25, 0x011D
}
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <ADC_OnlyStartConversionGeneral>
}
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <ADC_ReadConversionRegister+0x6>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    1d46:	1a 82       	std	Y+2, r1	; 0x02
    1d48:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    1d4a:	80 91 b8 00 	lds	r24, 0x00B8
    1d4e:	88 23       	and	r24, r24
    1d50:	b9 f4       	brne	.+46     	; 0x1d80 <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    1d52:	e4 e2       	ldi	r30, 0x24	; 36
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    1d60:	e5 e2       	ldi	r30, 0x25	; 37
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	83 70       	andi	r24, 0x03	; 3
    1d6c:	90 70       	andi	r25, 0x00	; 0
    1d6e:	38 2f       	mov	r19, r24
    1d70:	22 27       	eor	r18, r18
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	82 2b       	or	r24, r18
    1d78:	93 2b       	or	r25, r19
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	20 c0       	rjmp	.+64     	; 0x1dc0 <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    1d80:	80 91 b8 00 	lds	r24, 0x00B8
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	e1 f4       	brne	.+56     	; 0x1dc0 <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    1d88:	e4 e2       	ldi	r30, 0x24	; 36
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	82 95       	swap	r24
    1d90:	86 95       	lsr	r24
    1d92:	86 95       	lsr	r24
    1d94:	83 70       	andi	r24, 0x03	; 3
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	90 70       	andi	r25, 0x00	; 0
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    1da0:	e5 e2       	ldi	r30, 0x25	; 37
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9c 01       	movw	r18, r24
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	82 2b       	or	r24, r18
    1dba:	93 2b       	or	r25, r19
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	69 81       	ldd	r22, Y+1	; 0x01
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>

}
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <POT_GetValue+0x6>
    1df2:	0f 92       	push	r0
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	89 83       	std	Y+1, r24	; 0x01
    
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <LED_Init+0x6>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	6a 81       	ldd	r22, Y+2	; 0x02
    1e18:	42 e0       	ldi	r20, 0x02	; 2
    1e1a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <LED_OnOffPositiveLogic+0x6>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	6a 83       	std	Y+2, r22	; 0x02
    1e38:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 23       	and	r24, r24
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	6a 81       	ldd	r22, Y+2	; 0x02
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    1e4a:	08 c0       	rjmp	.+16     	; 0x1e5c <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	29 f4       	brne	.+10     	; 0x1e5c <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	6a 81       	ldd	r22, Y+2	; 0x02
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    }


}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <LED_OnOffNegativeLogic+0x6>
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	6a 83       	std	Y+2, r22	; 0x02
    1e78:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	88 23       	and	r24, r24
    1e7e:	31 f4       	brne	.+12     	; 0x1e8c <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	6a 81       	ldd	r22, Y+2	; 0x02
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    1e8a:	08 c0       	rjmp	.+16     	; 0x1e9c <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	29 f4       	brne	.+10     	; 0x1e9c <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	6a 81       	ldd	r22, Y+2	; 0x02
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    }


}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <LED_Toggle+0x6>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	6a 81       	ldd	r22, Y+2	; 0x02
    1eba:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_TogglePin>
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	63 e0       	ldi	r22, 0x03	; 3
    1ed4:	42 e0       	ldi	r20, 0x02	; 2
    1ed6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	62 e0       	ldi	r22, 0x02	; 2
    1ede:	42 e0       	ldi	r20, 0x02	; 2
    1ee0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	42 e0       	ldi	r20, 0x02	; 2
    1eea:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	42 e0       	ldi	r20, 0x02	; 2
    1ef4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	42 e0       	ldi	r20, 0x02	; 2
    1efe:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	64 e0       	ldi	r22, 0x04	; 4
    1f06:	42 e0       	ldi	r20, 0x02	; 2
    1f08:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    1f12:	88 e2       	ldi	r24, 0x28	; 40
    1f14:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1f18:	8c e0       	ldi	r24, 0x0C	; 12
    1f1a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	c4 56       	subi	r28, 0x64	; 100
    1f38:	d0 40       	sbci	r29, 0x00	; 0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	fe 01       	movw	r30, r28
    1f46:	ec 59       	subi	r30, 0x9C	; 156
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    1f56:	fe 01       	movw	r30, r28
    1f58:	e1 5a       	subi	r30, 0xA1	; 161
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e8       	ldi	r26, 0x80	; 128
    1f62:	bf e3       	ldi	r27, 0x3F	; 63
    1f64:	80 83       	st	Z, r24
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	8e 01       	movw	r16, r28
    1f6e:	05 5a       	subi	r16, 0xA5	; 165
    1f70:	1f 4f       	sbci	r17, 0xFF	; 255
    1f72:	fe 01       	movw	r30, r28
    1f74:	e1 5a       	subi	r30, 0xA1	; 161
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a e7       	ldi	r20, 0x7A	; 122
    1f86:	55 e4       	ldi	r21, 0x45	; 69
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	80 83       	st	Z, r24
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	a2 83       	std	Z+2, r26	; 0x02
    1f98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e5 5a       	subi	r30, 0xA5	; 165
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	44 f4       	brge	.+16     	; 0x1fc8 <LCD_SendCommand+0x9e>
		__ticks = 1;
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e7 5a       	subi	r30, 0xA7	; 167
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
    1fc6:	64 c0       	rjmp	.+200    	; 0x2090 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e5 5a       	subi	r30, 0xA5	; 165
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	0c f0       	brlt	.+2      	; 0x1fe8 <LCD_SendCommand+0xbe>
    1fe6:	43 c0       	rjmp	.+134    	; 0x206e <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e1 5a       	subi	r30, 0xA1	; 161
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8e 01       	movw	r16, r28
    2008:	07 5a       	subi	r16, 0xA7	; 167
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	f8 01       	movw	r30, r16
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	1f c0       	rjmp	.+62     	; 0x205e <LCD_SendCommand+0x134>
    2020:	fe 01       	movw	r30, r28
    2022:	e9 5a       	subi	r30, 0xA9	; 169
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 e9       	ldi	r24, 0x90	; 144
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    202e:	fe 01       	movw	r30, r28
    2030:	e9 5a       	subi	r30, 0xA9	; 169
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_SendCommand+0x10e>
    203c:	fe 01       	movw	r30, r28
    203e:	e9 5a       	subi	r30, 0xA9	; 169
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	de 01       	movw	r26, r28
    2048:	a7 5a       	subi	r26, 0xA7	; 167
    204a:	bf 4f       	sbci	r27, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	e7 5a       	subi	r30, 0xA7	; 167
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	11 96       	adiw	r26, 0x01	; 1
    205a:	9c 93       	st	X, r25
    205c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	fe 01       	movw	r30, r28
    2060:	e7 5a       	subi	r30, 0xA7	; 167
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	d1 f6       	brne	.-76     	; 0x2020 <LCD_SendCommand+0xf6>
    206c:	27 c0       	rjmp	.+78     	; 0x20bc <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	8e 01       	movw	r16, r28
    2070:	07 5a       	subi	r16, 0xA7	; 167
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	fe 01       	movw	r30, r28
    2076:	e5 5a       	subi	r30, 0xA5	; 165
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	f8 01       	movw	r30, r16
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	de 01       	movw	r26, r28
    2092:	ab 5a       	subi	r26, 0xAB	; 171
    2094:	bf 4f       	sbci	r27, 0xFF	; 255
    2096:	fe 01       	movw	r30, r28
    2098:	e7 5a       	subi	r30, 0xA7	; 167
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	8d 93       	st	X+, r24
    20a2:	9c 93       	st	X, r25
    20a4:	fe 01       	movw	r30, r28
    20a6:	eb 5a       	subi	r30, 0xAB	; 171
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_SendCommand+0x184>
    20b2:	fe 01       	movw	r30, r28
    20b4:	eb 5a       	subi	r30, 0xAB	; 171
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	62 e0       	ldi	r22, 0x02	; 2
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    20c6:	fe 01       	movw	r30, r28
    20c8:	ef 5a       	subi	r30, 0xAF	; 175
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e8       	ldi	r26, 0x80	; 128
    20d2:	bf e3       	ldi	r27, 0x3F	; 63
    20d4:	80 83       	st	Z, r24
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	a2 83       	std	Z+2, r26	; 0x02
    20da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	8e 01       	movw	r16, r28
    20de:	03 5b       	subi	r16, 0xB3	; 179
    20e0:	1f 4f       	sbci	r17, 0xFF	; 255
    20e2:	fe 01       	movw	r30, r28
    20e4:	ef 5a       	subi	r30, 0xAF	; 175
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	55 e4       	ldi	r21, 0x45	; 69
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	f8 01       	movw	r30, r16
    2102:	80 83       	st	Z, r24
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	a2 83       	std	Z+2, r26	; 0x02
    2108:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    210a:	fe 01       	movw	r30, r28
    210c:	e3 5b       	subi	r30, 0xB3	; 179
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	44 f4       	brge	.+16     	; 0x2138 <LCD_SendCommand+0x20e>
		__ticks = 1;
    2128:	fe 01       	movw	r30, r28
    212a:	e5 5b       	subi	r30, 0xB5	; 181
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
    2136:	64 c0       	rjmp	.+200    	; 0x2200 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    2138:	fe 01       	movw	r30, r28
    213a:	e3 5b       	subi	r30, 0xB3	; 179
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <LCD_SendCommand+0x22e>
    2156:	43 c0       	rjmp	.+134    	; 0x21de <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	fe 01       	movw	r30, r28
    215a:	ef 5a       	subi	r30, 0xAF	; 175
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	8e 01       	movw	r16, r28
    2178:	05 5b       	subi	r16, 0xB5	; 181
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	f8 01       	movw	r30, r16
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	1f c0       	rjmp	.+62     	; 0x21ce <LCD_SendCommand+0x2a4>
    2190:	fe 01       	movw	r30, r28
    2192:	e7 5b       	subi	r30, 0xB7	; 183
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 e9       	ldi	r24, 0x90	; 144
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
    219e:	fe 01       	movw	r30, r28
    21a0:	e7 5b       	subi	r30, 0xB7	; 183
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_SendCommand+0x27e>
    21ac:	fe 01       	movw	r30, r28
    21ae:	e7 5b       	subi	r30, 0xB7	; 183
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	de 01       	movw	r26, r28
    21b8:	a5 5b       	subi	r26, 0xB5	; 181
    21ba:	bf 4f       	sbci	r27, 0xFF	; 255
    21bc:	fe 01       	movw	r30, r28
    21be:	e5 5b       	subi	r30, 0xB5	; 181
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	11 96       	adiw	r26, 0x01	; 1
    21ca:	9c 93       	st	X, r25
    21cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ce:	fe 01       	movw	r30, r28
    21d0:	e5 5b       	subi	r30, 0xB5	; 181
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	d1 f6       	brne	.-76     	; 0x2190 <LCD_SendCommand+0x266>
    21dc:	27 c0       	rjmp	.+78     	; 0x222c <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	8e 01       	movw	r16, r28
    21e0:	05 5b       	subi	r16, 0xB5	; 181
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 5b       	subi	r30, 0xB3	; 179
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	f8 01       	movw	r30, r16
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	de 01       	movw	r26, r28
    2202:	a9 5b       	subi	r26, 0xB9	; 185
    2204:	bf 4f       	sbci	r27, 0xFF	; 255
    2206:	fe 01       	movw	r30, r28
    2208:	e5 5b       	subi	r30, 0xB5	; 181
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	8d 93       	st	X+, r24
    2212:	9c 93       	st	X, r25
    2214:	fe 01       	movw	r30, r28
    2216:	e9 5b       	subi	r30, 0xB9	; 185
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_SendCommand+0x2f4>
    2222:	fe 01       	movw	r30, r28
    2224:	e9 5b       	subi	r30, 0xB9	; 185
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    222c:	de 01       	movw	r26, r28
    222e:	ad 59       	subi	r26, 0x9D	; 157
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	fe 01       	movw	r30, r28
    2234:	ec 59       	subi	r30, 0x9C	; 156
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	82 95       	swap	r24
    223c:	8f 70       	andi	r24, 0x0F	; 15
    223e:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2240:	fe 01       	movw	r30, r28
    2242:	ed 59       	subi	r30, 0x9D	; 157
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	98 2f       	mov	r25, r24
    224a:	91 70       	andi	r25, 0x01	; 1
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	49 2f       	mov	r20, r25
    2252:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2256:	fe 01       	movw	r30, r28
    2258:	ed 59       	subi	r30, 0x9D	; 157
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	86 95       	lsr	r24
    2260:	98 2f       	mov	r25, r24
    2262:	91 70       	andi	r25, 0x01	; 1
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	49 2f       	mov	r20, r25
    226a:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    226e:	fe 01       	movw	r30, r28
    2270:	ed 59       	subi	r30, 0x9D	; 157
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	86 95       	lsr	r24
    2278:	86 95       	lsr	r24
    227a:	98 2f       	mov	r25, r24
    227c:	91 70       	andi	r25, 0x01	; 1
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	62 e0       	ldi	r22, 0x02	; 2
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2288:	fe 01       	movw	r30, r28
    228a:	ed 59       	subi	r30, 0x9D	; 157
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	86 95       	lsr	r24
    2292:	86 95       	lsr	r24
    2294:	86 95       	lsr	r24
    2296:	98 2f       	mov	r25, r24
    2298:	91 70       	andi	r25, 0x01	; 1
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	64 e0       	ldi	r22, 0x04	; 4
    229e:	49 2f       	mov	r20, r25
    22a0:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 5b       	subi	r30, 0xBD	; 189
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e8       	ldi	r26, 0x80	; 128
    22b0:	bf e3       	ldi	r27, 0x3F	; 63
    22b2:	80 83       	st	Z, r24
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	a2 83       	std	Z+2, r26	; 0x02
    22b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	8e 01       	movw	r16, r28
    22bc:	01 5c       	subi	r16, 0xC1	; 193
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	fe 01       	movw	r30, r28
    22c2:	ed 5b       	subi	r30, 0xBD	; 189
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a e7       	ldi	r20, 0x7A	; 122
    22d4:	55 e4       	ldi	r21, 0x45	; 69
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	f8 01       	movw	r30, r16
    22e0:	80 83       	st	Z, r24
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	a2 83       	std	Z+2, r26	; 0x02
    22e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e8:	fe 01       	movw	r30, r28
    22ea:	ff 96       	adiw	r30, 0x3f	; 63
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_SendCommand+0x3e4>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9e af       	std	Y+62, r25	; 0x3e
    230a:	8d af       	std	Y+61, r24	; 0x3d
    230c:	46 c0       	rjmp	.+140    	; 0x239a <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    230e:	fe 01       	movw	r30, r28
    2310:	ff 96       	adiw	r30, 0x3f	; 63
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	64 f5       	brge	.+88     	; 0x2382 <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	fe 01       	movw	r30, r28
    232c:	ed 5b       	subi	r30, 0xBD	; 189
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e af       	std	Y+62, r25	; 0x3e
    2356:	8d af       	std	Y+61, r24	; 0x3d
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <LCD_SendCommand+0x44e>
    235a:	80 e9       	ldi	r24, 0x90	; 144
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	9c af       	std	Y+60, r25	; 0x3c
    2360:	8b af       	std	Y+59, r24	; 0x3b
    2362:	8b ad       	ldd	r24, Y+59	; 0x3b
    2364:	9c ad       	ldd	r25, Y+60	; 0x3c
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <LCD_SendCommand+0x43c>
    236a:	9c af       	std	Y+60, r25	; 0x3c
    236c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2370:	9e ad       	ldd	r25, Y+62	; 0x3e
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9e af       	std	Y+62, r25	; 0x3e
    2376:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	8d ad       	ldd	r24, Y+61	; 0x3d
    237a:	9e ad       	ldd	r25, Y+62	; 0x3e
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <LCD_SendCommand+0x430>
    2380:	16 c0       	rjmp	.+44     	; 0x23ae <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	fe 01       	movw	r30, r28
    2384:	ff 96       	adiw	r30, 0x3f	; 63
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9e af       	std	Y+62, r25	; 0x3e
    2398:	8d af       	std	Y+61, r24	; 0x3d
    239a:	8d ad       	ldd	r24, Y+61	; 0x3d
    239c:	9e ad       	ldd	r25, Y+62	; 0x3e
    239e:	9a af       	std	Y+58, r25	; 0x3a
    23a0:	89 af       	std	Y+57, r24	; 0x39
    23a2:	89 ad       	ldd	r24, Y+57	; 0x39
    23a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_SendCommand+0x47c>
    23aa:	9a af       	std	Y+58, r25	; 0x3a
    23ac:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	8d ab       	std	Y+53, r24	; 0x35
    23c2:	9e ab       	std	Y+54, r25	; 0x36
    23c4:	af ab       	std	Y+55, r26	; 0x37
    23c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ca:	7e a9       	ldd	r23, Y+54	; 0x36
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	55 e4       	ldi	r21, 0x45	; 69
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	89 ab       	std	Y+49, r24	; 0x31
    23e2:	9a ab       	std	Y+50, r25	; 0x32
    23e4:	ab ab       	std	Y+51, r26	; 0x33
    23e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23e8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ea:	7a a9       	ldd	r23, Y+50	; 0x32
    23ec:	8b a9       	ldd	r24, Y+51	; 0x33
    23ee:	9c a9       	ldd	r25, Y+52	; 0x34
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_SendCommand+0x4e0>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    240a:	69 a9       	ldd	r22, Y+49	; 0x31
    240c:	7a a9       	ldd	r23, Y+50	; 0x32
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_SendCommand+0x540>
    244c:	80 e9       	ldi	r24, 0x90	; 144
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	9e a7       	std	Y+46, r25	; 0x2e
    2452:	8d a7       	std	Y+45, r24	; 0x2d
    2454:	8d a5       	ldd	r24, Y+45	; 0x2d
    2456:	9e a5       	ldd	r25, Y+46	; 0x2e
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_SendCommand+0x52e>
    245c:	9e a7       	std	Y+46, r25	; 0x2e
    245e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	98 ab       	std	Y+48, r25	; 0x30
    2468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8f a5       	ldd	r24, Y+47	; 0x2f
    246c:	98 a9       	ldd	r25, Y+48	; 0x30
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_SendCommand+0x522>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	69 a9       	ldd	r22, Y+49	; 0x31
    2476:	7a a9       	ldd	r23, Y+50	; 0x32
    2478:	8b a9       	ldd	r24, Y+51	; 0x33
    247a:	9c a9       	ldd	r25, Y+52	; 0x34
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	8f a5       	ldd	r24, Y+47	; 0x2f
    248a:	98 a9       	ldd	r25, Y+48	; 0x30
    248c:	9c a7       	std	Y+44, r25	; 0x2c
    248e:	8b a7       	std	Y+43, r24	; 0x2b
    2490:	8b a5       	ldd	r24, Y+43	; 0x2b
    2492:	9c a5       	ldd	r25, Y+44	; 0x2c
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_SendCommand+0x56a>
    2498:	9c a7       	std	Y+44, r25	; 0x2c
    249a:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8f a3       	std	Y+39, r24	; 0x27
    24b0:	98 a7       	std	Y+40, r25	; 0x28
    24b2:	a9 a7       	std	Y+41, r26	; 0x29
    24b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6f a1       	ldd	r22, Y+39	; 0x27
    24b8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ba:	89 a5       	ldd	r24, Y+41	; 0x29
    24bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a e7       	ldi	r20, 0x7A	; 122
    24c4:	55 e4       	ldi	r21, 0x45	; 69
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	9c a3       	std	Y+36, r25	; 0x24
    24d2:	ad a3       	std	Y+37, r26	; 0x25
    24d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_SendCommand+0x5ce>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_SendCommand+0x62e>
    253a:	80 e9       	ldi	r24, 0x90	; 144
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	98 a3       	std	Y+32, r25	; 0x20
    2540:	8f 8f       	std	Y+31, r24	; 0x1f
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	98 a1       	ldd	r25, Y+32	; 0x20
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_SendCommand+0x61c>
    254a:	98 a3       	std	Y+32, r25	; 0x20
    254c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	89 a1       	ldd	r24, Y+33	; 0x21
    2550:	9a a1       	ldd	r25, Y+34	; 0x22
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	89 a1       	ldd	r24, Y+33	; 0x21
    255a:	9a a1       	ldd	r25, Y+34	; 0x22
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_SendCommand+0x610>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	9e 8f       	std	Y+30, r25	; 0x1e
    257c:	8d 8f       	std	Y+29, r24	; 0x1d
    257e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2580:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_SendCommand+0x658>
    2586:	9e 8f       	std	Y+30, r25	; 0x1e
    2588:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    258a:	de 01       	movw	r26, r28
    258c:	ad 59       	subi	r26, 0x9D	; 157
    258e:	bf 4f       	sbci	r27, 0xFF	; 255
    2590:	fe 01       	movw	r30, r28
    2592:	ec 59       	subi	r30, 0x9C	; 156
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	8f 70       	andi	r24, 0x0F	; 15
    259a:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    259c:	fe 01       	movw	r30, r28
    259e:	ed 59       	subi	r30, 0x9D	; 157
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	98 2f       	mov	r25, r24
    25a6:	91 70       	andi	r25, 0x01	; 1
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	49 2f       	mov	r20, r25
    25ae:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    25b2:	fe 01       	movw	r30, r28
    25b4:	ed 59       	subi	r30, 0x9D	; 157
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	86 95       	lsr	r24
    25bc:	98 2f       	mov	r25, r24
    25be:	91 70       	andi	r25, 0x01	; 1
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	49 2f       	mov	r20, r25
    25c6:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    25ca:	fe 01       	movw	r30, r28
    25cc:	ed 59       	subi	r30, 0x9D	; 157
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	86 95       	lsr	r24
    25d4:	86 95       	lsr	r24
    25d6:	98 2f       	mov	r25, r24
    25d8:	91 70       	andi	r25, 0x01	; 1
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	49 2f       	mov	r20, r25
    25e0:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 59       	subi	r30, 0x9D	; 157
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	86 95       	lsr	r24
    25ee:	86 95       	lsr	r24
    25f0:	86 95       	lsr	r24
    25f2:	98 2f       	mov	r25, r24
    25f4:	91 70       	andi	r25, 0x01	; 1
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	64 e0       	ldi	r22, 0x04	; 4
    25fa:	49 2f       	mov	r20, r25
    25fc:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	89 8f       	std	Y+25, r24	; 0x19
    260a:	9a 8f       	std	Y+26, r25	; 0x1a
    260c:	ab 8f       	std	Y+27, r26	; 0x1b
    260e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	69 8d       	ldd	r22, Y+25	; 0x19
    2612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a e7       	ldi	r20, 0x7A	; 122
    261e:	55 e4       	ldi	r21, 0x45	; 69
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_SendCommand+0x728>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	69 8d       	ldd	r22, Y+25	; 0x19
    266c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_SendCommand+0x788>
    2694:	80 e9       	ldi	r24, 0x90	; 144
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
    269c:	89 89       	ldd	r24, Y+17	; 0x11
    269e:	9a 89       	ldd	r25, Y+18	; 0x12
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_SendCommand+0x776>
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_SendCommand+0x76a>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	98 89       	ldd	r25, Y+16	; 0x10
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_SendCommand+0x7b2>
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e8       	ldi	r26, 0x80	; 128
    26f4:	bf e3       	ldi	r27, 0x3F	; 63
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a e7       	ldi	r20, 0x7A	; 122
    270c:	55 e4       	ldi	r21, 0x45	; 69
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <LCD_SendCommand+0x816>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <LCD_SendCommand+0x876>
    2782:	80 e9       	ldi	r24, 0x90	; 144
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_SendCommand+0x864>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <LCD_SendCommand+0x858>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <LCD_SendCommand+0x8a0>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    27d2:	cc 59       	subi	r28, 0x9C	; 156
    27d4:	df 4f       	sbci	r29, 0xFF	; 255
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	08 95       	ret

000027ea <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	c4 56       	subi	r28, 0x64	; 100
    27f8:	d0 40       	sbci	r29, 0x00	; 0
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	fe 01       	movw	r30, r28
    2806:	ec 59       	subi	r30, 0x9C	; 156
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	63 e0       	ldi	r22, 0x03	; 3
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2816:	fe 01       	movw	r30, r28
    2818:	e1 5a       	subi	r30, 0xA1	; 161
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e8       	ldi	r26, 0x80	; 128
    2822:	bf e3       	ldi	r27, 0x3F	; 63
    2824:	80 83       	st	Z, r24
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	a2 83       	std	Z+2, r26	; 0x02
    282a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	8e 01       	movw	r16, r28
    282e:	05 5a       	subi	r16, 0xA5	; 165
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	e1 5a       	subi	r30, 0xA1	; 161
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a e7       	ldi	r20, 0x7A	; 122
    2846:	55 e4       	ldi	r21, 0x45	; 69
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	f8 01       	movw	r30, r16
    2852:	80 83       	st	Z, r24
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	a2 83       	std	Z+2, r26	; 0x02
    2858:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    285a:	fe 01       	movw	r30, r28
    285c:	e5 5a       	subi	r30, 0xA5	; 165
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e8       	ldi	r20, 0x80	; 128
    286e:	5f e3       	ldi	r21, 0x3F	; 63
    2870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2874:	88 23       	and	r24, r24
    2876:	44 f4       	brge	.+16     	; 0x2888 <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    2878:	fe 01       	movw	r30, r28
    287a:	e7 5a       	subi	r30, 0xA7	; 167
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	64 c0       	rjmp	.+200    	; 0x2950 <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    2888:	fe 01       	movw	r30, r28
    288a:	e5 5a       	subi	r30, 0xA5	; 165
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <LCD_DisplayCharacter+0xbe>
    28a6:	43 c0       	rjmp	.+134    	; 0x292e <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	fe 01       	movw	r30, r28
    28aa:	e1 5a       	subi	r30, 0xA1	; 161
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8e 01       	movw	r16, r28
    28c8:	07 5a       	subi	r16, 0xA7	; 167
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	1f c0       	rjmp	.+62     	; 0x291e <LCD_DisplayCharacter+0x134>
    28e0:	fe 01       	movw	r30, r28
    28e2:	e9 5a       	subi	r30, 0xA9	; 169
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 e9       	ldi	r24, 0x90	; 144
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
    28ee:	fe 01       	movw	r30, r28
    28f0:	e9 5a       	subi	r30, 0xA9	; 169
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_DisplayCharacter+0x10e>
    28fc:	fe 01       	movw	r30, r28
    28fe:	e9 5a       	subi	r30, 0xA9	; 169
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2906:	de 01       	movw	r26, r28
    2908:	a7 5a       	subi	r26, 0xA7	; 167
    290a:	bf 4f       	sbci	r27, 0xFF	; 255
    290c:	fe 01       	movw	r30, r28
    290e:	e7 5a       	subi	r30, 0xA7	; 167
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	11 96       	adiw	r26, 0x01	; 1
    291a:	9c 93       	st	X, r25
    291c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	fe 01       	movw	r30, r28
    2920:	e7 5a       	subi	r30, 0xA7	; 167
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	d1 f6       	brne	.-76     	; 0x28e0 <LCD_DisplayCharacter+0xf6>
    292c:	27 c0       	rjmp	.+78     	; 0x297c <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292e:	8e 01       	movw	r16, r28
    2930:	07 5a       	subi	r16, 0xA7	; 167
    2932:	1f 4f       	sbci	r17, 0xFF	; 255
    2934:	fe 01       	movw	r30, r28
    2936:	e5 5a       	subi	r30, 0xA5	; 165
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	f8 01       	movw	r30, r16
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	de 01       	movw	r26, r28
    2952:	ab 5a       	subi	r26, 0xAB	; 171
    2954:	bf 4f       	sbci	r27, 0xFF	; 255
    2956:	fe 01       	movw	r30, r28
    2958:	e7 5a       	subi	r30, 0xA7	; 167
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	8d 93       	st	X+, r24
    2962:	9c 93       	st	X, r25
    2964:	fe 01       	movw	r30, r28
    2966:	eb 5a       	subi	r30, 0xAB	; 171
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_DisplayCharacter+0x184>
    2972:	fe 01       	movw	r30, r28
    2974:	eb 5a       	subi	r30, 0xAB	; 171
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	62 e0       	ldi	r22, 0x02	; 2
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2986:	fe 01       	movw	r30, r28
    2988:	ef 5a       	subi	r30, 0xAF	; 175
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e8       	ldi	r26, 0x80	; 128
    2992:	bf e3       	ldi	r27, 0x3F	; 63
    2994:	80 83       	st	Z, r24
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	a2 83       	std	Z+2, r26	; 0x02
    299a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	8e 01       	movw	r16, r28
    299e:	03 5b       	subi	r16, 0xB3	; 179
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	fe 01       	movw	r30, r28
    29a4:	ef 5a       	subi	r30, 0xAF	; 175
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a e7       	ldi	r20, 0x7A	; 122
    29b6:	55 e4       	ldi	r21, 0x45	; 69
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	f8 01       	movw	r30, r16
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	a2 83       	std	Z+2, r26	; 0x02
    29c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ca:	fe 01       	movw	r30, r28
    29cc:	e3 5b       	subi	r30, 0xB3	; 179
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	82 81       	ldd	r24, Z+2	; 0x02
    29d6:	93 81       	ldd	r25, Z+3	; 0x03
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	5f e3       	ldi	r21, 0x3F	; 63
    29e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e4:	88 23       	and	r24, r24
    29e6:	44 f4       	brge	.+16     	; 0x29f8 <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    29e8:	fe 01       	movw	r30, r28
    29ea:	e5 5b       	subi	r30, 0xB5	; 181
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
    29f6:	64 c0       	rjmp	.+200    	; 0x2ac0 <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    29f8:	fe 01       	movw	r30, r28
    29fa:	e3 5b       	subi	r30, 0xB3	; 179
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	0c f0       	brlt	.+2      	; 0x2a18 <LCD_DisplayCharacter+0x22e>
    2a16:	43 c0       	rjmp	.+134    	; 0x2a9e <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ef 5a       	subi	r30, 0xAF	; 175
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8e 01       	movw	r16, r28
    2a38:	05 5b       	subi	r16, 0xB5	; 181
    2a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	f8 01       	movw	r30, r16
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	1f c0       	rjmp	.+62     	; 0x2a8e <LCD_DisplayCharacter+0x2a4>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e7 5b       	subi	r30, 0xB7	; 183
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 e9       	ldi	r24, 0x90	; 144
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e7 5b       	subi	r30, 0xB7	; 183
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <LCD_DisplayCharacter+0x27e>
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e7 5b       	subi	r30, 0xB7	; 183
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	de 01       	movw	r26, r28
    2a78:	a5 5b       	subi	r26, 0xB5	; 181
    2a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e5 5b       	subi	r30, 0xB5	; 181
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	11 96       	adiw	r26, 0x01	; 1
    2a8a:	9c 93       	st	X, r25
    2a8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e5 5b       	subi	r30, 0xB5	; 181
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	d1 f6       	brne	.-76     	; 0x2a50 <LCD_DisplayCharacter+0x266>
    2a9c:	27 c0       	rjmp	.+78     	; 0x2aec <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9e:	8e 01       	movw	r16, r28
    2aa0:	05 5b       	subi	r16, 0xB5	; 181
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 5b       	subi	r30, 0xB3	; 179
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
    2ac0:	de 01       	movw	r26, r28
    2ac2:	a9 5b       	subi	r26, 0xB9	; 185
    2ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e5 5b       	subi	r30, 0xB5	; 181
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	8d 93       	st	X+, r24
    2ad2:	9c 93       	st	X, r25
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e9 5b       	subi	r30, 0xB9	; 185
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_DisplayCharacter+0x2f4>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e9 5b       	subi	r30, 0xB9	; 185
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    2aec:	de 01       	movw	r26, r28
    2aee:	ad 59       	subi	r26, 0x9D	; 157
    2af0:	bf 4f       	sbci	r27, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	ec 59       	subi	r30, 0x9C	; 156
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	82 95       	swap	r24
    2afc:	8f 70       	andi	r24, 0x0F	; 15
    2afe:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2b00:	fe 01       	movw	r30, r28
    2b02:	ed 59       	subi	r30, 0x9D	; 157
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	98 2f       	mov	r25, r24
    2b0a:	91 70       	andi	r25, 0x01	; 1
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	60 e0       	ldi	r22, 0x00	; 0
    2b10:	49 2f       	mov	r20, r25
    2b12:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2b16:	fe 01       	movw	r30, r28
    2b18:	ed 59       	subi	r30, 0x9D	; 157
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	86 95       	lsr	r24
    2b20:	98 2f       	mov	r25, r24
    2b22:	91 70       	andi	r25, 0x01	; 1
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	61 e0       	ldi	r22, 0x01	; 1
    2b28:	49 2f       	mov	r20, r25
    2b2a:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ed 59       	subi	r30, 0x9D	; 157
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	86 95       	lsr	r24
    2b38:	86 95       	lsr	r24
    2b3a:	98 2f       	mov	r25, r24
    2b3c:	91 70       	andi	r25, 0x01	; 1
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	62 e0       	ldi	r22, 0x02	; 2
    2b42:	49 2f       	mov	r20, r25
    2b44:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ed 59       	subi	r30, 0x9D	; 157
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	86 95       	lsr	r24
    2b52:	86 95       	lsr	r24
    2b54:	86 95       	lsr	r24
    2b56:	98 2f       	mov	r25, r24
    2b58:	91 70       	andi	r25, 0x01	; 1
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	64 e0       	ldi	r22, 0x04	; 4
    2b5e:	49 2f       	mov	r20, r25
    2b60:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2b64:	fe 01       	movw	r30, r28
    2b66:	ed 5b       	subi	r30, 0xBD	; 189
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e8       	ldi	r26, 0x80	; 128
    2b70:	bf e3       	ldi	r27, 0x3F	; 63
    2b72:	80 83       	st	Z, r24
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	a2 83       	std	Z+2, r26	; 0x02
    2b78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7a:	8e 01       	movw	r16, r28
    2b7c:	01 5c       	subi	r16, 0xC1	; 193
    2b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b80:	fe 01       	movw	r30, r28
    2b82:	ed 5b       	subi	r30, 0xBD	; 189
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	60 81       	ld	r22, Z
    2b88:	71 81       	ldd	r23, Z+1	; 0x01
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	93 81       	ldd	r25, Z+3	; 0x03
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	55 e4       	ldi	r21, 0x45	; 69
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	80 83       	st	Z, r24
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	a2 83       	std	Z+2, r26	; 0x02
    2ba6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ff 96       	adiw	r30, 0x3f	; 63
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9e af       	std	Y+62, r25	; 0x3e
    2bca:	8d af       	std	Y+61, r24	; 0x3d
    2bcc:	46 c0       	rjmp	.+140    	; 0x2c5a <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ff 96       	adiw	r30, 0x3f	; 63
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	64 f5       	brge	.+88     	; 0x2c42 <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	fe 01       	movw	r30, r28
    2bec:	ed 5b       	subi	r30, 0xBD	; 189
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e2       	ldi	r20, 0x20	; 32
    2bfe:	51 e4       	ldi	r21, 0x41	; 65
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9e af       	std	Y+62, r25	; 0x3e
    2c16:	8d af       	std	Y+61, r24	; 0x3d
    2c18:	0f c0       	rjmp	.+30     	; 0x2c38 <LCD_DisplayCharacter+0x44e>
    2c1a:	80 e9       	ldi	r24, 0x90	; 144
    2c1c:	91 e0       	ldi	r25, 0x01	; 1
    2c1e:	9c af       	std	Y+60, r25	; 0x3c
    2c20:	8b af       	std	Y+59, r24	; 0x3b
    2c22:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c24:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_DisplayCharacter+0x43c>
    2c2a:	9c af       	std	Y+60, r25	; 0x3c
    2c2c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c30:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	9e af       	std	Y+62, r25	; 0x3e
    2c36:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	69 f7       	brne	.-38     	; 0x2c1a <LCD_DisplayCharacter+0x430>
    2c40:	16 c0       	rjmp	.+44     	; 0x2c6e <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c42:	fe 01       	movw	r30, r28
    2c44:	ff 96       	adiw	r30, 0x3f	; 63
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e af       	std	Y+62, r25	; 0x3e
    2c58:	8d af       	std	Y+61, r24	; 0x3d
    2c5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c5e:	9a af       	std	Y+58, r25	; 0x3a
    2c60:	89 af       	std	Y+57, r24	; 0x39
    2c62:	89 ad       	ldd	r24, Y+57	; 0x39
    2c64:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_DisplayCharacter+0x47c>
    2c6a:	9a af       	std	Y+58, r25	; 0x3a
    2c6c:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	62 e0       	ldi	r22, 0x02	; 2
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e8       	ldi	r26, 0x80	; 128
    2c7e:	bf e3       	ldi	r27, 0x3F	; 63
    2c80:	8d ab       	std	Y+53, r24	; 0x35
    2c82:	9e ab       	std	Y+54, r25	; 0x36
    2c84:	af ab       	std	Y+55, r26	; 0x37
    2c86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6d a9       	ldd	r22, Y+53	; 0x35
    2c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	55 e4       	ldi	r21, 0x45	; 69
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	89 ab       	std	Y+49, r24	; 0x31
    2ca2:	9a ab       	std	Y+50, r25	; 0x32
    2ca4:	ab ab       	std	Y+51, r26	; 0x33
    2ca6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    2caa:	7a a9       	ldd	r23, Y+50	; 0x32
    2cac:	8b a9       	ldd	r24, Y+51	; 0x33
    2cae:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	98 ab       	std	Y+48, r25	; 0x30
    2cc6:	8f a7       	std	Y+47, r24	; 0x2f
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    2cca:	69 a9       	ldd	r22, Y+49	; 0x31
    2ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cce:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	98 ab       	std	Y+48, r25	; 0x30
    2d08:	8f a7       	std	Y+47, r24	; 0x2f
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_DisplayCharacter+0x540>
    2d0c:	80 e9       	ldi	r24, 0x90	; 144
    2d0e:	91 e0       	ldi	r25, 0x01	; 1
    2d10:	9e a7       	std	Y+46, r25	; 0x2e
    2d12:	8d a7       	std	Y+45, r24	; 0x2d
    2d14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_DisplayCharacter+0x52e>
    2d1c:	9e a7       	std	Y+46, r25	; 0x2e
    2d1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d22:	98 a9       	ldd	r25, Y+48	; 0x30
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	98 ab       	std	Y+48, r25	; 0x30
    2d28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_DisplayCharacter+0x522>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	69 a9       	ldd	r22, Y+49	; 0x31
    2d36:	7a a9       	ldd	r23, Y+50	; 0x32
    2d38:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	98 ab       	std	Y+48, r25	; 0x30
    2d46:	8f a7       	std	Y+47, r24	; 0x2f
    2d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4c:	9c a7       	std	Y+44, r25	; 0x2c
    2d4e:	8b a7       	std	Y+43, r24	; 0x2b
    2d50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_DisplayCharacter+0x56a>
    2d58:	9c a7       	std	Y+44, r25	; 0x2c
    2d5a:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e8       	ldi	r26, 0x80	; 128
    2d6c:	bf e3       	ldi	r27, 0x3F	; 63
    2d6e:	8f a3       	std	Y+39, r24	; 0x27
    2d70:	98 a7       	std	Y+40, r25	; 0x28
    2d72:	a9 a7       	std	Y+41, r26	; 0x29
    2d74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	6f a1       	ldd	r22, Y+39	; 0x27
    2d78:	78 a5       	ldd	r23, Y+40	; 0x28
    2d7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a e7       	ldi	r20, 0x7A	; 122
    2d84:	55 e4       	ldi	r21, 0x45	; 69
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8b a3       	std	Y+35, r24	; 0x23
    2d90:	9c a3       	std	Y+36, r25	; 0x24
    2d92:	ad a3       	std	Y+37, r26	; 0x25
    2d94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d96:	6b a1       	ldd	r22, Y+35	; 0x23
    2d98:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9a a3       	std	Y+34, r25	; 0x22
    2db4:	89 a3       	std	Y+33, r24	; 0x21
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    2db8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dba:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd2:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd4:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9a a3       	std	Y+34, r25	; 0x22
    2df6:	89 a3       	std	Y+33, r24	; 0x21
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <LCD_DisplayCharacter+0x62e>
    2dfa:	80 e9       	ldi	r24, 0x90	; 144
    2dfc:	91 e0       	ldi	r25, 0x01	; 1
    2dfe:	98 a3       	std	Y+32, r25	; 0x20
    2e00:	8f 8f       	std	Y+31, r24	; 0x1f
    2e02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e04:	98 a1       	ldd	r25, Y+32	; 0x20
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_DisplayCharacter+0x61c>
    2e0a:	98 a3       	std	Y+32, r25	; 0x20
    2e0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e10:	9a a1       	ldd	r25, Y+34	; 0x22
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9a a3       	std	Y+34, r25	; 0x22
    2e16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	89 a1       	ldd	r24, Y+33	; 0x21
    2e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <LCD_DisplayCharacter+0x610>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6b a1       	ldd	r22, Y+35	; 0x23
    2e24:	7c a1       	ldd	r23, Y+36	; 0x24
    2e26:	8d a1       	ldd	r24, Y+37	; 0x25
    2e28:	9e a1       	ldd	r25, Y+38	; 0x26
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9a a3       	std	Y+34, r25	; 0x22
    2e34:	89 a3       	std	Y+33, r24	; 0x21
    2e36:	89 a1       	ldd	r24, Y+33	; 0x21
    2e38:	9a a1       	ldd	r25, Y+34	; 0x22
    2e3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_DisplayCharacter+0x658>
    2e46:	9e 8f       	std	Y+30, r25	; 0x1e
    2e48:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    2e4a:	de 01       	movw	r26, r28
    2e4c:	ad 59       	subi	r26, 0x9D	; 157
    2e4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e50:	fe 01       	movw	r30, r28
    2e52:	ec 59       	subi	r30, 0x9C	; 156
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	8f 70       	andi	r24, 0x0F	; 15
    2e5a:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	ed 59       	subi	r30, 0x9D	; 157
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	98 2f       	mov	r25, r24
    2e66:	91 70       	andi	r25, 0x01	; 1
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	49 2f       	mov	r20, r25
    2e6e:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2e72:	fe 01       	movw	r30, r28
    2e74:	ed 59       	subi	r30, 0x9D	; 157
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	86 95       	lsr	r24
    2e7c:	98 2f       	mov	r25, r24
    2e7e:	91 70       	andi	r25, 0x01	; 1
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	49 2f       	mov	r20, r25
    2e86:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ed 59       	subi	r30, 0x9D	; 157
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 81       	ld	r24, Z
    2e92:	86 95       	lsr	r24
    2e94:	86 95       	lsr	r24
    2e96:	98 2f       	mov	r25, r24
    2e98:	91 70       	andi	r25, 0x01	; 1
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	62 e0       	ldi	r22, 0x02	; 2
    2e9e:	49 2f       	mov	r20, r25
    2ea0:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ed 59       	subi	r30, 0x9D	; 157
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	86 95       	lsr	r24
    2eae:	86 95       	lsr	r24
    2eb0:	86 95       	lsr	r24
    2eb2:	98 2f       	mov	r25, r24
    2eb4:	91 70       	andi	r25, 0x01	; 1
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	64 e0       	ldi	r22, 0x04	; 4
    2eba:	49 2f       	mov	r20, r25
    2ebc:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	a0 e8       	ldi	r26, 0x80	; 128
    2ec6:	bf e3       	ldi	r27, 0x3F	; 63
    2ec8:	89 8f       	std	Y+25, r24	; 0x19
    2eca:	9a 8f       	std	Y+26, r25	; 0x1a
    2ecc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ece:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a e7       	ldi	r20, 0x7A	; 122
    2ede:	55 e4       	ldi	r21, 0x45	; 69
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	8d 8b       	std	Y+21, r24	; 0x15
    2eea:	9e 8b       	std	Y+22, r25	; 0x16
    2eec:	af 8b       	std	Y+23, r26	; 0x17
    2eee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e8       	ldi	r20, 0x80	; 128
    2efe:	5f e3       	ldi	r21, 0x3F	; 63
    2f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9c 8b       	std	Y+20, r25	; 0x14
    2f0e:	8b 8b       	std	Y+19, r24	; 0x13
    2f10:	3f c0       	rjmp	.+126    	; 0x2f90 <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    2f12:	6d 89       	ldd	r22, Y+21	; 0x15
    2f14:	7e 89       	ldd	r23, Y+22	; 0x16
    2f16:	8f 89       	ldd	r24, Y+23	; 0x17
    2f18:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	3f ef       	ldi	r19, 0xFF	; 255
    2f1e:	4f e7       	ldi	r20, 0x7F	; 127
    2f20:	57 e4       	ldi	r21, 0x47	; 71
    2f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	4c f5       	brge	.+82     	; 0x2f7c <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e2       	ldi	r20, 0x20	; 32
    2f38:	51 e4       	ldi	r21, 0x41	; 65
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9c 8b       	std	Y+20, r25	; 0x14
    2f50:	8b 8b       	std	Y+19, r24	; 0x13
    2f52:	0f c0       	rjmp	.+30     	; 0x2f72 <LCD_DisplayCharacter+0x788>
    2f54:	80 e9       	ldi	r24, 0x90	; 144
    2f56:	91 e0       	ldi	r25, 0x01	; 1
    2f58:	9a 8b       	std	Y+18, r25	; 0x12
    2f5a:	89 8b       	std	Y+17, r24	; 0x11
    2f5c:	89 89       	ldd	r24, Y+17	; 0x11
    2f5e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <LCD_DisplayCharacter+0x776>
    2f64:	9a 8b       	std	Y+18, r25	; 0x12
    2f66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	9c 8b       	std	Y+20, r25	; 0x14
    2f70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f72:	8b 89       	ldd	r24, Y+19	; 0x13
    2f74:	9c 89       	ldd	r25, Y+20	; 0x14
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	69 f7       	brne	.-38     	; 0x2f54 <LCD_DisplayCharacter+0x76a>
    2f7a:	14 c0       	rjmp	.+40     	; 0x2fa4 <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f80:	8f 89       	ldd	r24, Y+23	; 0x17
    2f82:	98 8d       	ldd	r25, Y+24	; 0x18
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	9c 8b       	std	Y+20, r25	; 0x14
    2f8e:	8b 8b       	std	Y+19, r24	; 0x13
    2f90:	8b 89       	ldd	r24, Y+19	; 0x13
    2f92:	9c 89       	ldd	r25, Y+20	; 0x14
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	8f 87       	std	Y+15, r24	; 0x0f
    2f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9a:	98 89       	ldd	r25, Y+16	; 0x10
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <LCD_DisplayCharacter+0x7b2>
    2fa0:	98 8b       	std	Y+16, r25	; 0x10
    2fa2:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	62 e0       	ldi	r22, 0x02	; 2
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	a0 e8       	ldi	r26, 0x80	; 128
    2fb4:	bf e3       	ldi	r27, 0x3F	; 63
    2fb6:	8b 87       	std	Y+11, r24	; 0x0b
    2fb8:	9c 87       	std	Y+12, r25	; 0x0c
    2fba:	ad 87       	std	Y+13, r26	; 0x0d
    2fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	4a e7       	ldi	r20, 0x7A	; 122
    2fcc:	55 e4       	ldi	r21, 0x45	; 69
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	8f 83       	std	Y+7, r24	; 0x07
    2fd8:	98 87       	std	Y+8, r25	; 0x08
    2fda:	a9 87       	std	Y+9, r26	; 0x09
    2fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fde:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe0:	78 85       	ldd	r23, Y+8	; 0x08
    2fe2:	89 85       	ldd	r24, Y+9	; 0x09
    2fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e8       	ldi	r20, 0x80	; 128
    2fec:	5f e3       	ldi	r21, 0x3F	; 63
    2fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff2:	88 23       	and	r24, r24
    2ff4:	2c f4       	brge	.+10     	; 0x3000 <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	3f c0       	rjmp	.+126    	; 0x307e <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f e7       	ldi	r20, 0x7F	; 127
    300e:	57 e4       	ldi	r21, 0x47	; 71
    3010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3014:	18 16       	cp	r1, r24
    3016:	4c f5       	brge	.+82     	; 0x306a <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3018:	6b 85       	ldd	r22, Y+11	; 0x0b
    301a:	7c 85       	ldd	r23, Y+12	; 0x0c
    301c:	8d 85       	ldd	r24, Y+13	; 0x0d
    301e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e2       	ldi	r20, 0x20	; 32
    3026:	51 e4       	ldi	r21, 0x41	; 65
    3028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	0f c0       	rjmp	.+30     	; 0x3060 <LCD_DisplayCharacter+0x876>
    3042:	80 e9       	ldi	r24, 0x90	; 144
    3044:	91 e0       	ldi	r25, 0x01	; 1
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <LCD_DisplayCharacter+0x864>
    3052:	9c 83       	std	Y+4, r25	; 0x04
    3054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	69 f7       	brne	.-38     	; 0x3042 <LCD_DisplayCharacter+0x858>
    3068:	14 c0       	rjmp	.+40     	; 0x3092 <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306a:	6f 81       	ldd	r22, Y+7	; 0x07
    306c:	78 85       	ldd	r23, Y+8	; 0x08
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	9a 83       	std	Y+2, r25	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <LCD_DisplayCharacter+0x8a0>
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    3092:	80 91 1f 01 	lds	r24, 0x011F
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	80 93 1f 01 	sts	0x011F, r24
    if(col_global == MAX_NUM_COL_LCD)
    309c:	80 91 1f 01 	lds	r24, 0x011F
    30a0:	84 31       	cpi	r24, 0x14	; 20
    30a2:	69 f4       	brne	.+26     	; 0x30be <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    30a4:	80 91 1e 01 	lds	r24, 0x011E
    30a8:	8f 5f       	subi	r24, 0xFF	; 255
    30aa:	80 93 1e 01 	sts	0x011E, r24
        col_global = 0 ;
    30ae:	10 92 1f 01 	sts	0x011F, r1
        if(row_global == MAX_NUM_COL_LCD)
    30b2:	80 91 1e 01 	lds	r24, 0x011E
    30b6:	84 31       	cpi	r24, 0x14	; 20
    30b8:	11 f4       	brne	.+4      	; 0x30be <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    30ba:	10 92 1e 01 	sts	0x011E, r1
    }
}
    30be:	cc 59       	subi	r28, 0x9C	; 156
    30c0:	df 4f       	sbci	r29, 0xFF	; 255
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	08 95       	ret

000030d6 <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	00 d0       	rcall	.+0      	; 0x30dc <LCD_DisplayString+0x6>
    30dc:	0f 92       	push	r0
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	9b 83       	std	Y+3, r25	; 0x03
    30e4:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    30e6:	19 82       	std	Y+1, r1	; 0x01
    30e8:	0e c0       	rjmp	.+28     	; 0x3106 <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	fc 01       	movw	r30, r24
    30f6:	e2 0f       	add	r30, r18
    30f8:	f3 1f       	adc	r31, r19
    30fa:	80 81       	ld	r24, Z
    30fc:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_DisplayCharacter>
        it++;
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	fc 01       	movw	r30, r24
    3112:	e2 0f       	add	r30, r18
    3114:	f3 1f       	adc	r31, r19
    3116:	80 81       	ld	r24, Z
    3118:	88 23       	and	r24, r24
    311a:	39 f7       	brne	.-50     	; 0x30ea <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	00 d0       	rcall	.+0      	; 0x312e <LCD_MoveCursor+0x6>
    312e:	00 d0       	rcall	.+0      	; 0x3130 <LCD_MoveCursor+0x8>
    3130:	0f 92       	push	r0
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	8a 83       	std	Y+2, r24	; 0x02
    3138:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	3d 83       	std	Y+5, r19	; 0x05
    3142:	2c 83       	std	Y+4, r18	; 0x04
    3144:	8c 81       	ldd	r24, Y+4	; 0x04
    3146:	9d 81       	ldd	r25, Y+5	; 0x05
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	91 05       	cpc	r25, r1
    314c:	e9 f0       	breq	.+58     	; 0x3188 <LCD_MoveCursor+0x60>
    314e:	2c 81       	ldd	r18, Y+4	; 0x04
    3150:	3d 81       	ldd	r19, Y+5	; 0x05
    3152:	22 30       	cpi	r18, 0x02	; 2
    3154:	31 05       	cpc	r19, r1
    3156:	2c f4       	brge	.+10     	; 0x3162 <LCD_MoveCursor+0x3a>
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	9d 81       	ldd	r25, Y+5	; 0x05
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	61 f0       	breq	.+24     	; 0x3178 <LCD_MoveCursor+0x50>
    3160:	30 c0       	rjmp	.+96     	; 0x31c2 <LCD_MoveCursor+0x9a>
    3162:	2c 81       	ldd	r18, Y+4	; 0x04
    3164:	3d 81       	ldd	r19, Y+5	; 0x05
    3166:	22 30       	cpi	r18, 0x02	; 2
    3168:	31 05       	cpc	r19, r1
    316a:	c1 f0       	breq	.+48     	; 0x319c <LCD_MoveCursor+0x74>
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	83 30       	cpi	r24, 0x03	; 3
    3172:	91 05       	cpc	r25, r1
    3174:	e9 f0       	breq	.+58     	; 0x31b0 <LCD_MoveCursor+0x88>
    3176:	25 c0       	rjmp	.+74     	; 0x31c2 <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	80 93 1f 01 	sts	0x011F, r24
            row_global = 0 ;
    3182:	10 92 1e 01 	sts	0x011E, r1
    3186:	1d c0       	rjmp	.+58     	; 0x31c2 <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	80 5c       	subi	r24, 0xC0	; 192
    318c:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	80 93 1f 01 	sts	0x011F, r24
            row_global = 1 ;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	80 93 1e 01 	sts	0x011E, r24
    319a:	13 c0       	rjmp	.+38     	; 0x31c2 <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	8c 5e       	subi	r24, 0xEC	; 236
    31a0:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	80 93 1f 01 	sts	0x011F, r24
                row_global = 2 ;
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	80 93 1e 01 	sts	0x011E, r24
    31ae:	09 c0       	rjmp	.+18     	; 0x31c2 <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	8c 5a       	subi	r24, 0xAC	; 172
    31b4:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	80 93 1f 01 	sts	0x011F, r24
                row_global = 3 ;
    31bc:	83 e0       	ldi	r24, 0x03	; 3
    31be:	80 93 1e 01 	sts	0x011E, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	80 68       	ori	r24, 0x80	; 128
    31c6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
}
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <LCD_DisplayStringRowCol+0x6>
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <LCD_DisplayStringRowCol+0x8>
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	6b 83       	std	Y+3, r22	; 0x03
    31ec:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	6c 81       	ldd	r22, Y+4	; 0x04
    31f2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	9a 81       	ldd	r25, Y+2	; 0x02
    31fa:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
}
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    3214:	10 92 1f 01 	sts	0x011F, r1
    3218:	10 92 1e 01 	sts	0x011E, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
}
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    3230:	80 91 1f 01 	lds	r24, 0x011F
    3234:	83 31       	cpi	r24, 0x13	; 19
    3236:	89 f4       	brne	.+34     	; 0x325a <LCD_MoveCursorRight+0x32>
    3238:	80 91 1e 01 	lds	r24, 0x011E
    323c:	88 23       	and	r24, r24
    323e:	69 f4       	brne	.+26     	; 0x325a <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    3240:	10 92 1f 01 	sts	0x011F, r1
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	80 93 1e 01 	sts	0x011E, r24
        LCD_MoveCursor(row_global,col_global);
    324a:	80 91 1e 01 	lds	r24, 0x011E
    324e:	90 91 1f 01 	lds	r25, 0x011F
    3252:	69 2f       	mov	r22, r25
    3254:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    3258:	46 c0       	rjmp	.+140    	; 0x32e6 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    325a:	80 91 1f 01 	lds	r24, 0x011F
    325e:	83 31       	cpi	r24, 0x13	; 19
    3260:	89 f4       	brne	.+34     	; 0x3284 <LCD_MoveCursorRight+0x5c>
    3262:	80 91 1e 01 	lds	r24, 0x011E
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	69 f4       	brne	.+26     	; 0x3284 <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    326a:	10 92 1f 01 	sts	0x011F, r1
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	80 93 1e 01 	sts	0x011E, r24
        LCD_MoveCursor(row_global,col_global);
    3274:	80 91 1e 01 	lds	r24, 0x011E
    3278:	90 91 1f 01 	lds	r25, 0x011F
    327c:	69 2f       	mov	r22, r25
    327e:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    3282:	31 c0       	rjmp	.+98     	; 0x32e6 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    3284:	80 91 1f 01 	lds	r24, 0x011F
    3288:	83 31       	cpi	r24, 0x13	; 19
    328a:	89 f4       	brne	.+34     	; 0x32ae <LCD_MoveCursorRight+0x86>
    328c:	80 91 1e 01 	lds	r24, 0x011E
    3290:	82 30       	cpi	r24, 0x02	; 2
    3292:	69 f4       	brne	.+26     	; 0x32ae <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    3294:	10 92 1f 01 	sts	0x011F, r1
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	80 93 1e 01 	sts	0x011E, r24
        LCD_MoveCursor(row_global,col_global);
    329e:	80 91 1e 01 	lds	r24, 0x011E
    32a2:	90 91 1f 01 	lds	r25, 0x011F
    32a6:	69 2f       	mov	r22, r25
    32a8:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    32ac:	1c c0       	rjmp	.+56     	; 0x32e6 <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    32ae:	80 91 1f 01 	lds	r24, 0x011F
    32b2:	83 31       	cpi	r24, 0x13	; 19
    32b4:	81 f4       	brne	.+32     	; 0x32d6 <LCD_MoveCursorRight+0xae>
    32b6:	80 91 1e 01 	lds	r24, 0x011E
    32ba:	83 30       	cpi	r24, 0x03	; 3
    32bc:	61 f4       	brne	.+24     	; 0x32d6 <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    32be:	10 92 1f 01 	sts	0x011F, r1
    32c2:	10 92 1e 01 	sts	0x011E, r1
        LCD_MoveCursor(row_global,col_global);
    32c6:	80 91 1e 01 	lds	r24, 0x011E
    32ca:	90 91 1f 01 	lds	r25, 0x011F
    32ce:	69 2f       	mov	r22, r25
    32d0:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    32d6:	84 e1       	ldi	r24, 0x14	; 20
    32d8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
        col_global++;
    32dc:	80 91 1f 01 	lds	r24, 0x011F
    32e0:	8f 5f       	subi	r24, 0xFF	; 255
    32e2:	80 93 1f 01 	sts	0x011F, r24
    }
}
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    32f4:	80 91 1f 01 	lds	r24, 0x011F
    32f8:	88 23       	and	r24, r24
    32fa:	91 f4       	brne	.+36     	; 0x3320 <LCD_MoveCursorLeft+0x34>
    32fc:	80 91 1e 01 	lds	r24, 0x011E
    3300:	88 23       	and	r24, r24
    3302:	71 f4       	brne	.+28     	; 0x3320 <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    3304:	83 e1       	ldi	r24, 0x13	; 19
    3306:	80 93 1f 01 	sts	0x011F, r24
    330a:	83 e0       	ldi	r24, 0x03	; 3
    330c:	80 93 1e 01 	sts	0x011E, r24
        LCD_MoveCursor(row_global,col_global);
    3310:	80 91 1e 01 	lds	r24, 0x011E
    3314:	90 91 1f 01 	lds	r25, 0x011F
    3318:	69 2f       	mov	r22, r25
    331a:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    331e:	49 c0       	rjmp	.+146    	; 0x33b2 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    3320:	80 91 1f 01 	lds	r24, 0x011F
    3324:	88 23       	and	r24, r24
    3326:	89 f4       	brne	.+34     	; 0x334a <LCD_MoveCursorLeft+0x5e>
    3328:	80 91 1e 01 	lds	r24, 0x011E
    332c:	81 30       	cpi	r24, 0x01	; 1
    332e:	69 f4       	brne	.+26     	; 0x334a <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    3330:	83 e1       	ldi	r24, 0x13	; 19
    3332:	80 93 1f 01 	sts	0x011F, r24
    3336:	10 92 1e 01 	sts	0x011E, r1
        LCD_MoveCursor(row_global,col_global);
    333a:	80 91 1e 01 	lds	r24, 0x011E
    333e:	90 91 1f 01 	lds	r25, 0x011F
    3342:	69 2f       	mov	r22, r25
    3344:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    3348:	34 c0       	rjmp	.+104    	; 0x33b2 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    334a:	80 91 1f 01 	lds	r24, 0x011F
    334e:	88 23       	and	r24, r24
    3350:	91 f4       	brne	.+36     	; 0x3376 <LCD_MoveCursorLeft+0x8a>
    3352:	80 91 1e 01 	lds	r24, 0x011E
    3356:	82 30       	cpi	r24, 0x02	; 2
    3358:	71 f4       	brne	.+28     	; 0x3376 <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    335a:	83 e1       	ldi	r24, 0x13	; 19
    335c:	80 93 1f 01 	sts	0x011F, r24
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	80 93 1e 01 	sts	0x011E, r24
        LCD_MoveCursor(row_global,col_global);
    3366:	80 91 1e 01 	lds	r24, 0x011E
    336a:	90 91 1f 01 	lds	r25, 0x011F
    336e:	69 2f       	mov	r22, r25
    3370:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    3374:	1e c0       	rjmp	.+60     	; 0x33b2 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    3376:	80 91 1f 01 	lds	r24, 0x011F
    337a:	88 23       	and	r24, r24
    337c:	91 f4       	brne	.+36     	; 0x33a2 <LCD_MoveCursorLeft+0xb6>
    337e:	80 91 1e 01 	lds	r24, 0x011E
    3382:	83 30       	cpi	r24, 0x03	; 3
    3384:	71 f4       	brne	.+28     	; 0x33a2 <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    3386:	83 e1       	ldi	r24, 0x13	; 19
    3388:	80 93 1f 01 	sts	0x011F, r24
    338c:	82 e0       	ldi	r24, 0x02	; 2
    338e:	80 93 1e 01 	sts	0x011E, r24
        LCD_MoveCursor(row_global,col_global);
    3392:	80 91 1e 01 	lds	r24, 0x011E
    3396:	90 91 1f 01 	lds	r25, 0x011F
    339a:	69 2f       	mov	r22, r25
    339c:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    33a0:	08 c0       	rjmp	.+16     	; 0x33b2 <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    33a2:	80 e1       	ldi	r24, 0x10	; 16
    33a4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
        col_global--;
    33a8:	80 91 1f 01 	lds	r24, 0x011F
    33ac:	81 50       	subi	r24, 0x01	; 1
    33ae:	80 93 1f 01 	sts	0x011F, r24
    }
    
}
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    33b8:	df 93       	push	r29
    33ba:	cf 93       	push	r28
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    33c0:	8c e1       	ldi	r24, 0x1C	; 28
    33c2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
}
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    33d4:	88 e1       	ldi	r24, 0x18	; 24
    33d6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
}
    33da:	cf 91       	pop	r28
    33dc:	df 91       	pop	r29
    33de:	08 95       	ret

000033e0 <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <LCD_GenerateCharacterCGRAM+0x6>
    33e6:	00 d0       	rcall	.+0      	; 0x33e8 <LCD_GenerateCharacterCGRAM+0x8>
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	9b 83       	std	Y+3, r25	; 0x03
    33ee:	8a 83       	std	Y+2, r24	; 0x02
    33f0:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    33f2:	8c 81       	ldd	r24, Y+4	; 0x04
    33f4:	88 2f       	mov	r24, r24
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	08 96       	adiw	r24, 0x08	; 8
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    340a:	19 82       	std	Y+1, r1	; 0x01
    340c:	0e c0       	rjmp	.+28     	; 0x342a <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	28 2f       	mov	r18, r24
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	fc 01       	movw	r30, r24
    341a:	e2 0f       	add	r30, r18
    341c:	f3 1f       	adc	r31, r19
    341e:	80 81       	ld	r24, Z
    3420:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	8f 5f       	subi	r24, 0xFF	; 255
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	88 30       	cpi	r24, 0x08	; 8
    342e:	78 f3       	brcs	.-34     	; 0x340e <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	08 95       	ret

0000343e <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	0f 92       	push	r0
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_DisplayCharacter>
}
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <LCD_DisplayCustomCharacterRowCol+0x6>
    345e:	0f 92       	push	r0
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	6a 83       	std	Y+2, r22	; 0x02
    3468:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	6b 81       	ldd	r22, Y+3	; 0x03
    346e:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_DisplayCharacter>
}
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	65 97       	sbiw	r28, 0x15	; 21
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	6a 8b       	std	Y+18, r22	; 0x12
    349a:	7b 8b       	std	Y+19, r23	; 0x13
    349c:	8c 8b       	std	Y+20, r24	; 0x14
    349e:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    34a0:	8a 89       	ldd	r24, Y+18	; 0x12
    34a2:	9b 89       	ldd	r25, Y+19	; 0x13
    34a4:	9e 01       	movw	r18, r28
    34a6:	2f 5f       	subi	r18, 0xFF	; 255
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	b9 01       	movw	r22, r18
    34ac:	4a e0       	ldi	r20, 0x0A	; 10
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	0e 94 c2 20 	call	0x4184	; 0x4184 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    34b4:	ce 01       	movw	r24, r28
    34b6:	01 96       	adiw	r24, 0x01	; 1
    34b8:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
}
    34bc:	65 96       	adiw	r28, 0x15	; 21
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	08 95       	ret

000034ce <Keypad_4X3_AdjustKeyNumber>:


#if(KEYPAD_COL_NUM == 3)

static uint8 Keypad_4X3_AdjustKeyNumber(uint8 Button_Number)
{
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <Keypad_4X3_AdjustKeyNumber+0x6>
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <Keypad_4X3_AdjustKeyNumber+0x8>
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	8a 83       	std	Y+2, r24	; 0x02
    uint8 pressed_key = 0;
    34dc:	19 82       	std	Y+1, r1	; 0x01
    switch (Button_Number)
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	3c 83       	std	Y+4, r19	; 0x04
    34e6:	2b 83       	std	Y+3, r18	; 0x03
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	8a 30       	cpi	r24, 0x0A	; 10
    34ee:	91 05       	cpc	r25, r1
    34f0:	81 f0       	breq	.+32     	; 0x3512 <Keypad_4X3_AdjustKeyNumber+0x44>
    34f2:	2b 81       	ldd	r18, Y+3	; 0x03
    34f4:	3c 81       	ldd	r19, Y+4	; 0x04
    34f6:	2a 30       	cpi	r18, 0x0A	; 10
    34f8:	31 05       	cpc	r19, r1
    34fa:	9c f0       	brlt	.+38     	; 0x3522 <Keypad_4X3_AdjustKeyNumber+0x54>
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	8b 30       	cpi	r24, 0x0B	; 11
    3502:	91 05       	cpc	r25, r1
    3504:	49 f0       	breq	.+18     	; 0x3518 <Keypad_4X3_AdjustKeyNumber+0x4a>
    3506:	2b 81       	ldd	r18, Y+3	; 0x03
    3508:	3c 81       	ldd	r19, Y+4	; 0x04
    350a:	2c 30       	cpi	r18, 0x0C	; 12
    350c:	31 05       	cpc	r19, r1
    350e:	31 f0       	breq	.+12     	; 0x351c <Keypad_4X3_AdjustKeyNumber+0x4e>
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <Keypad_4X3_AdjustKeyNumber+0x54>
    {
        case 10 :
            pressed_key = '*';
    3512:	8a e2       	ldi	r24, 0x2A	; 42
    3514:	89 83       	std	Y+1, r24	; 0x01
    3516:	07 c0       	rjmp	.+14     	; 0x3526 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 11 : 
            pressed_key = 0;
    3518:	19 82       	std	Y+1, r1	; 0x01
    351a:	05 c0       	rjmp	.+10     	; 0x3526 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 12 : 
            pressed_key = '#';
    351c:	83 e2       	ldi	r24, 0x23	; 35
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        default :
            pressed_key = Button_Number;   // if Button_Number =1  --> so will return 1 (as no mapping need like case 10 , 11 , 12)
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
            break;
    }
    return pressed_key;
    3526:	89 81       	ldd	r24, Y+1	; 0x01
}
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <Keypad_init>:


/**************************                   Functions Definition                   **************************/

void Keypad_init(void)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <Keypad_init+0x6>
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    3540:	1a 82       	std	Y+2, r1	; 0x02
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <Keypad_init+0x2c>
        {
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)

            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN_PULLUP );
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	fc 01       	movw	r30, r24
    354c:	e2 53       	subi	r30, 0x32	; 50
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	90 81       	ld	r25, Z
    3552:	82 e0       	ldi	r24, 0x02	; 2
    3554:	69 2f       	mov	r22, r25
    3556:	41 e0       	ldi	r20, 0x01	; 1
    3558:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    355c:	8a 81       	ldd	r24, Y+2	; 0x02
    355e:	8f 5f       	subi	r24, 0xFF	; 255
    3560:	8a 83       	std	Y+2, r24	; 0x02
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	84 30       	cpi	r24, 0x04	; 4
    3566:	70 f3       	brcs	.-36     	; 0x3544 <Keypad_init+0xe>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3568:	19 82       	std	Y+1, r1	; 0x01
    356a:	1b c0       	rjmp	.+54     	; 0x35a2 <Keypad_init+0x6c>
        {
            GPIO_SetPinDirection(KEYPAD_COL_PORT , sequelizeCOL[it] , OUTPUT_PIN );
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	fc 01       	movw	r30, r24
    3574:	e5 53       	subi	r30, 0x35	; 53
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	90 81       	ld	r25, Z
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	69 2f       	mov	r22, r25
    357e:	42 e0       	ldi	r20, 0x02	; 2
    3580:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	fc 01       	movw	r30, r24
    358c:	e5 53       	subi	r30, 0x35	; 53
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	90 81       	ld	r25, Z
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	69 2f       	mov	r22, r25
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	8f 5f       	subi	r24, 0xFF	; 255
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	83 30       	cpi	r24, 0x03	; 3
    35a6:	10 f3       	brcs	.-60     	; 0x356c <Keypad_init+0x36>
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_LOW );// set all columns to low
            #endif
        }

    #endif
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <Keypad_GetPressedKey>:


sint8 Keypad_GetPressedKey(void)
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <Keypad_GetPressedKey+0x6>
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <Keypad_GetPressedKey+0x8>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <Keypad_GetPressedKey+0xa>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    35c0:	1d 82       	std	Y+5, r1	; 0x05
    35c2:	0f c0       	rjmp	.+30     	; 0x35e2 <Keypad_GetPressedKey+0x30>
                {
                    GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	88 2f       	mov	r24, r24
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	fc 01       	movw	r30, r24
    35cc:	e5 53       	subi	r30, 0x35	; 53
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	90 81       	ld	r25, Z
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	69 2f       	mov	r22, r25
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	8f 5f       	subi	r24, 0xFF	; 255
    35e0:	8d 83       	std	Y+5, r24	; 0x05
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	83 30       	cpi	r24, 0x03	; 3
    35e6:	70 f3       	brcs	.-36     	; 0x35c4 <Keypad_GetPressedKey+0x12>
            #endif

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
    35e8:	8f ef       	ldi	r24, 0xFF	; 255
    35ea:	9f ef       	ldi	r25, 0xFF	; 255
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    35f0:	1c 82       	std	Y+4, r1	; 0x04
    35f2:	45 c0       	rjmp	.+138    	; 0x367e <Keypad_GetPressedKey+0xcc>
                {
                    // set  one column with value want to read to loop in rows to read which key from this column pressed
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
    35f4:	8c 81       	ldd	r24, Y+4	; 0x04
    35f6:	88 2f       	mov	r24, r24
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	fc 01       	movw	r30, r24
    35fc:	e5 53       	subi	r30, 0x35	; 53
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	90 81       	ld	r25, Z
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	69 2f       	mov	r22, r25
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    360c:	1b 82       	std	Y+3, r1	; 0x03
    360e:	25 c0       	rjmp	.+74     	; 0x365a <Keypad_GetPressedKey+0xa8>
                    {
                        if(GPIO_ReadPin(KEYPAD_ROW_PORT,sequelizeROW[row]) == KEYPAD_PRESSED_STATE)
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	fc 01       	movw	r30, r24
    3618:	e2 53       	subi	r30, 0x32	; 50
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	90 81       	ld	r25, Z
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	69 2f       	mov	r22, r25
    3622:	0e 94 bc 08 	call	0x1178	; 0x1178 <GPIO_ReadPin>
    3626:	88 23       	and	r24, r24
    3628:	a9 f4       	brne	.+42     	; 0x3654 <Keypad_GetPressedKey+0xa2>
                        {
                            #if(KEYPAD_COL_NUM == 3)
                                pressed_key = Keypad_4X3_AdjustKeyNumber((row*KEYPAD_COL_NUM)+col+1);
    362a:	8b 81       	ldd	r24, Y+3	; 0x03
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	c9 01       	movw	r24, r18
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	82 0f       	add	r24, r18
    3638:	93 1f       	adc	r25, r19
    363a:	98 2f       	mov	r25, r24
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	89 0f       	add	r24, r25
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	0e 94 67 1a 	call	0x34ce	; 0x34ce <Keypad_4X3_AdjustKeyNumber>
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01

                            pressed_BTN_IsReleased = TRUE;
                            /*store last pressed BTN*/
                            pressed_BTN = row ;
                        #endif
                            return pressed_key ;
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	8e 83       	std	Y+6, r24	; 0x06
    3652:	1b c0       	rjmp	.+54     	; 0x368a <Keypad_GetPressedKey+0xd8>
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3654:	8b 81       	ldd	r24, Y+3	; 0x03
    3656:	8f 5f       	subi	r24, 0xFF	; 255
    3658:	8b 83       	std	Y+3, r24	; 0x03
    365a:	8b 81       	ldd	r24, Y+3	; 0x03
    365c:	84 30       	cpi	r24, 0x04	; 4
    365e:	c0 f2       	brcs	.-80     	; 0x3610 <Keypad_GetPressedKey+0x5e>
                                //          |     I mean this step
                                //          |
                                //          \/
                    // retrive change happen to make same thing to next column
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL [col] , LOGIC_HIGH ); // set all columns to High
    3660:	8c 81       	ldd	r24, Y+4	; 0x04
    3662:	88 2f       	mov	r24, r24
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	fc 01       	movw	r30, r24
    3668:	e5 53       	subi	r30, 0x35	; 53
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	90 81       	ld	r25, Z
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	69 2f       	mov	r22, r25
    3672:	41 e0       	ldi	r20, 0x01	; 1
    3674:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3678:	8c 81       	ldd	r24, Y+4	; 0x04
    367a:	8f 5f       	subi	r24, 0xFF	; 255
    367c:	8c 83       	std	Y+4, r24	; 0x04
    367e:	8c 81       	ldd	r24, Y+4	; 0x04
    3680:	83 30       	cpi	r24, 0x03	; 3
    3682:	08 f4       	brcc	.+2      	; 0x3686 <Keypad_GetPressedKey+0xd4>
    3684:	b7 cf       	rjmp	.-146    	; 0x35f4 <Keypad_GetPressedKey+0x42>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_LOW ); // set all columns to low
                    #endif

                }
                return pressed_key ;
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	8e 83       	std	Y+6, r24	; 0x06
    368a:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            

    #endif

}
    368c:	26 96       	adiw	r28, 0x06	; 6
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <Buzzer_Init>:

#include "Buzzer_interface.h"


void Buzzer_Init(uint8 PORTX , uint8 PIN )
{
    369e:	df 93       	push	r29
    36a0:	cf 93       	push	r28
    36a2:	00 d0       	rcall	.+0      	; 0x36a4 <Buzzer_Init+0x6>
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	6a 81       	ldd	r22, Y+2	; 0x02
    36b0:	42 e0       	ldi	r20, 0x02	; 2
    36b2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
}
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <Buzzer_OnOffPositiveLogic>:


void Buzzer_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <Buzzer_OnOffPositiveLogic+0x6>
    36c6:	0f 92       	push	r0
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	6a 83       	std	Y+2, r22	; 0x02
    36d0:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	88 23       	and	r24, r24
    36d6:	31 f4       	brne	.+12     	; 0x36e4 <Buzzer_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	6a 81       	ldd	r22, Y+2	; 0x02
    36dc:	40 e0       	ldi	r20, 0x00	; 0
    36de:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    36e2:	08 c0       	rjmp	.+16     	; 0x36f4 <Buzzer_OnOffPositiveLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	81 30       	cpi	r24, 0x01	; 1
    36e8:	29 f4       	brne	.+10     	; 0x36f4 <Buzzer_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	6a 81       	ldd	r22, Y+2	; 0x02
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    }
}
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <Buzzer_OnOffNegativeLogic>:


void Buzzer_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <Buzzer_OnOffNegativeLogic+0x6>
    3706:	0f 92       	push	r0
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	6a 83       	std	Y+2, r22	; 0x02
    3710:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	88 23       	and	r24, r24
    3716:	31 f4       	brne	.+12     	; 0x3724 <Buzzer_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	6a 81       	ldd	r22, Y+2	; 0x02
    371c:	41 e0       	ldi	r20, 0x01	; 1
    371e:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    3722:	08 c0       	rjmp	.+16     	; 0x3734 <Buzzer_OnOffNegativeLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	29 f4       	brne	.+10     	; 0x3734 <Buzzer_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	6a 81       	ldd	r22, Y+2	; 0x02
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	0e 94 57 09 	call	0x12ae	; 0x12ae <GPIO_WritePin>
    }
}
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <Buzzer_Toggle>:



void Buzzer_Toggle(uint8 PORTX , uint8 PIN)
{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	00 d0       	rcall	.+0      	; 0x3746 <Buzzer_Toggle+0x6>
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_TogglePin(PORTX,PIN);
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	6a 81       	ldd	r22, Y+2	; 0x02
    3752:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_TogglePin>
}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	00 d0       	rcall	.+0      	; 0x3766 <BUTTON_Init+0x6>
    3766:	0f 92       	push	r0
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	89 83       	std	Y+1, r24	; 0x01
    376e:	6a 83       	std	Y+2, r22	; 0x02
    3770:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	6a 81       	ldd	r22, Y+2	; 0x02
    3776:	4b 81       	ldd	r20, Y+3	; 0x03
    3778:	0e 94 ce 06 	call	0xd9c	; 0xd9c <GPIO_SetPinDirection>
}
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	08 95       	ret

00003788 <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	00 d0       	rcall	.+0      	; 0x378e <BUTTON_GetValue+0x6>
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	89 83       	std	Y+1, r24	; 0x01
    3794:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	6a 81       	ldd	r22, Y+2	; 0x02
    379a:	0e 94 bc 08 	call	0x1178	; 0x1178 <GPIO_ReadPin>
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <A_APPLICATION_VOID_INIT>:

/**************************                   Function bodies                   **************************/

// Body of initialize function
void A_APPLICATION_VOID_INIT(void)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
	// initialize LEDs needed
	LED_Init(YLW_LED_PORT, YLW_LED_PIN);
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	66 e0       	ldi	r22, 0x06	; 6
    37b4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LED_Init>
	LED_Init(RED_LED_PORT, RED_LED_PIN);
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	67 e0       	ldi	r22, 0x07	; 7
    37bc:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LED_Init>

	// initialize Buzzer
	Buzzer_Init(BZR_PORT, BZR_PIN);
    37c0:	82 e0       	ldi	r24, 0x02	; 2
    37c2:	66 e0       	ldi	r22, 0x06	; 6
    37c4:	0e 94 4f 1b 	call	0x369e	; 0x369e <Buzzer_Init>

	// initialize LCD
	LCD_init();
    37c8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_init>

	// initialize ADC
	ADC_Init();
    37cc:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <ADC_Init>

	// initialize External interrupt
	INT0_init(RISING_EDGE_TRIGGER, INPUT_PIN);
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <INT0_init>

	// initialize keypad
	Keypad_init();
    37d8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <Keypad_init>

	// initialize of special characters
	LCD_GenerateCharacterCGRAM(GBX_SELECTED, E_CHAR_GBX_SELECTED);
    37dc:	83 ed       	ldi	r24, 0xD3	; 211
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(PAGE_SELECTED, E_CHAR_PAGE_SELECTED);
    37e6:	8b ed       	ldi	r24, 0xDB	; 219
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(PAGE_NOT_SELECTED, E_CHAR_PAGE_NOT_SELECTED);
    37f0:	83 ee       	ldi	r24, 0xE3	; 227
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	62 e0       	ldi	r22, 0x02	; 2
    37f6:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(INVERTED_A, E_CHAR_PAGE_INV_A);
    37fa:	8b ee       	ldi	r24, 0xEB	; 235
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	63 e0       	ldi	r22, 0x03	; 3
    3800:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(INVERTED_L, E_CHAR_PAGE_INV_L);
    3804:	83 ef       	ldi	r24, 0xF3	; 243
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	64 e0       	ldi	r22, 0x04	; 4
    380a:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(INVERTED_E, E_CHAR_PAGE_INV_E);
    380e:	8b ef       	ldi	r24, 0xFB	; 251
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	65 e0       	ldi	r22, 0x05	; 5
    3814:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(INVERTED_R, E_CHAR_PAGE_INV_R);
    3818:	83 e0       	ldi	r24, 0x03	; 3
    381a:	91 e0       	ldi	r25, 0x01	; 1
    381c:	66 e0       	ldi	r22, 0x06	; 6
    381e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
	LCD_GenerateCharacterCGRAM(INVERTED_T, E_CHAR_PAGE_INV_T);
    3822:	8b e0       	ldi	r24, 0x0B	; 11
    3824:	91 e0       	ldi	r25, 0x01	; 1
    3826:	67 e0       	ldi	r22, 0x07	; 7
    3828:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LCD_GenerateCharacterCGRAM>
}
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <A_APPLICATION_VOID_MAIN_LCD_SCREEN_SELECT>:

/************************** LCD screen select function **************************/
void A_APPLICATION_VOID_MAIN_LCD_SCREEN_SELECT()
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	0f 92       	push	r0
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62

	switch (LCD_PAGE_STATE)
    383c:	80 91 20 01 	lds	r24, 0x0120
		break;

	default:
		break;
	}
}
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ>:

/************************** Keypad button read check function **************************/
void A_APPLICATION_VOID_KEYPAD_BUTTON_READ(void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	00 d0       	rcall	.+0      	; 0x384e <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x6>
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_PRESSED = Keypad_GetPressedKey();
    3852:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Keypad_GetPressedKey>
    3856:	80 93 d2 00 	sts	0x00D2, r24

	if ((KEYPAD_PRESSED == E_KEYPAD_GEARBOX))
    385a:	80 91 d2 00 	lds	r24, 0x00D2
    385e:	82 30       	cpi	r24, 0x02	; 2
    3860:	19 f4       	brne	.+6      	; 0x3868 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x20>
	{
		A_APPLICATION_VOID_GBX_CHANGE();
    3862:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <A_APPLICATION_VOID_GBX_CHANGE>
    3866:	02 c0       	rjmp	.+4      	; 0x386c <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x24>
	}
	else
	{
		GBX_IS_STILL_PRESSED = NO_Condition;
    3868:	10 92 25 01 	sts	0x0125, r1
	}

	if (KEYPAD_PRESSED == E_KEYPAD_CCS_TOG)
    386c:	80 91 d2 00 	lds	r24, 0x00D2
    3870:	88 23       	and	r24, r24
    3872:	19 f4       	brne	.+6      	; 0x387a <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x32>
	{
		A_APPLICATION_VOID_BA_CHANGE();
    3874:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <A_APPLICATION_VOID_BA_CHANGE>
    3878:	02 c0       	rjmp	.+4      	; 0x387e <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x36>

	}
	else
	{
		BA_IS_STILL_PRESSED = NO_Condition;
    387a:	10 92 28 01 	sts	0x0128, r1

	}

	if (KEYPAD_PRESSED == E_KEYPAD_LEFT_PAGE)
    387e:	80 91 d2 00 	lds	r24, 0x00D2
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	19 f4       	brne	.+6      	; 0x388c <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x44>
	{
		A_APPLICATION_VOID_SCREEN_SCROLL_LEFT();
    3886:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <A_APPLICATION_VOID_SCREEN_SCROLL_LEFT>
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x48>
	}
	else
	{

		SCREEN_LEFT_SCROLL_IS_STILL_PRESSED = NO_Condition;
    388c:	10 92 27 01 	sts	0x0127, r1
	}

	if (KEYPAD_PRESSED == E_KEYPAD_GEARBOX)
    3890:	80 91 d2 00 	lds	r24, 0x00D2
	}
	else
	{
	}

	if (KEYPAD_PRESSED == E_KEYPAD_RIGHT_PAGE)
    3894:	80 91 d2 00 	lds	r24, 0x00D2
    3898:	83 30       	cpi	r24, 0x03	; 3
    389a:	19 f4       	brne	.+6      	; 0x38a2 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x5a>
	{
		A_APPLICATION_VOID_SCREEN_SCROLL_RIGHT();
    389c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <A_APPLICATION_VOID_SCREEN_SCROLL_RIGHT>
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x5e>
	}
	else
	{
		SCREEN_RIGHT_SCROLL_IS_STILL_PRESSED = NO_Condition;
    38a2:	10 92 26 01 	sts	0x0126, r1
	}

	if (KEYPAD_PRESSED == E_KEYPAD_SPEED_LIMITER_DEC)
    38a6:	80 91 d2 00 	lds	r24, 0x00D2
	}
	else
	{
	}

	if (KEYPAD_PRESSED == E_KEYPAD_SPEED_LIMITER_TOG)
    38aa:	80 91 d2 00 	lds	r24, 0x00D2
    38ae:	88 30       	cpi	r24, 0x08	; 8
    38b0:	19 f4       	brne	.+6      	; 0x38b8 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x70>
	{
			A_APPLICATION_VOID_SL_CHANGE();
    38b2:	0e 94 44 20 	call	0x4088	; 0x4088 <A_APPLICATION_VOID_SL_CHANGE>
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x74>
		
	}
	else
	{
		SL_IS_STILL_PRESSED = NO_Condition;
    38b8:	10 92 2a 01 	sts	0x012A, r1

	}

	if (KEYPAD_PRESSED == E_KEYPAD_SPEED_LIMITER_INC)
    38bc:	80 91 d2 00 	lds	r24, 0x00D2
    38c0:	89 30       	cpi	r24, 0x09	; 9
    38c2:	49 f4       	brne	.+18     	; 0x38d6 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0x8e>
	{
		LCD_MoveCursor(2, 2);
    38c4:	82 e0       	ldi	r24, 0x02	; 2
    38c6:	62 e0       	ldi	r22, 0x02	; 2
    38c8:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCharacter((KEYPAD_PRESSED + '0'));
    38cc:	80 91 d2 00 	lds	r24, 0x00D2
    38d0:	80 5d       	subi	r24, 0xD0	; 208
    38d2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_DisplayCharacter>
	}
	else
	{
	}

	if (KEYPAD_PRESSED == '*')
    38d6:	80 91 d2 00 	lds	r24, 0x00D2
    38da:	8a 32       	cpi	r24, 0x2A	; 42
    38dc:	49 f4       	brne	.+18     	; 0x38f0 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ+0xa8>
	{
		LCD_MoveCursor(2, 2);
    38de:	82 e0       	ldi	r24, 0x02	; 2
    38e0:	62 e0       	ldi	r22, 0x02	; 2
    38e2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCharacter((KEYPAD_PRESSED + '0'));
    38e6:	80 91 d2 00 	lds	r24, 0x00D2
    38ea:	80 5d       	subi	r24, 0xD0	; 208
    38ec:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_DisplayCharacter>
	}
	else
	{
	}
}
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <A_APPLICATION_VOID_MAIN_LCD_LOAD>:

void A_APPLICATION_VOID_MAIN_LCD_LOAD(void)
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	2e 97       	sbiw	r28, 0x0e	; 14
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
	LCD_MoveCursor(3, 0);
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	60 e0       	ldi	r22, 0x00	; 0
    3912:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"CCS");
    3916:	80 e6       	ldi	r24, 0x60	; 96
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	LCD_MoveCursor(3, 4);
    391e:	83 e0       	ldi	r24, 0x03	; 3
    3920:	64 e0       	ldi	r22, 0x04	; 4
    3922:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"BA");
    3926:	84 e6       	ldi	r24, 0x64	; 100
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	LCD_MoveCursor(3, 8);
    392e:	83 e0       	ldi	r24, 0x03	; 3
    3930:	68 e0       	ldi	r22, 0x08	; 8
    3932:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"SL");
    3936:	87 e6       	ldi	r24, 0x67	; 103
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	LCD_MoveCursor(0, 9);
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	69 e0       	ldi	r22, 0x09	; 9
    3942:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"S: 999 Km/h");
    3946:	8a e6       	ldi	r24, 0x6A	; 106
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	LCD_MoveCursor(1, 9);
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	69 e0       	ldi	r22, 0x09	; 9
    3952:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"GBX : R N D");
    3956:	86 e7       	ldi	r24, 0x76	; 118
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	A_APPLICATION_VOID_ALERT_INVERTED();
    395e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <A_APPLICATION_VOID_ALERT_INVERTED>

	LCD_MoveCursor(2, 15);
    3962:	82 e0       	ldi	r24, 0x02	; 2
    3964:	6f e0       	ldi	r22, 0x0F	; 15
    3966:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_GBX_SELECTED);
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(2, 17);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	61 e1       	ldi	r22, 0x11	; 17
    3974:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_GBX_SELECTED);
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(2, 19);
    397e:	82 e0       	ldi	r24, 0x02	; 2
    3980:	63 e1       	ldi	r22, 0x13	; 19
    3982:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_GBX_SELECTED);
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 16);
    398c:	83 e0       	ldi	r24, 0x03	; 3
    398e:	60 e1       	ldi	r22, 0x10	; 16
    3990:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 17);
    399a:	83 e0       	ldi	r24, 0x03	; 3
    399c:	61 e1       	ldi	r22, 0x11	; 17
    399e:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 18);
    39a8:	83 e0       	ldi	r24, 0x03	; 3
    39aa:	62 e1       	ldi	r22, 0x12	; 18
    39ac:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 19);
    39b6:	83 e0       	ldi	r24, 0x03	; 3
    39b8:	63 e1       	ldi	r22, 0x13	; 19
    39ba:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	aa ef       	ldi	r26, 0xFA	; 250
    39ca:	b4 e4       	ldi	r27, 0x44	; 68
    39cc:	8b 87       	std	Y+11, r24	; 0x0b
    39ce:	9c 87       	std	Y+12, r25	; 0x0c
    39d0:	ad 87       	std	Y+13, r26	; 0x0d
    39d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a e7       	ldi	r20, 0x7A	; 122
    39e2:	53 e4       	ldi	r21, 0x43	; 67
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	8f 83       	std	Y+7, r24	; 0x07
    39ee:	98 87       	std	Y+8, r25	; 0x08
    39f0:	a9 87       	std	Y+9, r26	; 0x09
    39f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x11c>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x19a>
	else if (__tmp > 65535)
    3a16:	6f 81       	ldd	r22, Y+7	; 0x07
    3a18:	78 85       	ldd	r23, Y+8	; 0x08
    3a1a:	89 85       	ldd	r24, Y+9	; 0x09
    3a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x17c>
    3a58:	89 e1       	ldi	r24, 0x19	; 25
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9c 83       	std	Y+4, r25	; 0x04
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x16a>
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x15e>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	6f 81       	ldd	r22, Y+7	; 0x07
    3a82:	78 85       	ldd	r23, Y+8	; 0x08
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <A_APPLICATION_VOID_MAIN_LCD_LOAD+0x1a6>
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2000);
	LCD_ClearScreen();
    3aa8:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_ClearScreen>
	A_APPLICATION_VOID_MAIN_LCD_STATICS();
    3aac:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <A_APPLICATION_VOID_MAIN_LCD_STATICS>
}
    3ab0:	2e 96       	adiw	r28, 0x0e	; 14
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	08 95       	ret

00003ac2 <A_APPLICATION_VOID_MAIN_LCD_STATICS>:

void A_APPLICATION_VOID_MAIN_LCD_STATICS(void)
{
    3ac2:	df 93       	push	r29
    3ac4:	cf 93       	push	r28
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
	LCD_MoveCursor(0, 9);
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	69 e0       	ldi	r22, 0x09	; 9
    3ace:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"S:     KM/h");
    3ad2:	82 e8       	ldi	r24, 0x82	; 130
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	LCD_MoveCursor(1, 9);
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	69 e0       	ldi	r22, 0x09	; 9
    3ade:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"GBX : R N D");
    3ae2:	86 e7       	ldi	r24, 0x76	; 118
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

	LCD_MoveCursor(3, 11);
    3aea:	83 e0       	ldi	r24, 0x03	; 3
    3aec:	6b e0       	ldi	r22, 0x0B	; 11
    3aee:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"ALERT");
    3af2:	8e e8       	ldi	r24, 0x8E	; 142
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
	A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L(LCD_PAGE_STATE);
    3afa:	80 91 20 01 	lds	r24, 0x0120
    3afe:	88 2f       	mov	r24, r24
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L>
}
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	08 95       	ret

00003b0c <A_APPLICATION_VOID_GBX_CHANGE>:

void A_APPLICATION_VOID_GBX_CHANGE(void)
{
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62

	if (GBX_IS_STILL_PRESSED == NO_Condition)
    3b14:	80 91 25 01 	lds	r24, 0x0125
    3b18:	88 23       	and	r24, r24
    3b1a:	a1 f4       	brne	.+40     	; 0x3b44 <A_APPLICATION_VOID_GBX_CHANGE+0x38>
	{
		GBX_IS_STILL_PRESSED = YES_Condition;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	80 93 25 01 	sts	0x0125, r24

		GBX_STATE++;
    3b22:	80 91 24 01 	lds	r24, 0x0124
    3b26:	8f 5f       	subi	r24, 0xFF	; 255
    3b28:	80 93 24 01 	sts	0x0124, r24

		if (GBX_STATE == E_GBX_RETURN_TO_N)
    3b2c:	80 91 24 01 	lds	r24, 0x0124
    3b30:	83 30       	cpi	r24, 0x03	; 3
    3b32:	11 f4       	brne	.+4      	; 0x3b38 <A_APPLICATION_VOID_GBX_CHANGE+0x2c>
		{
			GBX_STATE = E_GBX_NEUTRAL;
    3b34:	10 92 24 01 	sts	0x0124, r1
		}

		A_APPLICATION_VOID_GBX_DISPLAY(GBX_STATE);
    3b38:	80 91 24 01 	lds	r24, 0x0124
    3b3c:	88 2f       	mov	r24, r24
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <A_APPLICATION_VOID_GBX_DISPLAY>
	}
}
    3b44:	cf 91       	pop	r28
    3b46:	df 91       	pop	r29
    3b48:	08 95       	ret

00003b4a <A_APPLICATION_VOID_GBX_DISPLAY>:
void A_APPLICATION_VOID_GBX_DISPLAY(uint8 state)
{
    3b4a:	df 93       	push	r29
    3b4c:	cf 93       	push	r28
    3b4e:	00 d0       	rcall	.+0      	; 0x3b50 <A_APPLICATION_VOID_GBX_DISPLAY+0x6>
    3b50:	0f 92       	push	r0
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	89 83       	std	Y+1, r24	; 0x01

	switch (state)
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	3b 83       	std	Y+3, r19	; 0x03
    3b60:	2a 83       	std	Y+2, r18	; 0x02
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	9b 81       	ldd	r25, Y+3	; 0x03
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	91 05       	cpc	r25, r1
    3b6a:	c9 f0       	breq	.+50     	; 0x3b9e <A_APPLICATION_VOID_GBX_DISPLAY+0x54>
    3b6c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b6e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b70:	22 30       	cpi	r18, 0x02	; 2
    3b72:	31 05       	cpc	r19, r1
    3b74:	21 f1       	breq	.+72     	; 0x3bbe <A_APPLICATION_VOID_GBX_DISPLAY+0x74>
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	79 f5       	brne	.+94     	; 0x3bdc <A_APPLICATION_VOID_GBX_DISPLAY+0x92>
	{
	case E_GBX_NEUTRAL:
		LCD_MoveCursor(2, 15);
    3b7e:	82 e0       	ldi	r24, 0x02	; 2
    3b80:	6f e0       	ldi	r22, 0x0F	; 15
    3b82:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"     ");
    3b86:	84 e9       	ldi	r24, 0x94	; 148
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		LCD_MoveCursor(2, 17);
    3b8e:	82 e0       	ldi	r24, 0x02	; 2
    3b90:	61 e1       	ldi	r22, 0x11	; 17
    3b92:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_GBX_SELECTED);
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3b9c:	1f c0       	rjmp	.+62     	; 0x3bdc <A_APPLICATION_VOID_GBX_DISPLAY+0x92>

		break;
	case E_GBX_DRIVE:
		LCD_MoveCursor(2, 15);
    3b9e:	82 e0       	ldi	r24, 0x02	; 2
    3ba0:	6f e0       	ldi	r22, 0x0F	; 15
    3ba2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"     ");
    3ba6:	84 e9       	ldi	r24, 0x94	; 148
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		LCD_MoveCursor(2, 19);
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	63 e1       	ldi	r22, 0x13	; 19
    3bb2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_GBX_SELECTED);
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3bbc:	0f c0       	rjmp	.+30     	; 0x3bdc <A_APPLICATION_VOID_GBX_DISPLAY+0x92>

		break;
	case E_GBX_REVERSE:
		LCD_MoveCursor(2, 15);
    3bbe:	82 e0       	ldi	r24, 0x02	; 2
    3bc0:	6f e0       	ldi	r22, 0x0F	; 15
    3bc2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"     ");
    3bc6:	84 e9       	ldi	r24, 0x94	; 148
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		LCD_MoveCursor(2, 15);
    3bce:	82 e0       	ldi	r24, 0x02	; 2
    3bd0:	6f e0       	ldi	r22, 0x0F	; 15
    3bd2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_GBX_SELECTED);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		break;
	}
}
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	0f 90       	pop	r0
    3be2:	cf 91       	pop	r28
    3be4:	df 91       	pop	r29
    3be6:	08 95       	ret

00003be8 <A_APPLICATION_VOID_ALERT_INVERTED>:

void A_APPLICATION_VOID_ALERT_INVERTED(void)
{
    3be8:	df 93       	push	r29
    3bea:	cf 93       	push	r28
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62

	LCD_MoveCursor(3, 11);
    3bf0:	83 e0       	ldi	r24, 0x03	; 3
    3bf2:	6b e0       	ldi	r22, 0x0B	; 11
    3bf4:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_INV_A);
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 12);
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
    3c00:	6c e0       	ldi	r22, 0x0C	; 12
    3c02:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_INV_L);
    3c06:	84 e0       	ldi	r24, 0x04	; 4
    3c08:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 13);
    3c0c:	83 e0       	ldi	r24, 0x03	; 3
    3c0e:	6d e0       	ldi	r22, 0x0D	; 13
    3c10:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_INV_E);
    3c14:	85 e0       	ldi	r24, 0x05	; 5
    3c16:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 14);
    3c1a:	83 e0       	ldi	r24, 0x03	; 3
    3c1c:	6e e0       	ldi	r22, 0x0E	; 14
    3c1e:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_INV_R);
    3c22:	86 e0       	ldi	r24, 0x06	; 6
    3c24:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

	LCD_MoveCursor(3, 15);
    3c28:	83 e0       	ldi	r24, 0x03	; 3
    3c2a:	6f e0       	ldi	r22, 0x0F	; 15
    3c2c:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayCustomCharacter(E_CHAR_PAGE_INV_T);
    3c30:	87 e0       	ldi	r24, 0x07	; 7
    3c32:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
}
    3c36:	cf 91       	pop	r28
    3c38:	df 91       	pop	r29
    3c3a:	08 95       	ret

00003c3c <A_APPLICATION_VOID_SCREEN_SCROLL_RIGHT>:

void A_APPLICATION_VOID_SCREEN_SCROLL_RIGHT(void)
{
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
	if (SCREEN_RIGHT_SCROLL_IS_STILL_PRESSED == NO_Condition)
    3c44:	80 91 26 01 	lds	r24, 0x0126
    3c48:	88 23       	and	r24, r24
    3c4a:	a1 f4       	brne	.+40     	; 0x3c74 <A_APPLICATION_VOID_SCREEN_SCROLL_RIGHT+0x38>
	{
		SCREEN_RIGHT_SCROLL_IS_STILL_PRESSED = YES_Condition;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	80 93 26 01 	sts	0x0126, r24

		LCD_PAGE_STATE++;
    3c52:	80 91 20 01 	lds	r24, 0x0120
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	80 93 20 01 	sts	0x0120, r24
		if (LCD_PAGE_STATE == 4)
    3c5c:	80 91 20 01 	lds	r24, 0x0120
    3c60:	84 30       	cpi	r24, 0x04	; 4
    3c62:	11 f4       	brne	.+4      	; 0x3c68 <A_APPLICATION_VOID_SCREEN_SCROLL_RIGHT+0x2c>
		{
			LCD_PAGE_STATE = E_R2L_LCD_PAGE_MAIN;
    3c64:	10 92 20 01 	sts	0x0120, r1
		}

		A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L(LCD_PAGE_STATE);
    3c68:	80 91 20 01 	lds	r24, 0x0120
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L>
	}
}
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <A_APPLICATION_VOID_SCREEN_SCROLL_LEFT>:

void A_APPLICATION_VOID_SCREEN_SCROLL_LEFT(void)
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
	if (SCREEN_LEFT_SCROLL_IS_STILL_PRESSED == NO_Condition)
    3c82:	80 91 27 01 	lds	r24, 0x0127
    3c86:	88 23       	and	r24, r24
    3c88:	a1 f4       	brne	.+40     	; 0x3cb2 <A_APPLICATION_VOID_SCREEN_SCROLL_LEFT+0x38>
	{
		SCREEN_LEFT_SCROLL_IS_STILL_PRESSED = YES_Condition;
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	80 93 27 01 	sts	0x0127, r24

		LCD_PAGE_STATE++;
    3c90:	80 91 20 01 	lds	r24, 0x0120
    3c94:	8f 5f       	subi	r24, 0xFF	; 255
    3c96:	80 93 20 01 	sts	0x0120, r24

		if (LCD_PAGE_STATE == 4)
    3c9a:	80 91 20 01 	lds	r24, 0x0120
    3c9e:	84 30       	cpi	r24, 0x04	; 4
    3ca0:	11 f4       	brne	.+4      	; 0x3ca6 <A_APPLICATION_VOID_SCREEN_SCROLL_LEFT+0x2c>
		{
			LCD_PAGE_STATE = E_L2R_LCD_PAGE_MAIN;
    3ca2:	10 92 20 01 	sts	0x0120, r1
		}

		A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R(LCD_PAGE_STATE);
    3ca6:	80 91 20 01 	lds	r24, 0x0120
    3caa:	88 2f       	mov	r24, r24
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R>
	}
}
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L>:

void A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L(uint8 state)
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x6>
    3cbe:	0f 92       	push	r0
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	89 83       	std	Y+1, r24	; 0x01

	switch (state)
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	28 2f       	mov	r18, r24
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	3b 83       	std	Y+3, r19	; 0x03
    3cce:	2a 83       	std	Y+2, r18	; 0x02
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd4:	81 30       	cpi	r24, 0x01	; 1
    3cd6:	91 05       	cpc	r25, r1
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x24>
    3cda:	50 c0       	rjmp	.+160    	; 0x3d7c <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0xc4>
    3cdc:	2a 81       	ldd	r18, Y+2	; 0x02
    3cde:	3b 81       	ldd	r19, Y+3	; 0x03
    3ce0:	22 30       	cpi	r18, 0x02	; 2
    3ce2:	31 05       	cpc	r19, r1
    3ce4:	2c f4       	brge	.+10     	; 0x3cf0 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x38>
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	69 f0       	breq	.+26     	; 0x3d08 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x50>
    3cee:	7f c0       	rjmp	.+254    	; 0x3dee <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x136>
    3cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    3cf2:	3b 81       	ldd	r19, Y+3	; 0x03
    3cf4:	22 30       	cpi	r18, 0x02	; 2
    3cf6:	31 05       	cpc	r19, r1
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x44>
    3cfa:	5d c0       	rjmp	.+186    	; 0x3db6 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0xfe>
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3d00:	83 30       	cpi	r24, 0x03	; 3
    3d02:	91 05       	cpc	r25, r1
    3d04:	f1 f0       	breq	.+60     	; 0x3d42 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x8a>
    3d06:	73 c0       	rjmp	.+230    	; 0x3dee <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x136>
	{
	case E_R2L_LCD_PAGE_MAIN:
		LCD_MoveCursor(3, 16);
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	60 e1       	ldi	r22, 0x10	; 16
    3d0c:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3d16:	83 e0       	ldi	r24, 0x03	; 3
    3d18:	61 e1       	ldi	r22, 0x11	; 17
    3d1a:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3d24:	83 e0       	ldi	r24, 0x03	; 3
    3d26:	62 e1       	ldi	r22, 0x12	; 18
    3d28:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d2c:	82 e0       	ldi	r24, 0x02	; 2
    3d2e:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3d32:	83 e0       	ldi	r24, 0x03	; 3
    3d34:	63 e1       	ldi	r22, 0x13	; 19
    3d36:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d3a:	82 e0       	ldi	r24, 0x02	; 2
    3d3c:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3d40:	56 c0       	rjmp	.+172    	; 0x3dee <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x136>

		break;
	case E_R2L_LCD_PAGE_RIGHT:
		LCD_MoveCursor(3, 16);
    3d42:	83 e0       	ldi	r24, 0x03	; 3
    3d44:	60 e1       	ldi	r22, 0x10	; 16
    3d46:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3d50:	83 e0       	ldi	r24, 0x03	; 3
    3d52:	61 e1       	ldi	r22, 0x11	; 17
    3d54:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d58:	82 e0       	ldi	r24, 0x02	; 2
    3d5a:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3d5e:	83 e0       	ldi	r24, 0x03	; 3
    3d60:	62 e1       	ldi	r22, 0x12	; 18
    3d62:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d66:	82 e0       	ldi	r24, 0x02	; 2
    3d68:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3d6c:	83 e0       	ldi	r24, 0x03	; 3
    3d6e:	63 e1       	ldi	r22, 0x13	; 19
    3d70:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3d7a:	39 c0       	rjmp	.+114    	; 0x3dee <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x136>

		break;
	case E_R2L_LCD_PAGE_LEFT:
		LCD_MoveCursor(3, 16);
    3d7c:	83 e0       	ldi	r24, 0x03	; 3
    3d7e:	60 e1       	ldi	r22, 0x10	; 16
    3d80:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d84:	82 e0       	ldi	r24, 0x02	; 2
    3d86:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3d8a:	83 e0       	ldi	r24, 0x03	; 3
    3d8c:	61 e1       	ldi	r22, 0x11	; 17
    3d8e:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3d92:	82 e0       	ldi	r24, 0x02	; 2
    3d94:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3d98:	83 e0       	ldi	r24, 0x03	; 3
    3d9a:	62 e1       	ldi	r22, 0x12	; 18
    3d9c:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3da6:	83 e0       	ldi	r24, 0x03	; 3
    3da8:	63 e1       	ldi	r22, 0x13	; 19
    3daa:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3db4:	1c c0       	rjmp	.+56     	; 0x3dee <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_R2L+0x136>
		break;

	case E_R2L_LCD_PAGE_INFO:
		LCD_MoveCursor(3, 16);
    3db6:	83 e0       	ldi	r24, 0x03	; 3
    3db8:	60 e1       	ldi	r22, 0x10	; 16
    3dba:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3dbe:	82 e0       	ldi	r24, 0x02	; 2
    3dc0:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3dc4:	83 e0       	ldi	r24, 0x03	; 3
    3dc6:	61 e1       	ldi	r22, 0x11	; 17
    3dc8:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3dd2:	83 e0       	ldi	r24, 0x03	; 3
    3dd4:	62 e1       	ldi	r22, 0x12	; 18
    3dd6:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3de0:	83 e0       	ldi	r24, 0x03	; 3
    3de2:	63 e1       	ldi	r22, 0x13	; 19
    3de4:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		break;
	}
}
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	cf 91       	pop	r28
    3df6:	df 91       	pop	r29
    3df8:	08 95       	ret

00003dfa <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R>:

void A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R(uint8 state)
{
    3dfa:	df 93       	push	r29
    3dfc:	cf 93       	push	r28
    3dfe:	00 d0       	rcall	.+0      	; 0x3e00 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x6>
    3e00:	0f 92       	push	r0
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	89 83       	std	Y+1, r24	; 0x01

	switch (state)
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	28 2f       	mov	r18, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	3b 83       	std	Y+3, r19	; 0x03
    3e10:	2a 83       	std	Y+2, r18	; 0x02
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	9b 81       	ldd	r25, Y+3	; 0x03
    3e16:	81 30       	cpi	r24, 0x01	; 1
    3e18:	91 05       	cpc	r25, r1
    3e1a:	99 f1       	breq	.+102    	; 0x3e82 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x88>
    3e1c:	2a 81       	ldd	r18, Y+2	; 0x02
    3e1e:	3b 81       	ldd	r19, Y+3	; 0x03
    3e20:	22 30       	cpi	r18, 0x02	; 2
    3e22:	31 05       	cpc	r19, r1
    3e24:	2c f4       	brge	.+10     	; 0x3e30 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x36>
    3e26:	8a 81       	ldd	r24, Y+2	; 0x02
    3e28:	9b 81       	ldd	r25, Y+3	; 0x03
    3e2a:	00 97       	sbiw	r24, 0x00	; 0
    3e2c:	69 f0       	breq	.+26     	; 0x3e48 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x4e>
    3e2e:	7f c0       	rjmp	.+254    	; 0x3f2e <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x134>
    3e30:	2a 81       	ldd	r18, Y+2	; 0x02
    3e32:	3b 81       	ldd	r19, Y+3	; 0x03
    3e34:	22 30       	cpi	r18, 0x02	; 2
    3e36:	31 05       	cpc	r19, r1
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x42>
    3e3a:	5d c0       	rjmp	.+186    	; 0x3ef6 <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0xfc>
    3e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e40:	83 30       	cpi	r24, 0x03	; 3
    3e42:	91 05       	cpc	r25, r1
    3e44:	d9 f1       	breq	.+118    	; 0x3ebc <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0xc2>
    3e46:	73 c0       	rjmp	.+230    	; 0x3f2e <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x134>
	{
	case E_L2R_LCD_PAGE_MAIN:
		LCD_MoveCursor(3, 16);
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	60 e1       	ldi	r22, 0x10	; 16
    3e4c:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3e56:	83 e0       	ldi	r24, 0x03	; 3
    3e58:	61 e1       	ldi	r22, 0x11	; 17
    3e5a:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3e64:	83 e0       	ldi	r24, 0x03	; 3
    3e66:	62 e1       	ldi	r22, 0x12	; 18
    3e68:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	63 e1       	ldi	r22, 0x13	; 19
    3e76:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3e80:	56 c0       	rjmp	.+172    	; 0x3f2e <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x134>

		break;
	case E_L2R_LCD_PAGE_RIGHT:
		LCD_MoveCursor(3, 16);
    3e82:	83 e0       	ldi	r24, 0x03	; 3
    3e84:	60 e1       	ldi	r22, 0x10	; 16
    3e86:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3e90:	83 e0       	ldi	r24, 0x03	; 3
    3e92:	61 e1       	ldi	r22, 0x11	; 17
    3e94:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3e98:	82 e0       	ldi	r24, 0x02	; 2
    3e9a:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3e9e:	83 e0       	ldi	r24, 0x03	; 3
    3ea0:	62 e1       	ldi	r22, 0x12	; 18
    3ea2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3eac:	83 e0       	ldi	r24, 0x03	; 3
    3eae:	63 e1       	ldi	r22, 0x13	; 19
    3eb0:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3eb4:	82 e0       	ldi	r24, 0x02	; 2
    3eb6:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3eba:	39 c0       	rjmp	.+114    	; 0x3f2e <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x134>

		break;
	case E_L2R_LCD_PAGE_LEFT:
		LCD_MoveCursor(3, 16);
    3ebc:	83 e0       	ldi	r24, 0x03	; 3
    3ebe:	60 e1       	ldi	r22, 0x10	; 16
    3ec0:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3ec4:	82 e0       	ldi	r24, 0x02	; 2
    3ec6:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3eca:	83 e0       	ldi	r24, 0x03	; 3
    3ecc:	61 e1       	ldi	r22, 0x11	; 17
    3ece:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3ed2:	82 e0       	ldi	r24, 0x02	; 2
    3ed4:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	62 e1       	ldi	r22, 0x12	; 18
    3edc:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3ee6:	83 e0       	ldi	r24, 0x03	; 3
    3ee8:	63 e1       	ldi	r22, 0x13	; 19
    3eea:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>
    3ef4:	1c c0       	rjmp	.+56     	; 0x3f2e <A_APPLICATION_VOID_LCD_PAGE_DISPLAY_L2R+0x134>

		break;

	case E_L2R_LCD_PAGE_INFO:
		LCD_MoveCursor(3, 16);
    3ef6:	83 e0       	ldi	r24, 0x03	; 3
    3ef8:	60 e1       	ldi	r22, 0x10	; 16
    3efa:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3efe:	82 e0       	ldi	r24, 0x02	; 2
    3f00:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 17);
    3f04:	83 e0       	ldi	r24, 0x03	; 3
    3f06:	61 e1       	ldi	r22, 0x11	; 17
    3f08:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3f0c:	82 e0       	ldi	r24, 0x02	; 2
    3f0e:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 18);
    3f12:	83 e0       	ldi	r24, 0x03	; 3
    3f14:	62 e1       	ldi	r22, 0x12	; 18
    3f16:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_NOT_SELECTED);
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		LCD_MoveCursor(3, 19);
    3f20:	83 e0       	ldi	r24, 0x03	; 3
    3f22:	63 e1       	ldi	r22, 0x13	; 19
    3f24:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayCustomCharacter(E_CHAR_PAGE_SELECTED);
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCustomCharacter>

		break;
	}
}
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <A_APPLICATION_VOID_LCD_VARIABLE_CLEAR>:

void A_APPLICATION_VOID_LCD_VARIABLE_CLEAR(void)
{
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
	LCD_MoveCursor(0, 0);
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"        ");
    3f4a:	8a e9       	ldi	r24, 0x9A	; 154
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
	LCD_MoveCursor(1, 0);
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	60 e0       	ldi	r22, 0x00	; 0
    3f56:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
	LCD_DisplayString((const uint8 *)"        ");
    3f5a:	8a e9       	ldi	r24, 0x9A	; 154
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
}
    3f62:	cf 91       	pop	r28
    3f64:	df 91       	pop	r29
    3f66:	08 95       	ret

00003f68 <A_APPLICATION_VOID_BA_CHANGE>:

void A_APPLICATION_VOID_BA_CHANGE(void)
{
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	cd b7       	in	r28, 0x3d	; 61
    3f6e:	de b7       	in	r29, 0x3e	; 62

	if (Keypad_GetPressedKey() == E_KEYPAD_CCS_TOG)
    3f70:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Keypad_GetPressedKey>
    3f74:	88 23       	and	r24, r24
    3f76:	e9 f5       	brne	.+122    	; 0x3ff2 <A_APPLICATION_VOID_BA_CHANGE+0x8a>
	{
		uint8 static counter = 0;
		if (BA_IS_STILL_PRESSED == NO_Condition)
    3f78:	80 91 28 01 	lds	r24, 0x0128
    3f7c:	88 23       	and	r24, r24
    3f7e:	e9 f4       	brne	.+58     	; 0x3fba <A_APPLICATION_VOID_BA_CHANGE+0x52>
		{

			// LCD_MoveCursor(1, 5);
			// LCD_DisplayString((const uint8 *)"OFF");
			LCD_MoveCursor(3, 0);
    3f80:	83 e0       	ldi	r24, 0x03	; 3
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
			LCD_DisplayString((const uint8 *)"   ");
    3f88:	83 ea       	ldi	r24, 0xA3	; 163
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
			LCD_MoveCursor(3, 4);
    3f90:	83 e0       	ldi	r24, 0x03	; 3
    3f92:	64 e0       	ldi	r22, 0x04	; 4
    3f94:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
			LCD_DisplayString((const uint8 *)"  ");
    3f98:	87 ea       	ldi	r24, 0xA7	; 167
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
			BA_STATE = OFF;
    3fa0:	10 92 21 01 	sts	0x0121, r1
			CCS_STATE = OFF;
    3fa4:	10 92 22 01 	sts	0x0122, r1
			BA_IS_STILL_PRESSED = YES_Condition;
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	80 93 28 01 	sts	0x0128, r24
			counter++;
    3fae:	80 91 2b 01 	lds	r24, 0x012B
    3fb2:	8f 5f       	subi	r24, 0xFF	; 255
    3fb4:	80 93 2b 01 	sts	0x012B, r24
    3fb8:	1e c0       	rjmp	.+60     	; 0x3ff6 <A_APPLICATION_VOID_BA_CHANGE+0x8e>

		}

		else if (counter != 1)
    3fba:	80 91 2b 01 	lds	r24, 0x012B
    3fbe:	81 30       	cpi	r24, 0x01	; 1
    3fc0:	d1 f0       	breq	.+52     	; 0x3ff6 <A_APPLICATION_VOID_BA_CHANGE+0x8e>
		{
		// LCD_MoveCursor(1, 5);
		// LCD_DisplayString((const uint8 *)"ON ");
		LCD_MoveCursor(3, 0);
    3fc2:	83 e0       	ldi	r24, 0x03	; 3
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"CCS");
    3fca:	80 e6       	ldi	r24, 0x60	; 96
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		LCD_MoveCursor(3, 4);
    3fd2:	83 e0       	ldi	r24, 0x03	; 3
    3fd4:	64 e0       	ldi	r22, 0x04	; 4
    3fd6:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"BA");
    3fda:	84 e6       	ldi	r24, 0x64	; 100
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		BA_STATE = ON;
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	80 93 21 01 	sts	0x0121, r24
		CCS_STATE = OFF;
    3fe8:	10 92 22 01 	sts	0x0122, r1
		counter = 0;
    3fec:	10 92 2b 01 	sts	0x012B, r1
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <A_APPLICATION_VOID_BA_CHANGE+0x8e>
		


	else
	{
		BA_IS_STILL_PRESSED = NO_Condition;
    3ff2:	10 92 28 01 	sts	0x0128, r1


	}
				

}
    3ff6:	cf 91       	pop	r28
    3ff8:	df 91       	pop	r29
    3ffa:	08 95       	ret

00003ffc <A_APPLICATION_VOID_CCS_CHANGE>:


void A_APPLICATION_VOID_CCS_CHANGE(void)
{
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62

	if (Keypad_GetPressedKey() == E_KEYPAD_CCS_TOG)
    4004:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Keypad_GetPressedKey>
    4008:	88 23       	and	r24, r24
    400a:	c9 f5       	brne	.+114    	; 0x407e <A_APPLICATION_VOID_CCS_CHANGE+0x82>
	{
		uint8 static counter = 0;
		if (BA_IS_STILL_PRESSED == NO_Condition)
    400c:	80 91 28 01 	lds	r24, 0x0128
    4010:	88 23       	and	r24, r24
    4012:	d9 f4       	brne	.+54     	; 0x404a <A_APPLICATION_VOID_CCS_CHANGE+0x4e>
		{

			// LCD_MoveCursor(1, 5);
			// LCD_DisplayString((const uint8 *)"OFF");
			LCD_MoveCursor(3, 0);
    4014:	83 e0       	ldi	r24, 0x03	; 3
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
			LCD_DisplayString((const uint8 *)"   ");
    401c:	83 ea       	ldi	r24, 0xA3	; 163
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
			LCD_MoveCursor(3, 4);
    4024:	83 e0       	ldi	r24, 0x03	; 3
    4026:	64 e0       	ldi	r22, 0x04	; 4
    4028:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
			LCD_DisplayString((const uint8 *)"  ");
    402c:	87 ea       	ldi	r24, 0xA7	; 167
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
			CCS_STATE = OFF;
    4034:	10 92 22 01 	sts	0x0122, r1
			BA_IS_STILL_PRESSED = YES_Condition;
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	80 93 28 01 	sts	0x0128, r24
			counter++;
    403e:	80 91 2c 01 	lds	r24, 0x012C
    4042:	8f 5f       	subi	r24, 0xFF	; 255
    4044:	80 93 2c 01 	sts	0x012C, r24
    4048:	1c c0       	rjmp	.+56     	; 0x4082 <A_APPLICATION_VOID_CCS_CHANGE+0x86>

		}

		else if (counter != 1)
    404a:	80 91 2c 01 	lds	r24, 0x012C
    404e:	81 30       	cpi	r24, 0x01	; 1
    4050:	c1 f0       	breq	.+48     	; 0x4082 <A_APPLICATION_VOID_CCS_CHANGE+0x86>
		{
		// LCD_MoveCursor(1, 5);
		// LCD_DisplayString((const uint8 *)"ON ");
		LCD_MoveCursor(3, 0);
    4052:	83 e0       	ldi	r24, 0x03	; 3
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"CCS");
    405a:	80 e6       	ldi	r24, 0x60	; 96
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		LCD_MoveCursor(3, 4);
    4062:	83 e0       	ldi	r24, 0x03	; 3
    4064:	64 e0       	ldi	r22, 0x04	; 4
    4066:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"BA");
    406a:	84 e6       	ldi	r24, 0x64	; 100
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		CCS_STATE = ON;
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	80 93 22 01 	sts	0x0122, r24
		counter = 0;
    4078:	10 92 2c 01 	sts	0x012C, r1
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <A_APPLICATION_VOID_CCS_CHANGE+0x86>
		


	else
	{
		BA_IS_STILL_PRESSED = NO_Condition;
    407e:	10 92 28 01 	sts	0x0128, r1


	}
				

}
    4082:	cf 91       	pop	r28
    4084:	df 91       	pop	r29
    4086:	08 95       	ret

00004088 <A_APPLICATION_VOID_SL_CHANGE>:


void A_APPLICATION_VOID_SL_CHANGE(void)
{
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62

	if (Keypad_GetPressedKey() == E_KEYPAD_SPEED_LIMITER_TOG)
    4090:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <Keypad_GetPressedKey>
    4094:	88 30       	cpi	r24, 0x08	; 8
    4096:	49 f5       	brne	.+82     	; 0x40ea <A_APPLICATION_VOID_SL_CHANGE+0x62>
	{
		uint8 static counter = 0;
		if (SL_IS_STILL_PRESSED == NO_Condition)
    4098:	80 91 2a 01 	lds	r24, 0x012A
    409c:	88 23       	and	r24, r24
    409e:	99 f4       	brne	.+38     	; 0x40c6 <A_APPLICATION_VOID_SL_CHANGE+0x3e>
		{

			// LCD_MoveCursor(1, 5);
			// LCD_DisplayString((const uint8 *)"OFF");
			LCD_MoveCursor(3,7);
    40a0:	83 e0       	ldi	r24, 0x03	; 3
    40a2:	67 e0       	ldi	r22, 0x07	; 7
    40a4:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
			LCD_DisplayString((const uint8 *)"   ");
    40a8:	83 ea       	ldi	r24, 0xA3	; 163
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>

			SL_STATE = OFF;
    40b0:	10 92 23 01 	sts	0x0123, r1
			SL_IS_STILL_PRESSED = YES_Condition;
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	80 93 2a 01 	sts	0x012A, r24
			counter++;
    40ba:	80 91 2d 01 	lds	r24, 0x012D
    40be:	8f 5f       	subi	r24, 0xFF	; 255
    40c0:	80 93 2d 01 	sts	0x012D, r24
    40c4:	14 c0       	rjmp	.+40     	; 0x40ee <A_APPLICATION_VOID_SL_CHANGE+0x66>

		}

		else if (counter != 1)
    40c6:	80 91 2d 01 	lds	r24, 0x012D
    40ca:	81 30       	cpi	r24, 0x01	; 1
    40cc:	81 f0       	breq	.+32     	; 0x40ee <A_APPLICATION_VOID_SL_CHANGE+0x66>
		{
		// LCD_MoveCursor(1, 5);
		// LCD_DisplayString((const uint8 *)"ON ");
		LCD_MoveCursor(3,8);
    40ce:	83 e0       	ldi	r24, 0x03	; 3
    40d0:	68 e0       	ldi	r22, 0x08	; 8
    40d2:	0e 94 94 18 	call	0x3128	; 0x3128 <LCD_MoveCursor>
		LCD_DisplayString((const uint8 *)"SL");
    40d6:	87 e6       	ldi	r24, 0x67	; 103
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <LCD_DisplayString>
		SL_STATE = ON;
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	80 93 23 01 	sts	0x0123, r24
		counter = 0;
    40e4:	10 92 2d 01 	sts	0x012D, r1
    40e8:	02 c0       	rjmp	.+4      	; 0x40ee <A_APPLICATION_VOID_SL_CHANGE+0x66>
		


	else
	{
		SL_IS_STILL_PRESSED = NO_Condition;
    40ea:	10 92 2a 01 	sts	0x012A, r1


	}
				

}
    40ee:	cf 91       	pop	r28
    40f0:	df 91       	pop	r29
    40f2:	08 95       	ret

000040f4 <main>:


#include "Application/Application_interface.h"
uint8 Adc_value_pure = 0;
int main()
{
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
	/*	Make Initialize for Every thing*/
	A_APPLICATION_VOID_INIT();
    40fc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <A_APPLICATION_VOID_INIT>
	A_APPLICATION_VOID_MAIN_LCD_LOAD();
    4100:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <A_APPLICATION_VOID_MAIN_LCD_LOAD>
	A_APPLICATION_VOID_GBX_DISPLAY(0);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <A_APPLICATION_VOID_GBX_DISPLAY>


	while(1)
	{
		A_APPLICATION_VOID_KEYPAD_BUTTON_READ();
    410c:	0e 94 24 1c 	call	0x3848	; 0x3848 <A_APPLICATION_VOID_KEYPAD_BUTTON_READ>
		A_APPLICATION_VOID_MAIN_LCD_SCREEN_SELECT();
    4110:	0e 94 19 1c 	call	0x3832	; 0x3832 <A_APPLICATION_VOID_MAIN_LCD_SCREEN_SELECT>
    4114:	fb cf       	rjmp	.-10     	; 0x410c <main+0x18>

00004116 <__prologue_saves__>:
    4116:	2f 92       	push	r2
    4118:	3f 92       	push	r3
    411a:	4f 92       	push	r4
    411c:	5f 92       	push	r5
    411e:	6f 92       	push	r6
    4120:	7f 92       	push	r7
    4122:	8f 92       	push	r8
    4124:	9f 92       	push	r9
    4126:	af 92       	push	r10
    4128:	bf 92       	push	r11
    412a:	cf 92       	push	r12
    412c:	df 92       	push	r13
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	ca 1b       	sub	r28, r26
    4140:	db 0b       	sbc	r29, r27
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	09 94       	ijmp

0000414e <__epilogue_restores__>:
    414e:	2a 88       	ldd	r2, Y+18	; 0x12
    4150:	39 88       	ldd	r3, Y+17	; 0x11
    4152:	48 88       	ldd	r4, Y+16	; 0x10
    4154:	5f 84       	ldd	r5, Y+15	; 0x0f
    4156:	6e 84       	ldd	r6, Y+14	; 0x0e
    4158:	7d 84       	ldd	r7, Y+13	; 0x0d
    415a:	8c 84       	ldd	r8, Y+12	; 0x0c
    415c:	9b 84       	ldd	r9, Y+11	; 0x0b
    415e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4160:	b9 84       	ldd	r11, Y+9	; 0x09
    4162:	c8 84       	ldd	r12, Y+8	; 0x08
    4164:	df 80       	ldd	r13, Y+7	; 0x07
    4166:	ee 80       	ldd	r14, Y+6	; 0x06
    4168:	fd 80       	ldd	r15, Y+5	; 0x05
    416a:	0c 81       	ldd	r16, Y+4	; 0x04
    416c:	1b 81       	ldd	r17, Y+3	; 0x03
    416e:	aa 81       	ldd	r26, Y+2	; 0x02
    4170:	b9 81       	ldd	r27, Y+1	; 0x01
    4172:	ce 0f       	add	r28, r30
    4174:	d1 1d       	adc	r29, r1
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    4180:	ed 01       	movw	r28, r26
    4182:	08 95       	ret

00004184 <itoa>:
    4184:	fb 01       	movw	r30, r22
    4186:	9f 01       	movw	r18, r30
    4188:	e8 94       	clt
    418a:	42 30       	cpi	r20, 0x02	; 2
    418c:	c4 f0       	brlt	.+48     	; 0x41be <itoa+0x3a>
    418e:	45 32       	cpi	r20, 0x25	; 37
    4190:	b4 f4       	brge	.+44     	; 0x41be <itoa+0x3a>
    4192:	4a 30       	cpi	r20, 0x0A	; 10
    4194:	29 f4       	brne	.+10     	; 0x41a0 <itoa+0x1c>
    4196:	97 fb       	bst	r25, 7
    4198:	1e f4       	brtc	.+6      	; 0x41a0 <itoa+0x1c>
    419a:	90 95       	com	r25
    419c:	81 95       	neg	r24
    419e:	9f 4f       	sbci	r25, 0xFF	; 255
    41a0:	64 2f       	mov	r22, r20
    41a2:	77 27       	eor	r23, r23
    41a4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <__udivmodhi4>
    41a8:	80 5d       	subi	r24, 0xD0	; 208
    41aa:	8a 33       	cpi	r24, 0x3A	; 58
    41ac:	0c f0       	brlt	.+2      	; 0x41b0 <itoa+0x2c>
    41ae:	89 5d       	subi	r24, 0xD9	; 217
    41b0:	81 93       	st	Z+, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	a1 f7       	brne	.-24     	; 0x41a0 <itoa+0x1c>
    41b8:	16 f4       	brtc	.+4      	; 0x41be <itoa+0x3a>
    41ba:	5d e2       	ldi	r21, 0x2D	; 45
    41bc:	51 93       	st	Z+, r21
    41be:	10 82       	st	Z, r1
    41c0:	c9 01       	movw	r24, r18
    41c2:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <strrev>

000041c6 <strrev>:
    41c6:	dc 01       	movw	r26, r24
    41c8:	fc 01       	movw	r30, r24
    41ca:	67 2f       	mov	r22, r23
    41cc:	71 91       	ld	r23, Z+
    41ce:	77 23       	and	r23, r23
    41d0:	e1 f7       	brne	.-8      	; 0x41ca <strrev+0x4>
    41d2:	32 97       	sbiw	r30, 0x02	; 2
    41d4:	04 c0       	rjmp	.+8      	; 0x41de <strrev+0x18>
    41d6:	7c 91       	ld	r23, X
    41d8:	6d 93       	st	X+, r22
    41da:	70 83       	st	Z, r23
    41dc:	62 91       	ld	r22, -Z
    41de:	ae 17       	cp	r26, r30
    41e0:	bf 07       	cpc	r27, r31
    41e2:	c8 f3       	brcs	.-14     	; 0x41d6 <strrev+0x10>
    41e4:	08 95       	ret

000041e6 <__udivmodhi4>:
    41e6:	aa 1b       	sub	r26, r26
    41e8:	bb 1b       	sub	r27, r27
    41ea:	51 e1       	ldi	r21, 0x11	; 17
    41ec:	07 c0       	rjmp	.+14     	; 0x41fc <__udivmodhi4_ep>

000041ee <__udivmodhi4_loop>:
    41ee:	aa 1f       	adc	r26, r26
    41f0:	bb 1f       	adc	r27, r27
    41f2:	a6 17       	cp	r26, r22
    41f4:	b7 07       	cpc	r27, r23
    41f6:	10 f0       	brcs	.+4      	; 0x41fc <__udivmodhi4_ep>
    41f8:	a6 1b       	sub	r26, r22
    41fa:	b7 0b       	sbc	r27, r23

000041fc <__udivmodhi4_ep>:
    41fc:	88 1f       	adc	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	5a 95       	dec	r21
    4202:	a9 f7       	brne	.-22     	; 0x41ee <__udivmodhi4_loop>
    4204:	80 95       	com	r24
    4206:	90 95       	com	r25
    4208:	bc 01       	movw	r22, r24
    420a:	cd 01       	movw	r24, r26
    420c:	08 95       	ret

0000420e <_exit>:
    420e:	f8 94       	cli

00004210 <__stop_program>:
    4210:	ff cf       	rjmp	.-2      	; 0x4210 <__stop_program>
