
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000232  00800060  00004d26  00004dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800292  00800292  00004fec  2**0
                  ALLOC
  3 .stab         000068e8  00000000  00000000  00004fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f4e  00000000  00000000  0000b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f822  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00013345  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001451c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000146dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000149d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_1>
       8:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_2>
       c:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <main>
      8a:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 26 	jmp	0x4c2a	; 0x4c2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e1       	ldi	r26, 0x14	; 20
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 26 	jmp	0x4c2a	; 0x4c2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e1       	ldi	r22, 0x14	; 20
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 26 	jmp	0x4c72	; 0x4c72 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 26 	jmp	0x4c4a	; 0x4c4a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 39 26 	jmp	0x4c72	; 0x4c72 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 5e       	subi	r30, 0xE4	; 228
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T1)(void) = NULL_PTR;

    void Timer1_SetCallBack(void(*a_ptr)(void))
    {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer1_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T1 = a_ptr;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 93 02 	sts	0x0293, r25
     e44:	80 93 92 02 	sts	0x0292, r24
    }
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <__vector_9>:

    #if((TIMER1_CURRENT_MODE == T1_NORMAL_MODE) && (NORMAL_use_T1_state == T1_TIME_DELAY))
        ISR(TIMER_1_OVF)
        {
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T1 != NULL_PTR)
     e7c:	80 91 92 02 	lds	r24, 0x0292
     e80:	90 91 93 02 	lds	r25, 0x0293
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	29 f0       	breq	.+10     	; 0xe92 <__vector_9+0x40>
            {
                g_CallBackPtr_T1();
     e88:	e0 91 92 02 	lds	r30, 0x0292
     e8c:	f0 91 93 02 	lds	r31, 0x0293
     e90:	09 95       	icall
            }
        }
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <Timer1_Init>:




void Timer1_Init(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR1A,FOC1A);
     ec0:	af e4       	ldi	r26, 0x4F	; 79
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ef e4       	ldi	r30, 0x4F	; 79
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 60       	ori	r24, 0x08	; 8
     ecc:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
     ece:	af e4       	ldi	r26, 0x4F	; 79
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ef e4       	ldi	r30, 0x4F	; 79
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	84 60       	ori	r24, 0x04	; 4
     eda:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR1A,WGM10);
     edc:	af e4       	ldi	r26, 0x4F	; 79
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1A,WGM11);
     eea:	af e4       	ldi	r26, 0x4F	; 79
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ef e4       	ldi	r30, 0x4F	; 79
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM12);
     ef8:	ae e4       	ldi	r26, 0x4E	; 78
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ee e4       	ldi	r30, 0x4E	; 78
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM13);
     f06:	ae e4       	ldi	r26, 0x4E	; 78
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ee e4       	ldi	r30, 0x4E	; 78
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8f 7e       	andi	r24, 0xEF	; 239
     f12:	8c 93       	st	X, r24
    
    #elif(NORMAL_use_T1_state == T1_TIME_DELAY) 
    
        #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
            /*  Enable Global Interrupt  */
            SET_BIT(SREG , 7);
     f14:	af e5       	ldi	r26, 0x5F	; 95
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ef e5       	ldi	r30, 0x5F	; 95
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
            /*  Enable overflow Interrupt  */
            SET_BIT(TIMSK,TOIE1);
     f22:	a9 e5       	ldi	r26, 0x59	; 89
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e9 e5       	ldi	r30, 0x59	; 89
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	84 60       	ori	r24, 0x04	; 4
     f2e:	8c 93       	st	X, r24
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
#endif


    /*  Set TCNT0 value to Zero*/
    Timer1_UpdateValue(0) ;
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer1_UpdateValue>
}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <Timer1_UpdateValue>:



void Timer1_UpdateValue(uint16 Register_value)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <Timer1_UpdateValue+0x6>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Register_value;
     f4c:	ec e4       	ldi	r30, 0x4C	; 76
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <Timer1_StopClock>:


void Timer1_StopClock(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = TCCR1B & (0xF8);
     f6a:	ae e4       	ldi	r26, 0x4E	; 78
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ee e4       	ldi	r30, 0x4E	; 78
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 7f       	andi	r24, 0xF8	; 248
     f76:	8c 93       	st	X, r24
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <Timer1_ProvideClock>:


void Timer1_ProvideClock(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
     f86:	ae e4       	ldi	r26, 0x4E	; 78
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ee e4       	ldi	r30, 0x4E	; 78
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	98 2f       	mov	r25, r24
     f92:	98 7f       	andi	r25, 0xF8	; 248
     f94:	80 91 1c 02 	lds	r24, 0x021C
     f98:	89 2b       	or	r24, r25
     f9a:	8c 93       	st	X, r24
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <Timer1_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T1 == Enable_Interrupt_T1)

        void Timer1_DelayOVFInterrupt(void)
        {
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
            Timer1_ProvideClock();
     faa:	0e 94 bf 07 	call	0xf7e	; 0xf7e <Timer1_ProvideClock>
        }
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <Timer1_OVFDisableInterrupt>:


        void Timer1_OVFDisableInterrupt(void)
        {
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE1);   
     fbc:	a9 e5       	ldi	r26, 0x59	; 89
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e9 e5       	ldi	r30, 0x59	; 89
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8b 7f       	andi	r24, 0xFB	; 251
     fc8:	8c 93       	st	X, r24
        }
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <Timer1_OVFEnableInterrupt>:

        void Timer1_OVFEnableInterrupt(void)
        {
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE1);   
     fd8:	a9 e5       	ldi	r26, 0x59	; 89
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 e5       	ldi	r30, 0x59	; 89
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	84 60       	ori	r24, 0x04	; 4
     fe4:	8c 93       	st	X, r24
        }
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <Timer0_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <Timer0_SetCallBack+0x6>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	90 93 95 02 	sts	0x0295, r25
    1002:	80 93 94 02 	sts	0x0294, r24
    }
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <__vector_11>:

    #if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
        ISR(TIMER_0_OVF)
        {
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T0 != NULL_PTR)
    103a:	80 91 94 02 	lds	r24, 0x0294
    103e:	90 91 95 02 	lds	r25, 0x0295
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	29 f0       	breq	.+10     	; 0x1050 <__vector_11+0x40>
            {
                g_CallBackPtr_T0();
    1046:	e0 91 94 02 	lds	r30, 0x0294
    104a:	f0 91 95 02 	lds	r31, 0x0295
    104e:	09 95       	icall
            }
        }
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <Timer0_Init>:




void Timer0_Init(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR0,FOC0);
    107e:	a3 e5       	ldi	r26, 0x53	; 83
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e3 e5       	ldi	r30, 0x53	; 83
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 68       	ori	r24, 0x80	; 128
    108a:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR0,WGM00);
    108c:	a3 e5       	ldi	r26, 0x53	; 83
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e5       	ldi	r30, 0x53	; 83
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7b       	andi	r24, 0xBF	; 191
    1098:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,WGM01);
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	8c 93       	st	X, r24
    #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
    10a8:	af e5       	ldi	r26, 0x5F	; 95
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ef e5       	ldi	r30, 0x5F	; 95
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 68       	ori	r24, 0x80	; 128
    10b4:	8c 93       	st	X, r24
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
    10b6:	a9 e5       	ldi	r26, 0x59	; 89
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e9 e5       	ldi	r30, 0x59	; 89
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	81 60       	ori	r24, 0x01	; 1
    10c2:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <Timer0_UpdateValue>
}
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	0f 92       	push	r0
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
    10dc:	e2 e5       	ldi	r30, 0x52	; 82
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	80 83       	st	Z, r24
}
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <Timer0_StopClock>:


void Timer0_StopClock(void)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
    10f4:	a3 e5       	ldi	r26, 0x53	; 83
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e3 e5       	ldi	r30, 0x53	; 83
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 7f       	andi	r24, 0xF8	; 248
    1100:	8c 93       	st	X, r24
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    1110:	a3 e5       	ldi	r26, 0x53	; 83
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e3 e5       	ldi	r30, 0x53	; 83
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	98 2f       	mov	r25, r24
    111c:	98 7f       	andi	r25, 0xF8	; 248
    111e:	80 91 1d 02 	lds	r24, 0x021D
    1122:	89 2b       	or	r24, r25
    1124:	8c 93       	st	X, r24
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <Timer0_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T0 == Enable_Interrupt_T0)

        void Timer0_DelayOVFInterrupt(void)
        {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
            Timer0_ProvideClock();
    1134:	0e 94 84 08 	call	0x1108	; 0x1108 <Timer0_ProvideClock>
        }
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <Timer0_OVFDisableInterrupt>:


        void Timer0_OVFDisableInterrupt(void)
        {
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE0);   
    1146:	a9 e5       	ldi	r26, 0x59	; 89
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e9 e5       	ldi	r30, 0x59	; 89
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	8c 93       	st	X, r24
        }
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <Timer0_OVFEnableInterrupt>:

        void Timer0_OVFEnableInterrupt(void)
        {
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE0);   
    1162:	a9 e5       	ldi	r26, 0x59	; 89
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	8c 93       	st	X, r24
        }
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    1180:	19 82       	std	Y+1, r1	; 0x01
    1182:	57 c0       	rjmp	.+174    	; 0x1232 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	c9 01       	movw	r24, r18
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	82 0f       	add	r24, r18
    1192:	93 1f       	adc	r25, r19
    1194:	fc 01       	movw	r30, r24
    1196:	e1 5e       	subi	r30, 0xE1	; 225
    1198:	fd 4f       	sbci	r31, 0xFD	; 253
    119a:	80 81       	ld	r24, Z
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	e9 f4       	brne	.+58     	; 0x11da <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	c9 01       	movw	r24, r18
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 5e       	subi	r30, 0xE2	; 226
    11b4:	fd 4f       	sbci	r31, 0xFD	; 253
    11b6:	40 81       	ld	r20, Z
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	c9 01       	movw	r24, r18
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	fc 01       	movw	r30, r24
    11ca:	e0 5e       	subi	r30, 0xE0	; 224
    11cc:	fd 4f       	sbci	r31, 0xFD	; 253
    11ce:	90 81       	ld	r25, Z
    11d0:	84 2f       	mov	r24, r20
    11d2:	69 2f       	mov	r22, r25
    11d4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <GPIO_SetPortDirection>
    11d8:	29 c0       	rjmp	.+82     	; 0x122c <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	c9 01       	movw	r24, r18
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	fc 01       	movw	r30, r24
    11ec:	e2 5e       	subi	r30, 0xE2	; 226
    11ee:	fd 4f       	sbci	r31, 0xFD	; 253
    11f0:	50 81       	ld	r21, Z
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	c9 01       	movw	r24, r18
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	82 0f       	add	r24, r18
    1200:	93 1f       	adc	r25, r19
    1202:	fc 01       	movw	r30, r24
    1204:	e1 5e       	subi	r30, 0xE1	; 225
    1206:	fd 4f       	sbci	r31, 0xFD	; 253
    1208:	40 81       	ld	r20, Z
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	c9 01       	movw	r24, r18
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	fc 01       	movw	r30, r24
    121c:	e0 5e       	subi	r30, 0xE0	; 224
    121e:	fd 4f       	sbci	r31, 0xFD	; 253
    1220:	90 81       	ld	r25, Z
    1222:	85 2f       	mov	r24, r21
    1224:	64 2f       	mov	r22, r20
    1226:	49 2f       	mov	r20, r25
    1228:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	88 23       	and	r24, r24
    1236:	09 f4       	brne	.+2      	; 0x123a <GPIO_init+0xc4>
    1238:	a5 cf       	rjmp	.-182    	; 0x1184 <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_SetPinDirection+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <GPIO_SetPinDirection+0x8>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
    1254:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	08 f0       	brcs	.+2      	; 0x125e <GPIO_SetPinDirection+0x1c>
    125c:	d8 c1       	rjmp	.+944    	; 0x160e <GPIO_SetPinDirection+0x3cc>
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 30       	cpi	r24, 0x08	; 8
    1262:	08 f0       	brcs	.+2      	; 0x1266 <GPIO_SetPinDirection+0x24>
    1264:	d4 c1       	rjmp	.+936    	; 0x160e <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3d 83       	std	Y+5, r19	; 0x05
    126e:	2c 83       	std	Y+4, r18	; 0x04
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <GPIO_SetPinDirection+0x3a>
    127a:	84 c0       	rjmp	.+264    	; 0x1384 <GPIO_SetPinDirection+0x142>
    127c:	2c 81       	ldd	r18, Y+4	; 0x04
    127e:	3d 81       	ldd	r19, Y+5	; 0x05
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <GPIO_SetPinDirection+0x4e>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	71 f0       	breq	.+28     	; 0x12aa <GPIO_SetPinDirection+0x68>
    128e:	bf c1       	rjmp	.+894    	; 0x160e <GPIO_SetPinDirection+0x3cc>
    1290:	2c 81       	ldd	r18, Y+4	; 0x04
    1292:	3d 81       	ldd	r19, Y+5	; 0x05
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	09 f4       	brne	.+2      	; 0x129c <GPIO_SetPinDirection+0x5a>
    129a:	e1 c0       	rjmp	.+450    	; 0x145e <GPIO_SetPinDirection+0x21c>
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <GPIO_SetPinDirection+0x66>
    12a6:	48 c1       	rjmp	.+656    	; 0x1538 <GPIO_SetPinDirection+0x2f6>
    12a8:	b2 c1       	rjmp	.+868    	; 0x160e <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 23       	and	r24, r24
    12ae:	41 f5       	brne	.+80     	; 0x1300 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    12b0:	aa e3       	ldi	r26, 0x3A	; 58
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ea e3       	ldi	r30, 0x3A	; 58
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_SetPinDirection+0x8a>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	2a 95       	dec	r18
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_SetPinDirection+0x86>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    12d6:	ab e3       	ldi	r26, 0x3B	; 59
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	eb e3       	ldi	r30, 0x3B	; 59
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_SetPinDirection+0xb2>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_SetPinDirection+0xae>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	87 c1       	rjmp	.+782    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	39 f5       	brne	.+78     	; 0x1354 <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    1306:	aa e3       	ldi	r26, 0x3A	; 58
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ea e3       	ldi	r30, 0x3A	; 58
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_SetPinDirection+0xe0>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	2a 95       	dec	r18
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_SetPinDirection+0xdc>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e3       	ldi	r30, 0x3B	; 59
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_SetPinDirection+0x108>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_SetPinDirection+0x104>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	5d c1       	rjmp	.+698    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	82 30       	cpi	r24, 0x02	; 2
    1358:	09 f0       	breq	.+2      	; 0x135c <GPIO_SetPinDirection+0x11a>
    135a:	59 c1       	rjmp	.+690    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    135c:	aa e3       	ldi	r26, 0x3A	; 58
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ea e3       	ldi	r30, 0x3A	; 58
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_SetPinDirection+0x138>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_SetPinDirection+0x134>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	45 c1       	rjmp	.+650    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	88 23       	and	r24, r24
    1388:	41 f5       	brne	.+80     	; 0x13da <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    138a:	a7 e3       	ldi	r26, 0x37	; 55
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e7 e3       	ldi	r30, 0x37	; 55
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_SetPinDirection+0x164>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	2a 95       	dec	r18
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_SetPinDirection+0x160>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    13b0:	a8 e3       	ldi	r26, 0x38	; 56
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e8 e3       	ldi	r30, 0x38	; 56
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_SetPinDirection+0x18c>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_SetPinDirection+0x188>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	1a c1       	rjmp	.+564    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	39 f5       	brne	.+78     	; 0x142e <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    13e0:	a7 e3       	ldi	r26, 0x37	; 55
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <GPIO_SetPinDirection+0x1ba>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	2a 95       	dec	r18
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <GPIO_SetPinDirection+0x1b6>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    1406:	a8 e3       	ldi	r26, 0x38	; 56
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <GPIO_SetPinDirection+0x1e2>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <GPIO_SetPinDirection+0x1de>
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	f0 c0       	rjmp	.+480    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	09 f0       	breq	.+2      	; 0x1436 <GPIO_SetPinDirection+0x1f4>
    1434:	ec c0       	rjmp	.+472    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    1436:	a7 e3       	ldi	r26, 0x37	; 55
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e7 e3       	ldi	r30, 0x37	; 55
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <GPIO_SetPinDirection+0x212>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <GPIO_SetPinDirection+0x20e>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	d8 c0       	rjmp	.+432    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 23       	and	r24, r24
    1462:	41 f5       	brne	.+80     	; 0x14b4 <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    1464:	a4 e3       	ldi	r26, 0x34	; 52
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_SetPinDirection+0x23e>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	2a 95       	dec	r18
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_SetPinDirection+0x23a>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    148a:	a5 e3       	ldi	r26, 0x35	; 53
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_SetPinDirection+0x266>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_SetPinDirection+0x262>
    14ac:	80 95       	com	r24
    14ae:	84 23       	and	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	ad c0       	rjmp	.+346    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	39 f5       	brne	.+78     	; 0x1508 <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    14ba:	a4 e3       	ldi	r26, 0x34	; 52
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e4 e3       	ldi	r30, 0x34	; 52
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <GPIO_SetPinDirection+0x294>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	2a 95       	dec	r18
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <GPIO_SetPinDirection+0x290>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    14e0:	a5 e3       	ldi	r26, 0x35	; 53
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e3       	ldi	r30, 0x35	; 53
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <GPIO_SetPinDirection+0x2bc>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <GPIO_SetPinDirection+0x2b8>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	83 c0       	rjmp	.+262    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	09 f0       	breq	.+2      	; 0x1510 <GPIO_SetPinDirection+0x2ce>
    150e:	7f c0       	rjmp	.+254    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    1510:	a4 e3       	ldi	r26, 0x34	; 52
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e4 e3       	ldi	r30, 0x34	; 52
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_SetPinDirection+0x2ec>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_SetPinDirection+0x2e8>
    1532:	84 2b       	or	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	6b c0       	rjmp	.+214    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 23       	and	r24, r24
    153c:	41 f5       	brne	.+80     	; 0x158e <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    153e:	a1 e3       	ldi	r26, 0x31	; 49
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e1 e3       	ldi	r30, 0x31	; 49
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_SetPinDirection+0x318>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	2a 95       	dec	r18
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_SetPinDirection+0x314>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    1564:	a2 e3       	ldi	r26, 0x32	; 50
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e2 e3       	ldi	r30, 0x32	; 50
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_SetPinDirection+0x340>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_SetPinDirection+0x33c>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	40 c0       	rjmp	.+128    	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	39 f5       	brne	.+78     	; 0x15e2 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    1594:	a1 e3       	ldi	r26, 0x31	; 49
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e1 e3       	ldi	r30, 0x31	; 49
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_SetPinDirection+0x36e>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	2a 95       	dec	r18
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_SetPinDirection+0x36a>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    15ba:	a2 e3       	ldi	r26, 0x32	; 50
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e2 e3       	ldi	r30, 0x32	; 50
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GPIO_SetPinDirection+0x396>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GPIO_SetPinDirection+0x392>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	99 f4       	brne	.+38     	; 0x160e <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    15e8:	a1 e3       	ldi	r26, 0x31	; 49
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e1 e3       	ldi	r30, 0x31	; 49
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <GPIO_SetPinDirection+0x3c4>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <GPIO_SetPinDirection+0x3c0>
    160a:	84 2b       	or	r24, r20
    160c:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <GPIO_ReadPin+0x6>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <GPIO_ReadPin+0x8>
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1630:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	08 f0       	brcs	.+2      	; 0x163a <GPIO_ReadPin+0x1c>
    1638:	84 c0       	rjmp	.+264    	; 0x1742 <GPIO_ReadPin+0x124>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	88 30       	cpi	r24, 0x08	; 8
    163e:	08 f0       	brcs	.+2      	; 0x1642 <GPIO_ReadPin+0x24>
    1640:	80 c0       	rjmp	.+256    	; 0x1742 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3d 83       	std	Y+5, r19	; 0x05
    164a:	2c 83       	std	Y+4, r18	; 0x04
    164c:	4c 81       	ldd	r20, Y+4	; 0x04
    164e:	5d 81       	ldd	r21, Y+5	; 0x05
    1650:	41 30       	cpi	r20, 0x01	; 1
    1652:	51 05       	cpc	r21, r1
    1654:	79 f1       	breq	.+94     	; 0x16b4 <GPIO_ReadPin+0x96>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	91 05       	cpc	r25, r1
    165e:	34 f4       	brge	.+12     	; 0x166c <GPIO_ReadPin+0x4e>
    1660:	2c 81       	ldd	r18, Y+4	; 0x04
    1662:	3d 81       	ldd	r19, Y+5	; 0x05
    1664:	21 15       	cp	r18, r1
    1666:	31 05       	cpc	r19, r1
    1668:	69 f0       	breq	.+26     	; 0x1684 <GPIO_ReadPin+0x66>
    166a:	6b c0       	rjmp	.+214    	; 0x1742 <GPIO_ReadPin+0x124>
    166c:	4c 81       	ldd	r20, Y+4	; 0x04
    166e:	5d 81       	ldd	r21, Y+5	; 0x05
    1670:	42 30       	cpi	r20, 0x02	; 2
    1672:	51 05       	cpc	r21, r1
    1674:	b9 f1       	breq	.+110    	; 0x16e4 <GPIO_ReadPin+0xc6>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <GPIO_ReadPin+0x64>
    1680:	49 c0       	rjmp	.+146    	; 0x1714 <GPIO_ReadPin+0xf6>
    1682:	5f c0       	rjmp	.+190    	; 0x1742 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    1684:	e9 e3       	ldi	r30, 0x39	; 57
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_ReadPin+0x7e>
    1698:	55 95       	asr	r21
    169a:	47 95       	ror	r20
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_ReadPin+0x7a>
    16a0:	ca 01       	movw	r24, r20
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	90 70       	andi	r25, 0x00	; 0
    16a6:	88 23       	and	r24, r24
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	49 c0       	rjmp	.+146    	; 0x1742 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	47 c0       	rjmp	.+142    	; 0x1742 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    16b4:	e6 e3       	ldi	r30, 0x36	; 54
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a9 01       	movw	r20, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_ReadPin+0xae>
    16c8:	55 95       	asr	r21
    16ca:	47 95       	ror	r20
    16cc:	8a 95       	dec	r24
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_ReadPin+0xaa>
    16d0:	ca 01       	movw	r24, r20
    16d2:	81 70       	andi	r24, 0x01	; 1
    16d4:	90 70       	andi	r25, 0x00	; 0
    16d6:	88 23       	and	r24, r24
    16d8:	19 f0       	breq	.+6      	; 0x16e0 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	31 c0       	rjmp	.+98     	; 0x1742 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	2f c0       	rjmp	.+94     	; 0x1742 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    16e4:	e3 e3       	ldi	r30, 0x33	; 51
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a9 01       	movw	r20, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <GPIO_ReadPin+0xde>
    16f8:	55 95       	asr	r21
    16fa:	47 95       	ror	r20
    16fc:	8a 95       	dec	r24
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <GPIO_ReadPin+0xda>
    1700:	ca 01       	movw	r24, r20
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	90 70       	andi	r25, 0x00	; 0
    1706:	88 23       	and	r24, r24
    1708:	19 f0       	breq	.+6      	; 0x1710 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	19 c0       	rjmp	.+50     	; 0x1742 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1710:	19 82       	std	Y+1, r1	; 0x01
    1712:	17 c0       	rjmp	.+46     	; 0x1742 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    1714:	e0 e3       	ldi	r30, 0x30	; 48
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <GPIO_ReadPin+0x10e>
    1728:	55 95       	asr	r21
    172a:	47 95       	ror	r20
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <GPIO_ReadPin+0x10a>
    1730:	ca 01       	movw	r24, r20
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	88 23       	and	r24, r24
    1738:	19 f0       	breq	.+6      	; 0x1740 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1740:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <GPIO_WritePin+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <GPIO_WritePin+0x8>
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	6a 83       	std	Y+2, r22	; 0x02
    1766:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	84 30       	cpi	r24, 0x04	; 4
    176c:	08 f0       	brcs	.+2      	; 0x1770 <GPIO_WritePin+0x1c>
    176e:	e4 c0       	rjmp	.+456    	; 0x1938 <GPIO_WritePin+0x1e4>
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	08 f0       	brcs	.+2      	; 0x1778 <GPIO_WritePin+0x24>
    1776:	e0 c0       	rjmp	.+448    	; 0x1938 <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3d 83       	std	Y+5, r19	; 0x05
    1780:	2c 83       	std	Y+4, r18	; 0x04
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <GPIO_WritePin+0x3a>
    178c:	47 c0       	rjmp	.+142    	; 0x181c <GPIO_WritePin+0xc8>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	2c f4       	brge	.+10     	; 0x17a2 <GPIO_WritePin+0x4e>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	71 f0       	breq	.+28     	; 0x17bc <GPIO_WritePin+0x68>
    17a0:	cb c0       	rjmp	.+406    	; 0x1938 <GPIO_WritePin+0x1e4>
    17a2:	2c 81       	ldd	r18, Y+4	; 0x04
    17a4:	3d 81       	ldd	r19, Y+5	; 0x05
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <GPIO_WritePin+0x5a>
    17ac:	67 c0       	rjmp	.+206    	; 0x187c <GPIO_WritePin+0x128>
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <GPIO_WritePin+0x66>
    17b8:	91 c0       	rjmp	.+290    	; 0x18dc <GPIO_WritePin+0x188>
    17ba:	be c0       	rjmp	.+380    	; 0x1938 <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	a1 f4       	brne	.+40     	; 0x17ea <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    17c2:	ab e3       	ldi	r26, 0x3B	; 59
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	eb e3       	ldi	r30, 0x3B	; 59
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GPIO_WritePin+0x8c>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <GPIO_WritePin+0x88>
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	a7 c0       	rjmp	.+334    	; 0x1938 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 23       	and	r24, r24
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <GPIO_WritePin+0x9e>
    17f0:	a3 c0       	rjmp	.+326    	; 0x1938 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    17f2:	ab e3       	ldi	r26, 0x3B	; 59
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e3       	ldi	r30, 0x3B	; 59
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_WritePin+0xbc>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_WritePin+0xb8>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	8e c0       	rjmp	.+284    	; 0x1938 <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_WritePin+0xec>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_WritePin+0xe8>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	77 c0       	rjmp	.+238    	; 0x1938 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	88 23       	and	r24, r24
    184e:	09 f0       	breq	.+2      	; 0x1852 <GPIO_WritePin+0xfe>
    1850:	73 c0       	rjmp	.+230    	; 0x1938 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1852:	a8 e3       	ldi	r26, 0x38	; 56
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e8 e3       	ldi	r30, 0x38	; 56
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_WritePin+0x11c>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_WritePin+0x118>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	5e c0       	rjmp	.+188    	; 0x1938 <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	a1 f4       	brne	.+40     	; 0x18aa <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_WritePin+0x14c>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_WritePin+0x148>
    18a4:	84 2b       	or	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	47 c0       	rjmp	.+142    	; 0x1938 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 23       	and	r24, r24
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <GPIO_WritePin+0x15e>
    18b0:	43 c0       	rjmp	.+134    	; 0x1938 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    18b2:	a5 e3       	ldi	r26, 0x35	; 53
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e3       	ldi	r30, 0x35	; 53
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_WritePin+0x17c>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_WritePin+0x178>
    18d4:	80 95       	com	r24
    18d6:	84 23       	and	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	2e c0       	rjmp	.+92     	; 0x1938 <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	a1 f4       	brne	.+40     	; 0x190a <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    18e2:	a2 e3       	ldi	r26, 0x32	; 50
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e2 e3       	ldi	r30, 0x32	; 50
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_WritePin+0x1ac>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_WritePin+0x1a8>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	17 c0       	rjmp	.+46     	; 0x1938 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	88 23       	and	r24, r24
    190e:	a1 f4       	brne	.+40     	; 0x1938 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    1910:	a2 e3       	ldi	r26, 0x32	; 50
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_WritePin+0x1da>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_WritePin+0x1d6>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
                break;

        }
    }
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <GPIO_TogglePin+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <GPIO_TogglePin+0x8>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	08 f0       	brcs	.+2      	; 0x1960 <GPIO_TogglePin+0x18>
    195e:	72 c0       	rjmp	.+228    	; 0x1a44 <GPIO_TogglePin+0xfc>
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	08 f0       	brcs	.+2      	; 0x1968 <GPIO_TogglePin+0x20>
    1966:	6e c0       	rjmp	.+220    	; 0x1a44 <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	3c 83       	std	Y+4, r19	; 0x04
    1970:	2b 83       	std	Y+3, r18	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 05       	cpc	r25, r1
    197a:	49 f1       	breq	.+82     	; 0x19ce <GPIO_TogglePin+0x86>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	2c f4       	brge	.+10     	; 0x1990 <GPIO_TogglePin+0x48>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	61 f0       	breq	.+24     	; 0x19a6 <GPIO_TogglePin+0x5e>
    198e:	5a c0       	rjmp	.+180    	; 0x1a44 <GPIO_TogglePin+0xfc>
    1990:	2b 81       	ldd	r18, Y+3	; 0x03
    1992:	3c 81       	ldd	r19, Y+4	; 0x04
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	71 f1       	breq	.+92     	; 0x19f6 <GPIO_TogglePin+0xae>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	e9 f1       	breq	.+122    	; 0x1a1e <GPIO_TogglePin+0xd6>
    19a4:	4f c0       	rjmp	.+158    	; 0x1a44 <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    19a6:	ab e3       	ldi	r26, 0x3B	; 59
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <GPIO_TogglePin+0x7c>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <GPIO_TogglePin+0x78>
    19c8:	84 27       	eor	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	3b c0       	rjmp	.+118    	; 0x1a44 <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    19ce:	a8 e3       	ldi	r26, 0x38	; 56
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e3       	ldi	r30, 0x38	; 56
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <GPIO_TogglePin+0xa4>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <GPIO_TogglePin+0xa0>
    19f0:	84 27       	eor	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	27 c0       	rjmp	.+78     	; 0x1a44 <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    19f6:	a5 e3       	ldi	r26, 0x35	; 53
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e3       	ldi	r30, 0x35	; 53
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <GPIO_TogglePin+0xcc>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <GPIO_TogglePin+0xc8>
    1a18:	84 27       	eor	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	13 c0       	rjmp	.+38     	; 0x1a44 <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1a1e:	a2 e3       	ldi	r26, 0x32	; 50
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e2 e3       	ldi	r30, 0x32	; 50
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <GPIO_TogglePin+0xf4>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <GPIO_TogglePin+0xf0>
    1a40:	84 27       	eor	r24, r20
    1a42:	8c 93       	st	X, r24
                break;

        }
    }

}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <GPIO_SetPortDirection+0x6>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <GPIO_SetPortDirection+0x8>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <GPIO_SetPortDirection+0x18>
    1a68:	96 c0       	rjmp	.+300    	; 0x1b96 <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3c 83       	std	Y+4, r19	; 0x04
    1a72:	2b 83       	std	Y+3, r18	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	a9 f1       	breq	.+106    	; 0x1ae8 <GPIO_SetPortDirection+0x96>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <GPIO_SetPortDirection+0x40>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	71 f0       	breq	.+28     	; 0x1aac <GPIO_SetPortDirection+0x5a>
    1a90:	82 c0       	rjmp	.+260    	; 0x1b96 <GPIO_SetPortDirection+0x144>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <GPIO_SetPortDirection+0x4c>
    1a9c:	43 c0       	rjmp	.+134    	; 0x1b24 <GPIO_SetPortDirection+0xd2>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <GPIO_SetPortDirection+0x58>
    1aa8:	5a c0       	rjmp	.+180    	; 0x1b5e <GPIO_SetPortDirection+0x10c>
    1aaa:	75 c0       	rjmp	.+234    	; 0x1b96 <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	88 23       	and	r24, r24
    1ab0:	39 f4       	brne	.+14     	; 0x1ac0 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1ab2:	ea e3       	ldi	r30, 0x3A	; 58
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1ab8:	eb e3       	ldi	r30, 0x3B	; 59
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	10 82       	st	Z, r1
    1abe:	6b c0       	rjmp	.+214    	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1ac6:	ea e3       	ldi	r30, 0x3A	; 58
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1acc:	eb e3       	ldi	r30, 0x3B	; 59
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	80 83       	st	Z, r24
    1ad4:	60 c0       	rjmp	.+192    	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ada:	09 f0       	breq	.+2      	; 0x1ade <GPIO_SetPortDirection+0x8c>
    1adc:	5c c0       	rjmp	.+184    	; 0x1b96 <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	80 83       	st	Z, r24
    1ae6:	57 c0       	rjmp	.+174    	; 0x1b96 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	88 23       	and	r24, r24
    1aec:	39 f4       	brne	.+14     	; 0x1afc <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1aee:	e7 e3       	ldi	r30, 0x37	; 55
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	10 82       	st	Z, r1
    1afa:	4d c0       	rjmp	.+154    	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	41 f4       	brne	.+16     	; 0x1b12 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    1b02:	e7 e3       	ldi	r30, 0x37	; 55
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    1b08:	e8 e3       	ldi	r30, 0x38	; 56
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	80 83       	st	Z, r24
    1b10:	42 c0       	rjmp	.+132    	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	8f 3f       	cpi	r24, 0xFF	; 255
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <GPIO_SetPortDirection+0xc8>
    1b18:	3e c0       	rjmp	.+124    	; 0x1b96 <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    1b1a:	e7 e3       	ldi	r30, 0x37	; 55
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	80 83       	st	Z, r24
    1b22:	39 c0       	rjmp	.+114    	; 0x1b96 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 23       	and	r24, r24
    1b28:	39 f4       	brne	.+14     	; 0x1b38 <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    1b2a:	e4 e3       	ldi	r30, 0x34	; 52
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1b30:	e5 e3       	ldi	r30, 0x35	; 53
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	10 82       	st	Z, r1
    1b36:	2f c0       	rjmp	.+94     	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	41 f4       	brne	.+16     	; 0x1b4e <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1b3e:	e4 e3       	ldi	r30, 0x34	; 52
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1b44:	e5 e3       	ldi	r30, 0x35	; 53
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	80 83       	st	Z, r24
    1b4c:	24 c0       	rjmp	.+72     	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	8f 3f       	cpi	r24, 0xFF	; 255
    1b52:	09 f5       	brne	.+66     	; 0x1b96 <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    1b54:	e4 e3       	ldi	r30, 0x34	; 52
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	80 83       	st	Z, r24
    1b5c:	1c c0       	rjmp	.+56     	; 0x1b96 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	88 23       	and	r24, r24
    1b62:	39 f4       	brne	.+14     	; 0x1b72 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    1b64:	e1 e3       	ldi	r30, 0x31	; 49
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    1b6a:	e2 e3       	ldi	r30, 0x32	; 50
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	10 82       	st	Z, r1
    1b70:	12 c0       	rjmp	.+36     	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	41 f4       	brne	.+16     	; 0x1b88 <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    1b78:	e1 e3       	ldi	r30, 0x31	; 49
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    1b7e:	e2 e3       	ldi	r30, 0x32	; 50
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	80 83       	st	Z, r24
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    1b8e:	e1 e3       	ldi	r30, 0x31	; 49
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <GPIO_ReadPort+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <GPIO_ReadPort+0x8>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	84 30       	cpi	r24, 0x04	; 4
    1bb8:	90 f5       	brcc	.+100    	; 0x1c1e <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3c 83       	std	Y+4, r19	; 0x04
    1bc2:	2b 83       	std	Y+3, r18	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	d1 f0       	breq	.+52     	; 0x1c02 <GPIO_ReadPort+0x5e>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <GPIO_ReadPort+0x3e>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <GPIO_ReadPort+0x54>
    1be0:	1e c0       	rjmp	.+60     	; 0x1c1e <GPIO_ReadPort+0x7a>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <GPIO_ReadPort+0x68>
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <GPIO_ReadPort+0x72>
    1bf6:	13 c0       	rjmp	.+38     	; 0x1c1e <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    1bf8:	e9 e3       	ldi	r30, 0x39	; 57
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	0e c0       	rjmp	.+28     	; 0x1c1e <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    1c02:	e6 e3       	ldi	r30, 0x36	; 54
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    1c0c:	e3 e3       	ldi	r30, 0x33	; 51
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    1c16:	e0 e3       	ldi	r30, 0x30	; 48
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <GPIO_WritePort+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <GPIO_WritePort+0x8>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	84 30       	cpi	r24, 0x04	; 4
    1c42:	90 f5       	brcc	.+100    	; 0x1ca8 <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3c 83       	std	Y+4, r19	; 0x04
    1c4c:	2b 83       	std	Y+3, r18	; 0x03
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	d1 f0       	breq	.+52     	; 0x1c8c <GPIO_WritePort+0x5e>
    1c58:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <GPIO_WritePort+0x3e>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <GPIO_WritePort+0x54>
    1c6a:	1e c0       	rjmp	.+60     	; 0x1ca8 <GPIO_WritePort+0x7a>
    1c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	81 f0       	breq	.+32     	; 0x1c96 <GPIO_WritePort+0x68>
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <GPIO_WritePort+0x72>
    1c80:	13 c0       	rjmp	.+38     	; 0x1ca8 <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1c82:	eb e3       	ldi	r30, 0x3B	; 59
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 83       	st	Z, r24
    1c8a:	0e c0       	rjmp	.+28     	; 0x1ca8 <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1c8c:	e8 e3       	ldi	r30, 0x38	; 56
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	80 83       	st	Z, r24
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    1c96:	e5 e3       	ldi	r30, 0x35	; 53
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	80 83       	st	Z, r24
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1ca0:	e2 e3       	ldi	r30, 0x32	; 50
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <GPIO_TogglePort+0x6>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <GPIO_TogglePort+0x16>
    1cca:	3e c0       	rjmp	.+124    	; 0x1d48 <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3b 83       	std	Y+3, r19	; 0x03
    1cd4:	2a 83       	std	Y+2, r18	; 0x02
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	e9 f0       	breq	.+58     	; 0x1d1a <GPIO_TogglePort+0x64>
    1ce0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <GPIO_TogglePort+0x3e>
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	61 f0       	breq	.+24     	; 0x1d0a <GPIO_TogglePort+0x54>
    1cf2:	2a c0       	rjmp	.+84     	; 0x1d48 <GPIO_TogglePort+0x92>
    1cf4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf6:	3b 81       	ldd	r19, Y+3	; 0x03
    1cf8:	22 30       	cpi	r18, 0x02	; 2
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	b1 f0       	breq	.+44     	; 0x1d2a <GPIO_TogglePort+0x74>
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	83 30       	cpi	r24, 0x03	; 3
    1d04:	91 05       	cpc	r25, r1
    1d06:	c9 f0       	breq	.+50     	; 0x1d3a <GPIO_TogglePort+0x84>
    1d08:	1f c0       	rjmp	.+62     	; 0x1d48 <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    1d0a:	ab e3       	ldi	r26, 0x3B	; 59
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	eb e3       	ldi	r30, 0x3B	; 59
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	80 95       	com	r24
    1d16:	8c 93       	st	X, r24
    1d18:	17 c0       	rjmp	.+46     	; 0x1d48 <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    1d1a:	a8 e3       	ldi	r26, 0x38	; 56
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e8 e3       	ldi	r30, 0x38	; 56
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 95       	com	r24
    1d26:	8c 93       	st	X, r24
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    1d2a:	a5 e3       	ldi	r26, 0x35	; 53
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e3       	ldi	r30, 0x35	; 53
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	80 95       	com	r24
    1d36:	8c 93       	st	X, r24
    1d38:	07 c0       	rjmp	.+14     	; 0x1d48 <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    1d3a:	a2 e3       	ldi	r26, 0x32	; 50
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e2 e3       	ldi	r30, 0x32	; 50
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	80 95       	com	r24
    1d46:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    1d7e:	80 91 96 02 	lds	r24, 0x0296
    1d82:	90 91 97 02 	lds	r25, 0x0297
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	29 f0       	breq	.+10     	; 0x1d94 <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    1d8a:	e0 91 96 02 	lds	r30, 0x0296
    1d8e:	f0 91 97 02 	lds	r31, 0x0297
    1d92:	09 95       	icall
    }
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	ff 91       	pop	r31
    1d9a:	ef 91       	pop	r30
    1d9c:	bf 91       	pop	r27
    1d9e:	af 91       	pop	r26
    1da0:	9f 91       	pop	r25
    1da2:	8f 91       	pop	r24
    1da4:	7f 91       	pop	r23
    1da6:	6f 91       	pop	r22
    1da8:	5f 91       	pop	r21
    1daa:	4f 91       	pop	r20
    1dac:	3f 91       	pop	r19
    1dae:	2f 91       	pop	r18
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti

00001dba <__vector_2>:

ISR(INT1)
{
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	2f 93       	push	r18
    1dc6:	3f 93       	push	r19
    1dc8:	4f 93       	push	r20
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    1de4:	80 91 98 02 	lds	r24, 0x0298
    1de8:	90 91 99 02 	lds	r25, 0x0299
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    1df0:	e0 91 98 02 	lds	r30, 0x0298
    1df4:	f0 91 99 02 	lds	r31, 0x0299
    1df8:	09 95       	icall
    }
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <__vector_3>:

ISR(INT2)
{
    1e20:	1f 92       	push	r1
    1e22:	0f 92       	push	r0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	0f 92       	push	r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	2f 93       	push	r18
    1e2c:	3f 93       	push	r19
    1e2e:	4f 93       	push	r20
    1e30:	5f 93       	push	r21
    1e32:	6f 93       	push	r22
    1e34:	7f 93       	push	r23
    1e36:	8f 93       	push	r24
    1e38:	9f 93       	push	r25
    1e3a:	af 93       	push	r26
    1e3c:	bf 93       	push	r27
    1e3e:	ef 93       	push	r30
    1e40:	ff 93       	push	r31
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    1e4a:	80 91 9a 02 	lds	r24, 0x029A
    1e4e:	90 91 9b 02 	lds	r25, 0x029B
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	29 f0       	breq	.+10     	; 0x1e60 <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    1e56:	e0 91 9a 02 	lds	r30, 0x029A
    1e5a:	f0 91 9b 02 	lds	r31, 0x029B
    1e5e:	09 95       	icall
    }
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	ff 91       	pop	r31
    1e66:	ef 91       	pop	r30
    1e68:	bf 91       	pop	r27
    1e6a:	af 91       	pop	r26
    1e6c:	9f 91       	pop	r25
    1e6e:	8f 91       	pop	r24
    1e70:	7f 91       	pop	r23
    1e72:	6f 91       	pop	r22
    1e74:	5f 91       	pop	r21
    1e76:	4f 91       	pop	r20
    1e78:	3f 91       	pop	r19
    1e7a:	2f 91       	pop	r18
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	0f 90       	pop	r0
    1e82:	1f 90       	pop	r1
    1e84:	18 95       	reti

00001e86 <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <INT0_SetCallBack+0x6>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	90 93 97 02 	sts	0x0297, r25
    1e9c:	80 93 96 02 	sts	0x0296, r24
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <INT1_SetCallBack+0x6>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	90 93 99 02 	sts	0x0299, r25
    1ec0:	80 93 98 02 	sts	0x0298, r24
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <INT2_SetCallBack+0x6>
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	90 93 9b 02 	sts	0x029B, r25
    1ee4:	80 93 9a 02 	sts	0x029A, r24
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <INT0_init+0x6>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    1f00:	83 e0       	ldi	r24, 0x03	; 3
    1f02:	62 e0       	ldi	r22, 0x02	; 2
    1f04:	4a 81       	ldd	r20, Y+2	; 0x02
    1f06:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    1f0a:	a5 e5       	ldi	r26, 0x55	; 85
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e5 e5       	ldi	r30, 0x55	; 85
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	98 2f       	mov	r25, r24
    1f16:	9c 7f       	andi	r25, 0xFC	; 252
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	89 2b       	or	r24, r25
    1f1c:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    1f1e:	ab e5       	ldi	r26, 0x5B	; 91
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	eb e5       	ldi	r30, 0x5B	; 91
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 64       	ori	r24, 0x40	; 64
    1f2a:	8c 93       	st	X, r24
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <INT1_init+0x6>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	63 e0       	ldi	r22, 0x03	; 3
    1f48:	4a 81       	ldd	r20, Y+2	; 0x02
    1f4a:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    1f4e:	a5 e5       	ldi	r26, 0x55	; 85
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e5 e5       	ldi	r30, 0x55	; 85
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	28 2f       	mov	r18, r24
    1f5a:	23 7f       	andi	r18, 0xF3	; 243
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	82 2b       	or	r24, r18
    1f6c:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    1f6e:	ab e5       	ldi	r26, 0x5B	; 91
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb e5       	ldi	r30, 0x5B	; 91
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 68       	ori	r24, 0x80	; 128
    1f7a:	8c 93       	st	X, r24
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <INT2_init+0x6>
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	62 e0       	ldi	r22, 0x02	; 2
    1f98:	4a 81       	ldd	r20, Y+2	; 0x02
    1f9a:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    1fa4:	a4 e5       	ldi	r26, 0x54	; 84
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e4 e5       	ldi	r30, 0x54	; 84
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 7b       	andi	r24, 0xBF	; 191
    1fb0:	8c 93       	st	X, r24
    1fb2:	0a c0       	rjmp	.+20     	; 0x1fc8 <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    1fba:	a4 e5       	ldi	r26, 0x54	; 84
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e4 e5       	ldi	r30, 0x54	; 84
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 64       	ori	r24, 0x40	; 64
    1fc6:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    1fc8:	ab e5       	ldi	r26, 0x5B	; 91
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	eb e5       	ldi	r30, 0x5B	; 91
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 62       	ori	r24, 0x20	; 32
    1fd4:	8c 93       	st	X, r24
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <INT0_DeInit>:


void INT0_DeInit(void)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    1fe8:	ab e5       	ldi	r26, 0x5B	; 91
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	eb e5       	ldi	r30, 0x5B	; 91
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 7b       	andi	r24, 0xBF	; 191
    1ff4:	8c 93       	st	X, r24
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <INT1_DeInit>:


void INT1_DeInit(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    2004:	ab e5       	ldi	r26, 0x5B	; 91
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	eb e5       	ldi	r30, 0x5B	; 91
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8f 77       	andi	r24, 0x7F	; 127
    2010:	8c 93       	st	X, r24
}
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <INT2_DeInit>:

void INT2_DeInit(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    2020:	ab e5       	ldi	r26, 0x5B	; 91
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	eb e5       	ldi	r30, 0x5B	; 91
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8f 7d       	andi	r24, 0xDF	; 223
    202c:	8c 93       	st	X, r24
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	0f 92       	push	r0
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	87 70       	andi	r24, 0x07	; 7
    2044:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    2046:	a7 e2       	ldi	r26, 0x27	; 39
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e7 e2       	ldi	r30, 0x27	; 39
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	98 2f       	mov	r25, r24
    2052:	90 7e       	andi	r25, 0xE0	; 224
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	89 2b       	or	r24, r25
    2058:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    205a:	a6 e2       	ldi	r26, 0x26	; 38
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 64       	ori	r24, 0x40	; 64
    2066:	8c 93       	st	X, r24
}
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <ADC_Init>:

void ADC_Init(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    2078:	a7 e2       	ldi	r26, 0x27	; 39
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e7 e2       	ldi	r30, 0x27	; 39
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	28 2f       	mov	r18, r24
    2084:	2f 73       	andi	r18, 0x3F	; 63
    2086:	80 91 22 02 	lds	r24, 0x0222
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	00 24       	eor	r0, r0
    2090:	96 95       	lsr	r25
    2092:	87 95       	ror	r24
    2094:	07 94       	ror	r0
    2096:	96 95       	lsr	r25
    2098:	87 95       	ror	r24
    209a:	07 94       	ror	r0
    209c:	98 2f       	mov	r25, r24
    209e:	80 2d       	mov	r24, r0
    20a0:	82 2b       	or	r24, r18
    20a2:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    20a4:	80 91 23 02 	lds	r24, 0x0223
    20a8:	88 23       	and	r24, r24
    20aa:	41 f4       	brne	.+16     	; 0x20bc <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    20ac:	a7 e2       	ldi	r26, 0x27	; 39
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e7 e2       	ldi	r30, 0x27	; 39
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8f 7d       	andi	r24, 0xDF	; 223
    20b8:	8c 93       	st	X, r24
    20ba:	0b c0       	rjmp	.+22     	; 0x20d2 <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    20bc:	80 91 23 02 	lds	r24, 0x0223
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	39 f4       	brne	.+14     	; 0x20d2 <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    20c4:	a7 e2       	ldi	r26, 0x27	; 39
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e7 e2       	ldi	r30, 0x27	; 39
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	80 62       	ori	r24, 0x20	; 32
    20d0:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    20d2:	a6 e2       	ldi	r26, 0x26	; 38
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e6 e2       	ldi	r30, 0x26	; 38
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	80 68       	ori	r24, 0x80	; 128
    20de:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    20e0:	80 91 21 02 	lds	r24, 0x0221
    20e4:	88 23       	and	r24, r24
    20e6:	99 f1       	breq	.+102    	; 0x214e <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    20e8:	80 91 21 02 	lds	r24, 0x0221
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	79 f4       	brne	.+30     	; 0x210e <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    20f0:	a6 e2       	ldi	r26, 0x26	; 38
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e6 e2       	ldi	r30, 0x26	; 38
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	80 62       	ori	r24, 0x20	; 32
    20fc:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    20fe:	a0 e5       	ldi	r26, 0x50	; 80
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e0 e5       	ldi	r30, 0x50	; 80
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 70       	andi	r24, 0x0F	; 15
    210a:	8c 93       	st	X, r24
    210c:	20 c0       	rjmp	.+64     	; 0x214e <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    210e:	80 91 21 02 	lds	r24, 0x0221
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	e1 f4       	brne	.+56     	; 0x214e <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    2116:	a6 e2       	ldi	r26, 0x26	; 38
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e6 e2       	ldi	r30, 0x26	; 38
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    2124:	a0 e5       	ldi	r26, 0x50	; 80
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e0 e5       	ldi	r30, 0x50	; 80
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	28 2f       	mov	r18, r24
    2130:	2f 70       	andi	r18, 0x0F	; 15
    2132:	80 91 25 02 	lds	r24, 0x0225
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	82 95       	swap	r24
    2140:	92 95       	swap	r25
    2142:	90 7f       	andi	r25, 0xF0	; 240
    2144:	98 27       	eor	r25, r24
    2146:	80 7f       	andi	r24, 0xF0	; 240
    2148:	98 27       	eor	r25, r24
    214a:	82 2b       	or	r24, r18
    214c:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    214e:	a6 e2       	ldi	r26, 0x26	; 38
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e2       	ldi	r30, 0x26	; 38
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	98 2f       	mov	r25, r24
    215a:	98 7f       	andi	r25, 0xF8	; 248
    215c:	80 91 24 02 	lds	r24, 0x0224
    2160:	87 70       	andi	r24, 0x07	; 7
    2162:	89 2b       	or	r24, r25
    2164:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    2166:	a6 e2       	ldi	r26, 0x26	; 38
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e6 e2       	ldi	r30, 0x26	; 38
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	87 7f       	andi	r24, 0xF7	; 247
    2172:	8c 93       	st	X, r24
    #endif
        
}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	0e 94 1a 10 	call	0x2034	; 0x2034 <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    218c:	e6 e2       	ldi	r30, 0x26	; 38
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	80 71       	andi	r24, 0x10	; 16
    2198:	90 70       	andi	r25, 0x00	; 0
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	b9 f3       	breq	.-18     	; 0x218c <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    219e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <ADC_ReadConversionRegister>
    21a2:	90 93 9d 02 	sts	0x029D, r25
    21a6:	80 93 9c 02 	sts	0x029C, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    21aa:	a6 e2       	ldi	r26, 0x26	; 38
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e6 e2       	ldi	r30, 0x26	; 38
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 61       	ori	r24, 0x10	; 16
    21b6:	8c 93       	st	X, r24
    return ADC_conversion_value;
    21b8:	80 91 9c 02 	lds	r24, 0x029C
    21bc:	90 91 9d 02 	lds	r25, 0x029D
}
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	0e 94 1a 10 	call	0x2034	; 0x2034 <ADC_OnlyStartConversionGeneral>
}
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <ADC_ReadConversionRegister+0x6>
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    21ec:	1a 82       	std	Y+2, r1	; 0x02
    21ee:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    21f0:	80 91 23 02 	lds	r24, 0x0223
    21f4:	88 23       	and	r24, r24
    21f6:	b9 f4       	brne	.+46     	; 0x2226 <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    21f8:	e4 e2       	ldi	r30, 0x24	; 36
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    2206:	e5 e2       	ldi	r30, 0x25	; 37
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	83 70       	andi	r24, 0x03	; 3
    2212:	90 70       	andi	r25, 0x00	; 0
    2214:	38 2f       	mov	r19, r24
    2216:	22 27       	eor	r18, r18
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	82 2b       	or	r24, r18
    221e:	93 2b       	or	r25, r19
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	20 c0       	rjmp	.+64     	; 0x2266 <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    2226:	80 91 23 02 	lds	r24, 0x0223
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	e1 f4       	brne	.+56     	; 0x2266 <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    222e:	e4 e2       	ldi	r30, 0x24	; 36
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	82 95       	swap	r24
    2236:	86 95       	lsr	r24
    2238:	86 95       	lsr	r24
    223a:	83 70       	andi	r24, 0x03	; 3
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	90 70       	andi	r25, 0x00	; 0
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    2246:	e5 e2       	ldi	r30, 0x25	; 37
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c 01       	movw	r18, r24
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	22 0f       	add	r18, r18
    2258:	33 1f       	adc	r19, r19
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	82 2b       	or	r24, r18
    2260:	93 2b       	or	r25, r19
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
}
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	0f 92       	push	r0
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	69 81       	ldd	r22, Y+1	; 0x01
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>

}
    228a:	0f 90       	pop	r0
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <POT_GetValue+0x6>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	89 83       	std	Y+1, r24	; 0x01
    
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <LED_Init+0x6>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	6a 81       	ldd	r22, Y+2	; 0x02
    22be:	42 e0       	ldi	r20, 0x02	; 2
    22c0:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <LED_OnOffPositiveLogic+0x6>
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	6a 83       	std	Y+2, r22	; 0x02
    22de:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	88 23       	and	r24, r24
    22e4:	31 f4       	brne	.+12     	; 0x22f2 <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	6a 81       	ldd	r22, Y+2	; 0x02
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    22f0:	08 c0       	rjmp	.+16     	; 0x2302 <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	29 f4       	brne	.+10     	; 0x2302 <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	6a 81       	ldd	r22, Y+2	; 0x02
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    }


}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <LED_OnOffNegativeLogic+0x6>
    2314:	0f 92       	push	r0
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	6a 83       	std	Y+2, r22	; 0x02
    231e:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	88 23       	and	r24, r24
    2324:	31 f4       	brne	.+12     	; 0x2332 <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	6a 81       	ldd	r22, Y+2	; 0x02
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    2330:	08 c0       	rjmp	.+16     	; 0x2342 <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	29 f4       	brne	.+10     	; 0x2342 <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	6a 81       	ldd	r22, Y+2	; 0x02
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    }


}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <LED_Toggle+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	6a 81       	ldd	r22, Y+2	; 0x02
    2360:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_TogglePin>
}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	42 e0       	ldi	r20, 0x02	; 2
    237c:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	62 e0       	ldi	r22, 0x02	; 2
    2384:	42 e0       	ldi	r20, 0x02	; 2
    2386:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	42 e0       	ldi	r20, 0x02	; 2
    2390:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	42 e0       	ldi	r20, 0x02	; 2
    239a:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	42 e0       	ldi	r20, 0x02	; 2
    23a4:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	64 e0       	ldi	r22, 0x04	; 4
    23ac:	42 e0       	ldi	r20, 0x02	; 2
    23ae:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    23b8:	88 e2       	ldi	r24, 0x28	; 40
    23ba:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    23be:	8c e0       	ldi	r24, 0x0C	; 12
    23c0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
}
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	c4 56       	subi	r28, 0x64	; 100
    23de:	d0 40       	sbci	r29, 0x00	; 0
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	fe 01       	movw	r30, r28
    23ec:	ec 59       	subi	r30, 0x9C	; 156
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	63 e0       	ldi	r22, 0x03	; 3
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    23fc:	fe 01       	movw	r30, r28
    23fe:	e1 5a       	subi	r30, 0xA1	; 161
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e8       	ldi	r26, 0x80	; 128
    2408:	bf e3       	ldi	r27, 0x3F	; 63
    240a:	80 83       	st	Z, r24
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	a2 83       	std	Z+2, r26	; 0x02
    2410:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	8e 01       	movw	r16, r28
    2414:	05 5a       	subi	r16, 0xA5	; 165
    2416:	1f 4f       	sbci	r17, 0xFF	; 255
    2418:	fe 01       	movw	r30, r28
    241a:	e1 5a       	subi	r30, 0xA1	; 161
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a e7       	ldi	r20, 0x7A	; 122
    242c:	55 e4       	ldi	r21, 0x45	; 69
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	f8 01       	movw	r30, r16
    2438:	80 83       	st	Z, r24
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	a2 83       	std	Z+2, r26	; 0x02
    243e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2440:	fe 01       	movw	r30, r28
    2442:	e5 5a       	subi	r30, 0xA5	; 165
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	44 f4       	brge	.+16     	; 0x246e <LCD_SendCommand+0x9e>
		__ticks = 1;
    245e:	fe 01       	movw	r30, r28
    2460:	e7 5a       	subi	r30, 0xA7	; 167
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	64 c0       	rjmp	.+200    	; 0x2536 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    246e:	fe 01       	movw	r30, r28
    2470:	e5 5a       	subi	r30, 0xA5	; 165
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	60 81       	ld	r22, Z
    2476:	71 81       	ldd	r23, Z+1	; 0x01
    2478:	82 81       	ldd	r24, Z+2	; 0x02
    247a:	93 81       	ldd	r25, Z+3	; 0x03
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	3f ef       	ldi	r19, 0xFF	; 255
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	57 e4       	ldi	r21, 0x47	; 71
    2484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	0c f0       	brlt	.+2      	; 0x248e <LCD_SendCommand+0xbe>
    248c:	43 c0       	rjmp	.+134    	; 0x2514 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	fe 01       	movw	r30, r28
    2490:	e1 5a       	subi	r30, 0xA1	; 161
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	60 81       	ld	r22, Z
    2496:	71 81       	ldd	r23, Z+1	; 0x01
    2498:	82 81       	ldd	r24, Z+2	; 0x02
    249a:	93 81       	ldd	r25, Z+3	; 0x03
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8e 01       	movw	r16, r28
    24ae:	07 5a       	subi	r16, 0xA7	; 167
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	f8 01       	movw	r30, r16
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	80 83       	st	Z, r24
    24c4:	1f c0       	rjmp	.+62     	; 0x2504 <LCD_SendCommand+0x134>
    24c6:	fe 01       	movw	r30, r28
    24c8:	e9 5a       	subi	r30, 0xA9	; 169
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 e9       	ldi	r24, 0x90	; 144
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d4:	fe 01       	movw	r30, r28
    24d6:	e9 5a       	subi	r30, 0xA9	; 169
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_SendCommand+0x10e>
    24e2:	fe 01       	movw	r30, r28
    24e4:	e9 5a       	subi	r30, 0xA9	; 169
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	de 01       	movw	r26, r28
    24ee:	a7 5a       	subi	r26, 0xA7	; 167
    24f0:	bf 4f       	sbci	r27, 0xFF	; 255
    24f2:	fe 01       	movw	r30, r28
    24f4:	e7 5a       	subi	r30, 0xA7	; 167
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	11 96       	adiw	r26, 0x01	; 1
    2500:	9c 93       	st	X, r25
    2502:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	fe 01       	movw	r30, r28
    2506:	e7 5a       	subi	r30, 0xA7	; 167
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	d1 f6       	brne	.-76     	; 0x24c6 <LCD_SendCommand+0xf6>
    2512:	27 c0       	rjmp	.+78     	; 0x2562 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	8e 01       	movw	r16, r28
    2516:	07 5a       	subi	r16, 0xA7	; 167
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	e5 5a       	subi	r30, 0xA5	; 165
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	f8 01       	movw	r30, r16
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	de 01       	movw	r26, r28
    2538:	ab 5a       	subi	r26, 0xAB	; 171
    253a:	bf 4f       	sbci	r27, 0xFF	; 255
    253c:	fe 01       	movw	r30, r28
    253e:	e7 5a       	subi	r30, 0xA7	; 167
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	8d 93       	st	X+, r24
    2548:	9c 93       	st	X, r25
    254a:	fe 01       	movw	r30, r28
    254c:	eb 5a       	subi	r30, 0xAB	; 171
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_SendCommand+0x184>
    2558:	fe 01       	movw	r30, r28
    255a:	eb 5a       	subi	r30, 0xAB	; 171
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	62 e0       	ldi	r22, 0x02	; 2
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    256c:	fe 01       	movw	r30, r28
    256e:	ef 5a       	subi	r30, 0xAF	; 175
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	a0 e8       	ldi	r26, 0x80	; 128
    2578:	bf e3       	ldi	r27, 0x3F	; 63
    257a:	80 83       	st	Z, r24
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	a2 83       	std	Z+2, r26	; 0x02
    2580:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2582:	8e 01       	movw	r16, r28
    2584:	03 5b       	subi	r16, 0xB3	; 179
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	ef 5a       	subi	r30, 0xAF	; 175
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a e7       	ldi	r20, 0x7A	; 122
    259c:	55 e4       	ldi	r21, 0x45	; 69
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	f8 01       	movw	r30, r16
    25a8:	80 83       	st	Z, r24
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	a2 83       	std	Z+2, r26	; 0x02
    25ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b0:	fe 01       	movw	r30, r28
    25b2:	e3 5b       	subi	r30, 0xB3	; 179
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	44 f4       	brge	.+16     	; 0x25de <LCD_SendCommand+0x20e>
		__ticks = 1;
    25ce:	fe 01       	movw	r30, r28
    25d0:	e5 5b       	subi	r30, 0xB5	; 181
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	64 c0       	rjmp	.+200    	; 0x26a6 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    25de:	fe 01       	movw	r30, r28
    25e0:	e3 5b       	subi	r30, 0xB3	; 179
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	0c f0       	brlt	.+2      	; 0x25fe <LCD_SendCommand+0x22e>
    25fc:	43 c0       	rjmp	.+134    	; 0x2684 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	fe 01       	movw	r30, r28
    2600:	ef 5a       	subi	r30, 0xAF	; 175
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	60 81       	ld	r22, Z
    2606:	71 81       	ldd	r23, Z+1	; 0x01
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8e 01       	movw	r16, r28
    261e:	05 5b       	subi	r16, 0xB5	; 181
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24
    2634:	1f c0       	rjmp	.+62     	; 0x2674 <LCD_SendCommand+0x2a4>
    2636:	fe 01       	movw	r30, r28
    2638:	e7 5b       	subi	r30, 0xB7	; 183
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 e9       	ldi	r24, 0x90	; 144
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
    2644:	fe 01       	movw	r30, r28
    2646:	e7 5b       	subi	r30, 0xB7	; 183
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_SendCommand+0x27e>
    2652:	fe 01       	movw	r30, r28
    2654:	e7 5b       	subi	r30, 0xB7	; 183
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	de 01       	movw	r26, r28
    265e:	a5 5b       	subi	r26, 0xB5	; 181
    2660:	bf 4f       	sbci	r27, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	e5 5b       	subi	r30, 0xB5	; 181
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	11 96       	adiw	r26, 0x01	; 1
    2670:	9c 93       	st	X, r25
    2672:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	fe 01       	movw	r30, r28
    2676:	e5 5b       	subi	r30, 0xB5	; 181
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	d1 f6       	brne	.-76     	; 0x2636 <LCD_SendCommand+0x266>
    2682:	27 c0       	rjmp	.+78     	; 0x26d2 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	8e 01       	movw	r16, r28
    2686:	05 5b       	subi	r16, 0xB5	; 181
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	fe 01       	movw	r30, r28
    268c:	e3 5b       	subi	r30, 0xB3	; 179
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	f8 01       	movw	r30, r16
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	de 01       	movw	r26, r28
    26a8:	a9 5b       	subi	r26, 0xB9	; 185
    26aa:	bf 4f       	sbci	r27, 0xFF	; 255
    26ac:	fe 01       	movw	r30, r28
    26ae:	e5 5b       	subi	r30, 0xB5	; 181
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	8d 93       	st	X+, r24
    26b8:	9c 93       	st	X, r25
    26ba:	fe 01       	movw	r30, r28
    26bc:	e9 5b       	subi	r30, 0xB9	; 185
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	80 81       	ld	r24, Z
    26c2:	91 81       	ldd	r25, Z+1	; 0x01
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_SendCommand+0x2f4>
    26c8:	fe 01       	movw	r30, r28
    26ca:	e9 5b       	subi	r30, 0xB9	; 185
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    26d2:	de 01       	movw	r26, r28
    26d4:	ad 59       	subi	r26, 0x9D	; 157
    26d6:	bf 4f       	sbci	r27, 0xFF	; 255
    26d8:	fe 01       	movw	r30, r28
    26da:	ec 59       	subi	r30, 0x9C	; 156
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	82 95       	swap	r24
    26e2:	8f 70       	andi	r24, 0x0F	; 15
    26e4:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    26e6:	fe 01       	movw	r30, r28
    26e8:	ed 59       	subi	r30, 0x9D	; 157
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	98 2f       	mov	r25, r24
    26f0:	91 70       	andi	r25, 0x01	; 1
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	49 2f       	mov	r20, r25
    26f8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 59       	subi	r30, 0x9D	; 157
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	86 95       	lsr	r24
    2706:	98 2f       	mov	r25, r24
    2708:	91 70       	andi	r25, 0x01	; 1
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	49 2f       	mov	r20, r25
    2710:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2714:	fe 01       	movw	r30, r28
    2716:	ed 59       	subi	r30, 0x9D	; 157
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	86 95       	lsr	r24
    271e:	86 95       	lsr	r24
    2720:	98 2f       	mov	r25, r24
    2722:	91 70       	andi	r25, 0x01	; 1
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	62 e0       	ldi	r22, 0x02	; 2
    2728:	49 2f       	mov	r20, r25
    272a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    272e:	fe 01       	movw	r30, r28
    2730:	ed 59       	subi	r30, 0x9D	; 157
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	86 95       	lsr	r24
    2738:	86 95       	lsr	r24
    273a:	86 95       	lsr	r24
    273c:	98 2f       	mov	r25, r24
    273e:	91 70       	andi	r25, 0x01	; 1
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	64 e0       	ldi	r22, 0x04	; 4
    2744:	49 2f       	mov	r20, r25
    2746:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    274a:	fe 01       	movw	r30, r28
    274c:	ed 5b       	subi	r30, 0xBD	; 189
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	bf e3       	ldi	r27, 0x3F	; 63
    2758:	80 83       	st	Z, r24
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	a2 83       	std	Z+2, r26	; 0x02
    275e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	8e 01       	movw	r16, r28
    2762:	01 5c       	subi	r16, 0xC1	; 193
    2764:	1f 4f       	sbci	r17, 0xFF	; 255
    2766:	fe 01       	movw	r30, r28
    2768:	ed 5b       	subi	r30, 0xBD	; 189
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	55 e4       	ldi	r21, 0x45	; 69
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	80 83       	st	Z, r24
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	a2 83       	std	Z+2, r26	; 0x02
    278c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278e:	fe 01       	movw	r30, r28
    2790:	ff 96       	adiw	r30, 0x3f	; 63
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_SendCommand+0x3e4>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e af       	std	Y+62, r25	; 0x3e
    27b0:	8d af       	std	Y+61, r24	; 0x3d
    27b2:	46 c0       	rjmp	.+140    	; 0x2840 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    27b4:	fe 01       	movw	r30, r28
    27b6:	ff 96       	adiw	r30, 0x3f	; 63
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	64 f5       	brge	.+88     	; 0x2828 <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	fe 01       	movw	r30, r28
    27d2:	ed 5b       	subi	r30, 0xBD	; 189
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e af       	std	Y+62, r25	; 0x3e
    27fc:	8d af       	std	Y+61, r24	; 0x3d
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_SendCommand+0x44e>
    2800:	80 e9       	ldi	r24, 0x90	; 144
    2802:	91 e0       	ldi	r25, 0x01	; 1
    2804:	9c af       	std	Y+60, r25	; 0x3c
    2806:	8b af       	std	Y+59, r24	; 0x3b
    2808:	8b ad       	ldd	r24, Y+59	; 0x3b
    280a:	9c ad       	ldd	r25, Y+60	; 0x3c
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_SendCommand+0x43c>
    2810:	9c af       	std	Y+60, r25	; 0x3c
    2812:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8d ad       	ldd	r24, Y+61	; 0x3d
    2816:	9e ad       	ldd	r25, Y+62	; 0x3e
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9e af       	std	Y+62, r25	; 0x3e
    281c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2820:	9e ad       	ldd	r25, Y+62	; 0x3e
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_SendCommand+0x430>
    2826:	16 c0       	rjmp	.+44     	; 0x2854 <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	fe 01       	movw	r30, r28
    282a:	ff 96       	adiw	r30, 0x3f	; 63
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9e af       	std	Y+62, r25	; 0x3e
    283e:	8d af       	std	Y+61, r24	; 0x3d
    2840:	8d ad       	ldd	r24, Y+61	; 0x3d
    2842:	9e ad       	ldd	r25, Y+62	; 0x3e
    2844:	9a af       	std	Y+58, r25	; 0x3a
    2846:	89 af       	std	Y+57, r24	; 0x39
    2848:	89 ad       	ldd	r24, Y+57	; 0x39
    284a:	9a ad       	ldd	r25, Y+58	; 0x3a
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_SendCommand+0x47c>
    2850:	9a af       	std	Y+58, r25	; 0x3a
    2852:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	62 e0       	ldi	r22, 0x02	; 2
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a0 e8       	ldi	r26, 0x80	; 128
    2864:	bf e3       	ldi	r27, 0x3F	; 63
    2866:	8d ab       	std	Y+53, r24	; 0x35
    2868:	9e ab       	std	Y+54, r25	; 0x36
    286a:	af ab       	std	Y+55, r26	; 0x37
    286c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286e:	6d a9       	ldd	r22, Y+53	; 0x35
    2870:	7e a9       	ldd	r23, Y+54	; 0x36
    2872:	8f a9       	ldd	r24, Y+55	; 0x37
    2874:	98 ad       	ldd	r25, Y+56	; 0x38
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	4a e7       	ldi	r20, 0x7A	; 122
    287c:	55 e4       	ldi	r21, 0x45	; 69
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	89 ab       	std	Y+49, r24	; 0x31
    2888:	9a ab       	std	Y+50, r25	; 0x32
    288a:	ab ab       	std	Y+51, r26	; 0x33
    288c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    288e:	69 a9       	ldd	r22, Y+49	; 0x31
    2890:	7a a9       	ldd	r23, Y+50	; 0x32
    2892:	8b a9       	ldd	r24, Y+51	; 0x33
    2894:	9c a9       	ldd	r25, Y+52	; 0x34
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e8       	ldi	r20, 0x80	; 128
    289c:	5f e3       	ldi	r21, 0x3F	; 63
    289e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a2:	88 23       	and	r24, r24
    28a4:	2c f4       	brge	.+10     	; 0x28b0 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	98 ab       	std	Y+48, r25	; 0x30
    28ac:	8f a7       	std	Y+47, r24	; 0x2f
    28ae:	3f c0       	rjmp	.+126    	; 0x292e <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    28b0:	69 a9       	ldd	r22, Y+49	; 0x31
    28b2:	7a a9       	ldd	r23, Y+50	; 0x32
    28b4:	8b a9       	ldd	r24, Y+51	; 0x33
    28b6:	9c a9       	ldd	r25, Y+52	; 0x34
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	4c f5       	brge	.+82     	; 0x291a <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ca:	7e a9       	ldd	r23, Y+54	; 0x36
    28cc:	8f a9       	ldd	r24, Y+55	; 0x37
    28ce:	98 ad       	ldd	r25, Y+56	; 0x38
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e2       	ldi	r20, 0x20	; 32
    28d6:	51 e4       	ldi	r21, 0x41	; 65
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	98 ab       	std	Y+48, r25	; 0x30
    28ee:	8f a7       	std	Y+47, r24	; 0x2f
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <LCD_SendCommand+0x540>
    28f2:	80 e9       	ldi	r24, 0x90	; 144
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	9e a7       	std	Y+46, r25	; 0x2e
    28f8:	8d a7       	std	Y+45, r24	; 0x2d
    28fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    28fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <LCD_SendCommand+0x52e>
    2902:	9e a7       	std	Y+46, r25	; 0x2e
    2904:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2906:	8f a5       	ldd	r24, Y+47	; 0x2f
    2908:	98 a9       	ldd	r25, Y+48	; 0x30
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2910:	8f a5       	ldd	r24, Y+47	; 0x2f
    2912:	98 a9       	ldd	r25, Y+48	; 0x30
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	69 f7       	brne	.-38     	; 0x28f2 <LCD_SendCommand+0x522>
    2918:	14 c0       	rjmp	.+40     	; 0x2942 <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291a:	69 a9       	ldd	r22, Y+49	; 0x31
    291c:	7a a9       	ldd	r23, Y+50	; 0x32
    291e:	8b a9       	ldd	r24, Y+51	; 0x33
    2920:	9c a9       	ldd	r25, Y+52	; 0x34
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	98 ab       	std	Y+48, r25	; 0x30
    292c:	8f a7       	std	Y+47, r24	; 0x2f
    292e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2930:	98 a9       	ldd	r25, Y+48	; 0x30
    2932:	9c a7       	std	Y+44, r25	; 0x2c
    2934:	8b a7       	std	Y+43, r24	; 0x2b
    2936:	8b a5       	ldd	r24, Y+43	; 0x2b
    2938:	9c a5       	ldd	r25, Y+44	; 0x2c
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LCD_SendCommand+0x56a>
    293e:	9c a7       	std	Y+44, r25	; 0x2c
    2940:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	62 e0       	ldi	r22, 0x02	; 2
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a0 e8       	ldi	r26, 0x80	; 128
    2952:	bf e3       	ldi	r27, 0x3F	; 63
    2954:	8f a3       	std	Y+39, r24	; 0x27
    2956:	98 a7       	std	Y+40, r25	; 0x28
    2958:	a9 a7       	std	Y+41, r26	; 0x29
    295a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6f a1       	ldd	r22, Y+39	; 0x27
    295e:	78 a5       	ldd	r23, Y+40	; 0x28
    2960:	89 a5       	ldd	r24, Y+41	; 0x29
    2962:	9a a5       	ldd	r25, Y+42	; 0x2a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a e7       	ldi	r20, 0x7A	; 122
    296a:	55 e4       	ldi	r21, 0x45	; 69
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8b a3       	std	Y+35, r24	; 0x23
    2976:	9c a3       	std	Y+36, r25	; 0x24
    2978:	ad a3       	std	Y+37, r26	; 0x25
    297a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    297c:	6b a1       	ldd	r22, Y+35	; 0x23
    297e:	7c a1       	ldd	r23, Y+36	; 0x24
    2980:	8d a1       	ldd	r24, Y+37	; 0x25
    2982:	9e a1       	ldd	r25, Y+38	; 0x26
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <LCD_SendCommand+0x5ce>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9a a3       	std	Y+34, r25	; 0x22
    299a:	89 a3       	std	Y+33, r24	; 0x21
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    299e:	6b a1       	ldd	r22, Y+35	; 0x23
    29a0:	7c a1       	ldd	r23, Y+36	; 0x24
    29a2:	8d a1       	ldd	r24, Y+37	; 0x25
    29a4:	9e a1       	ldd	r25, Y+38	; 0x26
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6f a1       	ldd	r22, Y+39	; 0x27
    29b8:	78 a5       	ldd	r23, Y+40	; 0x28
    29ba:	89 a5       	ldd	r24, Y+41	; 0x29
    29bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9a a3       	std	Y+34, r25	; 0x22
    29dc:	89 a3       	std	Y+33, r24	; 0x21
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <LCD_SendCommand+0x62e>
    29e0:	80 e9       	ldi	r24, 0x90	; 144
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	98 a3       	std	Y+32, r25	; 0x20
    29e6:	8f 8f       	std	Y+31, r24	; 0x1f
    29e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ea:	98 a1       	ldd	r25, Y+32	; 0x20
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_SendCommand+0x61c>
    29f0:	98 a3       	std	Y+32, r25	; 0x20
    29f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	89 a1       	ldd	r24, Y+33	; 0x21
    29f6:	9a a1       	ldd	r25, Y+34	; 0x22
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2a00:	9a a1       	ldd	r25, Y+34	; 0x22
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <LCD_SendCommand+0x610>
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9a a3       	std	Y+34, r25	; 0x22
    2a1a:	89 a3       	std	Y+33, r24	; 0x21
    2a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a20:	9e 8f       	std	Y+30, r25	; 0x1e
    2a22:	8d 8f       	std	Y+29, r24	; 0x1d
    2a24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_SendCommand+0x658>
    2a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a2e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    2a30:	de 01       	movw	r26, r28
    2a32:	ad 59       	subi	r26, 0x9D	; 157
    2a34:	bf 4f       	sbci	r27, 0xFF	; 255
    2a36:	fe 01       	movw	r30, r28
    2a38:	ec 59       	subi	r30, 0x9C	; 156
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8f 70       	andi	r24, 0x0F	; 15
    2a40:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2a42:	fe 01       	movw	r30, r28
    2a44:	ed 59       	subi	r30, 0x9D	; 157
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	98 2f       	mov	r25, r24
    2a4c:	91 70       	andi	r25, 0x01	; 1
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	49 2f       	mov	r20, r25
    2a54:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2a58:	fe 01       	movw	r30, r28
    2a5a:	ed 59       	subi	r30, 0x9D	; 157
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	86 95       	lsr	r24
    2a62:	98 2f       	mov	r25, r24
    2a64:	91 70       	andi	r25, 0x01	; 1
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	49 2f       	mov	r20, r25
    2a6c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2a70:	fe 01       	movw	r30, r28
    2a72:	ed 59       	subi	r30, 0x9D	; 157
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	86 95       	lsr	r24
    2a7a:	86 95       	lsr	r24
    2a7c:	98 2f       	mov	r25, r24
    2a7e:	91 70       	andi	r25, 0x01	; 1
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	62 e0       	ldi	r22, 0x02	; 2
    2a84:	49 2f       	mov	r20, r25
    2a86:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ed 59       	subi	r30, 0x9D	; 157
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	86 95       	lsr	r24
    2a94:	86 95       	lsr	r24
    2a96:	86 95       	lsr	r24
    2a98:	98 2f       	mov	r25, r24
    2a9a:	91 70       	andi	r25, 0x01	; 1
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	64 e0       	ldi	r22, 0x04	; 4
    2aa0:	49 2f       	mov	r20, r25
    2aa2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e8       	ldi	r26, 0x80	; 128
    2aac:	bf e3       	ldi	r27, 0x3F	; 63
    2aae:	89 8f       	std	Y+25, r24	; 0x19
    2ab0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a e7       	ldi	r20, 0x7A	; 122
    2ac4:	55 e4       	ldi	r21, 0x45	; 69
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8d 8b       	std	Y+21, r24	; 0x15
    2ad0:	9e 8b       	std	Y+22, r25	; 0x16
    2ad2:	af 8b       	std	Y+23, r26	; 0x17
    2ad4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ada:	8f 89       	ldd	r24, Y+23	; 0x17
    2adc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <LCD_SendCommand+0x728>
		__ticks = 1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	4c f5       	brge	.+82     	; 0x2b62 <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b10:	69 8d       	ldd	r22, Y+25	; 0x19
    2b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <LCD_SendCommand+0x788>
    2b3a:	80 e9       	ldi	r24, 0x90	; 144
    2b3c:	91 e0       	ldi	r25, 0x01	; 1
    2b3e:	9a 8b       	std	Y+18, r25	; 0x12
    2b40:	89 8b       	std	Y+17, r24	; 0x11
    2b42:	89 89       	ldd	r24, Y+17	; 0x11
    2b44:	9a 89       	ldd	r25, Y+18	; 0x12
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <LCD_SendCommand+0x776>
    2b4a:	9a 8b       	std	Y+18, r25	; 0x12
    2b4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	9c 89       	ldd	r25, Y+20	; 0x14
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f7       	brne	.-38     	; 0x2b3a <LCD_SendCommand+0x76a>
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b62:	6d 89       	ldd	r22, Y+21	; 0x15
    2b64:	7e 89       	ldd	r23, Y+22	; 0x16
    2b66:	8f 89       	ldd	r24, Y+23	; 0x17
    2b68:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	98 8b       	std	Y+16, r25	; 0x10
    2b7c:	8f 87       	std	Y+15, r24	; 0x0f
    2b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b80:	98 89       	ldd	r25, Y+16	; 0x10
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_SendCommand+0x7b2>
    2b86:	98 8b       	std	Y+16, r25	; 0x10
    2b88:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e8       	ldi	r26, 0x80	; 128
    2b9a:	bf e3       	ldi	r27, 0x3F	; 63
    2b9c:	8b 87       	std	Y+11, r24	; 0x0b
    2b9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ba0:	ad 87       	std	Y+13, r26	; 0x0d
    2ba2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a e7       	ldi	r20, 0x7A	; 122
    2bb2:	55 e4       	ldi	r21, 0x45	; 69
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	8f 83       	std	Y+7, r24	; 0x07
    2bbe:	98 87       	std	Y+8, r25	; 0x08
    2bc0:	a9 87       	std	Y+9, r26	; 0x09
    2bc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc6:	78 85       	ldd	r23, Y+8	; 0x08
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <LCD_SendCommand+0x816>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <LCD_SendCommand+0x876>
    2c28:	80 e9       	ldi	r24, 0x90	; 144
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	9c 83       	std	Y+4, r25	; 0x04
    2c2e:	8b 83       	std	Y+3, r24	; 0x03
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	9c 81       	ldd	r25, Y+4	; 0x04
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_SendCommand+0x864>
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <LCD_SendCommand+0x858>
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	6f 81       	ldd	r22, Y+7	; 0x07
    2c52:	78 85       	ldd	r23, Y+8	; 0x08
    2c54:	89 85       	ldd	r24, Y+9	; 0x09
    2c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_SendCommand+0x8a0>
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    2c78:	cc 59       	subi	r28, 0x9C	; 156
    2c7a:	df 4f       	sbci	r29, 0xFF	; 255
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	c4 56       	subi	r28, 0x64	; 100
    2c9e:	d0 40       	sbci	r29, 0x00	; 0
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	fe 01       	movw	r30, r28
    2cac:	ec 59       	subi	r30, 0x9C	; 156
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	63 e0       	ldi	r22, 0x03	; 3
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e1 5a       	subi	r30, 0xA1	; 161
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 e8       	ldi	r26, 0x80	; 128
    2cc8:	bf e3       	ldi	r27, 0x3F	; 63
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	05 5a       	subi	r16, 0xA5	; 165
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e1 5a       	subi	r30, 0xA1	; 161
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	60 81       	ld	r22, Z
    2ce0:	71 81       	ldd	r23, Z+1	; 0x01
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	93 81       	ldd	r25, Z+3	; 0x03
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a e7       	ldi	r20, 0x7A	; 122
    2cec:	55 e4       	ldi	r21, 0x45	; 69
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	80 83       	st	Z, r24
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	a2 83       	std	Z+2, r26	; 0x02
    2cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e5 5a       	subi	r30, 0xA5	; 165
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	44 f4       	brge	.+16     	; 0x2d2e <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e7 5a       	subi	r30, 0xA7	; 167
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	80 83       	st	Z, r24
    2d2c:	64 c0       	rjmp	.+200    	; 0x2df6 <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e5 5a       	subi	r30, 0xA5	; 165
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	3f ef       	ldi	r19, 0xFF	; 255
    2d40:	4f e7       	ldi	r20, 0x7F	; 127
    2d42:	57 e4       	ldi	r21, 0x47	; 71
    2d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d48:	18 16       	cp	r1, r24
    2d4a:	0c f0       	brlt	.+2      	; 0x2d4e <LCD_DisplayCharacter+0xbe>
    2d4c:	43 c0       	rjmp	.+134    	; 0x2dd4 <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e1 5a       	subi	r30, 0xA1	; 161
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	8e 01       	movw	r16, r28
    2d6e:	07 5a       	subi	r16, 0xA7	; 167
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	f8 01       	movw	r30, r16
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
    2d84:	1f c0       	rjmp	.+62     	; 0x2dc4 <LCD_DisplayCharacter+0x134>
    2d86:	fe 01       	movw	r30, r28
    2d88:	e9 5a       	subi	r30, 0xA9	; 169
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 e9       	ldi	r24, 0x90	; 144
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
    2d94:	fe 01       	movw	r30, r28
    2d96:	e9 5a       	subi	r30, 0xA9	; 169
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <LCD_DisplayCharacter+0x10e>
    2da2:	fe 01       	movw	r30, r28
    2da4:	e9 5a       	subi	r30, 0xA9	; 169
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	de 01       	movw	r26, r28
    2dae:	a7 5a       	subi	r26, 0xA7	; 167
    2db0:	bf 4f       	sbci	r27, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 5a       	subi	r30, 0xA7	; 167
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	11 96       	adiw	r26, 0x01	; 1
    2dc0:	9c 93       	st	X, r25
    2dc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 5a       	subi	r30, 0xA7	; 167
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	d1 f6       	brne	.-76     	; 0x2d86 <LCD_DisplayCharacter+0xf6>
    2dd2:	27 c0       	rjmp	.+78     	; 0x2e22 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	8e 01       	movw	r16, r28
    2dd6:	07 5a       	subi	r16, 0xA7	; 167
    2dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e5 5a       	subi	r30, 0xA5	; 165
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	f8 01       	movw	r30, r16
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
    2df6:	de 01       	movw	r26, r28
    2df8:	ab 5a       	subi	r26, 0xAB	; 171
    2dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e7 5a       	subi	r30, 0xA7	; 167
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	8d 93       	st	X+, r24
    2e08:	9c 93       	st	X, r25
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	eb 5a       	subi	r30, 0xAB	; 171
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_DisplayCharacter+0x184>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	eb 5a       	subi	r30, 0xAB	; 171
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	62 e0       	ldi	r22, 0x02	; 2
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	ef 5a       	subi	r30, 0xAF	; 175
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	a0 e8       	ldi	r26, 0x80	; 128
    2e38:	bf e3       	ldi	r27, 0x3F	; 63
    2e3a:	80 83       	st	Z, r24
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	a2 83       	std	Z+2, r26	; 0x02
    2e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	8e 01       	movw	r16, r28
    2e44:	03 5b       	subi	r16, 0xB3	; 179
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ef 5a       	subi	r30, 0xAF	; 175
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4a e7       	ldi	r20, 0x7A	; 122
    2e5c:	55 e4       	ldi	r21, 0x45	; 69
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	f8 01       	movw	r30, r16
    2e68:	80 83       	st	Z, r24
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	a2 83       	std	Z+2, r26	; 0x02
    2e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e70:	fe 01       	movw	r30, r28
    2e72:	e3 5b       	subi	r30, 0xB3	; 179
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	44 f4       	brge	.+16     	; 0x2e9e <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e5 5b       	subi	r30, 0xB5	; 181
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
    2e9c:	64 c0       	rjmp	.+200    	; 0x2f66 <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e3 5b       	subi	r30, 0xB3	; 179
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	3f ef       	ldi	r19, 0xFF	; 255
    2eb0:	4f e7       	ldi	r20, 0x7F	; 127
    2eb2:	57 e4       	ldi	r21, 0x47	; 71
    2eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	0c f0       	brlt	.+2      	; 0x2ebe <LCD_DisplayCharacter+0x22e>
    2ebc:	43 c0       	rjmp	.+134    	; 0x2f44 <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ef 5a       	subi	r30, 0xAF	; 175
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8e 01       	movw	r16, r28
    2ede:	05 5b       	subi	r16, 0xB5	; 181
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	f8 01       	movw	r30, r16
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
    2ef4:	1f c0       	rjmp	.+62     	; 0x2f34 <LCD_DisplayCharacter+0x2a4>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e7 5b       	subi	r30, 0xB7	; 183
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 e9       	ldi	r24, 0x90	; 144
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	80 83       	st	Z, r24
    2f04:	fe 01       	movw	r30, r28
    2f06:	e7 5b       	subi	r30, 0xB7	; 183
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_DisplayCharacter+0x27e>
    2f12:	fe 01       	movw	r30, r28
    2f14:	e7 5b       	subi	r30, 0xB7	; 183
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	de 01       	movw	r26, r28
    2f1e:	a5 5b       	subi	r26, 0xB5	; 181
    2f20:	bf 4f       	sbci	r27, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	e5 5b       	subi	r30, 0xB5	; 181
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	11 96       	adiw	r26, 0x01	; 1
    2f30:	9c 93       	st	X, r25
    2f32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	fe 01       	movw	r30, r28
    2f36:	e5 5b       	subi	r30, 0xB5	; 181
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	d1 f6       	brne	.-76     	; 0x2ef6 <LCD_DisplayCharacter+0x266>
    2f42:	27 c0       	rjmp	.+78     	; 0x2f92 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	8e 01       	movw	r16, r28
    2f46:	05 5b       	subi	r16, 0xB5	; 181
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e3 5b       	subi	r30, 0xB3	; 179
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	f8 01       	movw	r30, r16
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    2f66:	de 01       	movw	r26, r28
    2f68:	a9 5b       	subi	r26, 0xB9	; 185
    2f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e5 5b       	subi	r30, 0xB5	; 181
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	8d 93       	st	X+, r24
    2f78:	9c 93       	st	X, r25
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e9 5b       	subi	r30, 0xB9	; 185
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <LCD_DisplayCharacter+0x2f4>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e9 5b       	subi	r30, 0xB9	; 185
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    2f92:	de 01       	movw	r26, r28
    2f94:	ad 59       	subi	r26, 0x9D	; 157
    2f96:	bf 4f       	sbci	r27, 0xFF	; 255
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ec 59       	subi	r30, 0x9C	; 156
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	82 95       	swap	r24
    2fa2:	8f 70       	andi	r24, 0x0F	; 15
    2fa4:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	ed 59       	subi	r30, 0x9D	; 157
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	98 2f       	mov	r25, r24
    2fb0:	91 70       	andi	r25, 0x01	; 1
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	49 2f       	mov	r20, r25
    2fb8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ed 59       	subi	r30, 0x9D	; 157
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 81       	ld	r24, Z
    2fc4:	86 95       	lsr	r24
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	91 70       	andi	r25, 0x01	; 1
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	61 e0       	ldi	r22, 0x01	; 1
    2fce:	49 2f       	mov	r20, r25
    2fd0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ed 59       	subi	r30, 0x9D	; 157
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	80 81       	ld	r24, Z
    2fdc:	86 95       	lsr	r24
    2fde:	86 95       	lsr	r24
    2fe0:	98 2f       	mov	r25, r24
    2fe2:	91 70       	andi	r25, 0x01	; 1
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	62 e0       	ldi	r22, 0x02	; 2
    2fe8:	49 2f       	mov	r20, r25
    2fea:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ed 59       	subi	r30, 0x9D	; 157
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	80 81       	ld	r24, Z
    2ff6:	86 95       	lsr	r24
    2ff8:	86 95       	lsr	r24
    2ffa:	86 95       	lsr	r24
    2ffc:	98 2f       	mov	r25, r24
    2ffe:	91 70       	andi	r25, 0x01	; 1
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	64 e0       	ldi	r22, 0x04	; 4
    3004:	49 2f       	mov	r20, r25
    3006:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    300a:	fe 01       	movw	r30, r28
    300c:	ed 5b       	subi	r30, 0xBD	; 189
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	a0 e8       	ldi	r26, 0x80	; 128
    3016:	bf e3       	ldi	r27, 0x3F	; 63
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	a2 83       	std	Z+2, r26	; 0x02
    301e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3020:	8e 01       	movw	r16, r28
    3022:	01 5c       	subi	r16, 0xC1	; 193
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
    3026:	fe 01       	movw	r30, r28
    3028:	ed 5b       	subi	r30, 0xBD	; 189
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	60 81       	ld	r22, Z
    302e:	71 81       	ldd	r23, Z+1	; 0x01
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	93 81       	ldd	r25, Z+3	; 0x03
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	4a e7       	ldi	r20, 0x7A	; 122
    303a:	55 e4       	ldi	r21, 0x45	; 69
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	f8 01       	movw	r30, r16
    3046:	80 83       	st	Z, r24
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	a2 83       	std	Z+2, r26	; 0x02
    304c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    304e:	fe 01       	movw	r30, r28
    3050:	ff 96       	adiw	r30, 0x3f	; 63
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	93 81       	ldd	r25, Z+3	; 0x03
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e8       	ldi	r20, 0x80	; 128
    3060:	5f e3       	ldi	r21, 0x3F	; 63
    3062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3066:	88 23       	and	r24, r24
    3068:	2c f4       	brge	.+10     	; 0x3074 <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	9e af       	std	Y+62, r25	; 0x3e
    3070:	8d af       	std	Y+61, r24	; 0x3d
    3072:	46 c0       	rjmp	.+140    	; 0x3100 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    3074:	fe 01       	movw	r30, r28
    3076:	ff 96       	adiw	r30, 0x3f	; 63
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	64 f5       	brge	.+88     	; 0x30e8 <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	fe 01       	movw	r30, r28
    3092:	ed 5b       	subi	r30, 0xBD	; 189
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	60 81       	ld	r22, Z
    3098:	71 81       	ldd	r23, Z+1	; 0x01
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9e af       	std	Y+62, r25	; 0x3e
    30bc:	8d af       	std	Y+61, r24	; 0x3d
    30be:	0f c0       	rjmp	.+30     	; 0x30de <LCD_DisplayCharacter+0x44e>
    30c0:	80 e9       	ldi	r24, 0x90	; 144
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	9c af       	std	Y+60, r25	; 0x3c
    30c6:	8b af       	std	Y+59, r24	; 0x3b
    30c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    30ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <LCD_DisplayCharacter+0x43c>
    30d0:	9c af       	std	Y+60, r25	; 0x3c
    30d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    30d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	9e af       	std	Y+62, r25	; 0x3e
    30dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	8d ad       	ldd	r24, Y+61	; 0x3d
    30e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <LCD_DisplayCharacter+0x430>
    30e6:	16 c0       	rjmp	.+44     	; 0x3114 <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	fe 01       	movw	r30, r28
    30ea:	ff 96       	adiw	r30, 0x3f	; 63
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	9e af       	std	Y+62, r25	; 0x3e
    30fe:	8d af       	std	Y+61, r24	; 0x3d
    3100:	8d ad       	ldd	r24, Y+61	; 0x3d
    3102:	9e ad       	ldd	r25, Y+62	; 0x3e
    3104:	9a af       	std	Y+58, r25	; 0x3a
    3106:	89 af       	std	Y+57, r24	; 0x39
    3108:	89 ad       	ldd	r24, Y+57	; 0x39
    310a:	9a ad       	ldd	r25, Y+58	; 0x3a
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <LCD_DisplayCharacter+0x47c>
    3110:	9a af       	std	Y+58, r25	; 0x3a
    3112:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	62 e0       	ldi	r22, 0x02	; 2
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e8       	ldi	r26, 0x80	; 128
    3124:	bf e3       	ldi	r27, 0x3F	; 63
    3126:	8d ab       	std	Y+53, r24	; 0x35
    3128:	9e ab       	std	Y+54, r25	; 0x36
    312a:	af ab       	std	Y+55, r26	; 0x37
    312c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312e:	6d a9       	ldd	r22, Y+53	; 0x35
    3130:	7e a9       	ldd	r23, Y+54	; 0x36
    3132:	8f a9       	ldd	r24, Y+55	; 0x37
    3134:	98 ad       	ldd	r25, Y+56	; 0x38
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	4a e7       	ldi	r20, 0x7A	; 122
    313c:	55 e4       	ldi	r21, 0x45	; 69
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	89 ab       	std	Y+49, r24	; 0x31
    3148:	9a ab       	std	Y+50, r25	; 0x32
    314a:	ab ab       	std	Y+51, r26	; 0x33
    314c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    314e:	69 a9       	ldd	r22, Y+49	; 0x31
    3150:	7a a9       	ldd	r23, Y+50	; 0x32
    3152:	8b a9       	ldd	r24, Y+51	; 0x33
    3154:	9c a9       	ldd	r25, Y+52	; 0x34
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e8       	ldi	r20, 0x80	; 128
    315c:	5f e3       	ldi	r21, 0x3F	; 63
    315e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3162:	88 23       	and	r24, r24
    3164:	2c f4       	brge	.+10     	; 0x3170 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	98 ab       	std	Y+48, r25	; 0x30
    316c:	8f a7       	std	Y+47, r24	; 0x2f
    316e:	3f c0       	rjmp	.+126    	; 0x31ee <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    3170:	69 a9       	ldd	r22, Y+49	; 0x31
    3172:	7a a9       	ldd	r23, Y+50	; 0x32
    3174:	8b a9       	ldd	r24, Y+51	; 0x33
    3176:	9c a9       	ldd	r25, Y+52	; 0x34
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	3f ef       	ldi	r19, 0xFF	; 255
    317c:	4f e7       	ldi	r20, 0x7F	; 127
    317e:	57 e4       	ldi	r21, 0x47	; 71
    3180:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3184:	18 16       	cp	r1, r24
    3186:	4c f5       	brge	.+82     	; 0x31da <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3188:	6d a9       	ldd	r22, Y+53	; 0x35
    318a:	7e a9       	ldd	r23, Y+54	; 0x36
    318c:	8f a9       	ldd	r24, Y+55	; 0x37
    318e:	98 ad       	ldd	r25, Y+56	; 0x38
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e2       	ldi	r20, 0x20	; 32
    3196:	51 e4       	ldi	r21, 0x41	; 65
    3198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	98 ab       	std	Y+48, r25	; 0x30
    31ae:	8f a7       	std	Y+47, r24	; 0x2f
    31b0:	0f c0       	rjmp	.+30     	; 0x31d0 <LCD_DisplayCharacter+0x540>
    31b2:	80 e9       	ldi	r24, 0x90	; 144
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	9e a7       	std	Y+46, r25	; 0x2e
    31b8:	8d a7       	std	Y+45, r24	; 0x2d
    31ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    31bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <LCD_DisplayCharacter+0x52e>
    31c2:	9e a7       	std	Y+46, r25	; 0x2e
    31c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c8:	98 a9       	ldd	r25, Y+48	; 0x30
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	98 ab       	std	Y+48, r25	; 0x30
    31ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d2:	98 a9       	ldd	r25, Y+48	; 0x30
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	69 f7       	brne	.-38     	; 0x31b2 <LCD_DisplayCharacter+0x522>
    31d8:	14 c0       	rjmp	.+40     	; 0x3202 <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31da:	69 a9       	ldd	r22, Y+49	; 0x31
    31dc:	7a a9       	ldd	r23, Y+50	; 0x32
    31de:	8b a9       	ldd	r24, Y+51	; 0x33
    31e0:	9c a9       	ldd	r25, Y+52	; 0x34
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	98 ab       	std	Y+48, r25	; 0x30
    31ec:	8f a7       	std	Y+47, r24	; 0x2f
    31ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    31f0:	98 a9       	ldd	r25, Y+48	; 0x30
    31f2:	9c a7       	std	Y+44, r25	; 0x2c
    31f4:	8b a7       	std	Y+43, r24	; 0x2b
    31f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <LCD_DisplayCharacter+0x56a>
    31fe:	9c a7       	std	Y+44, r25	; 0x2c
    3200:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	62 e0       	ldi	r22, 0x02	; 2
    3206:	41 e0       	ldi	r20, 0x01	; 1
    3208:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e8       	ldi	r26, 0x80	; 128
    3212:	bf e3       	ldi	r27, 0x3F	; 63
    3214:	8f a3       	std	Y+39, r24	; 0x27
    3216:	98 a7       	std	Y+40, r25	; 0x28
    3218:	a9 a7       	std	Y+41, r26	; 0x29
    321a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	6f a1       	ldd	r22, Y+39	; 0x27
    321e:	78 a5       	ldd	r23, Y+40	; 0x28
    3220:	89 a5       	ldd	r24, Y+41	; 0x29
    3222:	9a a5       	ldd	r25, Y+42	; 0x2a
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	4a e7       	ldi	r20, 0x7A	; 122
    322a:	55 e4       	ldi	r21, 0x45	; 69
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	8b a3       	std	Y+35, r24	; 0x23
    3236:	9c a3       	std	Y+36, r25	; 0x24
    3238:	ad a3       	std	Y+37, r26	; 0x25
    323a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    323c:	6b a1       	ldd	r22, Y+35	; 0x23
    323e:	7c a1       	ldd	r23, Y+36	; 0x24
    3240:	8d a1       	ldd	r24, Y+37	; 0x25
    3242:	9e a1       	ldd	r25, Y+38	; 0x26
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	2c f4       	brge	.+10     	; 0x325e <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	9a a3       	std	Y+34, r25	; 0x22
    325a:	89 a3       	std	Y+33, r24	; 0x21
    325c:	3f c0       	rjmp	.+126    	; 0x32dc <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    325e:	6b a1       	ldd	r22, Y+35	; 0x23
    3260:	7c a1       	ldd	r23, Y+36	; 0x24
    3262:	8d a1       	ldd	r24, Y+37	; 0x25
    3264:	9e a1       	ldd	r25, Y+38	; 0x26
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	3f ef       	ldi	r19, 0xFF	; 255
    326a:	4f e7       	ldi	r20, 0x7F	; 127
    326c:	57 e4       	ldi	r21, 0x47	; 71
    326e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3272:	18 16       	cp	r1, r24
    3274:	4c f5       	brge	.+82     	; 0x32c8 <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3276:	6f a1       	ldd	r22, Y+39	; 0x27
    3278:	78 a5       	ldd	r23, Y+40	; 0x28
    327a:	89 a5       	ldd	r24, Y+41	; 0x29
    327c:	9a a5       	ldd	r25, Y+42	; 0x2a
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e2       	ldi	r20, 0x20	; 32
    3284:	51 e4       	ldi	r21, 0x41	; 65
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9a a3       	std	Y+34, r25	; 0x22
    329c:	89 a3       	std	Y+33, r24	; 0x21
    329e:	0f c0       	rjmp	.+30     	; 0x32be <LCD_DisplayCharacter+0x62e>
    32a0:	80 e9       	ldi	r24, 0x90	; 144
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	98 a3       	std	Y+32, r25	; 0x20
    32a6:	8f 8f       	std	Y+31, r24	; 0x1f
    32a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32aa:	98 a1       	ldd	r25, Y+32	; 0x20
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_DisplayCharacter+0x61c>
    32b0:	98 a3       	std	Y+32, r25	; 0x20
    32b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b4:	89 a1       	ldd	r24, Y+33	; 0x21
    32b6:	9a a1       	ldd	r25, Y+34	; 0x22
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	9a a3       	std	Y+34, r25	; 0x22
    32bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	89 a1       	ldd	r24, Y+33	; 0x21
    32c0:	9a a1       	ldd	r25, Y+34	; 0x22
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	69 f7       	brne	.-38     	; 0x32a0 <LCD_DisplayCharacter+0x610>
    32c6:	14 c0       	rjmp	.+40     	; 0x32f0 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ca:	7c a1       	ldd	r23, Y+36	; 0x24
    32cc:	8d a1       	ldd	r24, Y+37	; 0x25
    32ce:	9e a1       	ldd	r25, Y+38	; 0x26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9a a3       	std	Y+34, r25	; 0x22
    32da:	89 a3       	std	Y+33, r24	; 0x21
    32dc:	89 a1       	ldd	r24, Y+33	; 0x21
    32de:	9a a1       	ldd	r25, Y+34	; 0x22
    32e0:	9e 8f       	std	Y+30, r25	; 0x1e
    32e2:	8d 8f       	std	Y+29, r24	; 0x1d
    32e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <LCD_DisplayCharacter+0x658>
    32ec:	9e 8f       	std	Y+30, r25	; 0x1e
    32ee:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    32f0:	de 01       	movw	r26, r28
    32f2:	ad 59       	subi	r26, 0x9D	; 157
    32f4:	bf 4f       	sbci	r27, 0xFF	; 255
    32f6:	fe 01       	movw	r30, r28
    32f8:	ec 59       	subi	r30, 0x9C	; 156
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	8f 70       	andi	r24, 0x0F	; 15
    3300:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3302:	fe 01       	movw	r30, r28
    3304:	ed 59       	subi	r30, 0x9D	; 157
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	80 81       	ld	r24, Z
    330a:	98 2f       	mov	r25, r24
    330c:	91 70       	andi	r25, 0x01	; 1
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	60 e0       	ldi	r22, 0x00	; 0
    3312:	49 2f       	mov	r20, r25
    3314:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    3318:	fe 01       	movw	r30, r28
    331a:	ed 59       	subi	r30, 0x9D	; 157
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	86 95       	lsr	r24
    3322:	98 2f       	mov	r25, r24
    3324:	91 70       	andi	r25, 0x01	; 1
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	49 2f       	mov	r20, r25
    332c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3330:	fe 01       	movw	r30, r28
    3332:	ed 59       	subi	r30, 0x9D	; 157
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 81       	ld	r24, Z
    3338:	86 95       	lsr	r24
    333a:	86 95       	lsr	r24
    333c:	98 2f       	mov	r25, r24
    333e:	91 70       	andi	r25, 0x01	; 1
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	62 e0       	ldi	r22, 0x02	; 2
    3344:	49 2f       	mov	r20, r25
    3346:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    334a:	fe 01       	movw	r30, r28
    334c:	ed 59       	subi	r30, 0x9D	; 157
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	80 81       	ld	r24, Z
    3352:	86 95       	lsr	r24
    3354:	86 95       	lsr	r24
    3356:	86 95       	lsr	r24
    3358:	98 2f       	mov	r25, r24
    335a:	91 70       	andi	r25, 0x01	; 1
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	64 e0       	ldi	r22, 0x04	; 4
    3360:	49 2f       	mov	r20, r25
    3362:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	a0 e8       	ldi	r26, 0x80	; 128
    336c:	bf e3       	ldi	r27, 0x3F	; 63
    336e:	89 8f       	std	Y+25, r24	; 0x19
    3370:	9a 8f       	std	Y+26, r25	; 0x1a
    3372:	ab 8f       	std	Y+27, r26	; 0x1b
    3374:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	69 8d       	ldd	r22, Y+25	; 0x19
    3378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    337a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    337c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a e7       	ldi	r20, 0x7A	; 122
    3384:	55 e4       	ldi	r21, 0x45	; 69
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	8d 8b       	std	Y+21, r24	; 0x15
    3390:	9e 8b       	std	Y+22, r25	; 0x16
    3392:	af 8b       	std	Y+23, r26	; 0x17
    3394:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3396:	6d 89       	ldd	r22, Y+21	; 0x15
    3398:	7e 89       	ldd	r23, Y+22	; 0x16
    339a:	8f 89       	ldd	r24, Y+23	; 0x17
    339c:	98 8d       	ldd	r25, Y+24	; 0x18
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9c 8b       	std	Y+20, r25	; 0x14
    33b4:	8b 8b       	std	Y+19, r24	; 0x13
    33b6:	3f c0       	rjmp	.+126    	; 0x3436 <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    33b8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ba:	7e 89       	ldd	r23, Y+22	; 0x16
    33bc:	8f 89       	ldd	r24, Y+23	; 0x17
    33be:	98 8d       	ldd	r25, Y+24	; 0x18
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	3f ef       	ldi	r19, 0xFF	; 255
    33c4:	4f e7       	ldi	r20, 0x7F	; 127
    33c6:	57 e4       	ldi	r21, 0x47	; 71
    33c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	4c f5       	brge	.+82     	; 0x3422 <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d0:	69 8d       	ldd	r22, Y+25	; 0x19
    33d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9c 8b       	std	Y+20, r25	; 0x14
    33f6:	8b 8b       	std	Y+19, r24	; 0x13
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <LCD_DisplayCharacter+0x788>
    33fa:	80 e9       	ldi	r24, 0x90	; 144
    33fc:	91 e0       	ldi	r25, 0x01	; 1
    33fe:	9a 8b       	std	Y+18, r25	; 0x12
    3400:	89 8b       	std	Y+17, r24	; 0x11
    3402:	89 89       	ldd	r24, Y+17	; 0x11
    3404:	9a 89       	ldd	r25, Y+18	; 0x12
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <LCD_DisplayCharacter+0x776>
    340a:	9a 8b       	std	Y+18, r25	; 0x12
    340c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	8b 89       	ldd	r24, Y+19	; 0x13
    3410:	9c 89       	ldd	r25, Y+20	; 0x14
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	9c 8b       	std	Y+20, r25	; 0x14
    3416:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	8b 89       	ldd	r24, Y+19	; 0x13
    341a:	9c 89       	ldd	r25, Y+20	; 0x14
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	69 f7       	brne	.-38     	; 0x33fa <LCD_DisplayCharacter+0x76a>
    3420:	14 c0       	rjmp	.+40     	; 0x344a <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	6d 89       	ldd	r22, Y+21	; 0x15
    3424:	7e 89       	ldd	r23, Y+22	; 0x16
    3426:	8f 89       	ldd	r24, Y+23	; 0x17
    3428:	98 8d       	ldd	r25, Y+24	; 0x18
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9c 8b       	std	Y+20, r25	; 0x14
    3434:	8b 8b       	std	Y+19, r24	; 0x13
    3436:	8b 89       	ldd	r24, Y+19	; 0x13
    3438:	9c 89       	ldd	r25, Y+20	; 0x14
    343a:	98 8b       	std	Y+16, r25	; 0x10
    343c:	8f 87       	std	Y+15, r24	; 0x0f
    343e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3440:	98 89       	ldd	r25, Y+16	; 0x10
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <LCD_DisplayCharacter+0x7b2>
    3446:	98 8b       	std	Y+16, r25	; 0x10
    3448:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	40 e0       	ldi	r20, 0x00	; 0
    3450:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a0 e8       	ldi	r26, 0x80	; 128
    345a:	bf e3       	ldi	r27, 0x3F	; 63
    345c:	8b 87       	std	Y+11, r24	; 0x0b
    345e:	9c 87       	std	Y+12, r25	; 0x0c
    3460:	ad 87       	std	Y+13, r26	; 0x0d
    3462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3464:	6b 85       	ldd	r22, Y+11	; 0x0b
    3466:	7c 85       	ldd	r23, Y+12	; 0x0c
    3468:	8d 85       	ldd	r24, Y+13	; 0x0d
    346a:	9e 85       	ldd	r25, Y+14	; 0x0e
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4a e7       	ldi	r20, 0x7A	; 122
    3472:	55 e4       	ldi	r21, 0x45	; 69
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8f 83       	std	Y+7, r24	; 0x07
    347e:	98 87       	std	Y+8, r25	; 0x08
    3480:	a9 87       	std	Y+9, r26	; 0x09
    3482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3484:	6f 81       	ldd	r22, Y+7	; 0x07
    3486:	78 85       	ldd	r23, Y+8	; 0x08
    3488:	89 85       	ldd	r24, Y+9	; 0x09
    348a:	9a 85       	ldd	r25, Y+10	; 0x0a
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e8       	ldi	r20, 0x80	; 128
    3492:	5f e3       	ldi	r21, 0x3F	; 63
    3494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3498:	88 23       	and	r24, r24
    349a:	2c f4       	brge	.+10     	; 0x34a6 <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
    34a4:	3f c0       	rjmp	.+126    	; 0x3524 <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    34a6:	6f 81       	ldd	r22, Y+7	; 0x07
    34a8:	78 85       	ldd	r23, Y+8	; 0x08
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	3f ef       	ldi	r19, 0xFF	; 255
    34b2:	4f e7       	ldi	r20, 0x7F	; 127
    34b4:	57 e4       	ldi	r21, 0x47	; 71
    34b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ba:	18 16       	cp	r1, r24
    34bc:	4c f5       	brge	.+82     	; 0x3510 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34be:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	bc 01       	movw	r22, r24
    34d8:	cd 01       	movw	r24, r26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9e 83       	std	Y+6, r25	; 0x06
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <LCD_DisplayCharacter+0x876>
    34e8:	80 e9       	ldi	r24, 0x90	; 144
    34ea:	91 e0       	ldi	r25, 0x01	; 1
    34ec:	9c 83       	std	Y+4, r25	; 0x04
    34ee:	8b 83       	std	Y+3, r24	; 0x03
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	9c 81       	ldd	r25, Y+4	; 0x04
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <LCD_DisplayCharacter+0x864>
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fc:	8d 81       	ldd	r24, Y+5	; 0x05
    34fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	00 97       	sbiw	r24, 0x00	; 0
    350c:	69 f7       	brne	.-38     	; 0x34e8 <LCD_DisplayCharacter+0x858>
    350e:	14 c0       	rjmp	.+40     	; 0x3538 <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9e 83       	std	Y+6, r25	; 0x06
    3522:	8d 83       	std	Y+5, r24	; 0x05
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	89 83       	std	Y+1, r24	; 0x01
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <LCD_DisplayCharacter+0x8a0>
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    3538:	80 91 9f 02 	lds	r24, 0x029F
    353c:	8f 5f       	subi	r24, 0xFF	; 255
    353e:	80 93 9f 02 	sts	0x029F, r24
    if(col_global == MAX_NUM_COL_LCD)
    3542:	80 91 9f 02 	lds	r24, 0x029F
    3546:	84 31       	cpi	r24, 0x14	; 20
    3548:	69 f4       	brne	.+26     	; 0x3564 <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    354a:	80 91 9e 02 	lds	r24, 0x029E
    354e:	8f 5f       	subi	r24, 0xFF	; 255
    3550:	80 93 9e 02 	sts	0x029E, r24
        col_global = 0 ;
    3554:	10 92 9f 02 	sts	0x029F, r1
        if(row_global == MAX_NUM_COL_LCD)
    3558:	80 91 9e 02 	lds	r24, 0x029E
    355c:	84 31       	cpi	r24, 0x14	; 20
    355e:	11 f4       	brne	.+4      	; 0x3564 <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    3560:	10 92 9e 02 	sts	0x029E, r1
    }
}
    3564:	cc 59       	subi	r28, 0x9C	; 156
    3566:	df 4f       	sbci	r29, 0xFF	; 255
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	08 95       	ret

0000357c <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	00 d0       	rcall	.+0      	; 0x3582 <LCD_DisplayString+0x6>
    3582:	0f 92       	push	r0
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	9b 83       	std	Y+3, r25	; 0x03
    358a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    358c:	19 82       	std	Y+1, r1	; 0x01
    358e:	0e c0       	rjmp	.+28     	; 0x35ac <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	9b 81       	ldd	r25, Y+3	; 0x03
    359a:	fc 01       	movw	r30, r24
    359c:	e2 0f       	add	r30, r18
    359e:	f3 1f       	adc	r31, r19
    35a0:	80 81       	ld	r24, Z
    35a2:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
        it++;
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	8f 5f       	subi	r24, 0xFF	; 255
    35aa:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	9b 81       	ldd	r25, Y+3	; 0x03
    35b6:	fc 01       	movw	r30, r24
    35b8:	e2 0f       	add	r30, r18
    35ba:	f3 1f       	adc	r31, r19
    35bc:	80 81       	ld	r24, Z
    35be:	88 23       	and	r24, r24
    35c0:	39 f7       	brne	.-50     	; 0x3590 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	cf 91       	pop	r28
    35ca:	df 91       	pop	r29
    35cc:	08 95       	ret

000035ce <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	00 d0       	rcall	.+0      	; 0x35d4 <LCD_MoveCursor+0x6>
    35d4:	00 d0       	rcall	.+0      	; 0x35d6 <LCD_MoveCursor+0x8>
    35d6:	0f 92       	push	r0
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	8a 83       	std	Y+2, r24	; 0x02
    35de:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	3d 83       	std	Y+5, r19	; 0x05
    35e8:	2c 83       	std	Y+4, r18	; 0x04
    35ea:	8c 81       	ldd	r24, Y+4	; 0x04
    35ec:	9d 81       	ldd	r25, Y+5	; 0x05
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	91 05       	cpc	r25, r1
    35f2:	e9 f0       	breq	.+58     	; 0x362e <LCD_MoveCursor+0x60>
    35f4:	2c 81       	ldd	r18, Y+4	; 0x04
    35f6:	3d 81       	ldd	r19, Y+5	; 0x05
    35f8:	22 30       	cpi	r18, 0x02	; 2
    35fa:	31 05       	cpc	r19, r1
    35fc:	2c f4       	brge	.+10     	; 0x3608 <LCD_MoveCursor+0x3a>
    35fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3600:	9d 81       	ldd	r25, Y+5	; 0x05
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	61 f0       	breq	.+24     	; 0x361e <LCD_MoveCursor+0x50>
    3606:	30 c0       	rjmp	.+96     	; 0x3668 <LCD_MoveCursor+0x9a>
    3608:	2c 81       	ldd	r18, Y+4	; 0x04
    360a:	3d 81       	ldd	r19, Y+5	; 0x05
    360c:	22 30       	cpi	r18, 0x02	; 2
    360e:	31 05       	cpc	r19, r1
    3610:	c1 f0       	breq	.+48     	; 0x3642 <LCD_MoveCursor+0x74>
    3612:	8c 81       	ldd	r24, Y+4	; 0x04
    3614:	9d 81       	ldd	r25, Y+5	; 0x05
    3616:	83 30       	cpi	r24, 0x03	; 3
    3618:	91 05       	cpc	r25, r1
    361a:	e9 f0       	breq	.+58     	; 0x3656 <LCD_MoveCursor+0x88>
    361c:	25 c0       	rjmp	.+74     	; 0x3668 <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	80 93 9f 02 	sts	0x029F, r24
            row_global = 0 ;
    3628:	10 92 9e 02 	sts	0x029E, r1
    362c:	1d c0       	rjmp	.+58     	; 0x3668 <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	80 5c       	subi	r24, 0xC0	; 192
    3632:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	80 93 9f 02 	sts	0x029F, r24
            row_global = 1 ;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	80 93 9e 02 	sts	0x029E, r24
    3640:	13 c0       	rjmp	.+38     	; 0x3668 <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	8c 5e       	subi	r24, 0xEC	; 236
    3646:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	80 93 9f 02 	sts	0x029F, r24
                row_global = 2 ;
    364e:	82 e0       	ldi	r24, 0x02	; 2
    3650:	80 93 9e 02 	sts	0x029E, r24
    3654:	09 c0       	rjmp	.+18     	; 0x3668 <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    3656:	8b 81       	ldd	r24, Y+3	; 0x03
    3658:	8c 5a       	subi	r24, 0xAC	; 172
    365a:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	80 93 9f 02 	sts	0x029F, r24
                row_global = 3 ;
    3662:	83 e0       	ldi	r24, 0x03	; 3
    3664:	80 93 9e 02 	sts	0x029E, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	80 68       	ori	r24, 0x80	; 128
    366c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
}
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	00 d0       	rcall	.+0      	; 0x3686 <LCD_DisplayStringRowCol+0x6>
    3686:	00 d0       	rcall	.+0      	; 0x3688 <LCD_DisplayStringRowCol+0x8>
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	6b 83       	std	Y+3, r22	; 0x03
    3692:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	6c 81       	ldd	r22, Y+4	; 0x04
    3698:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
}
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    36ba:	10 92 9f 02 	sts	0x029F, r1
    36be:	10 92 9e 02 	sts	0x029E, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
}
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    36d6:	80 91 9f 02 	lds	r24, 0x029F
    36da:	83 31       	cpi	r24, 0x13	; 19
    36dc:	89 f4       	brne	.+34     	; 0x3700 <LCD_MoveCursorRight+0x32>
    36de:	80 91 9e 02 	lds	r24, 0x029E
    36e2:	88 23       	and	r24, r24
    36e4:	69 f4       	brne	.+26     	; 0x3700 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    36e6:	10 92 9f 02 	sts	0x029F, r1
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	80 93 9e 02 	sts	0x029E, r24
        LCD_MoveCursor(row_global,col_global);
    36f0:	80 91 9e 02 	lds	r24, 0x029E
    36f4:	90 91 9f 02 	lds	r25, 0x029F
    36f8:	69 2f       	mov	r22, r25
    36fa:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    36fe:	46 c0       	rjmp	.+140    	; 0x378c <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    3700:	80 91 9f 02 	lds	r24, 0x029F
    3704:	83 31       	cpi	r24, 0x13	; 19
    3706:	89 f4       	brne	.+34     	; 0x372a <LCD_MoveCursorRight+0x5c>
    3708:	80 91 9e 02 	lds	r24, 0x029E
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	69 f4       	brne	.+26     	; 0x372a <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    3710:	10 92 9f 02 	sts	0x029F, r1
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	80 93 9e 02 	sts	0x029E, r24
        LCD_MoveCursor(row_global,col_global);
    371a:	80 91 9e 02 	lds	r24, 0x029E
    371e:	90 91 9f 02 	lds	r25, 0x029F
    3722:	69 2f       	mov	r22, r25
    3724:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    3728:	31 c0       	rjmp	.+98     	; 0x378c <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    372a:	80 91 9f 02 	lds	r24, 0x029F
    372e:	83 31       	cpi	r24, 0x13	; 19
    3730:	89 f4       	brne	.+34     	; 0x3754 <LCD_MoveCursorRight+0x86>
    3732:	80 91 9e 02 	lds	r24, 0x029E
    3736:	82 30       	cpi	r24, 0x02	; 2
    3738:	69 f4       	brne	.+26     	; 0x3754 <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    373a:	10 92 9f 02 	sts	0x029F, r1
    373e:	83 e0       	ldi	r24, 0x03	; 3
    3740:	80 93 9e 02 	sts	0x029E, r24
        LCD_MoveCursor(row_global,col_global);
    3744:	80 91 9e 02 	lds	r24, 0x029E
    3748:	90 91 9f 02 	lds	r25, 0x029F
    374c:	69 2f       	mov	r22, r25
    374e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    3752:	1c c0       	rjmp	.+56     	; 0x378c <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    3754:	80 91 9f 02 	lds	r24, 0x029F
    3758:	83 31       	cpi	r24, 0x13	; 19
    375a:	81 f4       	brne	.+32     	; 0x377c <LCD_MoveCursorRight+0xae>
    375c:	80 91 9e 02 	lds	r24, 0x029E
    3760:	83 30       	cpi	r24, 0x03	; 3
    3762:	61 f4       	brne	.+24     	; 0x377c <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    3764:	10 92 9f 02 	sts	0x029F, r1
    3768:	10 92 9e 02 	sts	0x029E, r1
        LCD_MoveCursor(row_global,col_global);
    376c:	80 91 9e 02 	lds	r24, 0x029E
    3770:	90 91 9f 02 	lds	r25, 0x029F
    3774:	69 2f       	mov	r22, r25
    3776:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    377a:	08 c0       	rjmp	.+16     	; 0x378c <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    377c:	84 e1       	ldi	r24, 0x14	; 20
    377e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
        col_global++;
    3782:	80 91 9f 02 	lds	r24, 0x029F
    3786:	8f 5f       	subi	r24, 0xFF	; 255
    3788:	80 93 9f 02 	sts	0x029F, r24
    }
}
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    379a:	80 91 9f 02 	lds	r24, 0x029F
    379e:	88 23       	and	r24, r24
    37a0:	91 f4       	brne	.+36     	; 0x37c6 <LCD_MoveCursorLeft+0x34>
    37a2:	80 91 9e 02 	lds	r24, 0x029E
    37a6:	88 23       	and	r24, r24
    37a8:	71 f4       	brne	.+28     	; 0x37c6 <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    37aa:	83 e1       	ldi	r24, 0x13	; 19
    37ac:	80 93 9f 02 	sts	0x029F, r24
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	80 93 9e 02 	sts	0x029E, r24
        LCD_MoveCursor(row_global,col_global);
    37b6:	80 91 9e 02 	lds	r24, 0x029E
    37ba:	90 91 9f 02 	lds	r25, 0x029F
    37be:	69 2f       	mov	r22, r25
    37c0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    37c4:	49 c0       	rjmp	.+146    	; 0x3858 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    37c6:	80 91 9f 02 	lds	r24, 0x029F
    37ca:	88 23       	and	r24, r24
    37cc:	89 f4       	brne	.+34     	; 0x37f0 <LCD_MoveCursorLeft+0x5e>
    37ce:	80 91 9e 02 	lds	r24, 0x029E
    37d2:	81 30       	cpi	r24, 0x01	; 1
    37d4:	69 f4       	brne	.+26     	; 0x37f0 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    37d6:	83 e1       	ldi	r24, 0x13	; 19
    37d8:	80 93 9f 02 	sts	0x029F, r24
    37dc:	10 92 9e 02 	sts	0x029E, r1
        LCD_MoveCursor(row_global,col_global);
    37e0:	80 91 9e 02 	lds	r24, 0x029E
    37e4:	90 91 9f 02 	lds	r25, 0x029F
    37e8:	69 2f       	mov	r22, r25
    37ea:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    37ee:	34 c0       	rjmp	.+104    	; 0x3858 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    37f0:	80 91 9f 02 	lds	r24, 0x029F
    37f4:	88 23       	and	r24, r24
    37f6:	91 f4       	brne	.+36     	; 0x381c <LCD_MoveCursorLeft+0x8a>
    37f8:	80 91 9e 02 	lds	r24, 0x029E
    37fc:	82 30       	cpi	r24, 0x02	; 2
    37fe:	71 f4       	brne	.+28     	; 0x381c <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    3800:	83 e1       	ldi	r24, 0x13	; 19
    3802:	80 93 9f 02 	sts	0x029F, r24
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	80 93 9e 02 	sts	0x029E, r24
        LCD_MoveCursor(row_global,col_global);
    380c:	80 91 9e 02 	lds	r24, 0x029E
    3810:	90 91 9f 02 	lds	r25, 0x029F
    3814:	69 2f       	mov	r22, r25
    3816:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    381a:	1e c0       	rjmp	.+60     	; 0x3858 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    381c:	80 91 9f 02 	lds	r24, 0x029F
    3820:	88 23       	and	r24, r24
    3822:	91 f4       	brne	.+36     	; 0x3848 <LCD_MoveCursorLeft+0xb6>
    3824:	80 91 9e 02 	lds	r24, 0x029E
    3828:	83 30       	cpi	r24, 0x03	; 3
    382a:	71 f4       	brne	.+28     	; 0x3848 <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    382c:	83 e1       	ldi	r24, 0x13	; 19
    382e:	80 93 9f 02 	sts	0x029F, r24
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	80 93 9e 02 	sts	0x029E, r24
        LCD_MoveCursor(row_global,col_global);
    3838:	80 91 9e 02 	lds	r24, 0x029E
    383c:	90 91 9f 02 	lds	r25, 0x029F
    3840:	69 2f       	mov	r22, r25
    3842:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    3846:	08 c0       	rjmp	.+16     	; 0x3858 <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    3848:	80 e1       	ldi	r24, 0x10	; 16
    384a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
        col_global--;
    384e:	80 91 9f 02 	lds	r24, 0x029F
    3852:	81 50       	subi	r24, 0x01	; 1
    3854:	80 93 9f 02 	sts	0x029F, r24
    }
    
}
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    3866:	8c e1       	ldi	r24, 0x1C	; 28
    3868:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
}
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	08 95       	ret

00003872 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    387a:	88 e1       	ldi	r24, 0x18	; 24
    387c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
}
    3880:	cf 91       	pop	r28
    3882:	df 91       	pop	r29
    3884:	08 95       	ret

00003886 <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    3886:	df 93       	push	r29
    3888:	cf 93       	push	r28
    388a:	00 d0       	rcall	.+0      	; 0x388c <LCD_GenerateCharacterCGRAM+0x6>
    388c:	00 d0       	rcall	.+0      	; 0x388e <LCD_GenerateCharacterCGRAM+0x8>
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	9b 83       	std	Y+3, r25	; 0x03
    3894:	8a 83       	std	Y+2, r24	; 0x02
    3896:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    3898:	8c 81       	ldd	r24, Y+4	; 0x04
    389a:	88 2f       	mov	r24, r24
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	08 96       	adiw	r24, 0x08	; 8
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	88 0f       	add	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    38b0:	19 82       	std	Y+1, r1	; 0x01
    38b2:	0e c0       	rjmp	.+28     	; 0x38d0 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	28 2f       	mov	r18, r24
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	9b 81       	ldd	r25, Y+3	; 0x03
    38be:	fc 01       	movw	r30, r24
    38c0:	e2 0f       	add	r30, r18
    38c2:	f3 1f       	adc	r31, r19
    38c4:	80 81       	ld	r24, Z
    38c6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	8f 5f       	subi	r24, 0xFF	; 255
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	88 30       	cpi	r24, 0x08	; 8
    38d4:	78 f3       	brcs	.-34     	; 0x38b4 <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	0f 92       	push	r0
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
}
    38f6:	0f 90       	pop	r0
    38f8:	cf 91       	pop	r28
    38fa:	df 91       	pop	r29
    38fc:	08 95       	ret

000038fe <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    38fe:	df 93       	push	r29
    3900:	cf 93       	push	r28
    3902:	00 d0       	rcall	.+0      	; 0x3904 <LCD_DisplayCustomCharacterRowCol+0x6>
    3904:	0f 92       	push	r0
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	6a 83       	std	Y+2, r22	; 0x02
    390e:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	6b 81       	ldd	r22, Y+3	; 0x03
    3914:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
}
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	08 95       	ret

0000392a <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	65 97       	sbiw	r28, 0x15	; 21
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	6a 8b       	std	Y+18, r22	; 0x12
    3940:	7b 8b       	std	Y+19, r23	; 0x13
    3942:	8c 8b       	std	Y+20, r24	; 0x14
    3944:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3946:	8a 89       	ldd	r24, Y+18	; 0x12
    3948:	9b 89       	ldd	r25, Y+19	; 0x13
    394a:	9e 01       	movw	r18, r28
    394c:	2f 5f       	subi	r18, 0xFF	; 255
    394e:	3f 4f       	sbci	r19, 0xFF	; 255
    3950:	b9 01       	movw	r22, r18
    3952:	4a e0       	ldi	r20, 0x0A	; 10
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    395a:	ce 01       	movw	r24, r28
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
}
    3962:	65 96       	adiw	r28, 0x15	; 21
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	cd bf       	out	0x3d, r28	; 61
    396e:	cf 91       	pop	r28
    3970:	df 91       	pop	r29
    3972:	08 95       	ret

00003974 <Keypad_4X3_AdjustKeyNumber>:


#if(KEYPAD_COL_NUM == 3)

static uint8 Keypad_4X3_AdjustKeyNumber(uint8 Button_Number)
{
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	00 d0       	rcall	.+0      	; 0x397a <Keypad_4X3_AdjustKeyNumber+0x6>
    397a:	00 d0       	rcall	.+0      	; 0x397c <Keypad_4X3_AdjustKeyNumber+0x8>
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	8a 83       	std	Y+2, r24	; 0x02
    uint8 pressed_key = 0;
    3982:	19 82       	std	Y+1, r1	; 0x01
    switch (Button_Number)
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
    3986:	28 2f       	mov	r18, r24
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	3c 83       	std	Y+4, r19	; 0x04
    398c:	2b 83       	std	Y+3, r18	; 0x03
    398e:	8b 81       	ldd	r24, Y+3	; 0x03
    3990:	9c 81       	ldd	r25, Y+4	; 0x04
    3992:	8a 30       	cpi	r24, 0x0A	; 10
    3994:	91 05       	cpc	r25, r1
    3996:	81 f0       	breq	.+32     	; 0x39b8 <Keypad_4X3_AdjustKeyNumber+0x44>
    3998:	2b 81       	ldd	r18, Y+3	; 0x03
    399a:	3c 81       	ldd	r19, Y+4	; 0x04
    399c:	2a 30       	cpi	r18, 0x0A	; 10
    399e:	31 05       	cpc	r19, r1
    39a0:	9c f0       	brlt	.+38     	; 0x39c8 <Keypad_4X3_AdjustKeyNumber+0x54>
    39a2:	8b 81       	ldd	r24, Y+3	; 0x03
    39a4:	9c 81       	ldd	r25, Y+4	; 0x04
    39a6:	8b 30       	cpi	r24, 0x0B	; 11
    39a8:	91 05       	cpc	r25, r1
    39aa:	49 f0       	breq	.+18     	; 0x39be <Keypad_4X3_AdjustKeyNumber+0x4a>
    39ac:	2b 81       	ldd	r18, Y+3	; 0x03
    39ae:	3c 81       	ldd	r19, Y+4	; 0x04
    39b0:	2c 30       	cpi	r18, 0x0C	; 12
    39b2:	31 05       	cpc	r19, r1
    39b4:	31 f0       	breq	.+12     	; 0x39c2 <Keypad_4X3_AdjustKeyNumber+0x4e>
    39b6:	08 c0       	rjmp	.+16     	; 0x39c8 <Keypad_4X3_AdjustKeyNumber+0x54>
    {
        case 10 :
            pressed_key = '*';
    39b8:	8a e2       	ldi	r24, 0x2A	; 42
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	07 c0       	rjmp	.+14     	; 0x39cc <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 11 : 
            pressed_key = 0;
    39be:	19 82       	std	Y+1, r1	; 0x01
    39c0:	05 c0       	rjmp	.+10     	; 0x39cc <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 12 : 
            pressed_key = '#';
    39c2:	83 e2       	ldi	r24, 0x23	; 35
    39c4:	89 83       	std	Y+1, r24	; 0x01
    39c6:	02 c0       	rjmp	.+4      	; 0x39cc <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        default :
            pressed_key = Button_Number;   // if Button_Number =1  --> so will return 1 (as no mapping need like case 10 , 11 , 12)
    39c8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ca:	89 83       	std	Y+1, r24	; 0x01
            break;
    }
    return pressed_key;
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <Keypad_init>:


/**************************                   Functions Definition                   **************************/

void Keypad_init(void)
{
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	00 d0       	rcall	.+0      	; 0x39e2 <Keypad_init+0x6>
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    39e6:	1a 82       	std	Y+2, r1	; 0x02
    39e8:	0f c0       	rjmp	.+30     	; 0x3a08 <Keypad_init+0x2c>
        {
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)

            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN_PULLUP );
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	fc 01       	movw	r30, r24
    39f2:	ef 58       	subi	r30, 0x8F	; 143
    39f4:	fd 4f       	sbci	r31, 0xFD	; 253
    39f6:	90 81       	ld	r25, Z
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	69 2f       	mov	r22, r25
    39fc:	41 e0       	ldi	r20, 0x01	; 1
    39fe:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    3a02:	8a 81       	ldd	r24, Y+2	; 0x02
    3a04:	8f 5f       	subi	r24, 0xFF	; 255
    3a06:	8a 83       	std	Y+2, r24	; 0x02
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	84 30       	cpi	r24, 0x04	; 4
    3a0c:	70 f3       	brcs	.-36     	; 0x39ea <Keypad_init+0xe>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3a0e:	19 82       	std	Y+1, r1	; 0x01
    3a10:	1b c0       	rjmp	.+54     	; 0x3a48 <Keypad_init+0x6c>
        {
            GPIO_SetPinDirection(KEYPAD_COL_PORT , sequelizeCOL[it] , OUTPUT_PIN );
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	88 2f       	mov	r24, r24
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	fc 01       	movw	r30, r24
    3a1a:	e2 59       	subi	r30, 0x92	; 146
    3a1c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a1e:	90 81       	ld	r25, Z
    3a20:	83 e0       	ldi	r24, 0x03	; 3
    3a22:	69 2f       	mov	r22, r25
    3a24:	42 e0       	ldi	r20, 0x02	; 2
    3a26:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	88 2f       	mov	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	fc 01       	movw	r30, r24
    3a32:	e2 59       	subi	r30, 0x92	; 146
    3a34:	fd 4f       	sbci	r31, 0xFD	; 253
    3a36:	90 81       	ld	r25, Z
    3a38:	83 e0       	ldi	r24, 0x03	; 3
    3a3a:	69 2f       	mov	r22, r25
    3a3c:	41 e0       	ldi	r20, 0x01	; 1
    3a3e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	8f 5f       	subi	r24, 0xFF	; 255
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	83 30       	cpi	r24, 0x03	; 3
    3a4c:	10 f3       	brcs	.-60     	; 0x3a12 <Keypad_init+0x36>
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_LOW );// set all columns to low
            #endif
        }

    #endif
}
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	cf 91       	pop	r28
    3a54:	df 91       	pop	r29
    3a56:	08 95       	ret

00003a58 <Keypad_GetPressedKey>:


sint8 Keypad_GetPressedKey(void)
{
    3a58:	df 93       	push	r29
    3a5a:	cf 93       	push	r28
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <Keypad_GetPressedKey+0x6>
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <Keypad_GetPressedKey+0x8>
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <Keypad_GetPressedKey+0xa>
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3a66:	1d 82       	std	Y+5, r1	; 0x05
    3a68:	0f c0       	rjmp	.+30     	; 0x3a88 <Keypad_GetPressedKey+0x30>
                {
                    GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6c:	88 2f       	mov	r24, r24
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	fc 01       	movw	r30, r24
    3a72:	e2 59       	subi	r30, 0x92	; 146
    3a74:	fd 4f       	sbci	r31, 0xFD	; 253
    3a76:	90 81       	ld	r25, Z
    3a78:	83 e0       	ldi	r24, 0x03	; 3
    3a7a:	69 2f       	mov	r22, r25
    3a7c:	41 e0       	ldi	r20, 0x01	; 1
    3a7e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	8f 5f       	subi	r24, 0xFF	; 255
    3a86:	8d 83       	std	Y+5, r24	; 0x05
    3a88:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8a:	83 30       	cpi	r24, 0x03	; 3
    3a8c:	70 f3       	brcs	.-36     	; 0x3a6a <Keypad_GetPressedKey+0x12>
            #endif

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
    3a8e:	8f ef       	ldi	r24, 0xFF	; 255
    3a90:	9f ef       	ldi	r25, 0xFF	; 255
    3a92:	9a 83       	std	Y+2, r25	; 0x02
    3a94:	89 83       	std	Y+1, r24	; 0x01
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3a96:	1c 82       	std	Y+4, r1	; 0x04
    3a98:	45 c0       	rjmp	.+138    	; 0x3b24 <Keypad_GetPressedKey+0xcc>
                {
                    // set  one column with value want to read to loop in rows to read which key from this column pressed
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
    3a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9c:	88 2f       	mov	r24, r24
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	e2 59       	subi	r30, 0x92	; 146
    3aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    3aa6:	90 81       	ld	r25, Z
    3aa8:	83 e0       	ldi	r24, 0x03	; 3
    3aaa:	69 2f       	mov	r22, r25
    3aac:	40 e0       	ldi	r20, 0x00	; 0
    3aae:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3ab2:	1b 82       	std	Y+3, r1	; 0x03
    3ab4:	25 c0       	rjmp	.+74     	; 0x3b00 <Keypad_GetPressedKey+0xa8>
                    {
                        if(GPIO_ReadPin(KEYPAD_ROW_PORT,sequelizeROW[row]) == KEYPAD_PRESSED_STATE)
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	88 2f       	mov	r24, r24
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	fc 01       	movw	r30, r24
    3abe:	ef 58       	subi	r30, 0x8F	; 143
    3ac0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ac2:	90 81       	ld	r25, Z
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	69 2f       	mov	r22, r25
    3ac8:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_ReadPin>
    3acc:	88 23       	and	r24, r24
    3ace:	a9 f4       	brne	.+42     	; 0x3afa <Keypad_GetPressedKey+0xa2>
                        {
                            #if(KEYPAD_COL_NUM == 3)
                                pressed_key = Keypad_4X3_AdjustKeyNumber((row*KEYPAD_COL_NUM)+col+1);
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	28 2f       	mov	r18, r24
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	c9 01       	movw	r24, r18
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	82 0f       	add	r24, r18
    3ade:	93 1f       	adc	r25, r19
    3ae0:	98 2f       	mov	r25, r24
    3ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae4:	89 0f       	add	r24, r25
    3ae6:	8f 5f       	subi	r24, 0xFF	; 255
    3ae8:	0e 94 ba 1c 	call	0x3974	; 0x3974 <Keypad_4X3_AdjustKeyNumber>
    3aec:	88 2f       	mov	r24, r24
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	9a 83       	std	Y+2, r25	; 0x02
    3af2:	89 83       	std	Y+1, r24	; 0x01

                            pressed_BTN_IsReleased = TRUE;
                            /*store last pressed BTN*/
                            pressed_BTN = row ;
                        #endif
                            return pressed_key ;
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	8e 83       	std	Y+6, r24	; 0x06
    3af8:	1b c0       	rjmp	.+54     	; 0x3b30 <Keypad_GetPressedKey+0xd8>
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3afa:	8b 81       	ldd	r24, Y+3	; 0x03
    3afc:	8f 5f       	subi	r24, 0xFF	; 255
    3afe:	8b 83       	std	Y+3, r24	; 0x03
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	84 30       	cpi	r24, 0x04	; 4
    3b04:	c0 f2       	brcs	.-80     	; 0x3ab6 <Keypad_GetPressedKey+0x5e>
                                //          |     I mean this step
                                //          |
                                //          \/
                    // retrive change happen to make same thing to next column
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL [col] , LOGIC_HIGH ); // set all columns to High
    3b06:	8c 81       	ldd	r24, Y+4	; 0x04
    3b08:	88 2f       	mov	r24, r24
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	e2 59       	subi	r30, 0x92	; 146
    3b10:	fd 4f       	sbci	r31, 0xFD	; 253
    3b12:	90 81       	ld	r25, Z
    3b14:	83 e0       	ldi	r24, 0x03	; 3
    3b16:	69 2f       	mov	r22, r25
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	8c 83       	std	Y+4, r24	; 0x04
    3b24:	8c 81       	ldd	r24, Y+4	; 0x04
    3b26:	83 30       	cpi	r24, 0x03	; 3
    3b28:	08 f4       	brcc	.+2      	; 0x3b2c <Keypad_GetPressedKey+0xd4>
    3b2a:	b7 cf       	rjmp	.-146    	; 0x3a9a <Keypad_GetPressedKey+0x42>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_LOW ); // set all columns to low
                    #endif

                }
                return pressed_key ;
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	8e 83       	std	Y+6, r24	; 0x06
    3b30:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            

    #endif

}
    3b32:	26 96       	adiw	r28, 0x06	; 6
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	de bf       	out	0x3e, r29	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	08 95       	ret

00003b44 <Buzzer_Init>:

#include "Buzzer_interface.h"


void Buzzer_Init(uint8 PORTX , uint8 PIN )
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <Buzzer_Init+0x6>
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	6a 81       	ldd	r22, Y+2	; 0x02
    3b56:	42 e0       	ldi	r20, 0x02	; 2
    3b58:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <Buzzer_OnOffPositiveLogic>:


void Buzzer_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <Buzzer_OnOffPositiveLogic+0x6>
    3b6c:	0f 92       	push	r0
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	6a 83       	std	Y+2, r22	; 0x02
    3b76:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3b78:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7a:	88 23       	and	r24, r24
    3b7c:	31 f4       	brne	.+12     	; 0x3b8a <Buzzer_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	6a 81       	ldd	r22, Y+2	; 0x02
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    3b88:	08 c0       	rjmp	.+16     	; 0x3b9a <Buzzer_OnOffPositiveLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8c:	81 30       	cpi	r24, 0x01	; 1
    3b8e:	29 f4       	brne	.+10     	; 0x3b9a <Buzzer_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	6a 81       	ldd	r22, Y+2	; 0x02
    3b94:	41 e0       	ldi	r20, 0x01	; 1
    3b96:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    }
}
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <Buzzer_OnOffNegativeLogic>:


void Buzzer_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <Buzzer_OnOffNegativeLogic+0x6>
    3bac:	0f 92       	push	r0
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	89 83       	std	Y+1, r24	; 0x01
    3bb4:	6a 83       	std	Y+2, r22	; 0x02
    3bb6:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bba:	88 23       	and	r24, r24
    3bbc:	31 f4       	brne	.+12     	; 0x3bca <Buzzer_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	6a 81       	ldd	r22, Y+2	; 0x02
    3bc2:	41 e0       	ldi	r20, 0x01	; 1
    3bc4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    3bc8:	08 c0       	rjmp	.+16     	; 0x3bda <Buzzer_OnOffNegativeLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	81 30       	cpi	r24, 0x01	; 1
    3bce:	29 f4       	brne	.+10     	; 0x3bda <Buzzer_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	6a 81       	ldd	r22, Y+2	; 0x02
    3bd4:	40 e0       	ldi	r20, 0x00	; 0
    3bd6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    }
}
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	cf 91       	pop	r28
    3be2:	df 91       	pop	r29
    3be4:	08 95       	ret

00003be6 <Buzzer_Toggle>:



void Buzzer_Toggle(uint8 PORTX , uint8 PIN)
{
    3be6:	df 93       	push	r29
    3be8:	cf 93       	push	r28
    3bea:	00 d0       	rcall	.+0      	; 0x3bec <Buzzer_Toggle+0x6>
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_TogglePin(PORTX,PIN);
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	6a 81       	ldd	r22, Y+2	; 0x02
    3bf8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_TogglePin>
}
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	cf 91       	pop	r28
    3c02:	df 91       	pop	r29
    3c04:	08 95       	ret

00003c06 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3c06:	df 93       	push	r29
    3c08:	cf 93       	push	r28
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <BUTTON_Init+0x6>
    3c0c:	0f 92       	push	r0
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	89 83       	std	Y+1, r24	; 0x01
    3c14:	6a 83       	std	Y+2, r22	; 0x02
    3c16:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	6a 81       	ldd	r22, Y+2	; 0x02
    3c1c:	4b 81       	ldd	r20, Y+3	; 0x03
    3c1e:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>
}
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

00003c2e <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <BUTTON_GetValue+0x6>
    3c34:	cd b7       	in	r28, 0x3d	; 61
    3c36:	de b7       	in	r29, 0x3e	; 62
    3c38:	89 83       	std	Y+1, r24	; 0x01
    3c3a:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    3c40:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_ReadPin>
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
    3c48:	cf 91       	pop	r28
    3c4a:	df 91       	pop	r29
    3c4c:	08 95       	ret

00003c4e <StateMachineUpdate>:
uint8 Clock_hour = 2 ;



void StateMachineUpdate(void)
{
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    Hanndle_GrearBox_N_State();
    3c56:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <Hanndle_GrearBox_N_State>
    // Hanndle_GrearBox_D_State();
    Hanndle_GrearBox_R_State();
    3c5a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Hanndle_GrearBox_R_State>
    // Buttons_Update();

    APP_KeypadUpdate();
    3c5e:	0e 94 b7 21 	call	0x436e	; 0x436e <APP_KeypadUpdate>
    App_SpeedUpdate ();
    3c62:	0e 94 49 25 	call	0x4a92	; 0x4a92 <App_SpeedUpdate>
    App_GetDiffCarSpeed_and_limit();
    3c66:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <App_GetDiffCarSpeed_and_limit>
    /*  make continous update for dashboard if I in page 2   */
    DashBoard_DrivingMonetoring_continous_Status_update();
    3c6a:	0e 94 8b 20 	call	0x4116	; 0x4116 <DashBoard_DrivingMonetoring_continous_Status_update>
    /*  used to update time if I in page 4*/
    DashBoard_updateTime();
    3c6e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <DashBoard_updateTime>

}
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <Hanndle_GrearBox_D_State>:


static void Hanndle_GrearBox_D_State(void)
{
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	0f 92       	push	r0
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    3c82:	80 91 a1 02 	lds	r24, 0x02A1
       // ACCS_CatchDistance();
        /*  may be interrupt happen here so inside next function check if brake button pressed and make disable for ACCS    */
       // ACCS_DicisionTake();
        
    }
}
    3c86:	0f 90       	pop	r0
    3c88:	cf 91       	pop	r28
    3c8a:	df 91       	pop	r29
    3c8c:	08 95       	ret

00003c8e <Hanndle_GrearBox_N_State>:



static void Hanndle_GrearBox_N_State(void)
{
    3c8e:	df 93       	push	r29
    3c90:	cf 93       	push	r28
    3c92:	cd b7       	in	r28, 0x3d	; 61
    3c94:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == N_GearBox)
    3c96:	80 91 a0 02 	lds	r24, 0x02A0
    3c9a:	88 23       	and	r24, r24
    3c9c:	51 f4       	brne	.+20     	; 0x3cb2 <Hanndle_GrearBox_N_State+0x24>
    {
        if(CCS_Currnet_state == CCS_Enable)
    3c9e:	80 91 a1 02 	lds	r24, 0x02A1
    3ca2:	81 30       	cpi	r24, 0x01	; 1
    3ca4:	31 f4       	brne	.+12     	; 0x3cb2 <Hanndle_GrearBox_N_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    3ca6:	10 92 a1 02 	sts	0x02A1, r1
            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    3caa:	80 91 a1 02 	lds	r24, 0x02A1
    3cae:	0e 94 76 1f 	call	0x3eec	; 0x3eec <DashBoard_Update_CCS_State>
           // DashBoard_DistanceHide_small();

        }
    }
   
}
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <Hanndle_GrearBox_R_State>:


static void Hanndle_GrearBox_R_State(void)
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == R_GearBox)
    3cc0:	80 91 a0 02 	lds	r24, 0x02A0
    3cc4:	82 30       	cpi	r24, 0x02	; 2
    3cc6:	f1 f4       	brne	.+60     	; 0x3d04 <Hanndle_GrearBox_R_State+0x4c>
    {
        /*  Turn off led that work in Adaptive cruise control  as may make switch by gearBox so I need to handle this   */
        //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
        if(CCS_Currnet_state == CCS_Enable)
    3cc8:	80 91 a1 02 	lds	r24, 0x02A1
    3ccc:	81 30       	cpi	r24, 0x01	; 1
    3cce:	31 f4       	brne	.+12     	; 0x3cdc <Hanndle_GrearBox_R_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    3cd0:	10 92 a1 02 	sts	0x02A1, r1

            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    3cd4:	80 91 a1 02 	lds	r24, 0x02A1
    3cd8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <DashBoard_Update_CCS_State>
            
            //DashBoard_DistanceHide();
            //DashBoard_DistanceHide_small();
        }

        if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    3cdc:	80 91 ac 02 	lds	r24, 0x02AC
    3ce0:	81 30       	cpi	r24, 0x01	; 1
    3ce2:	31 f4       	brne	.+12     	; 0x3cf0 <Hanndle_GrearBox_R_State+0x38>
        {
            DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    3ce4:	10 92 ac 02 	sts	0x02AC, r1
            /*  Update in LCD */
            DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    3ce8:	80 91 ac 02 	lds	r24, 0x02AC
    3cec:	0e 94 51 20 	call	0x40a2	; 0x40a2 <DahBoard_Update_DrivingMonetoring_State>

        }

        /*  If it was Speed Limiter enabled should disabled and update in LCD*/
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    3cf0:	80 91 a2 02 	lds	r24, 0x02A2
    3cf4:	81 30       	cpi	r24, 0x01	; 1
    3cf6:	31 f4       	brne	.+12     	; 0x3d04 <Hanndle_GrearBox_R_State+0x4c>
        {
            /*  Disable BA Sysystem */
            SpeedLimit_Current__State = SpeedLimit_Disable ;
    3cf8:	10 92 a2 02 	sts	0x02A2, r1
            
            /*  Update LCD with new change*/
            DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    3cfc:	80 91 a2 02 	lds	r24, 0x02A2
    3d00:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <DashBoard_Update_SpeedLimiter_State>
        }

    }
}
    3d04:	cf 91       	pop	r28
    3d06:	df 91       	pop	r29
    3d08:	08 95       	ret

00003d0a <App_Init>:




void App_Init(void)
{
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    /*	Enable Global Interrupt  */
	sei();
    3d12:	78 94       	sei

    /*  Intialize LCD   */
    LCD_init();
    3d14:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_init>

    /*  Initalize New custom character */
    LCD_GenerateCharacterCGRAM(LCD_Page_Not_Selected,POS_LCD_Page_Not_Selected);
    3d18:	86 e3       	ldi	r24, 0x36	; 54
    3d1a:	92 e0       	ldi	r25, 0x02	; 2
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Page_Selected,POS_LCD_Page_Selected);
    3d22:	8e e3       	ldi	r24, 0x3E	; 62
    3d24:	92 e0       	ldi	r25, 0x02	; 2
    3d26:	61 e0       	ldi	r22, 0x01	; 1
    3d28:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Right_ICON,POS_LCD_Right_ICON);
    3d2c:	86 e4       	ldi	r24, 0x46	; 70
    3d2e:	92 e0       	ldi	r25, 0x02	; 2
    3d30:	62 e0       	ldi	r22, 0x02	; 2
    3d32:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_False_ICON,POS_LCD_False_ICON);
    3d36:	8e e4       	ldi	r24, 0x4E	; 78
    3d38:	92 e0       	ldi	r25, 0x02	; 2
    3d3a:	63 e0       	ldi	r22, 0x03	; 3
    3d3c:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Mute_ICON,POS_LCD_Mute_ICON);
    3d40:	86 e5       	ldi	r24, 0x56	; 86
    3d42:	92 e0       	ldi	r25, 0x02	; 2
    3d44:	64 e0       	ldi	r22, 0x04	; 4
    3d46:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Skull_ICON,POS_LCD_Skull_ICON);
    3d4a:	8e e5       	ldi	r24, 0x5E	; 94
    3d4c:	92 e0       	ldi	r25, 0x02	; 2
    3d4e:	65 e0       	ldi	r22, 0x05	; 5
    3d50:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Alarm_ICON,POS_LCD_Alarm_ICON);
    3d54:	86 e6       	ldi	r24, 0x66	; 102
    3d56:	92 e0       	ldi	r25, 0x02	; 2
    3d58:	66 e0       	ldi	r22, 0x06	; 6
    3d5a:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_GenerateCharacterCGRAM>

    /*  Initialize Buzzer */
    Buzzer_Init(Buzzer_PORT,Buzzer_PIN);
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	66 e0       	ldi	r22, 0x06	; 6
    3d62:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Buzzer_Init>


    /*  Initialize Braking Button with EXT_INT 1    */
    INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    3d66:	82 e0       	ldi	r24, 0x02	; 2
    3d68:	60 e0       	ldi	r22, 0x00	; 0
    3d6a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <INT1_init>
    /*  Set call back function  */
    INT1_SetCallBack(Braking_Button_Handling);
    3d6e:	83 e4       	ldi	r24, 0x43	; 67
    3d70:	93 e2       	ldi	r25, 0x23	; 35
    3d72:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <INT1_SetCallBack>

    /*  Initialize LEDS(Red,Yellow) all os them connected positive logic */

    LED_Init(Red_LED_PORT,Red_LED_PIN);
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	67 e0       	ldi	r22, 0x07	; 7
    3d7a:	0e 94 56 11 	call	0x22ac	; 0x22ac <LED_Init>
    LED_Init(Yellow_LED_PORT,Yellow_LED_PIN);
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	66 e0       	ldi	r22, 0x06	; 6
    3d82:	0e 94 56 11 	call	0x22ac	; 0x22ac <LED_Init>

    /*  Initailize Relay Pin  */
    GPIO_SetPinDirection(Relay_PORT,Relay_PIN,OUTPUT_PIN);
    3d86:	82 e0       	ldi	r24, 0x02	; 2
    3d88:	67 e0       	ldi	r22, 0x07	; 7
    3d8a:	42 e0       	ldi	r20, 0x02	; 2
    3d8c:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_SetPinDirection>

    /*  Turn Of all of this led  */
    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN, LED_OFF);
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	67 e0       	ldi	r22, 0x07	; 7
    3d94:	40 e0       	ldi	r20, 0x00	; 0
    3d96:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN, LED_OFF);
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	66 e0       	ldi	r22, 0x06	; 6
    3d9e:	40 e0       	ldi	r20, 0x00	; 0
    3da0:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>

    /*  initialize Timer0   */
    Timer0_Init();
    3da4:	0e 94 3b 08 	call	0x1076	; 0x1076 <Timer0_Init>

    /*  Set callback function that will called when Timeout happen to turn of buzzer and handle anything another    */
    Timer0_SetCallBack(Buzzer_timeOutOff);
    3da8:	8c ea       	ldi	r24, 0xAC	; 172
    3daa:	93 e2       	ldi	r25, 0x23	; 35
    3dac:	0e 94 f6 07 	call	0xfec	; 0xfec <Timer0_SetCallBack>

    /*  Initailize Timer 1*/
    Timer1_Init();
    3db0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <Timer1_Init>

    /*  Set callback for finction that will hanle DM and Time */
    Timer1_SetCallBack(App_TimeOut_handle_DM_Time);
    3db4:	8a eb       	ldi	r24, 0xBA	; 186
    3db6:	93 e2       	ldi	r25, 0x23	; 35
    3db8:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_SetCallBack>

    Timer1_ProvideClock();
    3dbc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <Timer1_ProvideClock>

    /*  Initialize ADC to be used by Potentiometer to accelerate  */
    ADC_Init();
    3dc0:	0e 94 38 10 	call	0x2070	; 0x2070 <ADC_Init>

    /*  Intialize Potentiometer */
    POT_Init(ADC_Channel_0);
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	0e 94 3a 11 	call	0x2274	; 0x2274 <POT_Init>

    /*  Initailize Keypad  */
    Keypad_init();
    3dca:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <Keypad_init>

    /*  Intialize Bash Board for Car*/
    DashBoard_Init();
    3dce:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <DashBoard_Init>
    /*✍️LCD_SMALL_LARGE*/
    //DashBoard_Init_small();
}
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <DashBoard_Init>:


static void DashBoard_Init(void)
{
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    cli();
    3de0:	f8 94       	cli
    LCD_MoveCursor(0,0);
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	60 e0       	ldi	r22, 0x00	; 0
    3de6:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"DM Status:");
    3dea:	80 e6       	ldi	r24, 0x60	; 96
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    /*  call function that will handle status for DM  */
    DashBoard_DrivingMonetoring_Status_update();
    3df2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <DashBoard_DrivingMonetoring_Status_update>

    /*  Display GearBox Current state  */
    LCD_MoveCursor(0,14);
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	6e e0       	ldi	r22, 0x0E	; 14
    3dfa:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"GB : N");
    3dfe:	8b e6       	ldi	r24, 0x6B	; 107
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>

    /*  Display speed */
    LCD_MoveCursor(1,11);
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	6b e0       	ldi	r22, 0x0B	; 11
    3e0a:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"SP:0KM"); 
    3e0e:	82 e7       	ldi	r24, 0x72	; 114
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>

    /*  Display state of Adaptive Cruise control  */
    LCD_MoveCursor(2,0);
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"CC:");
    3e1e:	89 e7       	ldi	r24, 0x79	; 121
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e26:	83 e0       	ldi	r24, 0x03	; 3
    3e28:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" BA:");
    3e2c:	8d e7       	ldi	r24, 0x7D	; 125
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e34:	83 e0       	ldi	r24, 0x03	; 3
    3e36:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" SL:");
    3e3a:	82 e8       	ldi	r24, 0x82	; 130
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e42:	83 e0       	ldi	r24, 0x03	; 3
    3e44:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" DM:");
    3e48:	87 e8       	ldi	r24, 0x87	; 135
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e50:	83 e0       	ldi	r24, 0x03	; 3
    3e52:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>

    /*  call function that Display pages and @ first when start program I will be in Page 2 */
    APP_DashBoardPage_update();
    3e56:	0e 94 b6 20 	call	0x416c	; 0x416c <APP_DashBoardPage_update>
    sei();
    3e5a:	78 94       	sei
}
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <DashBoard_Update_GearBox_state>:



static void DashBoard_Update_GearBox_state(uint8 GearBox_state)
{
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	29 97       	sbiw	r28, 0x09	; 9
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	8c 83       	std	Y+4, r24	; 0x04
    cli();
    3e78:	f8 94       	cli
    /*  Array carry All Characters For GearBox as make display easier using index*/
    uint8 GearBox_Characyer [] = {'N','D','R'};
    3e7a:	ce 01       	movw	r24, r28
    3e7c:	01 96       	adiw	r24, 0x01	; 1
    3e7e:	9e 83       	std	Y+6, r25	; 0x06
    3e80:	8d 83       	std	Y+5, r24	; 0x05
    3e82:	ef e7       	ldi	r30, 0x7F	; 127
    3e84:	f2 e0       	ldi	r31, 0x02	; 2
    3e86:	f8 87       	std	Y+8, r31	; 0x08
    3e88:	ef 83       	std	Y+7, r30	; 0x07
    3e8a:	f3 e0       	ldi	r31, 0x03	; 3
    3e8c:	f9 87       	std	Y+9, r31	; 0x09
    3e8e:	ef 81       	ldd	r30, Y+7	; 0x07
    3e90:	f8 85       	ldd	r31, Y+8	; 0x08
    3e92:	00 80       	ld	r0, Z
    3e94:	8f 81       	ldd	r24, Y+7	; 0x07
    3e96:	98 85       	ldd	r25, Y+8	; 0x08
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	98 87       	std	Y+8, r25	; 0x08
    3e9c:	8f 83       	std	Y+7, r24	; 0x07
    3e9e:	ed 81       	ldd	r30, Y+5	; 0x05
    3ea0:	fe 81       	ldd	r31, Y+6	; 0x06
    3ea2:	00 82       	st	Z, r0
    3ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea8:	01 96       	adiw	r24, 0x01	; 1
    3eaa:	9e 83       	std	Y+6, r25	; 0x06
    3eac:	8d 83       	std	Y+5, r24	; 0x05
    3eae:	99 85       	ldd	r25, Y+9	; 0x09
    3eb0:	91 50       	subi	r25, 0x01	; 1
    3eb2:	99 87       	std	Y+9, r25	; 0x09
    3eb4:	e9 85       	ldd	r30, Y+9	; 0x09
    3eb6:	ee 23       	and	r30, r30
    3eb8:	51 f7       	brne	.-44     	; 0x3e8e <DashBoard_Update_GearBox_state+0x2c>
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(0,19);
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	63 e1       	ldi	r22, 0x13	; 19
    3ebe:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    /*  Edit its state with new state given to function*/
    LCD_DisplayCharacter(GearBox_Characyer[GearBox_state]);
    3ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec4:	28 2f       	mov	r18, r24
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	ce 01       	movw	r24, r28
    3eca:	01 96       	adiw	r24, 0x01	; 1
    3ecc:	fc 01       	movw	r30, r24
    3ece:	e2 0f       	add	r30, r18
    3ed0:	f3 1f       	adc	r31, r19
    3ed2:	80 81       	ld	r24, Z
    3ed4:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    sei();
    3ed8:	78 94       	sei
}
    3eda:	29 96       	adiw	r28, 0x09	; 9
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <DashBoard_Update_CCS_State>:

static void DashBoard_Update_CCS_State(uint8 ACCS_state)
{
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	0f 92       	push	r0
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3ef8:	f8 94       	cli
        
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,3);
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	63 e0       	ldi	r22, 0x03	; 3
    3efe:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        //LCD_MoveCursor(0,4);

        /*  Edit its state with new state given to function*/
        if(CCS_Currnet_state == CCS_Enable)
    3f02:	80 91 a1 02 	lds	r24, 0x02A1
    3f06:	81 30       	cpi	r24, 0x01	; 1
    3f08:	21 f4       	brne	.+8      	; 0x3f12 <DashBoard_Update_CCS_State+0x26>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3f0a:	82 e0       	ldi	r24, 0x02	; 2
    3f0c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    3f10:	03 c0       	rjmp	.+6      	; 0x3f18 <DashBoard_Update_CCS_State+0x2c>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f12:	83 e0       	ldi	r24, 0x03	; 3
    3f14:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>

    sei();
    3f18:	78 94       	sei
}
    3f1a:	0f 90       	pop	r0
    3f1c:	cf 91       	pop	r28
    3f1e:	df 91       	pop	r29
    3f20:	08 95       	ret

00003f22 <DashBoard_Update_BrakingAssist_State>:

static void DashBoard_Update_BrakingAssist_State(uint8 BA_state)
{
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	0f 92       	push	r0
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3f2e:	f8 94       	cli
    /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,8);
    3f30:	82 e0       	ldi	r24, 0x02	; 2
    3f32:	68 e0       	ldi	r22, 0x08	; 8
    3f34:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
            /*  Edit its state with new state given to function*/
        if(BA_state == BrakingAssist_Enable)
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	81 30       	cpi	r24, 0x01	; 1
    3f3c:	21 f4       	brne	.+8      	; 0x3f46 <DashBoard_Update_BrakingAssist_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3f3e:	82 e0       	ldi	r24, 0x02	; 2
    3f40:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    3f44:	03 c0       	rjmp	.+6      	; 0x3f4c <DashBoard_Update_BrakingAssist_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f46:	83 e0       	ldi	r24, 0x03	; 3
    3f48:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    sei();
    3f4c:	78 94       	sei
}
    3f4e:	0f 90       	pop	r0
    3f50:	cf 91       	pop	r28
    3f52:	df 91       	pop	r29
    3f54:	08 95       	ret

00003f56 <DashBoard_Update_SpeedLimiter_State>:


static void DashBoard_Update_SpeedLimiter_State(uint8 SL_state)
{
    3f56:	df 93       	push	r29
    3f58:	cf 93       	push	r28
    3f5a:	0f 92       	push	r0
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
    3f60:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3f62:	f8 94       	cli
    /*  Should don't change state of CCS before that I in page 2 that has this feature  else will happen LCD data corruption    */
    // if(Page_Current_State == Page_2_LCD)
    // {
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,13);
    3f64:	82 e0       	ldi	r24, 0x02	; 2
    3f66:	6d e0       	ldi	r22, 0x0D	; 13
    3f68:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        //LCD_MoveCursor(0,6);

        /*  Edit its state with new state given to function*/
        if(SL_state == SpeedLimit_Enable)
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	81 30       	cpi	r24, 0x01	; 1
    3f70:	21 f4       	brne	.+8      	; 0x3f7a <DashBoard_Update_SpeedLimiter_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    3f78:	03 c0       	rjmp	.+6      	; 0x3f80 <DashBoard_Update_SpeedLimiter_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f7a:	83 e0       	ldi	r24, 0x03	; 3
    3f7c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    // }
    sei();
    3f80:	78 94       	sei
}
    3f82:	0f 90       	pop	r0
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	08 95       	ret

00003f8a <DashBoard_updateSpeedLimitValue>:


static void DashBoard_updateSpeedLimitValue(void)
{
    3f8a:	df 93       	push	r29
    3f8c:	cf 93       	push	r28
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_3_LCD)
    3f92:	80 91 75 02 	lds	r24, 0x0275
    3f96:	82 30       	cpi	r24, 0x02	; 2
    3f98:	a1 f4       	brne	.+40     	; 0x3fc2 <DashBoard_updateSpeedLimitValue+0x38>
    {
        cli();
    3f9a:	f8 94       	cli
        //Global_Speed_Limiter_value
        LCD_MoveCursor(0,7);
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	67 e0       	ldi	r22, 0x07	; 7
    3fa0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        LCD_intToString(Global_Speed_Limiter_value);
    3fa4:	80 91 77 02 	lds	r24, 0x0277
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	a0 e0       	ldi	r26, 0x00	; 0
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	bc 01       	movw	r22, r24
    3fb2:	cd 01       	movw	r24, r26
    3fb4:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
        LCD_DisplayString("KMH ");
    3fb8:	8c e8       	ldi	r24, 0x8C	; 140
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        sei();
    3fc0:	78 94       	sei
    }
}
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <App_GetDiffCarSpeed_and_limit>:


static void App_GetDiffCarSpeed_and_limit(void)
{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    if(Car_Speed > Global_Speed_Limiter_value)
    3fd0:	80 91 77 02 	lds	r24, 0x0277
    3fd4:	28 2f       	mov	r18, r24
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	80 91 a8 02 	lds	r24, 0x02A8
    3fdc:	90 91 a9 02 	lds	r25, 0x02A9
    3fe0:	28 17       	cp	r18, r24
    3fe2:	39 07       	cpc	r19, r25
    3fe4:	1c f4       	brge	.+6      	; 0x3fec <App_GetDiffCarSpeed_and_limit+0x24>
    {
        /*  Update Status  */
        Speed_limit_Current_Status = Speed_Limit_Failed ;
    3fe6:	10 92 aa 02 	sts	0x02AA, r1
    3fea:	0e c0       	rjmp	.+28     	; 0x4008 <App_GetDiffCarSpeed_and_limit+0x40>
    }
    else if(Car_Speed <= Global_Speed_Limiter_value)
    3fec:	80 91 77 02 	lds	r24, 0x0277
    3ff0:	28 2f       	mov	r18, r24
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	80 91 a8 02 	lds	r24, 0x02A8
    3ff8:	90 91 a9 02 	lds	r25, 0x02A9
    3ffc:	28 17       	cp	r18, r24
    3ffe:	39 07       	cpc	r19, r25
    4000:	1c f0       	brlt	.+6      	; 0x4008 <App_GetDiffCarSpeed_and_limit+0x40>
    {
        Speed_limit_Current_Status = Speed_Limit_Meet ;
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	80 93 aa 02 	sts	0x02AA, r24
    }
    if(Page_Current_State == Page_3_LCD)
    4008:	80 91 75 02 	lds	r24, 0x0275
    400c:	82 30       	cpi	r24, 0x02	; 2
    400e:	19 f4       	brne	.+6      	; 0x4016 <App_GetDiffCarSpeed_and_limit+0x4e>
    {
        /*  Make update in LCD  and give sound notify  */
        DashBoard_SpeedLimit_status_update();
    4010:	0e 94 28 20 	call	0x4050	; 0x4050 <DashBoard_SpeedLimit_status_update>
    4014:	1a c0       	rjmp	.+52     	; 0x404a <App_GetDiffCarSpeed_and_limit+0x82>
    }
    else /* give sound notify  */
    {
        if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Meet))
    4016:	80 91 a2 02 	lds	r24, 0x02A2
    401a:	81 30       	cpi	r24, 0x01	; 1
    401c:	51 f4       	brne	.+20     	; 0x4032 <App_GetDiffCarSpeed_and_limit+0x6a>
    401e:	80 91 aa 02 	lds	r24, 0x02AA
    4022:	81 30       	cpi	r24, 0x01	; 1
    4024:	31 f4       	brne	.+12     	; 0x4032 <App_GetDiffCarSpeed_and_limit+0x6a>
        {
            GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    4026:	82 e0       	ldi	r24, 0x02	; 2
    4028:	67 e0       	ldi	r22, 0x07	; 7
    402a:	40 e0       	ldi	r20, 0x00	; 0
    402c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    4030:	0c c0       	rjmp	.+24     	; 0x404a <App_GetDiffCarSpeed_and_limit+0x82>
        }
        else if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Failed))
    4032:	80 91 a2 02 	lds	r24, 0x02A2
    4036:	81 30       	cpi	r24, 0x01	; 1
    4038:	41 f4       	brne	.+16     	; 0x404a <App_GetDiffCarSpeed_and_limit+0x82>
    403a:	80 91 aa 02 	lds	r24, 0x02AA
    403e:	88 23       	and	r24, r24
    4040:	21 f4       	brne	.+8      	; 0x404a <App_GetDiffCarSpeed_and_limit+0x82>
        {
            GPIO_TogglePin(Relay_PORT,Relay_PIN);
    4042:	82 e0       	ldi	r24, 0x02	; 2
    4044:	67 e0       	ldi	r22, 0x07	; 7
    4046:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_TogglePin>
        }
    }
}
    404a:	cf 91       	pop	r28
    404c:	df 91       	pop	r29
    404e:	08 95       	ret

00004050 <DashBoard_SpeedLimit_status_update>:

static void DashBoard_SpeedLimit_status_update(void)
{
    4050:	df 93       	push	r29
    4052:	cf 93       	push	r28
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
    // if(Page_Current_State == Page_3_LCD)
    // {
        cli();
    4058:	f8 94       	cli
        LCD_MoveCursor(1,9);
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	69 e0       	ldi	r22, 0x09	; 9
    405e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    4062:	80 91 a2 02 	lds	r24, 0x02A2
    4066:	81 30       	cpi	r24, 0x01	; 1
    4068:	a9 f4       	brne	.+42     	; 0x4094 <DashBoard_SpeedLimit_status_update+0x44>
        {
            if(Speed_limit_Current_Status == Speed_Limit_Meet)
    406a:	80 91 aa 02 	lds	r24, 0x02AA
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	49 f4       	brne	.+18     	; 0x4084 <DashBoard_SpeedLimit_status_update+0x34>
            {
                LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    4072:	84 e0       	ldi	r24, 0x04	; 4
    4074:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
                /*  stop sound of relay  */
                GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	67 e0       	ldi	r22, 0x07	; 7
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    4082:	0b c0       	rjmp	.+22     	; 0x409a <DashBoard_SpeedLimit_status_update+0x4a>
            }
            else
            {
                LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    4084:	86 e0       	ldi	r24, 0x06	; 6
    4086:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
                /*  Action Will taken notify user  as it sound of relay switch*/
                GPIO_TogglePin(Relay_PORT,Relay_PIN);
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	67 e0       	ldi	r22, 0x07	; 7
    408e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_TogglePin>
    4092:	03 c0       	rjmp	.+6      	; 0x409a <DashBoard_SpeedLimit_status_update+0x4a>
            }
        }
        else 
        {
            LCD_DisplayCharacter('D'); //system disabled
    4094:	84 e4       	ldi	r24, 0x44	; 68
    4096:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
        }
        sei();
    409a:	78 94       	sei
    // }
}
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <DahBoard_Update_DrivingMonetoring_State>:

static void DahBoard_Update_DrivingMonetoring_State(uint8 DM_state)
{
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	0f 92       	push	r0
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	89 83       	std	Y+1, r24	; 0x01
    cli();
    40ae:	f8 94       	cli
    /*  Go to index that display current Driving Monetoring state*/
    LCD_MoveCursor(2,18);
    40b0:	82 e0       	ldi	r24, 0x02	; 2
    40b2:	62 e1       	ldi	r22, 0x12	; 18
    40b4:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>

    if(DM_state == DirivingMonetoring_Enable)
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	21 f4       	brne	.+8      	; 0x40c6 <DahBoard_Update_DrivingMonetoring_State+0x24>
    {
        LCD_DisplayCharacter(POS_LCD_Right_ICON);
    40be:	82 e0       	ldi	r24, 0x02	; 2
    40c0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    40c4:	03 c0       	rjmp	.+6      	; 0x40cc <DahBoard_Update_DrivingMonetoring_State+0x2a>
    }
    else 
    {
        LCD_DisplayCharacter(POS_LCD_False_ICON);
    40c6:	83 e0       	ldi	r24, 0x03	; 3
    40c8:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    }

    sei();
    40cc:	78 94       	sei

}
    40ce:	0f 90       	pop	r0
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <DashBoard_DrivingMonetoring_Status_update>:

static void DashBoard_DrivingMonetoring_Status_update(void)
{
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    cli();
    40de:	f8 94       	cli
    // اكتب ام الفانكشن ده لما تيجي 👀👀
    LCD_MoveCursor(0,10);
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	6a e0       	ldi	r22, 0x0A	; 10
    40e4:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    40e8:	80 91 ac 02 	lds	r24, 0x02AC
    40ec:	81 30       	cpi	r24, 0x01	; 1
    40ee:	61 f4       	brne	.+24     	; 0x4108 <DashBoard_DrivingMonetoring_Status_update+0x32>
    {
        if(DrivingMonetoring_Current_Status == DM_Meet)
    40f0:	80 91 78 02 	lds	r24, 0x0278
    40f4:	81 30       	cpi	r24, 0x01	; 1
    40f6:	21 f4       	brne	.+8      	; 0x4100 <DashBoard_DrivingMonetoring_Status_update+0x2a>
        {
            LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    40f8:	84 e0       	ldi	r24, 0x04	; 4
    40fa:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    40fe:	07 c0       	rjmp	.+14     	; 0x410e <DashBoard_DrivingMonetoring_Status_update+0x38>
        }
        else
        {
            LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    4100:	86 e0       	ldi	r24, 0x06	; 6
    4102:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    4106:	03 c0       	rjmp	.+6      	; 0x410e <DashBoard_DrivingMonetoring_Status_update+0x38>
        }
    }
    else
    {
        LCD_DisplayCharacter('D'); //system disabled
    4108:	84 e4       	ldi	r24, 0x44	; 68
    410a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    }
    sei();
    410e:	78 94       	sei
}
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	08 95       	ret

00004116 <DashBoard_DrivingMonetoring_continous_Status_update>:

static void DashBoard_DrivingMonetoring_continous_Status_update(void)
{
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_2_LCD)
    411e:	80 91 75 02 	lds	r24, 0x0275
    4122:	81 30       	cpi	r24, 0x01	; 1
    4124:	11 f4       	brne	.+4      	; 0x412a <DashBoard_DrivingMonetoring_continous_Status_update+0x14>
    {
        DashBoard_DrivingMonetoring_Status_update();
    4126:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <DashBoard_DrivingMonetoring_Status_update>
    }
}
    412a:	cf 91       	pop	r28
    412c:	df 91       	pop	r29
    412e:	08 95       	ret

00004130 <DashBoard_DistanceShow>:



static void DashBoard_DistanceShow(void)
{
    4130:	df 93       	push	r29
    4132:	cf 93       	push	r28
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(3,0);
    4138:	83 e0       	ldi	r24, 0x03	; 3
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"Distance : ");
    4140:	81 e9       	ldi	r24, 0x91	; 145
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
}
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <DashBoard_DistanceHide>:


static void DashBoard_DistanceHide(void)
{
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(3,0);
    4156:	83 e0       	ldi	r24, 0x03	; 3
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"                    ");
    415e:	8d e9       	ldi	r24, 0x9D	; 157
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
}
    4166:	cf 91       	pop	r28
    4168:	df 91       	pop	r29
    416a:	08 95       	ret

0000416c <APP_DashBoardPage_update>:


static void APP_DashBoardPage_update(void)
{
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
    4174:	65 97       	sbiw	r28, 0x15	; 21
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    
    uint8 pages_option [4][4] = { {POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected} };
    4180:	ce 01       	movw	r24, r28
    4182:	01 96       	adiw	r24, 0x01	; 1
    4184:	9a 8b       	std	Y+18, r25	; 0x12
    4186:	89 8b       	std	Y+17, r24	; 0x11
    4188:	e2 e8       	ldi	r30, 0x82	; 130
    418a:	f2 e0       	ldi	r31, 0x02	; 2
    418c:	fc 8b       	std	Y+20, r31	; 0x14
    418e:	eb 8b       	std	Y+19, r30	; 0x13
    4190:	f0 e1       	ldi	r31, 0x10	; 16
    4192:	fd 8b       	std	Y+21, r31	; 0x15
    4194:	eb 89       	ldd	r30, Y+19	; 0x13
    4196:	fc 89       	ldd	r31, Y+20	; 0x14
    4198:	00 80       	ld	r0, Z
    419a:	8b 89       	ldd	r24, Y+19	; 0x13
    419c:	9c 89       	ldd	r25, Y+20	; 0x14
    419e:	01 96       	adiw	r24, 0x01	; 1
    41a0:	9c 8b       	std	Y+20, r25	; 0x14
    41a2:	8b 8b       	std	Y+19, r24	; 0x13
    41a4:	e9 89       	ldd	r30, Y+17	; 0x11
    41a6:	fa 89       	ldd	r31, Y+18	; 0x12
    41a8:	00 82       	st	Z, r0
    41aa:	89 89       	ldd	r24, Y+17	; 0x11
    41ac:	9a 89       	ldd	r25, Y+18	; 0x12
    41ae:	01 96       	adiw	r24, 0x01	; 1
    41b0:	9a 8b       	std	Y+18, r25	; 0x12
    41b2:	89 8b       	std	Y+17, r24	; 0x11
    41b4:	9d 89       	ldd	r25, Y+21	; 0x15
    41b6:	91 50       	subi	r25, 0x01	; 1
    41b8:	9d 8b       	std	Y+21, r25	; 0x15
    41ba:	ed 89       	ldd	r30, Y+21	; 0x15
    41bc:	ee 23       	and	r30, r30
    41be:	51 f7       	brne	.-44     	; 0x4194 <APP_DashBoardPage_update+0x28>
    cli();
    41c0:	f8 94       	cli
    LCD_MoveCursor(3,8);
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	68 e0       	ldi	r22, 0x08	; 8
    41c6:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    /*  Display indicator for current page  */
    LCD_DisplayCharacter(pages_option[Page_Current_State][0]);
    41ca:	80 91 75 02 	lds	r24, 0x0275
    41ce:	99 27       	eor	r25, r25
    41d0:	87 fd       	sbrc	r24, 7
    41d2:	90 95       	com	r25
    41d4:	9c 01       	movw	r18, r24
    41d6:	22 0f       	add	r18, r18
    41d8:	33 1f       	adc	r19, r19
    41da:	22 0f       	add	r18, r18
    41dc:	33 1f       	adc	r19, r19
    41de:	ce 01       	movw	r24, r28
    41e0:	01 96       	adiw	r24, 0x01	; 1
    41e2:	fc 01       	movw	r30, r24
    41e4:	e2 0f       	add	r30, r18
    41e6:	f3 1f       	adc	r31, r19
    41e8:	80 81       	ld	r24, Z
    41ea:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][1]);
    41ee:	80 91 75 02 	lds	r24, 0x0275
    41f2:	99 27       	eor	r25, r25
    41f4:	87 fd       	sbrc	r24, 7
    41f6:	90 95       	com	r25
    41f8:	9c 01       	movw	r18, r24
    41fa:	22 0f       	add	r18, r18
    41fc:	33 1f       	adc	r19, r19
    41fe:	22 0f       	add	r18, r18
    4200:	33 1f       	adc	r19, r19
    4202:	ce 01       	movw	r24, r28
    4204:	01 96       	adiw	r24, 0x01	; 1
    4206:	82 0f       	add	r24, r18
    4208:	93 1f       	adc	r25, r19
    420a:	fc 01       	movw	r30, r24
    420c:	31 96       	adiw	r30, 0x01	; 1
    420e:	80 81       	ld	r24, Z
    4210:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][2]);
    4214:	80 91 75 02 	lds	r24, 0x0275
    4218:	99 27       	eor	r25, r25
    421a:	87 fd       	sbrc	r24, 7
    421c:	90 95       	com	r25
    421e:	88 0f       	add	r24, r24
    4220:	99 1f       	adc	r25, r25
    4222:	01 96       	adiw	r24, 0x01	; 1
    4224:	9c 01       	movw	r18, r24
    4226:	22 0f       	add	r18, r18
    4228:	33 1f       	adc	r19, r19
    422a:	ce 01       	movw	r24, r28
    422c:	01 96       	adiw	r24, 0x01	; 1
    422e:	fc 01       	movw	r30, r24
    4230:	e2 0f       	add	r30, r18
    4232:	f3 1f       	adc	r31, r19
    4234:	80 81       	ld	r24, Z
    4236:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][3]);
    423a:	80 91 75 02 	lds	r24, 0x0275
    423e:	99 27       	eor	r25, r25
    4240:	87 fd       	sbrc	r24, 7
    4242:	90 95       	com	r25
    4244:	9c 01       	movw	r18, r24
    4246:	22 0f       	add	r18, r18
    4248:	33 1f       	adc	r19, r19
    424a:	22 0f       	add	r18, r18
    424c:	33 1f       	adc	r19, r19
    424e:	ce 01       	movw	r24, r28
    4250:	01 96       	adiw	r24, 0x01	; 1
    4252:	82 0f       	add	r24, r18
    4254:	93 1f       	adc	r25, r19
    4256:	fc 01       	movw	r30, r24
    4258:	33 96       	adiw	r30, 0x03	; 3
    425a:	80 81       	ld	r24, Z
    425c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    sei();
    4260:	78 94       	sei
}
    4262:	65 96       	adiw	r28, 0x15	; 21
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	cf 91       	pop	r28
    4270:	df 91       	pop	r29
    4272:	08 95       	ret

00004274 <APP_DashBoard_SwitchPages>:




static void APP_DashBoard_SwitchPages(void)
{
    4274:	df 93       	push	r29
    4276:	cf 93       	push	r28
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    cli();
    427c:	f8 94       	cli
    LCD_MoveCursor(0,0);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString("              ");
    4286:	82 eb       	ldi	r24, 0xB2	; 178
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    LCD_MoveCursor(1,0);
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    LCD_DisplayString("           ");
    4296:	81 ec       	ldi	r24, 0xC1	; 193
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    /*  Main window that I start with  */
    if(Page_Current_State == Page_2_LCD)
    429e:	80 91 75 02 	lds	r24, 0x0275
    42a2:	81 30       	cpi	r24, 0x01	; 1
    42a4:	59 f4       	brne	.+22     	; 0x42bc <APP_DashBoard_SwitchPages+0x48>
    {
        /*  display data for Driving monetoring */
        LCD_MoveCursor(0,0);
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        LCD_DisplayString((const uint8 * )"DM Status:");
    42ae:	80 e6       	ldi	r24, 0x60	; 96
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        /*  Call function that will handle status for DM */
        DashBoard_DrivingMonetoring_Status_update();
    42b6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <DashBoard_DrivingMonetoring_Status_update>
    42ba:	55 c0       	rjmp	.+170    	; 0x4366 <APP_DashBoard_SwitchPages+0xf2>
    }
    else if(Page_Current_State == Page_1_LCD)
    42bc:	80 91 75 02 	lds	r24, 0x0275
    42c0:	88 23       	and	r24, r24
    42c2:	f1 f4       	brne	.+60     	; 0x4300 <APP_DashBoard_SwitchPages+0x8c>
    {
        if(BrakingAssist_Current_State == BrakingAssist_Enable)
    42c4:	80 91 a3 02 	lds	r24, 0x02A3
    42c8:	81 30       	cpi	r24, 0x01	; 1
    42ca:	89 f4       	brne	.+34     	; 0x42ee <APP_DashBoard_SwitchPages+0x7a>
        {
            LCD_MoveCursor(0,0);
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
            LCD_DisplayString("DIS : ");
    42d4:	8d ec       	ldi	r24, 0xCD	; 205
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
            LCD_MoveCursor(1,0);
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
            LCD_DisplayString("Status : ");
    42e4:	84 ed       	ldi	r24, 0xD4	; 212
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    42ec:	3c c0       	rjmp	.+120    	; 0x4366 <APP_DashBoard_SwitchPages+0xf2>
        }
        else 
        {
            LCD_MoveCursor(0,0);
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
            LCD_DisplayString("Disabled");
    42f6:	8e ed       	ldi	r24, 0xDE	; 222
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    42fe:	33 c0       	rjmp	.+102    	; 0x4366 <APP_DashBoard_SwitchPages+0xf2>
        }

    }
    else if(Page_Current_State == Page_3_LCD)
    4300:	80 91 75 02 	lds	r24, 0x0275
    4304:	82 30       	cpi	r24, 0x02	; 2
    4306:	09 f5       	brne	.+66     	; 0x434a <APP_DashBoard_SwitchPages+0xd6>
    {
        LCD_MoveCursor(0,0);
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        LCD_DisplayString("SLIM : ");
    4310:	87 ee       	ldi	r24, 0xE7	; 231
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        LCD_intToString(Global_Speed_Limiter_value);
    4318:	80 91 77 02 	lds	r24, 0x0277
    431c:	88 2f       	mov	r24, r24
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	a0 e0       	ldi	r26, 0x00	; 0
    4322:	b0 e0       	ldi	r27, 0x00	; 0
    4324:	bc 01       	movw	r22, r24
    4326:	cd 01       	movw	r24, r26
    4328:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
        LCD_DisplayString("KMH ");
    432c:	8c e8       	ldi	r24, 0x8C	; 140
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        LCD_MoveCursor(1,0);
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        LCD_DisplayString("Status : ");
    433c:	84 ed       	ldi	r24, 0xD4	; 212
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        /* update Icons of speed limit status  */
        DashBoard_SpeedLimit_status_update();
    4344:	0e 94 28 20 	call	0x4050	; 0x4050 <DashBoard_SpeedLimit_status_update>
    4348:	0e c0       	rjmp	.+28     	; 0x4366 <APP_DashBoard_SwitchPages+0xf2>
    }
    else if(Page_Current_State == Page_4_LCD)
    434a:	80 91 75 02 	lds	r24, 0x0275
    434e:	83 30       	cpi	r24, 0x03	; 3
    4350:	51 f4       	brne	.+20     	; 0x4366 <APP_DashBoard_SwitchPages+0xf2>
    {
        LCD_MoveCursor(0,0);
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	60 e0       	ldi	r22, 0x00	; 0
    4356:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        LCD_DisplayString("D=18/3/2024");
    435a:	8f ee       	ldi	r24, 0xEF	; 239
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        DashBoard_updateTime();
    4362:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <DashBoard_updateTime>

    }
    sei();
    4366:	78 94       	sei
}
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	08 95       	ret

0000436e <APP_KeypadUpdate>:


static void APP_KeypadUpdate(void)
{
    436e:	df 93       	push	r29
    4370:	cf 93       	push	r28
    4372:	0f 92       	push	r0
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62

    static uint8 BrakingAssit_IsStillPressed = NO_Condition ;

    static uint8 DrivingMonetoring_IsStillPressed = NO_Condition ;

    volatile sint8 local_currentValue_keypad = Keypad_GetPressedKey();/* Take last keypad pressed button */
    4378:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Keypad_GetPressedKey>
    437c:	89 83       	std	Y+1, r24	; 0x01


/* (Button 1️⃣) Handle GearBox Button   */

    /*  👀👀👀👀👀👀GearBox switch only happen when press on gearbox and brake button in same time  */
    if( (local_currentValue_keypad == Keypad_GearBox_pressed_value) && (Global_Braking_BTN_State == BTN_Pressed_State) )
    437e:	89 81       	ldd	r24, Y+1	; 0x01
    4380:	82 30       	cpi	r24, 0x02	; 2
    4382:	11 f5       	brne	.+68     	; 0x43c8 <APP_KeypadUpdate+0x5a>
    4384:	80 91 76 02 	lds	r24, 0x0276
    4388:	88 23       	and	r24, r24
    438a:	f1 f4       	brne	.+60     	; 0x43c8 <APP_KeypadUpdate+0x5a>
    // if((local_currentValue_keypad == Keypad_GearBox_pressed_value))
    {
        /*  Make counter with zero to start count from zero for DM */
        TimeOut_Counter = 0 ;
    438c:	10 92 ad 02 	sts	0x02AD, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	80 93 78 02 	sts	0x0278, r24

        /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
        if(GearBox_IsStillPressed == NO_Condition)
    4396:	80 91 b8 02 	lds	r24, 0x02B8
    439a:	88 23       	and	r24, r24
    439c:	b9 f4       	brne	.+46     	; 0x43cc <APP_KeypadUpdate+0x5e>
        {
            GearBox_IsStillPressed = YES_Condition ;
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	80 93 b8 02 	sts	0x02B8, r24
            /* turn buzzer on and give timer 0 clock and set timeout    */
            Buzzer_NotifySound();
    43a4:	0e 94 9b 23 	call	0x4736	; 0x4736 <Buzzer_NotifySound>

            /*  Go to next state for gearbox*/
            GearBox_Current_State ++ ;
    43a8:	80 91 a0 02 	lds	r24, 0x02A0
    43ac:	8f 5f       	subi	r24, 0xFF	; 255
    43ae:	80 93 a0 02 	sts	0x02A0, r24
            if(GearBox_Current_State == GearBox_Return_to_N  )
    43b2:	80 91 a0 02 	lds	r24, 0x02A0
    43b6:	83 30       	cpi	r24, 0x03	; 3
    43b8:	11 f4       	brne	.+4      	; 0x43be <APP_KeypadUpdate+0x50>
            {
                GearBox_Current_State = N_GearBox ;
    43ba:	10 92 a0 02 	sts	0x02A0, r1
                
            }

            /*  call function to update gearbox state in Dashboard*/
            DashBoard_Update_GearBox_state(GearBox_Current_State);
    43be:	80 91 a0 02 	lds	r24, 0x02A0
    43c2:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <DashBoard_Update_GearBox_state>
    43c6:	02 c0       	rjmp	.+4      	; 0x43cc <APP_KeypadUpdate+0x5e>
        
    }
    else
    {
        /*  Enter this state when Button released*/
        GearBox_IsStillPressed = NO_Condition ;
    43c8:	10 92 b8 02 	sts	0x02B8, r1
    }

    /*  There buttons shouldn't take any action except on D mode like(Cruise Control , Braking Assist and Speed limiter)*/
    if(GearBox_Current_State == D_GearBox)
    43cc:	80 91 a0 02 	lds	r24, 0x02A0
    43d0:	81 30       	cpi	r24, 0x01	; 1
    43d2:	09 f0       	breq	.+2      	; 0x43d6 <APP_KeypadUpdate+0x68>
    43d4:	a9 c0       	rjmp	.+338    	; 0x4528 <APP_KeypadUpdate+0x1ba>
    {
/* (Button 2️⃣) Handle Cruise Control system   */
        if(local_currentValue_keypad == Keypad_CCS_pressed_value) 
    43d6:	89 81       	ldd	r24, Y+1	; 0x01
    43d8:	88 23       	and	r24, r24
    43da:	09 f5       	brne	.+66     	; 0x441e <APP_KeypadUpdate+0xb0>
        {
            /*  Make counter with zero to start count from zero for DM */
            TimeOut_Counter = 0 ;
    43dc:	10 92 ad 02 	sts	0x02AD, r1
            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	80 93 78 02 	sts	0x0278, r24

            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(CCS_IsStillPressed == NO_Condition)
    43e6:	80 91 b7 02 	lds	r24, 0x02B7
    43ea:	88 23       	and	r24, r24
    43ec:	d1 f4       	brne	.+52     	; 0x4422 <APP_KeypadUpdate+0xb4>
            {
                CCS_IsStillPressed = YES_Condition ;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	80 93 b7 02 	sts	0x02B7, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    43f4:	0e 94 9b 23 	call	0x4736	; 0x4736 <Buzzer_NotifySound>

                if(CCS_Currnet_state == CCS_Disable ) 
    43f8:	80 91 a1 02 	lds	r24, 0x02A1
    43fc:	88 23       	and	r24, r24
    43fe:	41 f4       	brne	.+16     	; 0x4410 <APP_KeypadUpdate+0xa2>
                {
                    
                    /*  Update ACCS state with new value (Enabled)*/
                    CCS_Currnet_state = CCS_Enable;
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	80 93 a1 02 	sts	0x02A1, r24
                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    4406:	80 91 a1 02 	lds	r24, 0x02A1
    440a:	0e 94 76 1f 	call	0x3eec	; 0x3eec <DashBoard_Update_CCS_State>
    440e:	09 c0       	rjmp	.+18     	; 0x4422 <APP_KeypadUpdate+0xb4>
                    //DashBoard_DistanceShow();
                    //DashBoard_DistanceShow_small();
                }
                else
                {
                    CCS_Currnet_state = CCS_Disable;
    4410:	10 92 a1 02 	sts	0x02A1, r1
                    /*  Turn off led that work in Adaptive cruise control  as may be  in not safe area and  turn off Adaptive cruise control   */
                    //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
                    /*  🚩🚩🚩🚩🚩🚩🙆‍♂️🙆‍♂️🙆‍♂️ i think that I need to put diable and enable to interrupt as I may be ACCS enabled and when I disable and press braiking at same time */
                    //LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);

                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    4414:	80 91 a1 02 	lds	r24, 0x02A1
    4418:	0e 94 76 1f 	call	0x3eec	; 0x3eec <DashBoard_Update_CCS_State>
    441c:	02 c0       	rjmp	.+4      	; 0x4422 <APP_KeypadUpdate+0xb4>
            
        }
        else
        {
            /*  Enter this state when Button released*/
            CCS_IsStillPressed = NO_Condition ;
    441e:	10 92 b7 02 	sts	0x02B7, r1
        }
/* (Button 3️⃣) Handle Speed Limiter system   */
        /*  Handle Speed Limiter System Button   */
        if(local_currentValue_keypad == Keypad_SpeedLimit_ON_OFF_pressed_value) 
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	88 30       	cpi	r24, 0x08	; 8
    4426:	31 f5       	brne	.+76     	; 0x4474 <APP_KeypadUpdate+0x106>
        {
            /*  Make counter with zero to start count from zero for DM */
            TimeOut_Counter = 0 ;
    4428:	10 92 ad 02 	sts	0x02AD, r1
            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ; 
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	80 93 78 02 	sts	0x0278, r24


            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(SL_ON_OFFIsStillPressed == NO_Condition)
    4432:	80 91 b4 02 	lds	r24, 0x02B4
    4436:	88 23       	and	r24, r24
    4438:	f9 f4       	brne	.+62     	; 0x4478 <APP_KeypadUpdate+0x10a>
            {
                SL_ON_OFFIsStillPressed = YES_Condition ;
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	80 93 b4 02 	sts	0x02B4, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    4440:	0e 94 9b 23 	call	0x4736	; 0x4736 <Buzzer_NotifySound>

                if(SpeedLimit_Current__State == SpeedLimit_Disable)
    4444:	80 91 a2 02 	lds	r24, 0x02A2
    4448:	88 23       	and	r24, r24
    444a:	41 f4       	brne	.+16     	; 0x445c <APP_KeypadUpdate+0xee>
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Enable ;
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	80 93 a2 02 	sts	0x02A2, r24
                    /*  Call updater for Speed limiter state */
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    4452:	80 91 a2 02 	lds	r24, 0x02A2
    4456:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <DashBoard_Update_SpeedLimiter_State>
    445a:	0e c0       	rjmp	.+28     	; 0x4478 <APP_KeypadUpdate+0x10a>
                }
                else 
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Disable ;
    445c:	10 92 a2 02 	sts	0x02A2, r1
                    /*  Call updater for Speed limiter state */   
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    4460:	80 91 a2 02 	lds	r24, 0x02A2
    4464:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <DashBoard_Update_SpeedLimiter_State>
                    /*  stop sound of relay  as may be close this system and I also my speed higher than limit speed */
                    GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	67 e0       	ldi	r22, 0x07	; 7
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <GPIO_WritePin>
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <APP_KeypadUpdate+0x10a>
                }
            }  
        }
        else
        {
            SL_ON_OFFIsStillPressed = NO_Condition ;
    4474:	10 92 b4 02 	sts	0x02B4, r1
        } 

/* (Button 4️⃣) Handle Braking Assist system   */
        if(local_currentValue_keypad == Keypad_BrakingAssist_pressed_value)
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	8a 32       	cpi	r24, 0x2A	; 42
    447c:	39 f5       	brne	.+78     	; 0x44cc <APP_KeypadUpdate+0x15e>
        {
            /*  Make counter with zero to start count from zero for DM */
            TimeOut_Counter = 0 ;
    447e:	10 92 ad 02 	sts	0x02AD, r1
            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	80 93 78 02 	sts	0x0278, r24

            if(BrakingAssit_IsStillPressed == NO_Condition)
    4488:	80 91 b1 02 	lds	r24, 0x02B1
    448c:	88 23       	and	r24, r24
    448e:	01 f5       	brne	.+64     	; 0x44d0 <APP_KeypadUpdate+0x162>
            {
                BrakingAssit_IsStillPressed = YES_Condition ;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	80 93 b1 02 	sts	0x02B1, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    4496:	0e 94 9b 23 	call	0x4736	; 0x4736 <Buzzer_NotifySound>
                if(BrakingAssist_Current_State == BrakingAssist_Disable)
    449a:	80 91 a3 02 	lds	r24, 0x02A3
    449e:	88 23       	and	r24, r24
    44a0:	41 f4       	brne	.+16     	; 0x44b2 <APP_KeypadUpdate+0x144>
                {
                    BrakingAssist_Current_State = BrakingAssist_Enable ;
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	80 93 a3 02 	sts	0x02A3, r24
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    44a8:	80 91 a3 02 	lds	r24, 0x02A3
    44ac:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <DashBoard_Update_BrakingAssist_State>
    44b0:	06 c0       	rjmp	.+12     	; 0x44be <APP_KeypadUpdate+0x150>
                }
                else
                {
                    BrakingAssist_Current_State = BrakingAssist_Disable ;
    44b2:	10 92 a3 02 	sts	0x02A3, r1
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    44b6:	80 91 a3 02 	lds	r24, 0x02A3
    44ba:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <DashBoard_Update_BrakingAssist_State>
                }
                /*  As if I in page braking Assist and Enable or disable  need to update*/
                if(Page_Current_State == Page_1_LCD)
    44be:	80 91 75 02 	lds	r24, 0x0275
    44c2:	88 23       	and	r24, r24
    44c4:	29 f4       	brne	.+10     	; 0x44d0 <APP_KeypadUpdate+0x162>
                {
                    APP_DashBoard_SwitchPages();    
    44c6:	0e 94 3a 21 	call	0x4274	; 0x4274 <APP_DashBoard_SwitchPages>
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <APP_KeypadUpdate+0x162>
                }
            }
        }
        else 
        {
            BrakingAssit_IsStillPressed = NO_Condition ;
    44cc:	10 92 b1 02 	sts	0x02B1, r1
        }

        /* (Button 10) Handle Driving monetoring Button   */
        if(local_currentValue_keypad == Keypad_DrivingMonetoring_pressed_value)
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	83 32       	cpi	r24, 0x23	; 35
    44d4:	39 f5       	brne	.+78     	; 0x4524 <APP_KeypadUpdate+0x1b6>
        {
            if(DrivingMonetoring_IsStillPressed == NO_Condition)
    44d6:	80 91 b0 02 	lds	r24, 0x02B0
    44da:	88 23       	and	r24, r24
    44dc:	29 f5       	brne	.+74     	; 0x4528 <APP_KeypadUpdate+0x1ba>
            {
                DrivingMonetoring_IsStillPressed = YES_Condition ;
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	80 93 b0 02 	sts	0x02B0, r24

                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    44e4:	0e 94 9b 23 	call	0x4736	; 0x4736 <Buzzer_NotifySound>
                
                if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    44e8:	80 91 ac 02 	lds	r24, 0x02AC
    44ec:	88 23       	and	r24, r24
    44ee:	99 f4       	brne	.+38     	; 0x4516 <APP_KeypadUpdate+0x1a8>
                {
                    DrivingMonetoring_Current_State = DirivingMonetoring_Enable ;
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	80 93 ac 02 	sts	0x02AC, r24
                    /*  Update in LCD   */
                    DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    44f6:	80 91 ac 02 	lds	r24, 0x02AC
    44fa:	0e 94 51 20 	call	0x40a2	; 0x40a2 <DahBoard_Update_DrivingMonetoring_State>
                    
                    /*  Provide clock to Timer 1 to start count  */
                    Timer1_ProvideClock();
    44fe:	0e 94 bf 07 	call	0xf7e	; 0xf7e <Timer1_ProvideClock>
                    /*  Load timer with value that when overflow occur will happen after 1 second  */
                    Timer1_UpdateValue(Value_Loading_Timer1);
    4502:	8b e7       	ldi	r24, 0x7B	; 123
    4504:	91 ee       	ldi	r25, 0xE1	; 225
    4506:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer1_UpdateValue>

                    /*  Make counter start from zero Again  */
                    TimeOut_Counter = 0 ;
    450a:	10 92 ad 02 	sts	0x02AD, r1

                    /*  intialize that will meeting state at first  */
                    DrivingMonetoring_Current_Status = DM_Meet ;
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	80 93 78 02 	sts	0x0278, r24
    4514:	09 c0       	rjmp	.+18     	; 0x4528 <APP_KeypadUpdate+0x1ba>
                }  
                else
                {
                    DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    4516:	10 92 ac 02 	sts	0x02AC, r1
                    /*  Update in LCD */
                    DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    451a:	80 91 ac 02 	lds	r24, 0x02AC
    451e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <DahBoard_Update_DrivingMonetoring_State>
    4522:	02 c0       	rjmp	.+4      	; 0x4528 <APP_KeypadUpdate+0x1ba>
                
            }
        }
        else
        {
            DrivingMonetoring_IsStillPressed = NO_Condition ;
    4524:	10 92 b0 02 	sts	0x02B0, r1

    }

/* (Button 5️⃣) Handle switch to right screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_R_pressed_value)
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	83 30       	cpi	r24, 0x03	; 3
    452c:	e1 f4       	brne	.+56     	; 0x4566 <APP_KeypadUpdate+0x1f8>
    {
        /*  Make counter with zero to start count from zero for DM */
        TimeOut_Counter = 0 ;
    452e:	10 92 ad 02 	sts	0x02AD, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	80 93 78 02 	sts	0x0278, r24

        if(R_Page_IsStillPressed == NO_Condition)
    4538:	80 91 b6 02 	lds	r24, 0x02B6
    453c:	88 23       	and	r24, r24
    453e:	a9 f4       	brne	.+42     	; 0x456a <APP_KeypadUpdate+0x1fc>
        {
            R_Page_IsStillPressed = YES_Condition ;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	80 93 b6 02 	sts	0x02B6, r24
            Page_Current_State++ ; /*   Move one right page*/
    4546:	80 91 75 02 	lds	r24, 0x0275
    454a:	8f 5f       	subi	r24, 0xFF	; 255
    454c:	80 93 75 02 	sts	0x0275, r24
            if(Page_Current_State == 4) /*  Exceed page 3 so it need to handle and return to page one  */
    4550:	80 91 75 02 	lds	r24, 0x0275
    4554:	84 30       	cpi	r24, 0x04	; 4
    4556:	11 f4       	brne	.+4      	; 0x455c <APP_KeypadUpdate+0x1ee>
            {
                Page_Current_State = Page_1_LCD ;
    4558:	10 92 75 02 	sts	0x0275, r1
            }
            /*  Call function that handle change in first two */
            APP_DashBoard_SwitchPages();
    455c:	0e 94 3a 21 	call	0x4274	; 0x4274 <APP_DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            APP_DashBoardPage_update();
    4560:	0e 94 b6 20 	call	0x416c	; 0x416c <APP_DashBoardPage_update>
    4564:	02 c0       	rjmp	.+4      	; 0x456a <APP_KeypadUpdate+0x1fc>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        R_Page_IsStillPressed = NO_Condition ;
    4566:	10 92 b6 02 	sts	0x02B6, r1
    }


/* (Button 6️⃣) Handle switch to left screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_L_pressed_value)
    456a:	89 81       	ldd	r24, Y+1	; 0x01
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	e9 f4       	brne	.+58     	; 0x45aa <APP_KeypadUpdate+0x23c>
    {
        /*  Make counter with zero to start count from zero for DM */
        TimeOut_Counter = 0 ;
    4570:	10 92 ad 02 	sts	0x02AD, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	80 93 78 02 	sts	0x0278, r24

        if(L_Page_IsStillPressed == NO_Condition)
    457a:	80 91 b5 02 	lds	r24, 0x02B5
    457e:	88 23       	and	r24, r24
    4580:	b1 f4       	brne	.+44     	; 0x45ae <APP_KeypadUpdate+0x240>
        {
            L_Page_IsStillPressed = YES_Condition ;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	80 93 b5 02 	sts	0x02B5, r24
            Page_Current_State-- ; /*   Move one right page*/
    4588:	80 91 75 02 	lds	r24, 0x0275
    458c:	81 50       	subi	r24, 0x01	; 1
    458e:	80 93 75 02 	sts	0x0275, r24
            if(Page_Current_State == -1) /*  Exceed page 3 so it need to handle and return to page one  */
    4592:	80 91 75 02 	lds	r24, 0x0275
    4596:	8f 3f       	cpi	r24, 0xFF	; 255
    4598:	19 f4       	brne	.+6      	; 0x45a0 <APP_KeypadUpdate+0x232>
            {
                Page_Current_State = Page_4_LCD ;
    459a:	83 e0       	ldi	r24, 0x03	; 3
    459c:	80 93 75 02 	sts	0x0275, r24
            }
            /*  Call function that handle change in first two */
            APP_DashBoard_SwitchPages();
    45a0:	0e 94 3a 21 	call	0x4274	; 0x4274 <APP_DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            APP_DashBoardPage_update();
    45a4:	0e 94 b6 20 	call	0x416c	; 0x416c <APP_DashBoardPage_update>
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <APP_KeypadUpdate+0x240>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        L_Page_IsStillPressed = NO_Condition ;
    45aa:	10 92 b5 02 	sts	0x02B5, r1

/* (Button 7️⃣) Handle increase in speed limit   */
    /*  Handle Increasing part for speed limiter    */
    static uint8 SL_FirstTime_INC = YES_Condition ;
    static uint8 SL_INC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Inc_pressed_value)
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	89 30       	cpi	r24, 0x09	; 9
    45b2:	61 f5       	brne	.+88     	; 0x460c <APP_KeypadUpdate+0x29e>
    {
        /*  Make counter with zero to start count from zero for DM */
        TimeOut_Counter = 0 ;
    45b4:	10 92 ad 02 	sts	0x02AD, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	80 93 78 02 	sts	0x0278, r24
        if(SL_FirstTime_INC == YES_Condition )
    45be:	80 91 7d 02 	lds	r24, 0x027D
    45c2:	81 30       	cpi	r24, 0x01	; 1
    45c4:	61 f4       	brne	.+24     	; 0x45de <APP_KeypadUpdate+0x270>
        {
            if(Global_Speed_Limiter_value < Max_Speed_Limit_value)
    45c6:	80 91 77 02 	lds	r24, 0x0277
    45ca:	88 37       	cpi	r24, 0x78	; 120
    45cc:	28 f4       	brcc	.+10     	; 0x45d8 <APP_KeypadUpdate+0x26a>
            {
                Global_Speed_Limiter_value += 5; 
    45ce:	80 91 77 02 	lds	r24, 0x0277
    45d2:	8b 5f       	subi	r24, 0xFB	; 251
    45d4:	80 93 77 02 	sts	0x0277, r24
            }
                SL_FirstTime_INC = NO_Condition ;
    45d8:	10 92 7d 02 	sts	0x027D, r1
    45dc:	14 c0       	rjmp	.+40     	; 0x4606 <APP_KeypadUpdate+0x298>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_INC_repeation += 1;
    45de:	80 91 af 02 	lds	r24, 0x02AF
    45e2:	8f 5f       	subi	r24, 0xFF	; 255
    45e4:	80 93 af 02 	sts	0x02AF, r24
            if(SL_INC_repeation == 3)
    45e8:	80 91 af 02 	lds	r24, 0x02AF
    45ec:	83 30       	cpi	r24, 0x03	; 3
    45ee:	59 f4       	brne	.+22     	; 0x4606 <APP_KeypadUpdate+0x298>
            {
                SL_INC_repeation = 0;
    45f0:	10 92 af 02 	sts	0x02AF, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                if(Global_Speed_Limiter_value < Max_Speed_Limit_value)
    45f4:	80 91 77 02 	lds	r24, 0x0277
    45f8:	88 37       	cpi	r24, 0x78	; 120
    45fa:	28 f4       	brcc	.+10     	; 0x4606 <APP_KeypadUpdate+0x298>
                {
                    Global_Speed_Limiter_value += 5; 
    45fc:	80 91 77 02 	lds	r24, 0x0277
    4600:	8b 5f       	subi	r24, 0xFB	; 251
    4602:	80 93 77 02 	sts	0x0277, r24
                }
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    4606:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <DashBoard_updateSpeedLimitValue>
    460a:	05 c0       	rjmp	.+10     	; 0x4616 <APP_KeypadUpdate+0x2a8>

    }
    else
    {
        SL_FirstTime_INC = YES_Condition ;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	80 93 7d 02 	sts	0x027D, r24
        SL_INC_repeation = 0;
    4612:	10 92 af 02 	sts	0x02AF, r1

/* (Button 8️⃣) Handle decrease in speed limit   */
    /*  Handle Decreasing part for speed limiter    */
    static uint8 SL_FirstTime_DEC = YES_Condition ;
    static uint8 SL_DEC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Dec_pressed_value)
    4616:	89 81       	ldd	r24, Y+1	; 0x01
    4618:	87 30       	cpi	r24, 0x07	; 7
    461a:	61 f5       	brne	.+88     	; 0x4674 <APP_KeypadUpdate+0x306>
    {
        /*  Make counter with zero to start count from zero for DM */
        TimeOut_Counter = 0 ;
    461c:	10 92 ad 02 	sts	0x02AD, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	80 93 78 02 	sts	0x0278, r24

        if(SL_FirstTime_DEC == YES_Condition )
    4626:	80 91 7c 02 	lds	r24, 0x027C
    462a:	81 30       	cpi	r24, 0x01	; 1
    462c:	61 f4       	brne	.+24     	; 0x4646 <APP_KeypadUpdate+0x2d8>
        {
            if(Global_Speed_Limiter_value > Min_speed_Limit_value)
    462e:	80 91 77 02 	lds	r24, 0x0277
    4632:	85 31       	cpi	r24, 0x15	; 21
    4634:	28 f0       	brcs	.+10     	; 0x4640 <APP_KeypadUpdate+0x2d2>
            {
                Global_Speed_Limiter_value -= 5;    
    4636:	80 91 77 02 	lds	r24, 0x0277
    463a:	85 50       	subi	r24, 0x05	; 5
    463c:	80 93 77 02 	sts	0x0277, r24
            }
            SL_FirstTime_DEC = NO_Condition ;
    4640:	10 92 7c 02 	sts	0x027C, r1
    4644:	14 c0       	rjmp	.+40     	; 0x466e <APP_KeypadUpdate+0x300>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_DEC_repeation += 1;
    4646:	80 91 ae 02 	lds	r24, 0x02AE
    464a:	8f 5f       	subi	r24, 0xFF	; 255
    464c:	80 93 ae 02 	sts	0x02AE, r24
            if(SL_DEC_repeation == 3)
    4650:	80 91 ae 02 	lds	r24, 0x02AE
    4654:	83 30       	cpi	r24, 0x03	; 3
    4656:	59 f4       	brne	.+22     	; 0x466e <APP_KeypadUpdate+0x300>
            {
                SL_DEC_repeation = 0;
    4658:	10 92 ae 02 	sts	0x02AE, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                if(Global_Speed_Limiter_value > Min_speed_Limit_value)
    465c:	80 91 77 02 	lds	r24, 0x0277
    4660:	85 31       	cpi	r24, 0x15	; 21
    4662:	28 f0       	brcs	.+10     	; 0x466e <APP_KeypadUpdate+0x300>
                {
                    Global_Speed_Limiter_value -= 5;    
    4664:	80 91 77 02 	lds	r24, 0x0277
    4668:	85 50       	subi	r24, 0x05	; 5
    466a:	80 93 77 02 	sts	0x0277, r24
                }
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    466e:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <DashBoard_updateSpeedLimitValue>
    4672:	05 c0       	rjmp	.+10     	; 0x467e <APP_KeypadUpdate+0x310>

    }
    else
    {
        SL_FirstTime_DEC = YES_Condition ;
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	80 93 7c 02 	sts	0x027C, r24
        SL_DEC_repeation = 0;
    467a:	10 92 ae 02 	sts	0x02AE, r1




    
}
    467e:	0f 90       	pop	r0
    4680:	cf 91       	pop	r28
    4682:	df 91       	pop	r29
    4684:	08 95       	ret

00004686 <Braking_Button_Handling>:




static void Braking_Button_Handling(void)
{
    4686:	df 93       	push	r29
    4688:	cf 93       	push	r28
    468a:	cd b7       	in	r28, 0x3d	; 61
    468c:	de b7       	in	r29, 0x3e	; 62
    /*  Make initial state that Button is released  */
    static uint8 Braking_BTN_State = BTN_Released_State ;
    /*  Will Enter this condition only when press button Only (this will make failling edge)  */
    if(Braking_BTN_State == BTN_Released_State)
    468e:	80 91 7e 02 	lds	r24, 0x027E
    4692:	81 30       	cpi	r24, 0x01	; 1
    4694:	a1 f4       	brne	.+40     	; 0x46be <Braking_Button_Handling+0x38>
    {
        /*  So when I release utton will make Rising Edge so I need to make setup to detect this state to turn led off  */
        INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN); /*    If swap between that command and next command will face problem that If I make very short press will face problem  that led will turn on only not turn off also and this not required*/
    4696:	83 e0       	ldi	r24, 0x03	; 3
    4698:	60 e0       	ldi	r22, 0x00	; 0
    469a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <INT1_init>

        Buzzer_NotifySound();
    469e:	0e 94 9b 23 	call	0x4736	; 0x4736 <Buzzer_NotifySound>

        /*  Make update to state    */
        Braking_BTN_State = BTN_Pressed_State;
    46a2:	10 92 7e 02 	sts	0x027E, r1
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    46a6:	80 91 7e 02 	lds	r24, 0x027E
    46aa:	80 93 76 02 	sts	0x0276, r24
        /*  Turn led on  */
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	67 e0       	ldi	r22, 0x07	; 7
    46b2:	41 e0       	ldi	r20, 0x01	; 1
    46b4:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>

        //     DashBoard_DistanceHide();


        // }
        tessst();
    46b8:	0e 94 76 23 	call	0x46ec	; 0x46ec <tessst>
    46bc:	14 c0       	rjmp	.+40     	; 0x46e6 <Braking_Button_Handling+0x60>
    }
    /*  Will Enter this condition only when release button Only (this will make failling edge)  */
    else if(Braking_BTN_State == BTN_Pressed_State)
    46be:	80 91 7e 02 	lds	r24, 0x027E
    46c2:	88 23       	and	r24, r24
    46c4:	81 f4       	brne	.+32     	; 0x46e6 <Braking_Button_Handling+0x60>
    {

        INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    46c6:	82 e0       	ldi	r24, 0x02	; 2
    46c8:	60 e0       	ldi	r22, 0x00	; 0
    46ca:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <INT1_init>
        Braking_BTN_State = BTN_Released_State;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	80 93 7e 02 	sts	0x027E, r24
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    46d4:	80 91 7e 02 	lds	r24, 0x027E
    46d8:	80 93 76 02 	sts	0x0276, r24
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	67 e0       	ldi	r22, 0x07	; 7
    46e0:	40 e0       	ldi	r20, 0x00	; 0
    46e2:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
    }
}
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <tessst>:


void tessst (void)
{
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
        if((GearBox_Current_State == D_GearBox))
    46f4:	80 91 a0 02 	lds	r24, 0x02A0
    46f8:	81 30       	cpi	r24, 0x01	; 1
    46fa:	d1 f4       	brne	.+52     	; 0x4730 <tessst+0x44>
        {
            /*	Enable Global Interrupt  */
	        sei();
    46fc:	78 94       	sei
            /*  If it was CCS enabled should disabled and update in LCD*/
            if(CCS_Currnet_state == CCS_Enable)
    46fe:	80 91 a1 02 	lds	r24, 0x02A1
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	31 f4       	brne	.+12     	; 0x4712 <tessst+0x26>
            {
                /*  Disable ACCS if Enabled  */
                CCS_Currnet_state = CCS_Disable;
    4706:	10 92 a1 02 	sts	0x02A1, r1

                /*  Update LCD with new change*/
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    470a:	80 91 a1 02 	lds	r24, 0x02A1
    470e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <DashBoard_Update_CCS_State>
            }

            /*  If it was Braking Assist enabled should disabled and update in LCD*/
            if(BrakingAssist_Current_State == BrakingAssist_Enable)
    4712:	80 91 a3 02 	lds	r24, 0x02A3
    4716:	81 30       	cpi	r24, 0x01	; 1
    4718:	31 f4       	brne	.+12     	; 0x4726 <tessst+0x3a>
            {
                /*  Disable BA Sysystem */
                BrakingAssist_Current_State = BrakingAssist_Disable ;
    471a:	10 92 a3 02 	sts	0x02A3, r1

                /*  Update LCD with new change*/
                DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    471e:	80 91 a3 02 	lds	r24, 0x02A3
    4722:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <DashBoard_Update_BrakingAssist_State>
            // DashBoard_DistanceHide();
            //DashBoard_DistanceHide_small();


            /*  Make counter with zero to start count from zero for DM */
            TimeOut_Counter = 0 ;
    4726:	10 92 ad 02 	sts	0x02AD, r1
            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	80 93 78 02 	sts	0x0278, r24

        }
}
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	08 95       	ret

00004736 <Buzzer_NotifySound>:


static void Buzzer_NotifySound(void)
{
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    /*  initialize Timer register with zero value   */
    Timer0_UpdateValue(0);
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	0e 94 68 08 	call	0x10d0	; 0x10d0 <Timer0_UpdateValue>
    /*  Turn Buzzer on  */
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_ON);
    4744:	82 e0       	ldi	r24, 0x02	; 2
    4746:	66 e0       	ldi	r22, 0x06	; 6
    4748:	41 e0       	ldi	r20, 0x01	; 1
    474a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <Buzzer_OnOffPositiveLogic>
    /*  Timer provide clock  */
    Timer0_ProvideClock();
    474e:	0e 94 84 08 	call	0x1108	; 0x1108 <Timer0_ProvideClock>

   

}
    4752:	cf 91       	pop	r28
    4754:	df 91       	pop	r29
    4756:	08 95       	ret

00004758 <Buzzer_timeOutOff>:


void Buzzer_timeOutOff(void)
{
    4758:	df 93       	push	r29
    475a:	cf 93       	push	r28
    475c:	cd b7       	in	r28, 0x3d	; 61
    475e:	de b7       	in	r29, 0x3e	; 62
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    4760:	82 e0       	ldi	r24, 0x02	; 2
    4762:	66 e0       	ldi	r22, 0x06	; 6
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <Buzzer_OnOffPositiveLogic>
    Timer0_StopClock();
    476a:	0e 94 76 08 	call	0x10ec	; 0x10ec <Timer0_StopClock>
}
    476e:	cf 91       	pop	r28
    4770:	df 91       	pop	r29
    4772:	08 95       	ret

00004774 <App_TimeOut_handle_DM_Time>:


static void App_TimeOut_handle_DM_Time(void)
{
    4774:	df 93       	push	r29
    4776:	cf 93       	push	r28
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    /*  Increament by one*/
    TimeOut_Counter++;
    477c:	80 91 ad 02 	lds	r24, 0x02AD
    4780:	8f 5f       	subi	r24, 0xFF	; 255
    4782:	80 93 ad 02 	sts	0x02AD, r24
    Timer1_UpdateValue(Value_Loading_Timer1);
    4786:	8b e7       	ldi	r24, 0x7B	; 123
    4788:	91 ee       	ldi	r25, 0xE1	; 225
    478a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer1_UpdateValue>

    /*  No need to increment this variable as DM disabled  */
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    478e:	80 91 ac 02 	lds	r24, 0x02AC
    4792:	88 23       	and	r24, r24
    4794:	11 f4       	brne	.+4      	; 0x479a <App_TimeOut_handle_DM_Time+0x26>
    {
        TimeOut_Counter = 0 ;
    4796:	10 92 ad 02 	sts	0x02AD, r1
    }

    if(TimeOut_Counter == 5)
    479a:	80 91 ad 02 	lds	r24, 0x02AD
    479e:	85 30       	cpi	r24, 0x05	; 5
    47a0:	21 f4       	brne	.+8      	; 0x47aa <App_TimeOut_handle_DM_Time+0x36>
    {
        TimeOut_Counter = 0;
    47a2:	10 92 ad 02 	sts	0x02AD, r1
        /*  Here happen time out that it may be user is in Sleep  */
        DrivingMonetoring_Current_Status = DM_Failed ;
    47a6:	10 92 78 02 	sts	0x0278, r1

    }

    Clock_sec ++ ;
    47aa:	80 91 79 02 	lds	r24, 0x0279
    47ae:	8f 5f       	subi	r24, 0xFF	; 255
    47b0:	80 93 79 02 	sts	0x0279, r24
    if(Clock_sec == 60)
    47b4:	80 91 79 02 	lds	r24, 0x0279
    47b8:	8c 33       	cpi	r24, 0x3C	; 60
    47ba:	39 f4       	brne	.+14     	; 0x47ca <App_TimeOut_handle_DM_Time+0x56>
    {
        Clock_sec =  0 ;
    47bc:	10 92 79 02 	sts	0x0279, r1
        Clock_min ++;
    47c0:	80 91 7a 02 	lds	r24, 0x027A
    47c4:	8f 5f       	subi	r24, 0xFF	; 255
    47c6:	80 93 7a 02 	sts	0x027A, r24
    }
    if(Clock_min == 60)
    47ca:	80 91 7a 02 	lds	r24, 0x027A
    47ce:	8c 33       	cpi	r24, 0x3C	; 60
    47d0:	39 f4       	brne	.+14     	; 0x47e0 <App_TimeOut_handle_DM_Time+0x6c>
    {
        Clock_min = 0 ;
    47d2:	10 92 7a 02 	sts	0x027A, r1
        Clock_hour ++;
    47d6:	80 91 7b 02 	lds	r24, 0x027B
    47da:	8f 5f       	subi	r24, 0xFF	; 255
    47dc:	80 93 7b 02 	sts	0x027B, r24
    }


}
    47e0:	cf 91       	pop	r28
    47e2:	df 91       	pop	r29
    47e4:	08 95       	ret

000047e6 <DashBoard_updateTime>:

static void DashBoard_updateTime(void)
{
    47e6:	df 93       	push	r29
    47e8:	cf 93       	push	r28
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_4_LCD)
    47ee:	80 91 75 02 	lds	r24, 0x0275
    47f2:	83 30       	cpi	r24, 0x03	; 3
    47f4:	61 f5       	brne	.+88     	; 0x484e <DashBoard_updateTime+0x68>
    {
        LCD_MoveCursor(1,0);
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        LCD_DisplayString("T=");
    47fe:	8b ef       	ldi	r24, 0xFB	; 251
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        LCD_intToString(Clock_hour);
    4806:	80 91 7b 02 	lds	r24, 0x027B
    480a:	88 2f       	mov	r24, r24
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	a0 e0       	ldi	r26, 0x00	; 0
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	bc 01       	movw	r22, r24
    4814:	cd 01       	movw	r24, r26
    4816:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
        LCD_DisplayCharacter(':');
    481a:	8a e3       	ldi	r24, 0x3A	; 58
    481c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
        LCD_intToString(Clock_min);
    4820:	80 91 7a 02 	lds	r24, 0x027A
    4824:	88 2f       	mov	r24, r24
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	a0 e0       	ldi	r26, 0x00	; 0
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
        LCD_DisplayCharacter(':');
    4834:	8a e3       	ldi	r24, 0x3A	; 58
    4836:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
        LCD_intToString(Clock_sec);
    483a:	80 91 79 02 	lds	r24, 0x0279
    483e:	88 2f       	mov	r24, r24
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	a0 e0       	ldi	r26, 0x00	; 0
    4844:	b0 e0       	ldi	r27, 0x00	; 0
    4846:	bc 01       	movw	r22, r24
    4848:	cd 01       	movw	r24, r26
    484a:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
    }
}
    484e:	cf 91       	pop	r28
    4850:	df 91       	pop	r29
    4852:	08 95       	ret

00004854 <ACCS_CatchDistance>:

static void ACCS_CatchDistance(void)
{
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	00 d0       	rcall	.+0      	; 0x485a <ACCS_CatchDistance+0x6>
    485a:	0f 92       	push	r0
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    * as may be before printing point(.) and number after point  press braking button and this lead to call DashBoard_DistanceHide() function
    * and this make cursor position that I make disable  be at last colimn in last row and will return here to continue this code here 
    * so this lead to make data overwrite in LCD 
    * "this is one scenario from a lot of scenarios "
    */
    cli();
    4860:	f8 94       	cli
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	0e 94 bd 10 	call	0x217a	; 0x217a <ADC_ReadChannelSingleConvertion>
    4868:	9a 83       	std	Y+2, r25	; 0x02
    486a:	89 83       	std	Y+1, r24	; 0x01
    distance_ACCS = (Adc_value_pure * 10) / 1023.0 ; 
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	9a 81       	ldd	r25, Y+2	; 0x02
    4870:	9c 01       	movw	r18, r24
    4872:	22 0f       	add	r18, r18
    4874:	33 1f       	adc	r19, r19
    4876:	c9 01       	movw	r24, r18
    4878:	88 0f       	add	r24, r24
    487a:	99 1f       	adc	r25, r25
    487c:	88 0f       	add	r24, r24
    487e:	99 1f       	adc	r25, r25
    4880:	82 0f       	add	r24, r18
    4882:	93 1f       	adc	r25, r19
    4884:	cc 01       	movw	r24, r24
    4886:	a0 e0       	ldi	r26, 0x00	; 0
    4888:	b0 e0       	ldi	r27, 0x00	; 0
    488a:	bc 01       	movw	r22, r24
    488c:	cd 01       	movw	r24, r26
    488e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4892:	dc 01       	movw	r26, r24
    4894:	cb 01       	movw	r24, r22
    4896:	bc 01       	movw	r22, r24
    4898:	cd 01       	movw	r24, r26
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 ec       	ldi	r19, 0xC0	; 192
    489e:	4f e7       	ldi	r20, 0x7F	; 127
    48a0:	54 e4       	ldi	r21, 0x44	; 68
    48a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	80 93 a4 02 	sts	0x02A4, r24
    48ae:	90 93 a5 02 	sts	0x02A5, r25
    48b2:	a0 93 a6 02 	sts	0x02A6, r26
    48b6:	b0 93 a7 02 	sts	0x02A7, r27
    /*  Here trying to get first number after Sign  */
    volatile uint8 distance_after_point = ( (uint8)(distance_ACCS * 10) )  % 10;
    48ba:	80 91 a4 02 	lds	r24, 0x02A4
    48be:	90 91 a5 02 	lds	r25, 0x02A5
    48c2:	a0 91 a6 02 	lds	r26, 0x02A6
    48c6:	b0 91 a7 02 	lds	r27, 0x02A7
    48ca:	bc 01       	movw	r22, r24
    48cc:	cd 01       	movw	r24, r26
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	40 e2       	ldi	r20, 0x20	; 32
    48d4:	51 e4       	ldi	r21, 0x41	; 65
    48d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48da:	dc 01       	movw	r26, r24
    48dc:	cb 01       	movw	r24, r22
    48de:	bc 01       	movw	r22, r24
    48e0:	cd 01       	movw	r24, r26
    48e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e6:	dc 01       	movw	r26, r24
    48e8:	cb 01       	movw	r24, r22
    48ea:	9a e0       	ldi	r25, 0x0A	; 10
    48ec:	69 2f       	mov	r22, r25
    48ee:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__udivmodqi4>
    48f2:	89 2f       	mov	r24, r25
    48f4:	8b 83       	std	Y+3, r24	; 0x03
    LCD_MoveCursor(3,11);
    48f6:	83 e0       	ldi	r24, 0x03	; 3
    48f8:	6b e0       	ldi	r22, 0x0B	; 11
    48fa:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
    /*  For Small LCD*/
    //LCD_MoveCursor(1,11);
	LCD_intToString((uint8)distance_ACCS);
    48fe:	80 91 a4 02 	lds	r24, 0x02A4
    4902:	90 91 a5 02 	lds	r25, 0x02A5
    4906:	a0 91 a6 02 	lds	r26, 0x02A6
    490a:	b0 91 a7 02 	lds	r27, 0x02A7
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	88 2f       	mov	r24, r24
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	a0 e0       	ldi	r26, 0x00	; 0
    4920:	b0 e0       	ldi	r27, 0x00	; 0
    4922:	bc 01       	movw	r22, r24
    4924:	cd 01       	movw	r24, r26
    4926:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
	LCD_DisplayCharacter('.');
    492a:	8e e2       	ldi	r24, 0x2E	; 46
    492c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_DisplayCharacter>
    LCD_intToString(distance_after_point);
    4930:	8b 81       	ldd	r24, Y+3	; 0x03
    4932:	88 2f       	mov	r24, r24
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	a0 e0       	ldi	r26, 0x00	; 0
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	bc 01       	movw	r22, r24
    493c:	cd 01       	movw	r24, r26
    493e:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
    LCD_DisplayString("M ");
    4942:	8e ef       	ldi	r24, 0xFE	; 254
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    sei();
    494a:	78 94       	sei
}
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	0f 90       	pop	r0
    4952:	cf 91       	pop	r28
    4954:	df 91       	pop	r29
    4956:	08 95       	ret

00004958 <ACCS_DicisionTake>:



static void ACCS_DicisionTake(void)
{
    4958:	df 93       	push	r29
    495a:	cf 93       	push	r28
    495c:	00 d0       	rcall	.+0      	; 0x495e <ACCS_DicisionTake+0x6>
    495e:	00 d0       	rcall	.+0      	; 0x4960 <ACCS_DicisionTake+0x8>
    4960:	cd b7       	in	r28, 0x3d	; 61
    4962:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    4964:	80 91 a1 02 	lds	r24, 0x02A1
    4968:	81 30       	cpi	r24, 0x01	; 1
    496a:	09 f0       	breq	.+2      	; 0x496e <ACCS_DicisionTake+0x16>
    496c:	8b c0       	rjmp	.+278    	; 0x4a84 <ACCS_DicisionTake+0x12c>
    496e:	80 91 a0 02 	lds	r24, 0x02A0
    4972:	81 30       	cpi	r24, 0x01	; 1
    4974:	09 f0       	breq	.+2      	; 0x4978 <ACCS_DicisionTake+0x20>
    4976:	86 c0       	rjmp	.+268    	; 0x4a84 <ACCS_DicisionTake+0x12c>
    {

        cli();
    4978:	f8 94       	cli
        if((uint8)(distance_ACCS) >= 8) /*  Case 1  */
    497a:	80 91 a4 02 	lds	r24, 0x02A4
    497e:	90 91 a5 02 	lds	r25, 0x02A5
    4982:	a0 91 a6 02 	lds	r26, 0x02A6
    4986:	b0 91 a7 02 	lds	r27, 0x02A7
    498a:	bc 01       	movw	r22, r24
    498c:	cd 01       	movw	r24, r26
    498e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	88 30       	cpi	r24, 0x08	; 8
    4998:	58 f0       	brcs	.+22     	; 0x49b0 <ACCS_DicisionTake+0x58>
        {
            
            /*  Do no thing */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	66 e0       	ldi	r22, 0x06	; 6
    499e:	40 e0       	ldi	r20, 0x00	; 0
    49a0:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    49a4:	81 e0       	ldi	r24, 0x01	; 1
    49a6:	67 e0       	ldi	r22, 0x07	; 7
    49a8:	40 e0       	ldi	r20, 0x00	; 0
    49aa:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
    49ae:	69 c0       	rjmp	.+210    	; 0x4a82 <ACCS_DicisionTake+0x12a>

           
        }
        else if(((uint8)(distance_ACCS) >= 6)) /*  Case 2  */
    49b0:	80 91 a4 02 	lds	r24, 0x02A4
    49b4:	90 91 a5 02 	lds	r25, 0x02A5
    49b8:	a0 91 a6 02 	lds	r26, 0x02A6
    49bc:	b0 91 a7 02 	lds	r27, 0x02A7
    49c0:	bc 01       	movw	r22, r24
    49c2:	cd 01       	movw	r24, r26
    49c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	86 30       	cpi	r24, 0x06	; 6
    49ce:	58 f0       	brcs	.+22     	; 0x49e6 <ACCS_DicisionTake+0x8e>
        {
           
            /*  in this case only turn yellow led only */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	66 e0       	ldi	r22, 0x06	; 6
    49d4:	41 e0       	ldi	r20, 0x01	; 1
    49d6:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	67 e0       	ldi	r22, 0x07	; 7
    49de:	40 e0       	ldi	r20, 0x00	; 0
    49e0:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
    49e4:	4e c0       	rjmp	.+156    	; 0x4a82 <ACCS_DicisionTake+0x12a>

          

            /*  Try to return back to speed that was make fixed*/
        }
        else if (((uint8)(distance_ACCS) >= 4)) /*  Case 3  */
    49e6:	80 91 a4 02 	lds	r24, 0x02A4
    49ea:	90 91 a5 02 	lds	r25, 0x02A5
    49ee:	a0 91 a6 02 	lds	r26, 0x02A6
    49f2:	b0 91 a7 02 	lds	r27, 0x02A7
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	84 30       	cpi	r24, 0x04	; 4
    4a04:	58 f0       	brcs	.+22     	; 0x4a1c <ACCS_DicisionTake+0xc4>
        {
            

            /*  in this case turn yellow and red led on*/
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	66 e0       	ldi	r22, 0x06	; 6
    4a0a:	41 e0       	ldi	r20, 0x01	; 1
    4a0c:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>

            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	67 e0       	ldi	r22, 0x07	; 7
    4a14:	41 e0       	ldi	r20, 0x01	; 1
    4a16:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
    4a1a:	33 c0       	rjmp	.+102    	; 0x4a82 <ACCS_DicisionTake+0x12a>

        }
        else if (((uint8)(distance_ACCS) >= 2)) /*  Case 4  */
    4a1c:	80 91 a4 02 	lds	r24, 0x02A4
    4a20:	90 91 a5 02 	lds	r25, 0x02A5
    4a24:	a0 91 a6 02 	lds	r26, 0x02A6
    4a28:	b0 91 a7 02 	lds	r27, 0x02A7
    4a2c:	bc 01       	movw	r22, r24
    4a2e:	cd 01       	movw	r24, r26
    4a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a34:	dc 01       	movw	r26, r24
    4a36:	cb 01       	movw	r24, r22
    4a38:	82 30       	cpi	r24, 0x02	; 2
    4a3a:	50 f0       	brcs	.+20     	; 0x4a50 <ACCS_DicisionTake+0xf8>
        {


            /*  turn yellow led on and make red led toggles continuesly with very speed */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	66 e0       	ldi	r22, 0x06	; 6
    4a40:	41 e0       	ldi	r20, 0x01	; 1
    4a42:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>

            LED_Toggle(Red_LED_PORT,Red_LED_PIN);
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	67 e0       	ldi	r22, 0x07	; 7
    4a4a:	0e 94 a7 11 	call	0x234e	; 0x234e <LED_Toggle>
    4a4e:	19 c0       	rjmp	.+50     	; 0x4a82 <ACCS_DicisionTake+0x12a>

        }   
        else if (((uint8)(distance_ACCS) >= 0)) /*  Case 5  */
    4a50:	80 91 a4 02 	lds	r24, 0x02A4
    4a54:	90 91 a5 02 	lds	r25, 0x02A5
    4a58:	a0 91 a6 02 	lds	r26, 0x02A6
    4a5c:	b0 91 a7 02 	lds	r27, 0x02A7
        {
            /*  Turn Of all leds    */
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	67 e0       	ldi	r22, 0x07	; 7
    4a64:	40 e0       	ldi	r20, 0x00	; 0
    4a66:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	66 e0       	ldi	r22, 0x06	; 6
    4a6e:	40 e0       	ldi	r20, 0x00	; 0
    4a70:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_OnOffPositiveLogic>


            /*  Display Crash message   */
            LCD_ClearScreen();
    4a74:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <LCD_ClearScreen>
            LCD_DisplayString((const uint8 *)"Crushed car ):");
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	91 e0       	ldi	r25, 0x01	; 1
    4a7c:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
    4a80:	ff cf       	rjmp	.-2      	; 0x4a80 <ACCS_DicisionTake+0x128>

            /*  Disable all Button*/
            while(1);
        }
        
        sei();
    4a82:	78 94       	sei
    }
}
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	cf 91       	pop	r28
    4a8e:	df 91       	pop	r29
    4a90:	08 95       	ret

00004a92 <App_SpeedUpdate>:

static void App_SpeedUpdate(void)
{
    4a92:	df 93       	push	r29
    4a94:	cf 93       	push	r28
    4a96:	00 d0       	rcall	.+0      	; 0x4a98 <App_SpeedUpdate+0x6>
    4a98:	cd b7       	in	r28, 0x3d	; 61
    4a9a:	de b7       	in	r29, 0x3e	; 62
    static volatile uint16 Prev_Adc_value_pure = 0;
    /*  Read current value for Potentiometer that work as Accelerator  */
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);  
    4a9c:	80 e0       	ldi	r24, 0x00	; 0
    4a9e:	0e 94 bd 10 	call	0x217a	; 0x217a <ADC_ReadChannelSingleConvertion>
    4aa2:	9a 83       	std	Y+2, r25	; 0x02
    4aa4:	89 83       	std	Y+1, r24	; 0x01
    /*  Get speed that be assigned depend on next condition state  */ 
    Temp_Speed = (uint8)( ( (200) * ((uint32) Adc_value_pure)  ) / 1023 ) ;
    4aa6:	89 81       	ldd	r24, Y+1	; 0x01
    4aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aaa:	cc 01       	movw	r24, r24
    4aac:	a0 e0       	ldi	r26, 0x00	; 0
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	28 ec       	ldi	r18, 0xC8	; 200
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	40 e0       	ldi	r20, 0x00	; 0
    4ab6:	50 e0       	ldi	r21, 0x00	; 0
    4ab8:	bc 01       	movw	r22, r24
    4aba:	cd 01       	movw	r24, r26
    4abc:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <__mulsi3>
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	cb 01       	movw	r24, r22
    4ac4:	2f ef       	ldi	r18, 0xFF	; 255
    4ac6:	33 e0       	ldi	r19, 0x03	; 3
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	bc 01       	movw	r22, r24
    4ace:	cd 01       	movw	r24, r26
    4ad0:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <__udivmodsi4>
    4ad4:	da 01       	movw	r26, r20
    4ad6:	c9 01       	movw	r24, r18
    4ad8:	80 93 bc 02 	sts	0x02BC, r24

    Diff_between_ADCS =  (sint16)Prev_Adc_value_pure - (sint16)Adc_value_pure;
    4adc:	80 91 b9 02 	lds	r24, 0x02B9
    4ae0:	90 91 ba 02 	lds	r25, 0x02BA
    4ae4:	9c 01       	movw	r18, r24
    4ae6:	89 81       	ldd	r24, Y+1	; 0x01
    4ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aea:	a9 01       	movw	r20, r18
    4aec:	48 1b       	sub	r20, r24
    4aee:	59 0b       	sbc	r21, r25
    4af0:	ca 01       	movw	r24, r20
    4af2:	90 93 be 02 	sts	0x02BE, r25
    4af6:	80 93 bd 02 	sts	0x02BD, r24

    if((Diff_between_ADCS > 19) || (Diff_between_ADCS < -19)) // by try found that potentiometer in real life its value vary with max change = 15 so I want change greater than 25 in CCR or CR to accept it as human change not noise in potentiometer
    4afa:	80 91 bd 02 	lds	r24, 0x02BD
    4afe:	90 91 be 02 	lds	r25, 0x02BE
    4b02:	84 31       	cpi	r24, 0x14	; 20
    4b04:	91 05       	cpc	r25, r1
    4b06:	44 f4       	brge	.+16     	; 0x4b18 <App_SpeedUpdate+0x86>
    4b08:	80 91 bd 02 	lds	r24, 0x02BD
    4b0c:	90 91 be 02 	lds	r25, 0x02BE
    4b10:	5f ef       	ldi	r21, 0xFF	; 255
    4b12:	8d 3e       	cpi	r24, 0xED	; 237
    4b14:	95 07       	cpc	r25, r21
    4b16:	94 f4       	brge	.+36     	; 0x4b3c <App_SpeedUpdate+0xaa>
    {
        Car_Speed = Temp_Speed ;
    4b18:	80 91 bc 02 	lds	r24, 0x02BC
    4b1c:	88 2f       	mov	r24, r24
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	90 93 a9 02 	sts	0x02A9, r25
    4b24:	80 93 a8 02 	sts	0x02A8, r24
        if(CCS_Currnet_state == CCS_Enable)
    4b28:	80 91 a1 02 	lds	r24, 0x02A1
    4b2c:	81 30       	cpi	r24, 0x01	; 1
    4b2e:	31 f4       	brne	.+12     	; 0x4b3c <App_SpeedUpdate+0xaa>
        {
            CCS_Currnet_state = CCS_Disable ;
    4b30:	10 92 a1 02 	sts	0x02A1, r1
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    4b34:	80 91 a1 02 	lds	r24, 0x02A1
    4b38:	0e 94 76 1f 	call	0x3eec	; 0x3eec <DashBoard_Update_CCS_State>
        }
    }
        cli();
    4b3c:	f8 94       	cli
        LCD_MoveCursor(1,14);
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	6e e0       	ldi	r22, 0x0E	; 14
    4b42:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        // LCD_MoveCursor(0,0);
        LCD_intToString((uint8)Car_Speed) ;
    4b46:	80 91 a8 02 	lds	r24, 0x02A8
    4b4a:	90 91 a9 02 	lds	r25, 0x02A9
    4b4e:	88 2f       	mov	r24, r24
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	a0 e0       	ldi	r26, 0x00	; 0
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	bc 01       	movw	r22, r24
    4b58:	cd 01       	movw	r24, r26
    4b5a:	0e 94 95 1c 	call	0x392a	; 0x392a <LCD_intToString>
        LCD_DisplayString("KM ");
    4b5e:	80 e1       	ldi	r24, 0x10	; 16
    4b60:	91 e0       	ldi	r25, 0x01	; 1
    4b62:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_DisplayString>
        // LCD_intToString(Prev_Adc_value_pure) ;
        // LCD_DisplayString(" ");
        // LCD_MoveCursor(1,8);
        // LCD_intToString(Adc_value_pure) ;
        // LCD_DisplayString(" ");
        sei();
    4b66:	78 94       	sei
    /*  Save last change in Speed variable that will display in LCD  */
    Prev_Adc_value_pure = Adc_value_pure ;
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6c:	90 93 ba 02 	sts	0x02BA, r25
    4b70:	80 93 b9 02 	sts	0x02B9, r24


}
    4b74:	0f 90       	pop	r0
    4b76:	0f 90       	pop	r0
    4b78:	cf 91       	pop	r28
    4b7a:	df 91       	pop	r29
    4b7c:	08 95       	ret

00004b7e <main>:


#include "Application/Application_interface.h"
uint8 Adc_value_pure = 0;
int main()
{
    4b7e:	df 93       	push	r29
    4b80:	cf 93       	push	r28
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
	/*	Make Initialize for Every thing*/
	App_Init();
    4b86:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <App_Init>
	
	while(1)
	{
		StateMachineUpdate();
    4b8a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <StateMachineUpdate>
    4b8e:	fd cf       	rjmp	.-6      	; 0x4b8a <main+0xc>

00004b90 <__mulsi3>:
    4b90:	62 9f       	mul	r22, r18
    4b92:	d0 01       	movw	r26, r0
    4b94:	73 9f       	mul	r23, r19
    4b96:	f0 01       	movw	r30, r0
    4b98:	82 9f       	mul	r24, r18
    4b9a:	e0 0d       	add	r30, r0
    4b9c:	f1 1d       	adc	r31, r1
    4b9e:	64 9f       	mul	r22, r20
    4ba0:	e0 0d       	add	r30, r0
    4ba2:	f1 1d       	adc	r31, r1
    4ba4:	92 9f       	mul	r25, r18
    4ba6:	f0 0d       	add	r31, r0
    4ba8:	83 9f       	mul	r24, r19
    4baa:	f0 0d       	add	r31, r0
    4bac:	74 9f       	mul	r23, r20
    4bae:	f0 0d       	add	r31, r0
    4bb0:	65 9f       	mul	r22, r21
    4bb2:	f0 0d       	add	r31, r0
    4bb4:	99 27       	eor	r25, r25
    4bb6:	72 9f       	mul	r23, r18
    4bb8:	b0 0d       	add	r27, r0
    4bba:	e1 1d       	adc	r30, r1
    4bbc:	f9 1f       	adc	r31, r25
    4bbe:	63 9f       	mul	r22, r19
    4bc0:	b0 0d       	add	r27, r0
    4bc2:	e1 1d       	adc	r30, r1
    4bc4:	f9 1f       	adc	r31, r25
    4bc6:	bd 01       	movw	r22, r26
    4bc8:	cf 01       	movw	r24, r30
    4bca:	11 24       	eor	r1, r1
    4bcc:	08 95       	ret

00004bce <__udivmodqi4>:
    4bce:	99 1b       	sub	r25, r25
    4bd0:	79 e0       	ldi	r23, 0x09	; 9
    4bd2:	04 c0       	rjmp	.+8      	; 0x4bdc <__udivmodqi4_ep>

00004bd4 <__udivmodqi4_loop>:
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	96 17       	cp	r25, r22
    4bd8:	08 f0       	brcs	.+2      	; 0x4bdc <__udivmodqi4_ep>
    4bda:	96 1b       	sub	r25, r22

00004bdc <__udivmodqi4_ep>:
    4bdc:	88 1f       	adc	r24, r24
    4bde:	7a 95       	dec	r23
    4be0:	c9 f7       	brne	.-14     	; 0x4bd4 <__udivmodqi4_loop>
    4be2:	80 95       	com	r24
    4be4:	08 95       	ret

00004be6 <__udivmodsi4>:
    4be6:	a1 e2       	ldi	r26, 0x21	; 33
    4be8:	1a 2e       	mov	r1, r26
    4bea:	aa 1b       	sub	r26, r26
    4bec:	bb 1b       	sub	r27, r27
    4bee:	fd 01       	movw	r30, r26
    4bf0:	0d c0       	rjmp	.+26     	; 0x4c0c <__udivmodsi4_ep>

00004bf2 <__udivmodsi4_loop>:
    4bf2:	aa 1f       	adc	r26, r26
    4bf4:	bb 1f       	adc	r27, r27
    4bf6:	ee 1f       	adc	r30, r30
    4bf8:	ff 1f       	adc	r31, r31
    4bfa:	a2 17       	cp	r26, r18
    4bfc:	b3 07       	cpc	r27, r19
    4bfe:	e4 07       	cpc	r30, r20
    4c00:	f5 07       	cpc	r31, r21
    4c02:	20 f0       	brcs	.+8      	; 0x4c0c <__udivmodsi4_ep>
    4c04:	a2 1b       	sub	r26, r18
    4c06:	b3 0b       	sbc	r27, r19
    4c08:	e4 0b       	sbc	r30, r20
    4c0a:	f5 0b       	sbc	r31, r21

00004c0c <__udivmodsi4_ep>:
    4c0c:	66 1f       	adc	r22, r22
    4c0e:	77 1f       	adc	r23, r23
    4c10:	88 1f       	adc	r24, r24
    4c12:	99 1f       	adc	r25, r25
    4c14:	1a 94       	dec	r1
    4c16:	69 f7       	brne	.-38     	; 0x4bf2 <__udivmodsi4_loop>
    4c18:	60 95       	com	r22
    4c1a:	70 95       	com	r23
    4c1c:	80 95       	com	r24
    4c1e:	90 95       	com	r25
    4c20:	9b 01       	movw	r18, r22
    4c22:	ac 01       	movw	r20, r24
    4c24:	bd 01       	movw	r22, r26
    4c26:	cf 01       	movw	r24, r30
    4c28:	08 95       	ret

00004c2a <__prologue_saves__>:
    4c2a:	2f 92       	push	r2
    4c2c:	3f 92       	push	r3
    4c2e:	4f 92       	push	r4
    4c30:	5f 92       	push	r5
    4c32:	6f 92       	push	r6
    4c34:	7f 92       	push	r7
    4c36:	8f 92       	push	r8
    4c38:	9f 92       	push	r9
    4c3a:	af 92       	push	r10
    4c3c:	bf 92       	push	r11
    4c3e:	cf 92       	push	r12
    4c40:	df 92       	push	r13
    4c42:	ef 92       	push	r14
    4c44:	ff 92       	push	r15
    4c46:	0f 93       	push	r16
    4c48:	1f 93       	push	r17
    4c4a:	cf 93       	push	r28
    4c4c:	df 93       	push	r29
    4c4e:	cd b7       	in	r28, 0x3d	; 61
    4c50:	de b7       	in	r29, 0x3e	; 62
    4c52:	ca 1b       	sub	r28, r26
    4c54:	db 0b       	sbc	r29, r27
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	cd bf       	out	0x3d, r28	; 61
    4c60:	09 94       	ijmp

00004c62 <__epilogue_restores__>:
    4c62:	2a 88       	ldd	r2, Y+18	; 0x12
    4c64:	39 88       	ldd	r3, Y+17	; 0x11
    4c66:	48 88       	ldd	r4, Y+16	; 0x10
    4c68:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c70:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c72:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c74:	b9 84       	ldd	r11, Y+9	; 0x09
    4c76:	c8 84       	ldd	r12, Y+8	; 0x08
    4c78:	df 80       	ldd	r13, Y+7	; 0x07
    4c7a:	ee 80       	ldd	r14, Y+6	; 0x06
    4c7c:	fd 80       	ldd	r15, Y+5	; 0x05
    4c7e:	0c 81       	ldd	r16, Y+4	; 0x04
    4c80:	1b 81       	ldd	r17, Y+3	; 0x03
    4c82:	aa 81       	ldd	r26, Y+2	; 0x02
    4c84:	b9 81       	ldd	r27, Y+1	; 0x01
    4c86:	ce 0f       	add	r28, r30
    4c88:	d1 1d       	adc	r29, r1
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	f8 94       	cli
    4c8e:	de bf       	out	0x3e, r29	; 62
    4c90:	0f be       	out	0x3f, r0	; 63
    4c92:	cd bf       	out	0x3d, r28	; 61
    4c94:	ed 01       	movw	r28, r26
    4c96:	08 95       	ret

00004c98 <itoa>:
    4c98:	fb 01       	movw	r30, r22
    4c9a:	9f 01       	movw	r18, r30
    4c9c:	e8 94       	clt
    4c9e:	42 30       	cpi	r20, 0x02	; 2
    4ca0:	c4 f0       	brlt	.+48     	; 0x4cd2 <itoa+0x3a>
    4ca2:	45 32       	cpi	r20, 0x25	; 37
    4ca4:	b4 f4       	brge	.+44     	; 0x4cd2 <itoa+0x3a>
    4ca6:	4a 30       	cpi	r20, 0x0A	; 10
    4ca8:	29 f4       	brne	.+10     	; 0x4cb4 <itoa+0x1c>
    4caa:	97 fb       	bst	r25, 7
    4cac:	1e f4       	brtc	.+6      	; 0x4cb4 <itoa+0x1c>
    4cae:	90 95       	com	r25
    4cb0:	81 95       	neg	r24
    4cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb4:	64 2f       	mov	r22, r20
    4cb6:	77 27       	eor	r23, r23
    4cb8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__udivmodhi4>
    4cbc:	80 5d       	subi	r24, 0xD0	; 208
    4cbe:	8a 33       	cpi	r24, 0x3A	; 58
    4cc0:	0c f0       	brlt	.+2      	; 0x4cc4 <itoa+0x2c>
    4cc2:	89 5d       	subi	r24, 0xD9	; 217
    4cc4:	81 93       	st	Z+, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	a1 f7       	brne	.-24     	; 0x4cb4 <itoa+0x1c>
    4ccc:	16 f4       	brtc	.+4      	; 0x4cd2 <itoa+0x3a>
    4cce:	5d e2       	ldi	r21, 0x2D	; 45
    4cd0:	51 93       	st	Z+, r21
    4cd2:	10 82       	st	Z, r1
    4cd4:	c9 01       	movw	r24, r18
    4cd6:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <strrev>

00004cda <strrev>:
    4cda:	dc 01       	movw	r26, r24
    4cdc:	fc 01       	movw	r30, r24
    4cde:	67 2f       	mov	r22, r23
    4ce0:	71 91       	ld	r23, Z+
    4ce2:	77 23       	and	r23, r23
    4ce4:	e1 f7       	brne	.-8      	; 0x4cde <strrev+0x4>
    4ce6:	32 97       	sbiw	r30, 0x02	; 2
    4ce8:	04 c0       	rjmp	.+8      	; 0x4cf2 <strrev+0x18>
    4cea:	7c 91       	ld	r23, X
    4cec:	6d 93       	st	X+, r22
    4cee:	70 83       	st	Z, r23
    4cf0:	62 91       	ld	r22, -Z
    4cf2:	ae 17       	cp	r26, r30
    4cf4:	bf 07       	cpc	r27, r31
    4cf6:	c8 f3       	brcs	.-14     	; 0x4cea <strrev+0x10>
    4cf8:	08 95       	ret

00004cfa <__udivmodhi4>:
    4cfa:	aa 1b       	sub	r26, r26
    4cfc:	bb 1b       	sub	r27, r27
    4cfe:	51 e1       	ldi	r21, 0x11	; 17
    4d00:	07 c0       	rjmp	.+14     	; 0x4d10 <__udivmodhi4_ep>

00004d02 <__udivmodhi4_loop>:
    4d02:	aa 1f       	adc	r26, r26
    4d04:	bb 1f       	adc	r27, r27
    4d06:	a6 17       	cp	r26, r22
    4d08:	b7 07       	cpc	r27, r23
    4d0a:	10 f0       	brcs	.+4      	; 0x4d10 <__udivmodhi4_ep>
    4d0c:	a6 1b       	sub	r26, r22
    4d0e:	b7 0b       	sbc	r27, r23

00004d10 <__udivmodhi4_ep>:
    4d10:	88 1f       	adc	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	5a 95       	dec	r21
    4d16:	a9 f7       	brne	.-22     	; 0x4d02 <__udivmodhi4_loop>
    4d18:	80 95       	com	r24
    4d1a:	90 95       	com	r25
    4d1c:	bc 01       	movw	r22, r24
    4d1e:	cd 01       	movw	r24, r26
    4d20:	08 95       	ret

00004d22 <_exit>:
    4d22:	f8 94       	cli

00004d24 <__stop_program>:
    4d24:	ff cf       	rjmp	.-2      	; 0x4d24 <__stop_program>
