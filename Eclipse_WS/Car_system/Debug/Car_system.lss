
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000214  00800060  00004ad6  00004b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800274  00800274  00004d7e  2**0
                  ALLOC
  3 .stab         000063cc  00000000  00000000  00004d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003d2e  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f01a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011617  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001299d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001402a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_1>
       8:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__vector_2>
       c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 24 	call	0x492e	; 0x492e <main>
      8a:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 24 	jmp	0x49da	; 0x49da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 24 	jmp	0x49da	; 0x49da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ef       	ldi	r22, 0xFA	; 250
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fd 24 	jmp	0x49fa	; 0x49fa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 19 25 	jmp	0x4a32	; 0x4a32 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 5f       	subi	r30, 0xFE	; 254
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T1)(void) = NULL_PTR;

    void Timer1_SetCallBack(void(*a_ptr)(void))
    {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer1_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T1 = a_ptr;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 75 02 	sts	0x0275, r25
     e44:	80 93 74 02 	sts	0x0274, r24
    }
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <__vector_6>:
                g_CallBackPtr_T1();
            }
        }
    #elif((TIMER1_CURRENT_MODE == T1_NORMAL_MODE) && (NORMAL_use_T1_state == T1_ICU))
        ISR(TIMER_1_CAPT)
        {
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T1 != NULL_PTR)
     e7c:	80 91 74 02 	lds	r24, 0x0274
     e80:	90 91 75 02 	lds	r25, 0x0275
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	29 f0       	breq	.+10     	; 0xe92 <__vector_6+0x40>
            {
                g_CallBackPtr_T1();
     e88:	e0 91 74 02 	lds	r30, 0x0274
     e8c:	f0 91 75 02 	lds	r31, 0x0275
     e90:	09 95       	icall
            }   
        }
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <Timer1_Init>:




void Timer1_Init(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR1A,FOC1A);
     ec0:	af e4       	ldi	r26, 0x4F	; 79
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ef e4       	ldi	r30, 0x4F	; 79
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 60       	ori	r24, 0x08	; 8
     ecc:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
     ece:	af e4       	ldi	r26, 0x4F	; 79
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ef e4       	ldi	r30, 0x4F	; 79
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	84 60       	ori	r24, 0x04	; 4
     eda:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR1A,WGM10);
     edc:	af e4       	ldi	r26, 0x4F	; 79
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1A,WGM11);
     eea:	af e4       	ldi	r26, 0x4F	; 79
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ef e4       	ldi	r30, 0x4F	; 79
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM12);
     ef8:	ae e4       	ldi	r26, 0x4E	; 78
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ee e4       	ldi	r30, 0x4E	; 78
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM13);
     f06:	ae e4       	ldi	r26, 0x4E	; 78
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ee e4       	ldi	r30, 0x4E	; 78
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8f 7e       	andi	r24, 0xEF	; 239
     f12:	8c 93       	st	X, r24

    #if(NORMAL_use_T1_state == T1_ICU)
    
        /*  Set this pin as input to take signal  ICP1  */
        GPIO_SetPinDirection(PORTD_ID,PIN6_ID,INPUT_PIN);
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	66 e0       	ldi	r22, 0x06	; 6
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
     f1e:	af e5       	ldi	r26, 0x5F	; 95
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ef e5       	ldi	r30, 0x5F	; 95
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	8c 93       	st	X, r24
        /*  Enable Input capture Interrupt  */
        SET_BIT(TIMSK,TICIE1);
     f2c:	a9 e5       	ldi	r26, 0x59	; 89
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 e5       	ldi	r30, 0x59	; 89
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	8c 93       	st	X, r24
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
#endif


    /*  Set TCNT0 value to Zero*/
    Timer1_UpdateValue(0) ;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 a4 07 	call	0xf48	; 0xf48 <Timer1_UpdateValue>
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <Timer1_UpdateValue>:



void Timer1_UpdateValue(uint16 Register_value)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <Timer1_UpdateValue+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Register_value;
     f56:	ec e4       	ldi	r30, 0x4C	; 76
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <Timer1_StopClock>:


void Timer1_StopClock(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = TCCR1B & (0xF8);
     f74:	ae e4       	ldi	r26, 0x4E	; 78
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ee e4       	ldi	r30, 0x4E	; 78
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 7f       	andi	r24, 0xF8	; 248
     f80:	8c 93       	st	X, r24
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <Timer1_ProvideClock>:


void Timer1_ProvideClock(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
     f90:	ae e4       	ldi	r26, 0x4E	; 78
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ee e4       	ldi	r30, 0x4E	; 78
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	98 2f       	mov	r25, r24
     f9c:	98 7f       	andi	r25, 0xF8	; 248
     f9e:	80 91 02 02 	lds	r24, 0x0202
     fa2:	89 2b       	or	r24, r25
     fa4:	8c 93       	st	X, r24
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <Timer1_ICU_capture_edge>:

#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)

    #if (NORMAL_use_T1_state  == T1_ICU)
        void Timer1_ICU_capture_edge (Timer1_ICU_Edge edge_type)
        {
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01
            TCCR1B = ( TCCR1B & (~(1 << ICES1)) ) | (edge_type << ICES1) ;
     fb8:	ae e4       	ldi	r26, 0x4E	; 78
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ee e4       	ldi	r30, 0x4E	; 78
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	28 2f       	mov	r18, r24
     fc4:	2f 7b       	andi	r18, 0xBF	; 191
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	00 24       	eor	r0, r0
     fce:	96 95       	lsr	r25
     fd0:	87 95       	ror	r24
     fd2:	07 94       	ror	r0
     fd4:	96 95       	lsr	r25
     fd6:	87 95       	ror	r24
     fd8:	07 94       	ror	r0
     fda:	98 2f       	mov	r25, r24
     fdc:	80 2d       	mov	r24, r0
     fde:	82 2b       	or	r24, r18
     fe0:	8c 93       	st	X, r24
        }
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <Icu_getInputCaptureValue>:

        uint16 Icu_getInputCaptureValue(void)
        {
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
            return ICR1;
     ff2:	e6 e4       	ldi	r30, 0x46	; 70
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
        }
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <Timer1_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T1 == Enable_Interrupt_T1)

        void Timer1_DelayOVFInterrupt(void)
        {
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
            Timer1_ProvideClock();
    1008:	0e 94 c4 07 	call	0xf88	; 0xf88 <Timer1_ProvideClock>
        }
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <Timer1_OVFDisableInterrupt>:


        void Timer1_OVFDisableInterrupt(void)
        {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE1);   
    101a:	a9 e5       	ldi	r26, 0x59	; 89
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e9 e5       	ldi	r30, 0x59	; 89
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8b 7f       	andi	r24, 0xFB	; 251
    1026:	8c 93       	st	X, r24
        }
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <Timer1_OVFEnableInterrupt>:

        void Timer1_OVFEnableInterrupt(void)
        {
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE1);   
    1036:	a9 e5       	ldi	r26, 0x59	; 89
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e9 e5       	ldi	r30, 0x59	; 89
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	8c 93       	st	X, r24
        }
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <Timer0_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <Timer0_SetCallBack+0x6>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	90 93 77 02 	sts	0x0277, r25
    1060:	80 93 76 02 	sts	0x0276, r24
    }
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <__vector_11>:

    #if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
        ISR(TIMER_0_OVF)
        {
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T0 != NULL_PTR)
    1098:	80 91 76 02 	lds	r24, 0x0276
    109c:	90 91 77 02 	lds	r25, 0x0277
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	29 f0       	breq	.+10     	; 0x10ae <__vector_11+0x40>
            {
                g_CallBackPtr_T0();
    10a4:	e0 91 76 02 	lds	r30, 0x0276
    10a8:	f0 91 77 02 	lds	r31, 0x0277
    10ac:	09 95       	icall
            }
        }
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <Timer0_Init>:




void Timer0_Init(void)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR0,FOC0);
    10dc:	a3 e5       	ldi	r26, 0x53	; 83
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e3 e5       	ldi	r30, 0x53	; 83
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR0,WGM00);
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 7b       	andi	r24, 0xBF	; 191
    10f6:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,WGM01);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	87 7f       	andi	r24, 0xF7	; 247
    1104:	8c 93       	st	X, r24
    #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
    1106:	af e5       	ldi	r26, 0x5F	; 95
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e5       	ldi	r30, 0x5F	; 95
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 68       	ori	r24, 0x80	; 128
    1112:	8c 93       	st	X, r24
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
    1114:	a9 e5       	ldi	r26, 0x59	; 89
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e9 e5       	ldi	r30, 0x59	; 89
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	81 60       	ori	r24, 0x01	; 1
    1120:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 97 08 	call	0x112e	; 0x112e <Timer0_UpdateValue>
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
    113a:	e2 e5       	ldi	r30, 0x52	; 82
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	80 83       	st	Z, r24
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <Timer0_StopClock>:


void Timer0_StopClock(void)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
    1152:	a3 e5       	ldi	r26, 0x53	; 83
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e3 e5       	ldi	r30, 0x53	; 83
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 7f       	andi	r24, 0xF8	; 248
    115e:	8c 93       	st	X, r24
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    116e:	a3 e5       	ldi	r26, 0x53	; 83
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e3 e5       	ldi	r30, 0x53	; 83
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	98 2f       	mov	r25, r24
    117a:	98 7f       	andi	r25, 0xF8	; 248
    117c:	80 91 03 02 	lds	r24, 0x0203
    1180:	89 2b       	or	r24, r25
    1182:	8c 93       	st	X, r24
}
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <Timer0_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T0 == Enable_Interrupt_T0)

        void Timer0_DelayOVFInterrupt(void)
        {
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
            Timer0_ProvideClock();
    1192:	0e 94 b3 08 	call	0x1166	; 0x1166 <Timer0_ProvideClock>
        }
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <Timer0_OVFDisableInterrupt>:


        void Timer0_OVFDisableInterrupt(void)
        {
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE0);   
    11a4:	a9 e5       	ldi	r26, 0x59	; 89
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e9 e5       	ldi	r30, 0x59	; 89
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	8c 93       	st	X, r24
        }
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <Timer0_OVFEnableInterrupt>:

        void Timer0_OVFEnableInterrupt(void)
        {
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE0);   
    11c0:	a9 e5       	ldi	r26, 0x59	; 89
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e9 e5       	ldi	r30, 0x59	; 89
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	81 60       	ori	r24, 0x01	; 1
    11cc:	8c 93       	st	X, r24
        }
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	57 c0       	rjmp	.+174    	; 0x1290 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	c9 01       	movw	r24, r18
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	fc 01       	movw	r30, r24
    11f4:	eb 5f       	subi	r30, 0xFB	; 251
    11f6:	fd 4f       	sbci	r31, 0xFD	; 253
    11f8:	80 81       	ld	r24, Z
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	e9 f4       	brne	.+58     	; 0x1238 <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	c9 01       	movw	r24, r18
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	fc 01       	movw	r30, r24
    1210:	ec 5f       	subi	r30, 0xFC	; 252
    1212:	fd 4f       	sbci	r31, 0xFD	; 253
    1214:	40 81       	ld	r20, Z
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	c9 01       	movw	r24, r18
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	82 0f       	add	r24, r18
    1224:	93 1f       	adc	r25, r19
    1226:	fc 01       	movw	r30, r24
    1228:	ea 5f       	subi	r30, 0xFA	; 250
    122a:	fd 4f       	sbci	r31, 0xFD	; 253
    122c:	90 81       	ld	r25, Z
    122e:	84 2f       	mov	r24, r20
    1230:	69 2f       	mov	r22, r25
    1232:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <GPIO_SetPortDirection>
    1236:	29 c0       	rjmp	.+82     	; 0x128a <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	c9 01       	movw	r24, r18
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	fc 01       	movw	r30, r24
    124a:	ec 5f       	subi	r30, 0xFC	; 252
    124c:	fd 4f       	sbci	r31, 0xFD	; 253
    124e:	50 81       	ld	r21, Z
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	c9 01       	movw	r24, r18
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	fc 01       	movw	r30, r24
    1262:	eb 5f       	subi	r30, 0xFB	; 251
    1264:	fd 4f       	sbci	r31, 0xFD	; 253
    1266:	40 81       	ld	r20, Z
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	c9 01       	movw	r24, r18
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	fc 01       	movw	r30, r24
    127a:	ea 5f       	subi	r30, 0xFA	; 250
    127c:	fd 4f       	sbci	r31, 0xFD	; 253
    127e:	90 81       	ld	r25, Z
    1280:	85 2f       	mov	r24, r21
    1282:	64 2f       	mov	r22, r20
    1284:	49 2f       	mov	r20, r25
    1286:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	88 23       	and	r24, r24
    1294:	09 f4       	brne	.+2      	; 0x1298 <GPIO_init+0xc4>
    1296:	a5 cf       	rjmp	.-182    	; 0x11e2 <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_SetPinDirection+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <GPIO_SetPinDirection+0x8>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
    12b2:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <GPIO_SetPinDirection+0x1c>
    12ba:	d8 c1       	rjmp	.+944    	; 0x166c <GPIO_SetPinDirection+0x3cc>
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 30       	cpi	r24, 0x08	; 8
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <GPIO_SetPinDirection+0x24>
    12c2:	d4 c1       	rjmp	.+936    	; 0x166c <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3d 83       	std	Y+5, r19	; 0x05
    12cc:	2c 83       	std	Y+4, r18	; 0x04
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <GPIO_SetPinDirection+0x3a>
    12d8:	84 c0       	rjmp	.+264    	; 0x13e2 <GPIO_SetPinDirection+0x142>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <GPIO_SetPinDirection+0x4e>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	71 f0       	breq	.+28     	; 0x1308 <GPIO_SetPinDirection+0x68>
    12ec:	bf c1       	rjmp	.+894    	; 0x166c <GPIO_SetPinDirection+0x3cc>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <GPIO_SetPinDirection+0x5a>
    12f8:	e1 c0       	rjmp	.+450    	; 0x14bc <GPIO_SetPinDirection+0x21c>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <GPIO_SetPinDirection+0x66>
    1304:	48 c1       	rjmp	.+656    	; 0x1596 <GPIO_SetPinDirection+0x2f6>
    1306:	b2 c1       	rjmp	.+868    	; 0x166c <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 23       	and	r24, r24
    130c:	41 f5       	brne	.+80     	; 0x135e <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    130e:	aa e3       	ldi	r26, 0x3A	; 58
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ea e3       	ldi	r30, 0x3A	; 58
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_SetPinDirection+0x8a>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	2a 95       	dec	r18
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_SetPinDirection+0x86>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    1334:	ab e3       	ldi	r26, 0x3B	; 59
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	eb e3       	ldi	r30, 0x3B	; 59
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_SetPinDirection+0xb2>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_SetPinDirection+0xae>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	87 c1       	rjmp	.+782    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	39 f5       	brne	.+78     	; 0x13b2 <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    1364:	aa e3       	ldi	r26, 0x3A	; 58
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	ea e3       	ldi	r30, 0x3A	; 58
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_SetPinDirection+0xe0>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	2a 95       	dec	r18
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_SetPinDirection+0xdc>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_SetPinDirection+0x108>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_SetPinDirection+0x104>
    13ac:	84 2b       	or	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	5d c1       	rjmp	.+698    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	09 f0       	breq	.+2      	; 0x13ba <GPIO_SetPinDirection+0x11a>
    13b8:	59 c1       	rjmp	.+690    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    13ba:	aa e3       	ldi	r26, 0x3A	; 58
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ea e3       	ldi	r30, 0x3A	; 58
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_SetPinDirection+0x138>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_SetPinDirection+0x134>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	45 c1       	rjmp	.+650    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 23       	and	r24, r24
    13e6:	41 f5       	brne	.+80     	; 0x1438 <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    13e8:	a7 e3       	ldi	r26, 0x37	; 55
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e7 e3       	ldi	r30, 0x37	; 55
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <GPIO_SetPinDirection+0x164>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	2a 95       	dec	r18
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <GPIO_SetPinDirection+0x160>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    140e:	a8 e3       	ldi	r26, 0x38	; 56
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e8 e3       	ldi	r30, 0x38	; 56
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_SetPinDirection+0x18c>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_SetPinDirection+0x188>
    1430:	80 95       	com	r24
    1432:	84 23       	and	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	1a c1       	rjmp	.+564    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	39 f5       	brne	.+78     	; 0x148c <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    143e:	a7 e3       	ldi	r26, 0x37	; 55
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_SetPinDirection+0x1ba>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	2a 95       	dec	r18
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_SetPinDirection+0x1b6>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_SetPinDirection+0x1e2>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_SetPinDirection+0x1de>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	f0 c0       	rjmp	.+480    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	09 f0       	breq	.+2      	; 0x1494 <GPIO_SetPinDirection+0x1f4>
    1492:	ec c0       	rjmp	.+472    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    1494:	a7 e3       	ldi	r26, 0x37	; 55
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e7 e3       	ldi	r30, 0x37	; 55
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <GPIO_SetPinDirection+0x212>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <GPIO_SetPinDirection+0x20e>
    14b6:	84 2b       	or	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	d8 c0       	rjmp	.+432    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 23       	and	r24, r24
    14c0:	41 f5       	brne	.+80     	; 0x1512 <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    14c2:	a4 e3       	ldi	r26, 0x34	; 52
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e4 e3       	ldi	r30, 0x34	; 52
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_SetPinDirection+0x23e>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	2a 95       	dec	r18
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_SetPinDirection+0x23a>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    14e8:	a5 e3       	ldi	r26, 0x35	; 53
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <GPIO_SetPinDirection+0x266>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <GPIO_SetPinDirection+0x262>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	ad c0       	rjmp	.+346    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	39 f5       	brne	.+78     	; 0x1566 <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    1518:	a4 e3       	ldi	r26, 0x34	; 52
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e4 e3       	ldi	r30, 0x34	; 52
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_SetPinDirection+0x294>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	2a 95       	dec	r18
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_SetPinDirection+0x290>
    1538:	80 95       	com	r24
    153a:	84 23       	and	r24, r20
    153c:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    153e:	a5 e3       	ldi	r26, 0x35	; 53
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e3       	ldi	r30, 0x35	; 53
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_SetPinDirection+0x2bc>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_SetPinDirection+0x2b8>
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	83 c0       	rjmp	.+262    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	09 f0       	breq	.+2      	; 0x156e <GPIO_SetPinDirection+0x2ce>
    156c:	7f c0       	rjmp	.+254    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    156e:	a4 e3       	ldi	r26, 0x34	; 52
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e4 e3       	ldi	r30, 0x34	; 52
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_SetPinDirection+0x2ec>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_SetPinDirection+0x2e8>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	6b c0       	rjmp	.+214    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 23       	and	r24, r24
    159a:	41 f5       	brne	.+80     	; 0x15ec <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    159c:	a1 e3       	ldi	r26, 0x31	; 49
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e1 e3       	ldi	r30, 0x31	; 49
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_SetPinDirection+0x318>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	2a 95       	dec	r18
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_SetPinDirection+0x314>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    15c2:	a2 e3       	ldi	r26, 0x32	; 50
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_SetPinDirection+0x340>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_SetPinDirection+0x33c>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	40 c0       	rjmp	.+128    	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	39 f5       	brne	.+78     	; 0x1640 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    15f2:	a1 e3       	ldi	r26, 0x31	; 49
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e1 e3       	ldi	r30, 0x31	; 49
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_SetPinDirection+0x36e>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	2a 95       	dec	r18
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_SetPinDirection+0x36a>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    1618:	a2 e3       	ldi	r26, 0x32	; 50
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e3       	ldi	r30, 0x32	; 50
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_SetPinDirection+0x396>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_SetPinDirection+0x392>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	16 c0       	rjmp	.+44     	; 0x166c <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	82 30       	cpi	r24, 0x02	; 2
    1644:	99 f4       	brne	.+38     	; 0x166c <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    1646:	a1 e3       	ldi	r26, 0x31	; 49
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e1 e3       	ldi	r30, 0x31	; 49
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_SetPinDirection+0x3c4>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_SetPinDirection+0x3c0>
    1668:	84 2b       	or	r24, r20
    166a:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <GPIO_ReadPin+0x6>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <GPIO_ReadPin+0x8>
    1684:	0f 92       	push	r0
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	8a 83       	std	Y+2, r24	; 0x02
    168c:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    168e:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	08 f0       	brcs	.+2      	; 0x1698 <GPIO_ReadPin+0x1c>
    1696:	84 c0       	rjmp	.+264    	; 0x17a0 <GPIO_ReadPin+0x124>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	88 30       	cpi	r24, 0x08	; 8
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <GPIO_ReadPin+0x24>
    169e:	80 c0       	rjmp	.+256    	; 0x17a0 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3d 83       	std	Y+5, r19	; 0x05
    16a8:	2c 83       	std	Y+4, r18	; 0x04
    16aa:	4c 81       	ldd	r20, Y+4	; 0x04
    16ac:	5d 81       	ldd	r21, Y+5	; 0x05
    16ae:	41 30       	cpi	r20, 0x01	; 1
    16b0:	51 05       	cpc	r21, r1
    16b2:	79 f1       	breq	.+94     	; 0x1712 <GPIO_ReadPin+0x96>
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	91 05       	cpc	r25, r1
    16bc:	34 f4       	brge	.+12     	; 0x16ca <GPIO_ReadPin+0x4e>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	21 15       	cp	r18, r1
    16c4:	31 05       	cpc	r19, r1
    16c6:	69 f0       	breq	.+26     	; 0x16e2 <GPIO_ReadPin+0x66>
    16c8:	6b c0       	rjmp	.+214    	; 0x17a0 <GPIO_ReadPin+0x124>
    16ca:	4c 81       	ldd	r20, Y+4	; 0x04
    16cc:	5d 81       	ldd	r21, Y+5	; 0x05
    16ce:	42 30       	cpi	r20, 0x02	; 2
    16d0:	51 05       	cpc	r21, r1
    16d2:	b9 f1       	breq	.+110    	; 0x1742 <GPIO_ReadPin+0xc6>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <GPIO_ReadPin+0x64>
    16de:	49 c0       	rjmp	.+146    	; 0x1772 <GPIO_ReadPin+0xf6>
    16e0:	5f c0       	rjmp	.+190    	; 0x17a0 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    16e2:	e9 e3       	ldi	r30, 0x39	; 57
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_ReadPin+0x7e>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_ReadPin+0x7a>
    16fe:	ca 01       	movw	r24, r20
    1700:	81 70       	andi	r24, 0x01	; 1
    1702:	90 70       	andi	r25, 0x00	; 0
    1704:	88 23       	and	r24, r24
    1706:	19 f0       	breq	.+6      	; 0x170e <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	49 c0       	rjmp	.+146    	; 0x17a0 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    170e:	19 82       	std	Y+1, r1	; 0x01
    1710:	47 c0       	rjmp	.+142    	; 0x17a0 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    1712:	e6 e3       	ldi	r30, 0x36	; 54
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a9 01       	movw	r20, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <GPIO_ReadPin+0xae>
    1726:	55 95       	asr	r21
    1728:	47 95       	ror	r20
    172a:	8a 95       	dec	r24
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <GPIO_ReadPin+0xaa>
    172e:	ca 01       	movw	r24, r20
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	90 70       	andi	r25, 0x00	; 0
    1734:	88 23       	and	r24, r24
    1736:	19 f0       	breq	.+6      	; 0x173e <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	31 c0       	rjmp	.+98     	; 0x17a0 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    173e:	19 82       	std	Y+1, r1	; 0x01
    1740:	2f c0       	rjmp	.+94     	; 0x17a0 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    1742:	e3 e3       	ldi	r30, 0x33	; 51
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_ReadPin+0xde>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_ReadPin+0xda>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	88 23       	and	r24, r24
    1766:	19 f0       	breq	.+6      	; 0x176e <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	19 c0       	rjmp	.+50     	; 0x17a0 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    176e:	19 82       	std	Y+1, r1	; 0x01
    1770:	17 c0       	rjmp	.+46     	; 0x17a0 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    1772:	e0 e3       	ldi	r30, 0x30	; 48
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a9 01       	movw	r20, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_ReadPin+0x10e>
    1786:	55 95       	asr	r21
    1788:	47 95       	ror	r20
    178a:	8a 95       	dec	r24
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_ReadPin+0x10a>
    178e:	ca 01       	movw	r24, r20
    1790:	81 70       	andi	r24, 0x01	; 1
    1792:	90 70       	andi	r25, 0x00	; 0
    1794:	88 23       	and	r24, r24
    1796:	19 f0       	breq	.+6      	; 0x179e <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    179e:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <GPIO_WritePin+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <GPIO_WritePin+0x8>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	6a 83       	std	Y+2, r22	; 0x02
    17c4:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <GPIO_WritePin+0x1c>
    17cc:	e4 c0       	rjmp	.+456    	; 0x1996 <GPIO_WritePin+0x1e4>
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	88 30       	cpi	r24, 0x08	; 8
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <GPIO_WritePin+0x24>
    17d4:	e0 c0       	rjmp	.+448    	; 0x1996 <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3d 83       	std	Y+5, r19	; 0x05
    17de:	2c 83       	std	Y+4, r18	; 0x04
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	9d 81       	ldd	r25, Y+5	; 0x05
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <GPIO_WritePin+0x3a>
    17ea:	47 c0       	rjmp	.+142    	; 0x187a <GPIO_WritePin+0xc8>
    17ec:	2c 81       	ldd	r18, Y+4	; 0x04
    17ee:	3d 81       	ldd	r19, Y+5	; 0x05
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	2c f4       	brge	.+10     	; 0x1800 <GPIO_WritePin+0x4e>
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	71 f0       	breq	.+28     	; 0x181a <GPIO_WritePin+0x68>
    17fe:	cb c0       	rjmp	.+406    	; 0x1996 <GPIO_WritePin+0x1e4>
    1800:	2c 81       	ldd	r18, Y+4	; 0x04
    1802:	3d 81       	ldd	r19, Y+5	; 0x05
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <GPIO_WritePin+0x5a>
    180a:	67 c0       	rjmp	.+206    	; 0x18da <GPIO_WritePin+0x128>
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <GPIO_WritePin+0x66>
    1816:	91 c0       	rjmp	.+290    	; 0x193a <GPIO_WritePin+0x188>
    1818:	be c0       	rjmp	.+380    	; 0x1996 <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1820:	ab e3       	ldi	r26, 0x3B	; 59
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e3       	ldi	r30, 0x3B	; 59
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_WritePin+0x8c>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_WritePin+0x88>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	a7 c0       	rjmp	.+334    	; 0x1996 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	88 23       	and	r24, r24
    184c:	09 f0       	breq	.+2      	; 0x1850 <GPIO_WritePin+0x9e>
    184e:	a3 c0       	rjmp	.+326    	; 0x1996 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    1850:	ab e3       	ldi	r26, 0x3B	; 59
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	eb e3       	ldi	r30, 0x3B	; 59
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_WritePin+0xbc>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_WritePin+0xb8>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	8e c0       	rjmp	.+284    	; 0x1996 <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1880:	a8 e3       	ldi	r26, 0x38	; 56
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_WritePin+0xec>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_WritePin+0xe8>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	77 c0       	rjmp	.+238    	; 0x1996 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	88 23       	and	r24, r24
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <GPIO_WritePin+0xfe>
    18ae:	73 c0       	rjmp	.+230    	; 0x1996 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    18b0:	a8 e3       	ldi	r26, 0x38	; 56
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <GPIO_WritePin+0x11c>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <GPIO_WritePin+0x118>
    18d2:	80 95       	com	r24
    18d4:	84 23       	and	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	5e c0       	rjmp	.+188    	; 0x1996 <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	a1 f4       	brne	.+40     	; 0x1908 <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    18e0:	a5 e3       	ldi	r26, 0x35	; 53
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e5 e3       	ldi	r30, 0x35	; 53
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_WritePin+0x14c>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_WritePin+0x148>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	47 c0       	rjmp	.+142    	; 0x1996 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	88 23       	and	r24, r24
    190c:	09 f0       	breq	.+2      	; 0x1910 <GPIO_WritePin+0x15e>
    190e:	43 c0       	rjmp	.+134    	; 0x1996 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    1910:	a5 e3       	ldi	r26, 0x35	; 53
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e5 e3       	ldi	r30, 0x35	; 53
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_WritePin+0x17c>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_WritePin+0x178>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	2e c0       	rjmp	.+92     	; 0x1996 <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	a1 f4       	brne	.+40     	; 0x1968 <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    1940:	a2 e3       	ldi	r26, 0x32	; 50
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e2 e3       	ldi	r30, 0x32	; 50
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_WritePin+0x1ac>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_WritePin+0x1a8>
    1962:	84 2b       	or	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	17 c0       	rjmp	.+46     	; 0x1996 <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	88 23       	and	r24, r24
    196c:	a1 f4       	brne	.+40     	; 0x1996 <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    196e:	a2 e3       	ldi	r26, 0x32	; 50
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_WritePin+0x1da>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_WritePin+0x1d6>
    1990:	80 95       	com	r24
    1992:	84 23       	and	r24, r20
    1994:	8c 93       	st	X, r24
                break;

        }
    }
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_TogglePin+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_TogglePin+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	08 f0       	brcs	.+2      	; 0x19be <GPIO_TogglePin+0x18>
    19bc:	72 c0       	rjmp	.+228    	; 0x1aa2 <GPIO_TogglePin+0xfc>
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	88 30       	cpi	r24, 0x08	; 8
    19c2:	08 f0       	brcs	.+2      	; 0x19c6 <GPIO_TogglePin+0x20>
    19c4:	6e c0       	rjmp	.+220    	; 0x1aa2 <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	49 f1       	breq	.+82     	; 0x1a2c <GPIO_TogglePin+0x86>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee <GPIO_TogglePin+0x48>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <GPIO_TogglePin+0x5e>
    19ec:	5a c0       	rjmp	.+180    	; 0x1aa2 <GPIO_TogglePin+0xfc>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	71 f1       	breq	.+92     	; 0x1a54 <GPIO_TogglePin+0xae>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	91 05       	cpc	r25, r1
    1a00:	e9 f1       	breq	.+122    	; 0x1a7c <GPIO_TogglePin+0xd6>
    1a02:	4f c0       	rjmp	.+158    	; 0x1aa2 <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    1a04:	ab e3       	ldi	r26, 0x3B	; 59
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	eb e3       	ldi	r30, 0x3B	; 59
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_TogglePin+0x7c>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_TogglePin+0x78>
    1a26:	84 27       	eor	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	3b c0       	rjmp	.+118    	; 0x1aa2 <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1a2c:	a8 e3       	ldi	r26, 0x38	; 56
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e8 e3       	ldi	r30, 0x38	; 56
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_TogglePin+0xa4>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_TogglePin+0xa0>
    1a4e:	84 27       	eor	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	27 c0       	rjmp	.+78     	; 0x1aa2 <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    1a54:	a5 e3       	ldi	r26, 0x35	; 53
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e5 e3       	ldi	r30, 0x35	; 53
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_TogglePin+0xcc>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_TogglePin+0xc8>
    1a76:	84 27       	eor	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	13 c0       	rjmp	.+38     	; 0x1aa2 <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1a7c:	a2 e3       	ldi	r26, 0x32	; 50
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e2 e3       	ldi	r30, 0x32	; 50
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_TogglePin+0xf4>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_TogglePin+0xf0>
    1a9e:	84 27       	eor	r24, r20
    1aa0:	8c 93       	st	X, r24
                break;

        }
    }

}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <GPIO_SetPortDirection+0x6>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <GPIO_SetPortDirection+0x8>
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <GPIO_SetPortDirection+0x18>
    1ac6:	96 c0       	rjmp	.+300    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3c 83       	std	Y+4, r19	; 0x04
    1ad0:	2b 83       	std	Y+3, r18	; 0x03
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	a9 f1       	breq	.+106    	; 0x1b46 <GPIO_SetPortDirection+0x96>
    1adc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ade:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <GPIO_SetPortDirection+0x40>
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	71 f0       	breq	.+28     	; 0x1b0a <GPIO_SetPortDirection+0x5a>
    1aee:	82 c0       	rjmp	.+260    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <GPIO_SetPortDirection+0x4c>
    1afa:	43 c0       	rjmp	.+134    	; 0x1b82 <GPIO_SetPortDirection+0xd2>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	91 05       	cpc	r25, r1
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <GPIO_SetPortDirection+0x58>
    1b06:	5a c0       	rjmp	.+180    	; 0x1bbc <GPIO_SetPortDirection+0x10c>
    1b08:	75 c0       	rjmp	.+234    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	88 23       	and	r24, r24
    1b0e:	39 f4       	brne	.+14     	; 0x1b1e <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1b10:	ea e3       	ldi	r30, 0x3A	; 58
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1b16:	eb e3       	ldi	r30, 0x3B	; 59
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	10 82       	st	Z, r1
    1b1c:	6b c0       	rjmp	.+214    	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	41 f4       	brne	.+16     	; 0x1b34 <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1b24:	ea e3       	ldi	r30, 0x3A	; 58
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1b2a:	eb e3       	ldi	r30, 0x3B	; 59
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	80 83       	st	Z, r24
    1b32:	60 c0       	rjmp	.+192    	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	8f 3f       	cpi	r24, 0xFF	; 255
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <GPIO_SetPortDirection+0x8c>
    1b3a:	5c c0       	rjmp	.+184    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1b3c:	ea e3       	ldi	r30, 0x3A	; 58
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	80 83       	st	Z, r24
    1b44:	57 c0       	rjmp	.+174    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	88 23       	and	r24, r24
    1b4a:	39 f4       	brne	.+14     	; 0x1b5a <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1b4c:	e7 e3       	ldi	r30, 0x37	; 55
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    1b52:	e8 e3       	ldi	r30, 0x38	; 56
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	10 82       	st	Z, r1
    1b58:	4d c0       	rjmp	.+154    	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	41 f4       	brne	.+16     	; 0x1b70 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    1b60:	e7 e3       	ldi	r30, 0x37	; 55
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    1b66:	e8 e3       	ldi	r30, 0x38	; 56
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	80 83       	st	Z, r24
    1b6e:	42 c0       	rjmp	.+132    	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	8f 3f       	cpi	r24, 0xFF	; 255
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <GPIO_SetPortDirection+0xc8>
    1b76:	3e c0       	rjmp	.+124    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    1b78:	e7 e3       	ldi	r30, 0x37	; 55
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	80 83       	st	Z, r24
    1b80:	39 c0       	rjmp	.+114    	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	88 23       	and	r24, r24
    1b86:	39 f4       	brne	.+14     	; 0x1b96 <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    1b88:	e4 e3       	ldi	r30, 0x34	; 52
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	10 82       	st	Z, r1
    1b94:	2f c0       	rjmp	.+94     	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	41 f4       	brne	.+16     	; 0x1bac <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1b9c:	e4 e3       	ldi	r30, 0x34	; 52
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1ba2:	e5 e3       	ldi	r30, 0x35	; 53
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	80 83       	st	Z, r24
    1baa:	24 c0       	rjmp	.+72     	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb0:	09 f5       	brne	.+66     	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    1bb2:	e4 e3       	ldi	r30, 0x34	; 52
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
    1bb8:	80 83       	st	Z, r24
    1bba:	1c c0       	rjmp	.+56     	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	88 23       	and	r24, r24
    1bc0:	39 f4       	brne	.+14     	; 0x1bd0 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    1bc2:	e1 e3       	ldi	r30, 0x31	; 49
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    1bc8:	e2 e3       	ldi	r30, 0x32	; 50
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	10 82       	st	Z, r1
    1bce:	12 c0       	rjmp	.+36     	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	41 f4       	brne	.+16     	; 0x1be6 <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    1bd6:	e1 e3       	ldi	r30, 0x31	; 49
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    1bec:	e1 e3       	ldi	r30, 0x31	; 49
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <GPIO_ReadPort+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <GPIO_ReadPort+0x8>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    1c10:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	90 f5       	brcc	.+100    	; 0x1c7c <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	3c 83       	std	Y+4, r19	; 0x04
    1c20:	2b 83       	std	Y+3, r18	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	d1 f0       	breq	.+52     	; 0x1c60 <GPIO_ReadPort+0x5e>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <GPIO_ReadPort+0x3e>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <GPIO_ReadPort+0x54>
    1c3e:	1e c0       	rjmp	.+60     	; 0x1c7c <GPIO_ReadPort+0x7a>
    1c40:	2b 81       	ldd	r18, Y+3	; 0x03
    1c42:	3c 81       	ldd	r19, Y+4	; 0x04
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	81 f0       	breq	.+32     	; 0x1c6a <GPIO_ReadPort+0x68>
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <GPIO_ReadPort+0x72>
    1c54:	13 c0       	rjmp	.+38     	; 0x1c7c <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    1c56:	e9 e3       	ldi	r30, 0x39	; 57
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	0e c0       	rjmp	.+28     	; 0x1c7c <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    1c60:	e6 e3       	ldi	r30, 0x36	; 54
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    1c6a:	e3 e3       	ldi	r30, 0x33	; 51
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    1c74:	e0 e3       	ldi	r30, 0x30	; 48
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <GPIO_WritePort+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <GPIO_WritePort+0x8>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	84 30       	cpi	r24, 0x04	; 4
    1ca0:	90 f5       	brcc	.+100    	; 0x1d06 <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3c 83       	std	Y+4, r19	; 0x04
    1caa:	2b 83       	std	Y+3, r18	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	d1 f0       	breq	.+52     	; 0x1cea <GPIO_WritePort+0x5e>
    1cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <GPIO_WritePort+0x3e>
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <GPIO_WritePort+0x54>
    1cc8:	1e c0       	rjmp	.+60     	; 0x1d06 <GPIO_WritePort+0x7a>
    1cca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <GPIO_WritePort+0x68>
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	83 30       	cpi	r24, 0x03	; 3
    1cda:	91 05       	cpc	r25, r1
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <GPIO_WritePort+0x72>
    1cde:	13 c0       	rjmp	.+38     	; 0x1d06 <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	80 83       	st	Z, r24
    1ce8:	0e c0       	rjmp	.+28     	; 0x1d06 <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1cea:	e8 e3       	ldi	r30, 0x38	; 56
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	80 83       	st	Z, r24
    1cf2:	09 c0       	rjmp	.+18     	; 0x1d06 <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	80 83       	st	Z, r24
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1cfe:	e2 e3       	ldi	r30, 0x32	; 50
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <GPIO_TogglePort+0x6>
    1d1a:	0f 92       	push	r0
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	84 30       	cpi	r24, 0x04	; 4
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <GPIO_TogglePort+0x16>
    1d28:	3e c0       	rjmp	.+124    	; 0x1da6 <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3b 83       	std	Y+3, r19	; 0x03
    1d32:	2a 83       	std	Y+2, r18	; 0x02
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	e9 f0       	breq	.+58     	; 0x1d78 <GPIO_TogglePort+0x64>
    1d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d40:	3b 81       	ldd	r19, Y+3	; 0x03
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <GPIO_TogglePort+0x3e>
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <GPIO_TogglePort+0x54>
    1d50:	2a c0       	rjmp	.+84     	; 0x1da6 <GPIO_TogglePort+0x92>
    1d52:	2a 81       	ldd	r18, Y+2	; 0x02
    1d54:	3b 81       	ldd	r19, Y+3	; 0x03
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	b1 f0       	breq	.+44     	; 0x1d88 <GPIO_TogglePort+0x74>
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	83 30       	cpi	r24, 0x03	; 3
    1d62:	91 05       	cpc	r25, r1
    1d64:	c9 f0       	breq	.+50     	; 0x1d98 <GPIO_TogglePort+0x84>
    1d66:	1f c0       	rjmp	.+62     	; 0x1da6 <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    1d68:	ab e3       	ldi	r26, 0x3B	; 59
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	eb e3       	ldi	r30, 0x3B	; 59
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 95       	com	r24
    1d74:	8c 93       	st	X, r24
    1d76:	17 c0       	rjmp	.+46     	; 0x1da6 <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    1d78:	a8 e3       	ldi	r26, 0x38	; 56
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	80 95       	com	r24
    1d84:	8c 93       	st	X, r24
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    1d88:	a5 e3       	ldi	r26, 0x35	; 53
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e3       	ldi	r30, 0x35	; 53
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	80 95       	com	r24
    1d94:	8c 93       	st	X, r24
    1d96:	07 c0       	rjmp	.+14     	; 0x1da6 <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    1d98:	a2 e3       	ldi	r26, 0x32	; 50
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e2 e3       	ldi	r30, 0x32	; 50
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 95       	com	r24
    1da4:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    1ddc:	80 91 78 02 	lds	r24, 0x0278
    1de0:	90 91 79 02 	lds	r25, 0x0279
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	29 f0       	breq	.+10     	; 0x1df2 <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    1de8:	e0 91 78 02 	lds	r30, 0x0278
    1dec:	f0 91 79 02 	lds	r31, 0x0279
    1df0:	09 95       	icall
    }
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	ff 91       	pop	r31
    1df8:	ef 91       	pop	r30
    1dfa:	bf 91       	pop	r27
    1dfc:	af 91       	pop	r26
    1dfe:	9f 91       	pop	r25
    1e00:	8f 91       	pop	r24
    1e02:	7f 91       	pop	r23
    1e04:	6f 91       	pop	r22
    1e06:	5f 91       	pop	r21
    1e08:	4f 91       	pop	r20
    1e0a:	3f 91       	pop	r19
    1e0c:	2f 91       	pop	r18
    1e0e:	0f 90       	pop	r0
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	0f 90       	pop	r0
    1e14:	1f 90       	pop	r1
    1e16:	18 95       	reti

00001e18 <__vector_2>:

ISR(INT1)
{
    1e18:	1f 92       	push	r1
    1e1a:	0f 92       	push	r0
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	0f 92       	push	r0
    1e20:	11 24       	eor	r1, r1
    1e22:	2f 93       	push	r18
    1e24:	3f 93       	push	r19
    1e26:	4f 93       	push	r20
    1e28:	5f 93       	push	r21
    1e2a:	6f 93       	push	r22
    1e2c:	7f 93       	push	r23
    1e2e:	8f 93       	push	r24
    1e30:	9f 93       	push	r25
    1e32:	af 93       	push	r26
    1e34:	bf 93       	push	r27
    1e36:	ef 93       	push	r30
    1e38:	ff 93       	push	r31
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    1e42:	80 91 7a 02 	lds	r24, 0x027A
    1e46:	90 91 7b 02 	lds	r25, 0x027B
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	29 f0       	breq	.+10     	; 0x1e58 <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    1e4e:	e0 91 7a 02 	lds	r30, 0x027A
    1e52:	f0 91 7b 02 	lds	r31, 0x027B
    1e56:	09 95       	icall
    }
}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	ff 91       	pop	r31
    1e5e:	ef 91       	pop	r30
    1e60:	bf 91       	pop	r27
    1e62:	af 91       	pop	r26
    1e64:	9f 91       	pop	r25
    1e66:	8f 91       	pop	r24
    1e68:	7f 91       	pop	r23
    1e6a:	6f 91       	pop	r22
    1e6c:	5f 91       	pop	r21
    1e6e:	4f 91       	pop	r20
    1e70:	3f 91       	pop	r19
    1e72:	2f 91       	pop	r18
    1e74:	0f 90       	pop	r0
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0f 90       	pop	r0
    1e7a:	1f 90       	pop	r1
    1e7c:	18 95       	reti

00001e7e <__vector_3>:

ISR(INT2)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    1ea8:	80 91 7c 02 	lds	r24, 0x027C
    1eac:	90 91 7d 02 	lds	r25, 0x027D
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	29 f0       	breq	.+10     	; 0x1ebe <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    1eb4:	e0 91 7c 02 	lds	r30, 0x027C
    1eb8:	f0 91 7d 02 	lds	r31, 0x027D
    1ebc:	09 95       	icall
    }
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	bf 91       	pop	r27
    1ec8:	af 91       	pop	r26
    1eca:	9f 91       	pop	r25
    1ecc:	8f 91       	pop	r24
    1ece:	7f 91       	pop	r23
    1ed0:	6f 91       	pop	r22
    1ed2:	5f 91       	pop	r21
    1ed4:	4f 91       	pop	r20
    1ed6:	3f 91       	pop	r19
    1ed8:	2f 91       	pop	r18
    1eda:	0f 90       	pop	r0
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	0f 90       	pop	r0
    1ee0:	1f 90       	pop	r1
    1ee2:	18 95       	reti

00001ee4 <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <INT0_SetCallBack+0x6>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	90 93 79 02 	sts	0x0279, r25
    1efa:	80 93 78 02 	sts	0x0278, r24
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <INT1_SetCallBack+0x6>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	90 93 7b 02 	sts	0x027B, r25
    1f1e:	80 93 7a 02 	sts	0x027A, r24
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <INT2_SetCallBack+0x6>
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	90 93 7d 02 	sts	0x027D, r25
    1f42:	80 93 7c 02 	sts	0x027C, r24
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <INT0_init+0x6>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	4a 81       	ldd	r20, Y+2	; 0x02
    1f64:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    1f68:	a5 e5       	ldi	r26, 0x55	; 85
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e5 e5       	ldi	r30, 0x55	; 85
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	98 2f       	mov	r25, r24
    1f74:	9c 7f       	andi	r25, 0xFC	; 252
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	89 2b       	or	r24, r25
    1f7a:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    1f7c:	ab e5       	ldi	r26, 0x5B	; 91
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	eb e5       	ldi	r30, 0x5B	; 91
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	80 64       	ori	r24, 0x40	; 64
    1f88:	8c 93       	st	X, r24
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <INT1_init+0x6>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	63 e0       	ldi	r22, 0x03	; 3
    1fa6:	4a 81       	ldd	r20, Y+2	; 0x02
    1fa8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    1fac:	a5 e5       	ldi	r26, 0x55	; 85
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e5       	ldi	r30, 0x55	; 85
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	23 7f       	andi	r18, 0xF3	; 243
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	82 2b       	or	r24, r18
    1fca:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    1fcc:	ab e5       	ldi	r26, 0x5B	; 91
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e5       	ldi	r30, 0x5B	; 91
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 68       	ori	r24, 0x80	; 128
    1fd8:	8c 93       	st	X, r24
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <INT2_init+0x6>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	4a 81       	ldd	r20, Y+2	; 0x02
    1ff8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	41 f4       	brne	.+16     	; 0x2012 <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    2002:	a4 e5       	ldi	r26, 0x54	; 84
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e4 e5       	ldi	r30, 0x54	; 84
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8f 7b       	andi	r24, 0xBF	; 191
    200e:	8c 93       	st	X, r24
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	83 30       	cpi	r24, 0x03	; 3
    2016:	39 f4       	brne	.+14     	; 0x2026 <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    2018:	a4 e5       	ldi	r26, 0x54	; 84
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e4 e5       	ldi	r30, 0x54	; 84
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    2026:	ab e5       	ldi	r26, 0x5B	; 91
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	eb e5       	ldi	r30, 0x5B	; 91
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 62       	ori	r24, 0x20	; 32
    2032:	8c 93       	st	X, r24
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <INT0_DeInit>:


void INT0_DeInit(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    2046:	ab e5       	ldi	r26, 0x5B	; 91
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	eb e5       	ldi	r30, 0x5B	; 91
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8f 7b       	andi	r24, 0xBF	; 191
    2052:	8c 93       	st	X, r24
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <INT1_DeInit>:


void INT1_DeInit(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    2062:	ab e5       	ldi	r26, 0x5B	; 91
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	eb e5       	ldi	r30, 0x5B	; 91
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	8f 77       	andi	r24, 0x7F	; 127
    206e:	8c 93       	st	X, r24
}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <INT2_DeInit>:

void INT2_DeInit(void)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    207e:	ab e5       	ldi	r26, 0x5B	; 91
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	eb e5       	ldi	r30, 0x5B	; 91
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8f 7d       	andi	r24, 0xDF	; 223
    208a:	8c 93       	st	X, r24
}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	87 70       	andi	r24, 0x07	; 7
    20a2:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    20a4:	a7 e2       	ldi	r26, 0x27	; 39
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e7 e2       	ldi	r30, 0x27	; 39
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	98 2f       	mov	r25, r24
    20b0:	90 7e       	andi	r25, 0xE0	; 224
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	89 2b       	or	r24, r25
    20b6:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    20b8:	a6 e2       	ldi	r26, 0x26	; 38
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e6 e2       	ldi	r30, 0x26	; 38
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 64       	ori	r24, 0x40	; 64
    20c4:	8c 93       	st	X, r24
}
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <ADC_Init>:

void ADC_Init(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    20d6:	a7 e2       	ldi	r26, 0x27	; 39
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e7 e2       	ldi	r30, 0x27	; 39
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	28 2f       	mov	r18, r24
    20e2:	2f 73       	andi	r18, 0x3F	; 63
    20e4:	80 91 08 02 	lds	r24, 0x0208
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	00 24       	eor	r0, r0
    20ee:	96 95       	lsr	r25
    20f0:	87 95       	ror	r24
    20f2:	07 94       	ror	r0
    20f4:	96 95       	lsr	r25
    20f6:	87 95       	ror	r24
    20f8:	07 94       	ror	r0
    20fa:	98 2f       	mov	r25, r24
    20fc:	80 2d       	mov	r24, r0
    20fe:	82 2b       	or	r24, r18
    2100:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    2102:	80 91 09 02 	lds	r24, 0x0209
    2106:	88 23       	and	r24, r24
    2108:	41 f4       	brne	.+16     	; 0x211a <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    210a:	a7 e2       	ldi	r26, 0x27	; 39
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e7 e2       	ldi	r30, 0x27	; 39
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8f 7d       	andi	r24, 0xDF	; 223
    2116:	8c 93       	st	X, r24
    2118:	0b c0       	rjmp	.+22     	; 0x2130 <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    211a:	80 91 09 02 	lds	r24, 0x0209
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	39 f4       	brne	.+14     	; 0x2130 <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    2122:	a7 e2       	ldi	r26, 0x27	; 39
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e7 e2       	ldi	r30, 0x27	; 39
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	80 62       	ori	r24, 0x20	; 32
    212e:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    2130:	a6 e2       	ldi	r26, 0x26	; 38
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e6 e2       	ldi	r30, 0x26	; 38
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	80 68       	ori	r24, 0x80	; 128
    213c:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    213e:	80 91 07 02 	lds	r24, 0x0207
    2142:	88 23       	and	r24, r24
    2144:	99 f1       	breq	.+102    	; 0x21ac <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    2146:	80 91 07 02 	lds	r24, 0x0207
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	79 f4       	brne	.+30     	; 0x216c <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    214e:	a6 e2       	ldi	r26, 0x26	; 38
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e2       	ldi	r30, 0x26	; 38
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 62       	ori	r24, 0x20	; 32
    215a:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    215c:	a0 e5       	ldi	r26, 0x50	; 80
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e0 e5       	ldi	r30, 0x50	; 80
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	8c 93       	st	X, r24
    216a:	20 c0       	rjmp	.+64     	; 0x21ac <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    216c:	80 91 07 02 	lds	r24, 0x0207
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	e1 f4       	brne	.+56     	; 0x21ac <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    2174:	a6 e2       	ldi	r26, 0x26	; 38
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e6 e2       	ldi	r30, 0x26	; 38
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 62       	ori	r24, 0x20	; 32
    2180:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    2182:	a0 e5       	ldi	r26, 0x50	; 80
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e0 e5       	ldi	r30, 0x50	; 80
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	28 2f       	mov	r18, r24
    218e:	2f 70       	andi	r18, 0x0F	; 15
    2190:	80 91 0b 02 	lds	r24, 0x020B
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	82 95       	swap	r24
    219e:	92 95       	swap	r25
    21a0:	90 7f       	andi	r25, 0xF0	; 240
    21a2:	98 27       	eor	r25, r24
    21a4:	80 7f       	andi	r24, 0xF0	; 240
    21a6:	98 27       	eor	r25, r24
    21a8:	82 2b       	or	r24, r18
    21aa:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    21ac:	a6 e2       	ldi	r26, 0x26	; 38
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e6 e2       	ldi	r30, 0x26	; 38
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	98 2f       	mov	r25, r24
    21b8:	98 7f       	andi	r25, 0xF8	; 248
    21ba:	80 91 0a 02 	lds	r24, 0x020A
    21be:	87 70       	andi	r24, 0x07	; 7
    21c0:	89 2b       	or	r24, r25
    21c2:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    21c4:	a6 e2       	ldi	r26, 0x26	; 38
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e6 e2       	ldi	r30, 0x26	; 38
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	87 7f       	andi	r24, 0xF7	; 247
    21d0:	8c 93       	st	X, r24
    #endif
        
}
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	0f 92       	push	r0
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	0e 94 49 10 	call	0x2092	; 0x2092 <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    21ea:	e6 e2       	ldi	r30, 0x26	; 38
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	80 71       	andi	r24, 0x10	; 16
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	b9 f3       	breq	.-18     	; 0x21ea <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    21fc:	0e 94 20 11 	call	0x2240	; 0x2240 <ADC_ReadConversionRegister>
    2200:	90 93 7f 02 	sts	0x027F, r25
    2204:	80 93 7e 02 	sts	0x027E, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    2208:	a6 e2       	ldi	r26, 0x26	; 38
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e6 e2       	ldi	r30, 0x26	; 38
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 61       	ori	r24, 0x10	; 16
    2214:	8c 93       	st	X, r24
    return ADC_conversion_value;
    2216:	80 91 7e 02 	lds	r24, 0x027E
    221a:	90 91 7f 02 	lds	r25, 0x027F
}
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	0f 92       	push	r0
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	0e 94 49 10 	call	0x2092	; 0x2092 <ADC_OnlyStartConversionGeneral>
}
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <ADC_ReadConversionRegister+0x6>
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    224a:	1a 82       	std	Y+2, r1	; 0x02
    224c:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    224e:	80 91 09 02 	lds	r24, 0x0209
    2252:	88 23       	and	r24, r24
    2254:	b9 f4       	brne	.+46     	; 0x2284 <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    2256:	e4 e2       	ldi	r30, 0x24	; 36
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    2264:	e5 e2       	ldi	r30, 0x25	; 37
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	83 70       	andi	r24, 0x03	; 3
    2270:	90 70       	andi	r25, 0x00	; 0
    2272:	38 2f       	mov	r19, r24
    2274:	22 27       	eor	r18, r18
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	82 2b       	or	r24, r18
    227c:	93 2b       	or	r25, r19
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	20 c0       	rjmp	.+64     	; 0x22c4 <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    2284:	80 91 09 02 	lds	r24, 0x0209
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	e1 f4       	brne	.+56     	; 0x22c4 <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    228c:	e4 e2       	ldi	r30, 0x24	; 36
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	82 95       	swap	r24
    2294:	86 95       	lsr	r24
    2296:	86 95       	lsr	r24
    2298:	83 70       	andi	r24, 0x03	; 3
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	90 70       	andi	r25, 0x00	; 0
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    22a4:	e5 e2       	ldi	r30, 0x25	; 37
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9c 01       	movw	r18, r24
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	22 0f       	add	r18, r18
    22b6:	33 1f       	adc	r19, r19
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	82 2b       	or	r24, r18
    22be:	93 2b       	or	r25, r19
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	69 81       	ldd	r22, Y+1	; 0x01
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>

}
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <POT_GetValue+0x6>
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	89 83       	std	Y+1, r24	; 0x01
    
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <LED_Init+0x6>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	6a 81       	ldd	r22, Y+2	; 0x02
    231c:	42 e0       	ldi	r20, 0x02	; 2
    231e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <LED_OnOffPositiveLogic+0x6>
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	6a 83       	std	Y+2, r22	; 0x02
    233c:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	88 23       	and	r24, r24
    2342:	31 f4       	brne	.+12     	; 0x2350 <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	6a 81       	ldd	r22, Y+2	; 0x02
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    234e:	08 c0       	rjmp	.+16     	; 0x2360 <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	29 f4       	brne	.+10     	; 0x2360 <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	6a 81       	ldd	r22, Y+2	; 0x02
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    }


}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	00 d0       	rcall	.+0      	; 0x2372 <LED_OnOffNegativeLogic+0x6>
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	6a 83       	std	Y+2, r22	; 0x02
    237c:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	88 23       	and	r24, r24
    2382:	31 f4       	brne	.+12     	; 0x2390 <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	6a 81       	ldd	r22, Y+2	; 0x02
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    238e:	08 c0       	rjmp	.+16     	; 0x23a0 <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	29 f4       	brne	.+10     	; 0x23a0 <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	6a 81       	ldd	r22, Y+2	; 0x02
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    }


}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <LED_Toggle+0x6>
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	6a 81       	ldd	r22, Y+2	; 0x02
    23be:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_TogglePin>
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	63 e0       	ldi	r22, 0x03	; 3
    23d8:	42 e0       	ldi	r20, 0x02	; 2
    23da:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	62 e0       	ldi	r22, 0x02	; 2
    23e2:	42 e0       	ldi	r20, 0x02	; 2
    23e4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	42 e0       	ldi	r20, 0x02	; 2
    23ee:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	42 e0       	ldi	r20, 0x02	; 2
    23f8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	62 e0       	ldi	r22, 0x02	; 2
    2400:	42 e0       	ldi	r20, 0x02	; 2
    2402:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	64 e0       	ldi	r22, 0x04	; 4
    240a:	42 e0       	ldi	r20, 0x02	; 2
    240c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    2416:	88 e2       	ldi	r24, 0x28	; 40
    2418:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    241c:	8c e0       	ldi	r24, 0x0C	; 12
    241e:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	c4 56       	subi	r28, 0x64	; 100
    243c:	d0 40       	sbci	r29, 0x00	; 0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	fe 01       	movw	r30, r28
    244a:	ec 59       	subi	r30, 0x9C	; 156
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	63 e0       	ldi	r22, 0x03	; 3
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    245a:	fe 01       	movw	r30, r28
    245c:	e1 5a       	subi	r30, 0xA1	; 161
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e8       	ldi	r26, 0x80	; 128
    2466:	bf e3       	ldi	r27, 0x3F	; 63
    2468:	80 83       	st	Z, r24
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	a2 83       	std	Z+2, r26	; 0x02
    246e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	8e 01       	movw	r16, r28
    2472:	05 5a       	subi	r16, 0xA5	; 165
    2474:	1f 4f       	sbci	r17, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	e1 5a       	subi	r30, 0xA1	; 161
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a e7       	ldi	r20, 0x7A	; 122
    248a:	55 e4       	ldi	r21, 0x45	; 69
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	f8 01       	movw	r30, r16
    2496:	80 83       	st	Z, r24
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	a2 83       	std	Z+2, r26	; 0x02
    249c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    249e:	fe 01       	movw	r30, r28
    24a0:	e5 5a       	subi	r30, 0xA5	; 165
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	44 f4       	brge	.+16     	; 0x24cc <LCD_SendCommand+0x9e>
		__ticks = 1;
    24bc:	fe 01       	movw	r30, r28
    24be:	e7 5a       	subi	r30, 0xA7	; 167
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
    24ca:	64 c0       	rjmp	.+200    	; 0x2594 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    24cc:	fe 01       	movw	r30, r28
    24ce:	e5 5a       	subi	r30, 0xA5	; 165
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	0c f0       	brlt	.+2      	; 0x24ec <LCD_SendCommand+0xbe>
    24ea:	43 c0       	rjmp	.+134    	; 0x2572 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	fe 01       	movw	r30, r28
    24ee:	e1 5a       	subi	r30, 0xA1	; 161
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8e 01       	movw	r16, r28
    250c:	07 5a       	subi	r16, 0xA7	; 167
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
    2522:	1f c0       	rjmp	.+62     	; 0x2562 <LCD_SendCommand+0x134>
    2524:	fe 01       	movw	r30, r28
    2526:	e9 5a       	subi	r30, 0xA9	; 169
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 e9       	ldi	r24, 0x90	; 144
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2532:	fe 01       	movw	r30, r28
    2534:	e9 5a       	subi	r30, 0xA9	; 169
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_SendCommand+0x10e>
    2540:	fe 01       	movw	r30, r28
    2542:	e9 5a       	subi	r30, 0xA9	; 169
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	de 01       	movw	r26, r28
    254c:	a7 5a       	subi	r26, 0xA7	; 167
    254e:	bf 4f       	sbci	r27, 0xFF	; 255
    2550:	fe 01       	movw	r30, r28
    2552:	e7 5a       	subi	r30, 0xA7	; 167
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	11 96       	adiw	r26, 0x01	; 1
    255e:	9c 93       	st	X, r25
    2560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	fe 01       	movw	r30, r28
    2564:	e7 5a       	subi	r30, 0xA7	; 167
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	d1 f6       	brne	.-76     	; 0x2524 <LCD_SendCommand+0xf6>
    2570:	27 c0       	rjmp	.+78     	; 0x25c0 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2572:	8e 01       	movw	r16, r28
    2574:	07 5a       	subi	r16, 0xA7	; 167
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e5 5a       	subi	r30, 0xA5	; 165
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	f8 01       	movw	r30, r16
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
    2594:	de 01       	movw	r26, r28
    2596:	ab 5a       	subi	r26, 0xAB	; 171
    2598:	bf 4f       	sbci	r27, 0xFF	; 255
    259a:	fe 01       	movw	r30, r28
    259c:	e7 5a       	subi	r30, 0xA7	; 167
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	8d 93       	st	X+, r24
    25a6:	9c 93       	st	X, r25
    25a8:	fe 01       	movw	r30, r28
    25aa:	eb 5a       	subi	r30, 0xAB	; 171
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_SendCommand+0x184>
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 5a       	subi	r30, 0xAB	; 171
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	62 e0       	ldi	r22, 0x02	; 2
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    25ca:	fe 01       	movw	r30, r28
    25cc:	ef 5a       	subi	r30, 0xAF	; 175
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e8       	ldi	r26, 0x80	; 128
    25d6:	bf e3       	ldi	r27, 0x3F	; 63
    25d8:	80 83       	st	Z, r24
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	a2 83       	std	Z+2, r26	; 0x02
    25de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	8e 01       	movw	r16, r28
    25e2:	03 5b       	subi	r16, 0xB3	; 179
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	fe 01       	movw	r30, r28
    25e8:	ef 5a       	subi	r30, 0xAF	; 175
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a e7       	ldi	r20, 0x7A	; 122
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	f8 01       	movw	r30, r16
    2606:	80 83       	st	Z, r24
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	a2 83       	std	Z+2, r26	; 0x02
    260c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    260e:	fe 01       	movw	r30, r28
    2610:	e3 5b       	subi	r30, 0xB3	; 179
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	44 f4       	brge	.+16     	; 0x263c <LCD_SendCommand+0x20e>
		__ticks = 1;
    262c:	fe 01       	movw	r30, r28
    262e:	e5 5b       	subi	r30, 0xB5	; 181
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	64 c0       	rjmp	.+200    	; 0x2704 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    263c:	fe 01       	movw	r30, r28
    263e:	e3 5b       	subi	r30, 0xB3	; 179
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	0c f0       	brlt	.+2      	; 0x265c <LCD_SendCommand+0x22e>
    265a:	43 c0       	rjmp	.+134    	; 0x26e2 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	fe 01       	movw	r30, r28
    265e:	ef 5a       	subi	r30, 0xAF	; 175
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8e 01       	movw	r16, r28
    267c:	05 5b       	subi	r16, 0xB5	; 181
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	f8 01       	movw	r30, r16
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	1f c0       	rjmp	.+62     	; 0x26d2 <LCD_SendCommand+0x2a4>
    2694:	fe 01       	movw	r30, r28
    2696:	e7 5b       	subi	r30, 0xB7	; 183
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 e9       	ldi	r24, 0x90	; 144
    269c:	91 e0       	ldi	r25, 0x01	; 1
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	fe 01       	movw	r30, r28
    26a4:	e7 5b       	subi	r30, 0xB7	; 183
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_SendCommand+0x27e>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e7 5b       	subi	r30, 0xB7	; 183
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	de 01       	movw	r26, r28
    26bc:	a5 5b       	subi	r26, 0xB5	; 181
    26be:	bf 4f       	sbci	r27, 0xFF	; 255
    26c0:	fe 01       	movw	r30, r28
    26c2:	e5 5b       	subi	r30, 0xB5	; 181
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	11 96       	adiw	r26, 0x01	; 1
    26ce:	9c 93       	st	X, r25
    26d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	fe 01       	movw	r30, r28
    26d4:	e5 5b       	subi	r30, 0xB5	; 181
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	d1 f6       	brne	.-76     	; 0x2694 <LCD_SendCommand+0x266>
    26e0:	27 c0       	rjmp	.+78     	; 0x2730 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e2:	8e 01       	movw	r16, r28
    26e4:	05 5b       	subi	r16, 0xB5	; 181
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	fe 01       	movw	r30, r28
    26ea:	e3 5b       	subi	r30, 0xB3	; 179
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	f8 01       	movw	r30, r16
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
    2704:	de 01       	movw	r26, r28
    2706:	a9 5b       	subi	r26, 0xB9	; 185
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5b       	subi	r30, 0xB5	; 181
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	8d 93       	st	X+, r24
    2716:	9c 93       	st	X, r25
    2718:	fe 01       	movw	r30, r28
    271a:	e9 5b       	subi	r30, 0xB9	; 185
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_SendCommand+0x2f4>
    2726:	fe 01       	movw	r30, r28
    2728:	e9 5b       	subi	r30, 0xB9	; 185
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    2730:	de 01       	movw	r26, r28
    2732:	ad 59       	subi	r26, 0x9D	; 157
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	ec 59       	subi	r30, 0x9C	; 156
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	82 95       	swap	r24
    2740:	8f 70       	andi	r24, 0x0F	; 15
    2742:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2744:	fe 01       	movw	r30, r28
    2746:	ed 59       	subi	r30, 0x9D	; 157
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	98 2f       	mov	r25, r24
    274e:	91 70       	andi	r25, 0x01	; 1
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	49 2f       	mov	r20, r25
    2756:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    275a:	fe 01       	movw	r30, r28
    275c:	ed 59       	subi	r30, 0x9D	; 157
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	86 95       	lsr	r24
    2764:	98 2f       	mov	r25, r24
    2766:	91 70       	andi	r25, 0x01	; 1
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	49 2f       	mov	r20, r25
    276e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2772:	fe 01       	movw	r30, r28
    2774:	ed 59       	subi	r30, 0x9D	; 157
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	86 95       	lsr	r24
    277c:	86 95       	lsr	r24
    277e:	98 2f       	mov	r25, r24
    2780:	91 70       	andi	r25, 0x01	; 1
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	49 2f       	mov	r20, r25
    2788:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    278c:	fe 01       	movw	r30, r28
    278e:	ed 59       	subi	r30, 0x9D	; 157
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	86 95       	lsr	r24
    2796:	86 95       	lsr	r24
    2798:	86 95       	lsr	r24
    279a:	98 2f       	mov	r25, r24
    279c:	91 70       	andi	r25, 0x01	; 1
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	49 2f       	mov	r20, r25
    27a4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    27a8:	fe 01       	movw	r30, r28
    27aa:	ed 5b       	subi	r30, 0xBD	; 189
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e8       	ldi	r26, 0x80	; 128
    27b4:	bf e3       	ldi	r27, 0x3F	; 63
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27be:	8e 01       	movw	r16, r28
    27c0:	01 5c       	subi	r16, 0xC1	; 193
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	fe 01       	movw	r30, r28
    27c6:	ed 5b       	subi	r30, 0xBD	; 189
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a e7       	ldi	r20, 0x7A	; 122
    27d8:	55 e4       	ldi	r21, 0x45	; 69
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	f8 01       	movw	r30, r16
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ec:	fe 01       	movw	r30, r28
    27ee:	ff 96       	adiw	r30, 0x3f	; 63
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <LCD_SendCommand+0x3e4>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e af       	std	Y+62, r25	; 0x3e
    280e:	8d af       	std	Y+61, r24	; 0x3d
    2810:	46 c0       	rjmp	.+140    	; 0x289e <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    2812:	fe 01       	movw	r30, r28
    2814:	ff 96       	adiw	r30, 0x3f	; 63
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	64 f5       	brge	.+88     	; 0x2886 <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	fe 01       	movw	r30, r28
    2830:	ed 5b       	subi	r30, 0xBD	; 189
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9e af       	std	Y+62, r25	; 0x3e
    285a:	8d af       	std	Y+61, r24	; 0x3d
    285c:	0f c0       	rjmp	.+30     	; 0x287c <LCD_SendCommand+0x44e>
    285e:	80 e9       	ldi	r24, 0x90	; 144
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	9c af       	std	Y+60, r25	; 0x3c
    2864:	8b af       	std	Y+59, r24	; 0x3b
    2866:	8b ad       	ldd	r24, Y+59	; 0x3b
    2868:	9c ad       	ldd	r25, Y+60	; 0x3c
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_SendCommand+0x43c>
    286e:	9c af       	std	Y+60, r25	; 0x3c
    2870:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	8d ad       	ldd	r24, Y+61	; 0x3d
    2874:	9e ad       	ldd	r25, Y+62	; 0x3e
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9e af       	std	Y+62, r25	; 0x3e
    287a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	8d ad       	ldd	r24, Y+61	; 0x3d
    287e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <LCD_SendCommand+0x430>
    2884:	16 c0       	rjmp	.+44     	; 0x28b2 <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	fe 01       	movw	r30, r28
    2888:	ff 96       	adiw	r30, 0x3f	; 63
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9e af       	std	Y+62, r25	; 0x3e
    289c:	8d af       	std	Y+61, r24	; 0x3d
    289e:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a2:	9a af       	std	Y+58, r25	; 0x3a
    28a4:	89 af       	std	Y+57, r24	; 0x39
    28a6:	89 ad       	ldd	r24, Y+57	; 0x39
    28a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <LCD_SendCommand+0x47c>
    28ae:	9a af       	std	Y+58, r25	; 0x3a
    28b0:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	62 e0       	ldi	r22, 0x02	; 2
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e8       	ldi	r26, 0x80	; 128
    28c2:	bf e3       	ldi	r27, 0x3F	; 63
    28c4:	8d ab       	std	Y+53, r24	; 0x35
    28c6:	9e ab       	std	Y+54, r25	; 0x36
    28c8:	af ab       	std	Y+55, r26	; 0x37
    28ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6d a9       	ldd	r22, Y+53	; 0x35
    28ce:	7e a9       	ldd	r23, Y+54	; 0x36
    28d0:	8f a9       	ldd	r24, Y+55	; 0x37
    28d2:	98 ad       	ldd	r25, Y+56	; 0x38
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a e7       	ldi	r20, 0x7A	; 122
    28da:	55 e4       	ldi	r21, 0x45	; 69
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	89 ab       	std	Y+49, r24	; 0x31
    28e6:	9a ab       	std	Y+50, r25	; 0x32
    28e8:	ab ab       	std	Y+51, r26	; 0x33
    28ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ec:	69 a9       	ldd	r22, Y+49	; 0x31
    28ee:	7a a9       	ldd	r23, Y+50	; 0x32
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	9c a9       	ldd	r25, Y+52	; 0x34
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <LCD_SendCommand+0x4e0>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	98 ab       	std	Y+48, r25	; 0x30
    290a:	8f a7       	std	Y+47, r24	; 0x2f
    290c:	3f c0       	rjmp	.+126    	; 0x298c <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    290e:	69 a9       	ldd	r22, Y+49	; 0x31
    2910:	7a a9       	ldd	r23, Y+50	; 0x32
    2912:	8b a9       	ldd	r24, Y+51	; 0x33
    2914:	9c a9       	ldd	r25, Y+52	; 0x34
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6d a9       	ldd	r22, Y+53	; 0x35
    2928:	7e a9       	ldd	r23, Y+54	; 0x36
    292a:	8f a9       	ldd	r24, Y+55	; 0x37
    292c:	98 ad       	ldd	r25, Y+56	; 0x38
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	98 ab       	std	Y+48, r25	; 0x30
    294c:	8f a7       	std	Y+47, r24	; 0x2f
    294e:	0f c0       	rjmp	.+30     	; 0x296e <LCD_SendCommand+0x540>
    2950:	80 e9       	ldi	r24, 0x90	; 144
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	9e a7       	std	Y+46, r25	; 0x2e
    2956:	8d a7       	std	Y+45, r24	; 0x2d
    2958:	8d a5       	ldd	r24, Y+45	; 0x2d
    295a:	9e a5       	ldd	r25, Y+46	; 0x2e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_SendCommand+0x52e>
    2960:	9e a7       	std	Y+46, r25	; 0x2e
    2962:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8f a5       	ldd	r24, Y+47	; 0x2f
    2966:	98 a9       	ldd	r25, Y+48	; 0x30
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <LCD_SendCommand+0x522>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	98 ab       	std	Y+48, r25	; 0x30
    298a:	8f a7       	std	Y+47, r24	; 0x2f
    298c:	8f a5       	ldd	r24, Y+47	; 0x2f
    298e:	98 a9       	ldd	r25, Y+48	; 0x30
    2990:	9c a7       	std	Y+44, r25	; 0x2c
    2992:	8b a7       	std	Y+43, r24	; 0x2b
    2994:	8b a5       	ldd	r24, Y+43	; 0x2b
    2996:	9c a5       	ldd	r25, Y+44	; 0x2c
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_SendCommand+0x56a>
    299c:	9c a7       	std	Y+44, r25	; 0x2c
    299e:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	62 e0       	ldi	r22, 0x02	; 2
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	bf e3       	ldi	r27, 0x3F	; 63
    29b2:	8f a3       	std	Y+39, r24	; 0x27
    29b4:	98 a7       	std	Y+40, r25	; 0x28
    29b6:	a9 a7       	std	Y+41, r26	; 0x29
    29b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6f a1       	ldd	r22, Y+39	; 0x27
    29bc:	78 a5       	ldd	r23, Y+40	; 0x28
    29be:	89 a5       	ldd	r24, Y+41	; 0x29
    29c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a e7       	ldi	r20, 0x7A	; 122
    29c8:	55 e4       	ldi	r21, 0x45	; 69
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8b a3       	std	Y+35, r24	; 0x23
    29d4:	9c a3       	std	Y+36, r25	; 0x24
    29d6:	ad a3       	std	Y+37, r26	; 0x25
    29d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29da:	6b a1       	ldd	r22, Y+35	; 0x23
    29dc:	7c a1       	ldd	r23, Y+36	; 0x24
    29de:	8d a1       	ldd	r24, Y+37	; 0x25
    29e0:	9e a1       	ldd	r25, Y+38	; 0x26
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_SendCommand+0x5ce>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9a a3       	std	Y+34, r25	; 0x22
    29f8:	89 a3       	std	Y+33, r24	; 0x21
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    29fc:	6b a1       	ldd	r22, Y+35	; 0x23
    29fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2a00:	8d a1       	ldd	r24, Y+37	; 0x25
    2a02:	9e a1       	ldd	r25, Y+38	; 0x26
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6f a1       	ldd	r22, Y+39	; 0x27
    2a16:	78 a5       	ldd	r23, Y+40	; 0x28
    2a18:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9a a3       	std	Y+34, r25	; 0x22
    2a3a:	89 a3       	std	Y+33, r24	; 0x21
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_SendCommand+0x62e>
    2a3e:	80 e9       	ldi	r24, 0x90	; 144
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	98 a3       	std	Y+32, r25	; 0x20
    2a44:	8f 8f       	std	Y+31, r24	; 0x1f
    2a46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a48:	98 a1       	ldd	r25, Y+32	; 0x20
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_SendCommand+0x61c>
    2a4e:	98 a3       	std	Y+32, r25	; 0x20
    2a50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	89 a1       	ldd	r24, Y+33	; 0x21
    2a54:	9a a1       	ldd	r25, Y+34	; 0x22
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_SendCommand+0x610>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6b a1       	ldd	r22, Y+35	; 0x23
    2a68:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9a a3       	std	Y+34, r25	; 0x22
    2a78:	89 a3       	std	Y+33, r24	; 0x21
    2a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a80:	8d 8f       	std	Y+29, r24	; 0x1d
    2a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_SendCommand+0x658>
    2a8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8c:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    2a8e:	de 01       	movw	r26, r28
    2a90:	ad 59       	subi	r26, 0x9D	; 157
    2a92:	bf 4f       	sbci	r27, 0xFF	; 255
    2a94:	fe 01       	movw	r30, r28
    2a96:	ec 59       	subi	r30, 0x9C	; 156
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 81       	ld	r24, Z
    2a9c:	8f 70       	andi	r24, 0x0F	; 15
    2a9e:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ed 59       	subi	r30, 0x9D	; 157
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	91 70       	andi	r25, 0x01	; 1
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	49 2f       	mov	r20, r25
    2ab2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 59       	subi	r30, 0x9D	; 157
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	86 95       	lsr	r24
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	91 70       	andi	r25, 0x01	; 1
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	49 2f       	mov	r20, r25
    2aca:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ed 59       	subi	r30, 0x9D	; 157
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	86 95       	lsr	r24
    2ad8:	86 95       	lsr	r24
    2ada:	98 2f       	mov	r25, r24
    2adc:	91 70       	andi	r25, 0x01	; 1
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	62 e0       	ldi	r22, 0x02	; 2
    2ae2:	49 2f       	mov	r20, r25
    2ae4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 59       	subi	r30, 0x9D	; 157
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	86 95       	lsr	r24
    2af2:	86 95       	lsr	r24
    2af4:	86 95       	lsr	r24
    2af6:	98 2f       	mov	r25, r24
    2af8:	91 70       	andi	r25, 0x01	; 1
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	64 e0       	ldi	r22, 0x04	; 4
    2afe:	49 2f       	mov	r20, r25
    2b00:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a0 e8       	ldi	r26, 0x80	; 128
    2b0a:	bf e3       	ldi	r27, 0x3F	; 63
    2b0c:	89 8f       	std	Y+25, r24	; 0x19
    2b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b10:	ab 8f       	std	Y+27, r26	; 0x1b
    2b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	69 8d       	ldd	r22, Y+25	; 0x19
    2b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	55 e4       	ldi	r21, 0x45	; 69
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	8d 8b       	std	Y+21, r24	; 0x15
    2b2e:	9e 8b       	std	Y+22, r25	; 0x16
    2b30:	af 8b       	std	Y+23, r26	; 0x17
    2b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b34:	6d 89       	ldd	r22, Y+21	; 0x15
    2b36:	7e 89       	ldd	r23, Y+22	; 0x16
    2b38:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f e3       	ldi	r21, 0x3F	; 63
    2b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b48:	88 23       	and	r24, r24
    2b4a:	2c f4       	brge	.+10     	; 0x2b56 <LCD_SendCommand+0x728>
		__ticks = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	9c 8b       	std	Y+20, r25	; 0x14
    2b52:	8b 8b       	std	Y+19, r24	; 0x13
    2b54:	3f c0       	rjmp	.+126    	; 0x2bd4 <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	3f ef       	ldi	r19, 0xFF	; 255
    2b62:	4f e7       	ldi	r20, 0x7F	; 127
    2b64:	57 e4       	ldi	r21, 0x47	; 71
    2b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6a:	18 16       	cp	r1, r24
    2b6c:	4c f5       	brge	.+82     	; 0x2bc0 <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <LCD_SendCommand+0x788>
    2b98:	80 e9       	ldi	r24, 0x90	; 144
    2b9a:	91 e0       	ldi	r25, 0x01	; 1
    2b9c:	9a 8b       	std	Y+18, r25	; 0x12
    2b9e:	89 8b       	std	Y+17, r24	; 0x11
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_SendCommand+0x776>
    2ba8:	9a 8b       	std	Y+18, r25	; 0x12
    2baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bac:	8b 89       	ldd	r24, Y+19	; 0x13
    2bae:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	69 f7       	brne	.-38     	; 0x2b98 <LCD_SendCommand+0x76a>
    2bbe:	14 c0       	rjmp	.+40     	; 0x2be8 <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9c 8b       	std	Y+20, r25	; 0x14
    2bd2:	8b 8b       	std	Y+19, r24	; 0x13
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd8:	98 8b       	std	Y+16, r25	; 0x10
    2bda:	8f 87       	std	Y+15, r24	; 0x0f
    2bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bde:	98 89       	ldd	r25, Y+16	; 0x10
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_SendCommand+0x7b2>
    2be4:	98 8b       	std	Y+16, r25	; 0x10
    2be6:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e8       	ldi	r26, 0x80	; 128
    2bf8:	bf e3       	ldi	r27, 0x3F	; 63
    2bfa:	8b 87       	std	Y+11, r24	; 0x0b
    2bfc:	9c 87       	std	Y+12, r25	; 0x0c
    2bfe:	ad 87       	std	Y+13, r26	; 0x0d
    2c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4a e7       	ldi	r20, 0x7A	; 122
    2c10:	55 e4       	ldi	r21, 0x45	; 69
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	8f 83       	std	Y+7, r24	; 0x07
    2c1c:	98 87       	std	Y+8, r25	; 0x08
    2c1e:	a9 87       	std	Y+9, r26	; 0x09
    2c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e8       	ldi	r20, 0x80	; 128
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c36:	88 23       	and	r24, r24
    2c38:	2c f4       	brge	.+10     	; 0x2c44 <LCD_SendCommand+0x816>
		__ticks = 1;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
    2c42:	3f c0       	rjmp	.+126    	; 0x2cc2 <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	57 e4       	ldi	r21, 0x47	; 71
    2c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	4c f5       	brge	.+82     	; 0x2cae <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e2       	ldi	r20, 0x20	; 32
    2c6a:	51 e4       	ldi	r21, 0x41	; 65
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	0f c0       	rjmp	.+30     	; 0x2ca4 <LCD_SendCommand+0x876>
    2c86:	80 e9       	ldi	r24, 0x90	; 144
    2c88:	91 e0       	ldi	r25, 0x01	; 1
    2c8a:	9c 83       	std	Y+4, r25	; 0x04
    2c8c:	8b 83       	std	Y+3, r24	; 0x03
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LCD_SendCommand+0x864>
    2c96:	9c 83       	std	Y+4, r25	; 0x04
    2c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <LCD_SendCommand+0x858>
    2cac:	14 c0       	rjmp	.+40     	; 0x2cd6 <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb0:	78 85       	ldd	r23, Y+8	; 0x08
    2cb2:	89 85       	ldd	r24, Y+9	; 0x09
    2cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_SendCommand+0x8a0>
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    2cd6:	cc 59       	subi	r28, 0x9C	; 156
    2cd8:	df 4f       	sbci	r29, 0xFF	; 255
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	c4 56       	subi	r28, 0x64	; 100
    2cfc:	d0 40       	sbci	r29, 0x00	; 0
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	cd bf       	out	0x3d, r28	; 61
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ec 59       	subi	r30, 0x9C	; 156
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	63 e0       	ldi	r22, 0x03	; 3
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e1 5a       	subi	r30, 0xA1	; 161
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 e8       	ldi	r26, 0x80	; 128
    2d26:	bf e3       	ldi	r27, 0x3F	; 63
    2d28:	80 83       	st	Z, r24
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	a2 83       	std	Z+2, r26	; 0x02
    2d2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d30:	8e 01       	movw	r16, r28
    2d32:	05 5a       	subi	r16, 0xA5	; 165
    2d34:	1f 4f       	sbci	r17, 0xFF	; 255
    2d36:	fe 01       	movw	r30, r28
    2d38:	e1 5a       	subi	r30, 0xA1	; 161
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a e7       	ldi	r20, 0x7A	; 122
    2d4a:	55 e4       	ldi	r21, 0x45	; 69
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	f8 01       	movw	r30, r16
    2d56:	80 83       	st	Z, r24
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	a2 83       	std	Z+2, r26	; 0x02
    2d5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e5 5a       	subi	r30, 0xA5	; 165
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	82 81       	ldd	r24, Z+2	; 0x02
    2d6a:	93 81       	ldd	r25, Z+3	; 0x03
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e8       	ldi	r20, 0x80	; 128
    2d72:	5f e3       	ldi	r21, 0x3F	; 63
    2d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d78:	88 23       	and	r24, r24
    2d7a:	44 f4       	brge	.+16     	; 0x2d8c <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e7 5a       	subi	r30, 0xA7	; 167
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	64 c0       	rjmp	.+200    	; 0x2e54 <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e5 5a       	subi	r30, 0xA5	; 165
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	3f ef       	ldi	r19, 0xFF	; 255
    2d9e:	4f e7       	ldi	r20, 0x7F	; 127
    2da0:	57 e4       	ldi	r21, 0x47	; 71
    2da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	0c f0       	brlt	.+2      	; 0x2dac <LCD_DisplayCharacter+0xbe>
    2daa:	43 c0       	rjmp	.+134    	; 0x2e32 <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dac:	fe 01       	movw	r30, r28
    2dae:	e1 5a       	subi	r30, 0xA1	; 161
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	8e 01       	movw	r16, r28
    2dcc:	07 5a       	subi	r16, 0xA7	; 167
    2dce:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	f8 01       	movw	r30, r16
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	80 83       	st	Z, r24
    2de2:	1f c0       	rjmp	.+62     	; 0x2e22 <LCD_DisplayCharacter+0x134>
    2de4:	fe 01       	movw	r30, r28
    2de6:	e9 5a       	subi	r30, 0xA9	; 169
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 e9       	ldi	r24, 0x90	; 144
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
    2df2:	fe 01       	movw	r30, r28
    2df4:	e9 5a       	subi	r30, 0xA9	; 169
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <LCD_DisplayCharacter+0x10e>
    2e00:	fe 01       	movw	r30, r28
    2e02:	e9 5a       	subi	r30, 0xA9	; 169
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	de 01       	movw	r26, r28
    2e0c:	a7 5a       	subi	r26, 0xA7	; 167
    2e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e10:	fe 01       	movw	r30, r28
    2e12:	e7 5a       	subi	r30, 0xA7	; 167
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	11 96       	adiw	r26, 0x01	; 1
    2e1e:	9c 93       	st	X, r25
    2e20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e22:	fe 01       	movw	r30, r28
    2e24:	e7 5a       	subi	r30, 0xA7	; 167
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	d1 f6       	brne	.-76     	; 0x2de4 <LCD_DisplayCharacter+0xf6>
    2e30:	27 c0       	rjmp	.+78     	; 0x2e80 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	8e 01       	movw	r16, r28
    2e34:	07 5a       	subi	r16, 0xA7	; 167
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 5a       	subi	r30, 0xA5	; 165
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	f8 01       	movw	r30, r16
    2e50:	91 83       	std	Z+1, r25	; 0x01
    2e52:	80 83       	st	Z, r24
    2e54:	de 01       	movw	r26, r28
    2e56:	ab 5a       	subi	r26, 0xAB	; 171
    2e58:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e7 5a       	subi	r30, 0xA7	; 167
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	8d 93       	st	X+, r24
    2e66:	9c 93       	st	X, r25
    2e68:	fe 01       	movw	r30, r28
    2e6a:	eb 5a       	subi	r30, 0xAB	; 171
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <LCD_DisplayCharacter+0x184>
    2e76:	fe 01       	movw	r30, r28
    2e78:	eb 5a       	subi	r30, 0xAB	; 171
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	62 e0       	ldi	r22, 0x02	; 2
    2e84:	41 e0       	ldi	r20, 0x01	; 1
    2e86:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ef 5a       	subi	r30, 0xAF	; 175
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e8       	ldi	r26, 0x80	; 128
    2e96:	bf e3       	ldi	r27, 0x3F	; 63
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	8e 01       	movw	r16, r28
    2ea2:	03 5b       	subi	r16, 0xB3	; 179
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 5a       	subi	r30, 0xAF	; 175
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a e7       	ldi	r20, 0x7A	; 122
    2eba:	55 e4       	ldi	r21, 0x45	; 69
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	80 83       	st	Z, r24
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	a2 83       	std	Z+2, r26	; 0x02
    2ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e3 5b       	subi	r30, 0xB3	; 179
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e8       	ldi	r20, 0x80	; 128
    2ee2:	5f e3       	ldi	r21, 0x3F	; 63
    2ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee8:	88 23       	and	r24, r24
    2eea:	44 f4       	brge	.+16     	; 0x2efc <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    2eec:	fe 01       	movw	r30, r28
    2eee:	e5 5b       	subi	r30, 0xB5	; 181
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	64 c0       	rjmp	.+200    	; 0x2fc4 <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    2efc:	fe 01       	movw	r30, r28
    2efe:	e3 5b       	subi	r30, 0xB3	; 179
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	3f ef       	ldi	r19, 0xFF	; 255
    2f0e:	4f e7       	ldi	r20, 0x7F	; 127
    2f10:	57 e4       	ldi	r21, 0x47	; 71
    2f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f16:	18 16       	cp	r1, r24
    2f18:	0c f0       	brlt	.+2      	; 0x2f1c <LCD_DisplayCharacter+0x22e>
    2f1a:	43 c0       	rjmp	.+134    	; 0x2fa2 <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ef 5a       	subi	r30, 0xAF	; 175
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	05 5b       	subi	r16, 0xB5	; 181
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	1f c0       	rjmp	.+62     	; 0x2f92 <LCD_DisplayCharacter+0x2a4>
    2f54:	fe 01       	movw	r30, r28
    2f56:	e7 5b       	subi	r30, 0xB7	; 183
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 e9       	ldi	r24, 0x90	; 144
    2f5c:	91 e0       	ldi	r25, 0x01	; 1
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	fe 01       	movw	r30, r28
    2f64:	e7 5b       	subi	r30, 0xB7	; 183
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <LCD_DisplayCharacter+0x27e>
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5b       	subi	r30, 0xB7	; 183
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	de 01       	movw	r26, r28
    2f7c:	a5 5b       	subi	r26, 0xB5	; 181
    2f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f80:	fe 01       	movw	r30, r28
    2f82:	e5 5b       	subi	r30, 0xB5	; 181
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	11 96       	adiw	r26, 0x01	; 1
    2f8e:	9c 93       	st	X, r25
    2f90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f92:	fe 01       	movw	r30, r28
    2f94:	e5 5b       	subi	r30, 0xB5	; 181
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	d1 f6       	brne	.-76     	; 0x2f54 <LCD_DisplayCharacter+0x266>
    2fa0:	27 c0       	rjmp	.+78     	; 0x2ff0 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	05 5b       	subi	r16, 0xB5	; 181
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e3 5b       	subi	r30, 0xB3	; 179
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
    2fc4:	de 01       	movw	r26, r28
    2fc6:	a9 5b       	subi	r26, 0xB9	; 185
    2fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e5 5b       	subi	r30, 0xB5	; 181
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	8d 93       	st	X+, r24
    2fd6:	9c 93       	st	X, r25
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e9 5b       	subi	r30, 0xB9	; 185
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <LCD_DisplayCharacter+0x2f4>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e9 5b       	subi	r30, 0xB9	; 185
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    2ff0:	de 01       	movw	r26, r28
    2ff2:	ad 59       	subi	r26, 0x9D	; 157
    2ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ec 59       	subi	r30, 0x9C	; 156
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	82 95       	swap	r24
    3000:	8f 70       	andi	r24, 0x0F	; 15
    3002:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3004:	fe 01       	movw	r30, r28
    3006:	ed 59       	subi	r30, 0x9D	; 157
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	98 2f       	mov	r25, r24
    300e:	91 70       	andi	r25, 0x01	; 1
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	49 2f       	mov	r20, r25
    3016:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    301a:	fe 01       	movw	r30, r28
    301c:	ed 59       	subi	r30, 0x9D	; 157
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	86 95       	lsr	r24
    3024:	98 2f       	mov	r25, r24
    3026:	91 70       	andi	r25, 0x01	; 1
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	61 e0       	ldi	r22, 0x01	; 1
    302c:	49 2f       	mov	r20, r25
    302e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3032:	fe 01       	movw	r30, r28
    3034:	ed 59       	subi	r30, 0x9D	; 157
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	86 95       	lsr	r24
    303c:	86 95       	lsr	r24
    303e:	98 2f       	mov	r25, r24
    3040:	91 70       	andi	r25, 0x01	; 1
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	62 e0       	ldi	r22, 0x02	; 2
    3046:	49 2f       	mov	r20, r25
    3048:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    304c:	fe 01       	movw	r30, r28
    304e:	ed 59       	subi	r30, 0x9D	; 157
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	80 81       	ld	r24, Z
    3054:	86 95       	lsr	r24
    3056:	86 95       	lsr	r24
    3058:	86 95       	lsr	r24
    305a:	98 2f       	mov	r25, r24
    305c:	91 70       	andi	r25, 0x01	; 1
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	64 e0       	ldi	r22, 0x04	; 4
    3062:	49 2f       	mov	r20, r25
    3064:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    3068:	fe 01       	movw	r30, r28
    306a:	ed 5b       	subi	r30, 0xBD	; 189
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	a0 e8       	ldi	r26, 0x80	; 128
    3074:	bf e3       	ldi	r27, 0x3F	; 63
    3076:	80 83       	st	Z, r24
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	a2 83       	std	Z+2, r26	; 0x02
    307c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307e:	8e 01       	movw	r16, r28
    3080:	01 5c       	subi	r16, 0xC1	; 193
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	fe 01       	movw	r30, r28
    3086:	ed 5b       	subi	r30, 0xBD	; 189
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	4a e7       	ldi	r20, 0x7A	; 122
    3098:	55 e4       	ldi	r21, 0x45	; 69
    309a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	f8 01       	movw	r30, r16
    30a4:	80 83       	st	Z, r24
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	a2 83       	std	Z+2, r26	; 0x02
    30aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30ac:	fe 01       	movw	r30, r28
    30ae:	ff 96       	adiw	r30, 0x3f	; 63
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9e af       	std	Y+62, r25	; 0x3e
    30ce:	8d af       	std	Y+61, r24	; 0x3d
    30d0:	46 c0       	rjmp	.+140    	; 0x315e <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    30d2:	fe 01       	movw	r30, r28
    30d4:	ff 96       	adiw	r30, 0x3f	; 63
    30d6:	60 81       	ld	r22, Z
    30d8:	71 81       	ldd	r23, Z+1	; 0x01
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	93 81       	ldd	r25, Z+3	; 0x03
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	64 f5       	brge	.+88     	; 0x3146 <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	fe 01       	movw	r30, r28
    30f0:	ed 5b       	subi	r30, 0xBD	; 189
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e2       	ldi	r20, 0x20	; 32
    3102:	51 e4       	ldi	r21, 0x41	; 65
    3104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9e af       	std	Y+62, r25	; 0x3e
    311a:	8d af       	std	Y+61, r24	; 0x3d
    311c:	0f c0       	rjmp	.+30     	; 0x313c <LCD_DisplayCharacter+0x44e>
    311e:	80 e9       	ldi	r24, 0x90	; 144
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	9c af       	std	Y+60, r25	; 0x3c
    3124:	8b af       	std	Y+59, r24	; 0x3b
    3126:	8b ad       	ldd	r24, Y+59	; 0x3b
    3128:	9c ad       	ldd	r25, Y+60	; 0x3c
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <LCD_DisplayCharacter+0x43c>
    312e:	9c af       	std	Y+60, r25	; 0x3c
    3130:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3132:	8d ad       	ldd	r24, Y+61	; 0x3d
    3134:	9e ad       	ldd	r25, Y+62	; 0x3e
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	9e af       	std	Y+62, r25	; 0x3e
    313a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313c:	8d ad       	ldd	r24, Y+61	; 0x3d
    313e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	69 f7       	brne	.-38     	; 0x311e <LCD_DisplayCharacter+0x430>
    3144:	16 c0       	rjmp	.+44     	; 0x3172 <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3146:	fe 01       	movw	r30, r28
    3148:	ff 96       	adiw	r30, 0x3f	; 63
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9e af       	std	Y+62, r25	; 0x3e
    315c:	8d af       	std	Y+61, r24	; 0x3d
    315e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3160:	9e ad       	ldd	r25, Y+62	; 0x3e
    3162:	9a af       	std	Y+58, r25	; 0x3a
    3164:	89 af       	std	Y+57, r24	; 0x39
    3166:	89 ad       	ldd	r24, Y+57	; 0x39
    3168:	9a ad       	ldd	r25, Y+58	; 0x3a
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <LCD_DisplayCharacter+0x47c>
    316e:	9a af       	std	Y+58, r25	; 0x3a
    3170:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	62 e0       	ldi	r22, 0x02	; 2
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	a0 e8       	ldi	r26, 0x80	; 128
    3182:	bf e3       	ldi	r27, 0x3F	; 63
    3184:	8d ab       	std	Y+53, r24	; 0x35
    3186:	9e ab       	std	Y+54, r25	; 0x36
    3188:	af ab       	std	Y+55, r26	; 0x37
    318a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318c:	6d a9       	ldd	r22, Y+53	; 0x35
    318e:	7e a9       	ldd	r23, Y+54	; 0x36
    3190:	8f a9       	ldd	r24, Y+55	; 0x37
    3192:	98 ad       	ldd	r25, Y+56	; 0x38
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a e7       	ldi	r20, 0x7A	; 122
    319a:	55 e4       	ldi	r21, 0x45	; 69
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	89 ab       	std	Y+49, r24	; 0x31
    31a6:	9a ab       	std	Y+50, r25	; 0x32
    31a8:	ab ab       	std	Y+51, r26	; 0x33
    31aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31ac:	69 a9       	ldd	r22, Y+49	; 0x31
    31ae:	7a a9       	ldd	r23, Y+50	; 0x32
    31b0:	8b a9       	ldd	r24, Y+51	; 0x33
    31b2:	9c a9       	ldd	r25, Y+52	; 0x34
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	2c f4       	brge	.+10     	; 0x31ce <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	98 ab       	std	Y+48, r25	; 0x30
    31ca:	8f a7       	std	Y+47, r24	; 0x2f
    31cc:	3f c0       	rjmp	.+126    	; 0x324c <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    31ce:	69 a9       	ldd	r22, Y+49	; 0x31
    31d0:	7a a9       	ldd	r23, Y+50	; 0x32
    31d2:	8b a9       	ldd	r24, Y+51	; 0x33
    31d4:	9c a9       	ldd	r25, Y+52	; 0x34
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	4c f5       	brge	.+82     	; 0x3238 <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	6d a9       	ldd	r22, Y+53	; 0x35
    31e8:	7e a9       	ldd	r23, Y+54	; 0x36
    31ea:	8f a9       	ldd	r24, Y+55	; 0x37
    31ec:	98 ad       	ldd	r25, Y+56	; 0x38
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	98 ab       	std	Y+48, r25	; 0x30
    320c:	8f a7       	std	Y+47, r24	; 0x2f
    320e:	0f c0       	rjmp	.+30     	; 0x322e <LCD_DisplayCharacter+0x540>
    3210:	80 e9       	ldi	r24, 0x90	; 144
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	9e a7       	std	Y+46, r25	; 0x2e
    3216:	8d a7       	std	Y+45, r24	; 0x2d
    3218:	8d a5       	ldd	r24, Y+45	; 0x2d
    321a:	9e a5       	ldd	r25, Y+46	; 0x2e
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <LCD_DisplayCharacter+0x52e>
    3220:	9e a7       	std	Y+46, r25	; 0x2e
    3222:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	8f a5       	ldd	r24, Y+47	; 0x2f
    3226:	98 a9       	ldd	r25, Y+48	; 0x30
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	98 ab       	std	Y+48, r25	; 0x30
    322c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3230:	98 a9       	ldd	r25, Y+48	; 0x30
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f7       	brne	.-38     	; 0x3210 <LCD_DisplayCharacter+0x522>
    3236:	14 c0       	rjmp	.+40     	; 0x3260 <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	69 a9       	ldd	r22, Y+49	; 0x31
    323a:	7a a9       	ldd	r23, Y+50	; 0x32
    323c:	8b a9       	ldd	r24, Y+51	; 0x33
    323e:	9c a9       	ldd	r25, Y+52	; 0x34
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	98 ab       	std	Y+48, r25	; 0x30
    324a:	8f a7       	std	Y+47, r24	; 0x2f
    324c:	8f a5       	ldd	r24, Y+47	; 0x2f
    324e:	98 a9       	ldd	r25, Y+48	; 0x30
    3250:	9c a7       	std	Y+44, r25	; 0x2c
    3252:	8b a7       	std	Y+43, r24	; 0x2b
    3254:	8b a5       	ldd	r24, Y+43	; 0x2b
    3256:	9c a5       	ldd	r25, Y+44	; 0x2c
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <LCD_DisplayCharacter+0x56a>
    325c:	9c a7       	std	Y+44, r25	; 0x2c
    325e:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	62 e0       	ldi	r22, 0x02	; 2
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	a0 e8       	ldi	r26, 0x80	; 128
    3270:	bf e3       	ldi	r27, 0x3F	; 63
    3272:	8f a3       	std	Y+39, r24	; 0x27
    3274:	98 a7       	std	Y+40, r25	; 0x28
    3276:	a9 a7       	std	Y+41, r26	; 0x29
    3278:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	6f a1       	ldd	r22, Y+39	; 0x27
    327c:	78 a5       	ldd	r23, Y+40	; 0x28
    327e:	89 a5       	ldd	r24, Y+41	; 0x29
    3280:	9a a5       	ldd	r25, Y+42	; 0x2a
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a e7       	ldi	r20, 0x7A	; 122
    3288:	55 e4       	ldi	r21, 0x45	; 69
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	8b a3       	std	Y+35, r24	; 0x23
    3294:	9c a3       	std	Y+36, r25	; 0x24
    3296:	ad a3       	std	Y+37, r26	; 0x25
    3298:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    329a:	6b a1       	ldd	r22, Y+35	; 0x23
    329c:	7c a1       	ldd	r23, Y+36	; 0x24
    329e:	8d a1       	ldd	r24, Y+37	; 0x25
    32a0:	9e a1       	ldd	r25, Y+38	; 0x26
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e8       	ldi	r20, 0x80	; 128
    32a8:	5f e3       	ldi	r21, 0x3F	; 63
    32aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9a a3       	std	Y+34, r25	; 0x22
    32b8:	89 a3       	std	Y+33, r24	; 0x21
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    32bc:	6b a1       	ldd	r22, Y+35	; 0x23
    32be:	7c a1       	ldd	r23, Y+36	; 0x24
    32c0:	8d a1       	ldd	r24, Y+37	; 0x25
    32c2:	9e a1       	ldd	r25, Y+38	; 0x26
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	3f ef       	ldi	r19, 0xFF	; 255
    32c8:	4f e7       	ldi	r20, 0x7F	; 127
    32ca:	57 e4       	ldi	r21, 0x47	; 71
    32cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	6f a1       	ldd	r22, Y+39	; 0x27
    32d6:	78 a5       	ldd	r23, Y+40	; 0x28
    32d8:	89 a5       	ldd	r24, Y+41	; 0x29
    32da:	9a a5       	ldd	r25, Y+42	; 0x2a
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9a a3       	std	Y+34, r25	; 0x22
    32fa:	89 a3       	std	Y+33, r24	; 0x21
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <LCD_DisplayCharacter+0x62e>
    32fe:	80 e9       	ldi	r24, 0x90	; 144
    3300:	91 e0       	ldi	r25, 0x01	; 1
    3302:	98 a3       	std	Y+32, r25	; 0x20
    3304:	8f 8f       	std	Y+31, r24	; 0x1f
    3306:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3308:	98 a1       	ldd	r25, Y+32	; 0x20
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <LCD_DisplayCharacter+0x61c>
    330e:	98 a3       	std	Y+32, r25	; 0x20
    3310:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	89 a1       	ldd	r24, Y+33	; 0x21
    3314:	9a a1       	ldd	r25, Y+34	; 0x22
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9a a3       	std	Y+34, r25	; 0x22
    331a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	89 a1       	ldd	r24, Y+33	; 0x21
    331e:	9a a1       	ldd	r25, Y+34	; 0x22
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	69 f7       	brne	.-38     	; 0x32fe <LCD_DisplayCharacter+0x610>
    3324:	14 c0       	rjmp	.+40     	; 0x334e <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	6b a1       	ldd	r22, Y+35	; 0x23
    3328:	7c a1       	ldd	r23, Y+36	; 0x24
    332a:	8d a1       	ldd	r24, Y+37	; 0x25
    332c:	9e a1       	ldd	r25, Y+38	; 0x26
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9a a3       	std	Y+34, r25	; 0x22
    3338:	89 a3       	std	Y+33, r24	; 0x21
    333a:	89 a1       	ldd	r24, Y+33	; 0x21
    333c:	9a a1       	ldd	r25, Y+34	; 0x22
    333e:	9e 8f       	std	Y+30, r25	; 0x1e
    3340:	8d 8f       	std	Y+29, r24	; 0x1d
    3342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3344:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <LCD_DisplayCharacter+0x658>
    334a:	9e 8f       	std	Y+30, r25	; 0x1e
    334c:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    334e:	de 01       	movw	r26, r28
    3350:	ad 59       	subi	r26, 0x9D	; 157
    3352:	bf 4f       	sbci	r27, 0xFF	; 255
    3354:	fe 01       	movw	r30, r28
    3356:	ec 59       	subi	r30, 0x9C	; 156
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	8f 70       	andi	r24, 0x0F	; 15
    335e:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3360:	fe 01       	movw	r30, r28
    3362:	ed 59       	subi	r30, 0x9D	; 157
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	98 2f       	mov	r25, r24
    336a:	91 70       	andi	r25, 0x01	; 1
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	49 2f       	mov	r20, r25
    3372:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    3376:	fe 01       	movw	r30, r28
    3378:	ed 59       	subi	r30, 0x9D	; 157
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	80 81       	ld	r24, Z
    337e:	86 95       	lsr	r24
    3380:	98 2f       	mov	r25, r24
    3382:	91 70       	andi	r25, 0x01	; 1
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	61 e0       	ldi	r22, 0x01	; 1
    3388:	49 2f       	mov	r20, r25
    338a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    338e:	fe 01       	movw	r30, r28
    3390:	ed 59       	subi	r30, 0x9D	; 157
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	80 81       	ld	r24, Z
    3396:	86 95       	lsr	r24
    3398:	86 95       	lsr	r24
    339a:	98 2f       	mov	r25, r24
    339c:	91 70       	andi	r25, 0x01	; 1
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	62 e0       	ldi	r22, 0x02	; 2
    33a2:	49 2f       	mov	r20, r25
    33a4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    33a8:	fe 01       	movw	r30, r28
    33aa:	ed 59       	subi	r30, 0x9D	; 157
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	80 81       	ld	r24, Z
    33b0:	86 95       	lsr	r24
    33b2:	86 95       	lsr	r24
    33b4:	86 95       	lsr	r24
    33b6:	98 2f       	mov	r25, r24
    33b8:	91 70       	andi	r25, 0x01	; 1
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	64 e0       	ldi	r22, 0x04	; 4
    33be:	49 2f       	mov	r20, r25
    33c0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a0 e8       	ldi	r26, 0x80	; 128
    33ca:	bf e3       	ldi	r27, 0x3F	; 63
    33cc:	89 8f       	std	Y+25, r24	; 0x19
    33ce:	9a 8f       	std	Y+26, r25	; 0x1a
    33d0:	ab 8f       	std	Y+27, r26	; 0x1b
    33d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	69 8d       	ldd	r22, Y+25	; 0x19
    33d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a e7       	ldi	r20, 0x7A	; 122
    33e2:	55 e4       	ldi	r21, 0x45	; 69
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8d 8b       	std	Y+21, r24	; 0x15
    33ee:	9e 8b       	std	Y+22, r25	; 0x16
    33f0:	af 8b       	std	Y+23, r26	; 0x17
    33f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f4:	6d 89       	ldd	r22, Y+21	; 0x15
    33f6:	7e 89       	ldd	r23, Y+22	; 0x16
    33f8:	8f 89       	ldd	r24, Y+23	; 0x17
    33fa:	98 8d       	ldd	r25, Y+24	; 0x18
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9c 8b       	std	Y+20, r25	; 0x14
    3412:	8b 8b       	std	Y+19, r24	; 0x13
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    3416:	6d 89       	ldd	r22, Y+21	; 0x15
    3418:	7e 89       	ldd	r23, Y+22	; 0x16
    341a:	8f 89       	ldd	r24, Y+23	; 0x17
    341c:	98 8d       	ldd	r25, Y+24	; 0x18
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	69 8d       	ldd	r22, Y+25	; 0x19
    3430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <LCD_DisplayCharacter+0x788>
    3458:	80 e9       	ldi	r24, 0x90	; 144
    345a:	91 e0       	ldi	r25, 0x01	; 1
    345c:	9a 8b       	std	Y+18, r25	; 0x12
    345e:	89 8b       	std	Y+17, r24	; 0x11
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	9a 89       	ldd	r25, Y+18	; 0x12
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCD_DisplayCharacter+0x776>
    3468:	9a 8b       	std	Y+18, r25	; 0x12
    346a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8b 89       	ldd	r24, Y+19	; 0x13
    346e:	9c 89       	ldd	r25, Y+20	; 0x14
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9c 8b       	std	Y+20, r25	; 0x14
    3474:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <LCD_DisplayCharacter+0x76a>
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	6d 89       	ldd	r22, Y+21	; 0x15
    3482:	7e 89       	ldd	r23, Y+22	; 0x16
    3484:	8f 89       	ldd	r24, Y+23	; 0x17
    3486:	98 8d       	ldd	r25, Y+24	; 0x18
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9c 8b       	std	Y+20, r25	; 0x14
    3492:	8b 8b       	std	Y+19, r24	; 0x13
    3494:	8b 89       	ldd	r24, Y+19	; 0x13
    3496:	9c 89       	ldd	r25, Y+20	; 0x14
    3498:	98 8b       	std	Y+16, r25	; 0x10
    349a:	8f 87       	std	Y+15, r24	; 0x0f
    349c:	8f 85       	ldd	r24, Y+15	; 0x0f
    349e:	98 89       	ldd	r25, Y+16	; 0x10
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_DisplayCharacter+0x7b2>
    34a4:	98 8b       	std	Y+16, r25	; 0x10
    34a6:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	62 e0       	ldi	r22, 0x02	; 2
    34ac:	40 e0       	ldi	r20, 0x00	; 0
    34ae:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	a0 e8       	ldi	r26, 0x80	; 128
    34b8:	bf e3       	ldi	r27, 0x3F	; 63
    34ba:	8b 87       	std	Y+11, r24	; 0x0b
    34bc:	9c 87       	std	Y+12, r25	; 0x0c
    34be:	ad 87       	std	Y+13, r26	; 0x0d
    34c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	4a e7       	ldi	r20, 0x7A	; 122
    34d0:	55 e4       	ldi	r21, 0x45	; 69
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	98 87       	std	Y+8, r25	; 0x08
    34de:	a9 87       	std	Y+9, r26	; 0x09
    34e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	2c f4       	brge	.+10     	; 0x3504 <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	3f c0       	rjmp	.+126    	; 0x3582 <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    3504:	6f 81       	ldd	r22, Y+7	; 0x07
    3506:	78 85       	ldd	r23, Y+8	; 0x08
    3508:	89 85       	ldd	r24, Y+9	; 0x09
    350a:	9a 85       	ldd	r25, Y+10	; 0x0a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	3f ef       	ldi	r19, 0xFF	; 255
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	57 e4       	ldi	r21, 0x47	; 71
    3514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	4c f5       	brge	.+82     	; 0x356e <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351c:	6b 85       	ldd	r22, Y+11	; 0x0b
    351e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3520:	8d 85       	ldd	r24, Y+13	; 0x0d
    3522:	9e 85       	ldd	r25, Y+14	; 0x0e
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	bc 01       	movw	r22, r24
    3536:	cd 01       	movw	r24, r26
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	0f c0       	rjmp	.+30     	; 0x3564 <LCD_DisplayCharacter+0x876>
    3546:	80 e9       	ldi	r24, 0x90	; 144
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	9c 81       	ldd	r25, Y+4	; 0x04
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <LCD_DisplayCharacter+0x864>
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	69 f7       	brne	.-38     	; 0x3546 <LCD_DisplayCharacter+0x858>
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	f1 f7       	brne	.-4      	; 0x358e <LCD_DisplayCharacter+0x8a0>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    3596:	80 91 81 02 	lds	r24, 0x0281
    359a:	8f 5f       	subi	r24, 0xFF	; 255
    359c:	80 93 81 02 	sts	0x0281, r24
    if(col_global == MAX_NUM_COL_LCD)
    35a0:	80 91 81 02 	lds	r24, 0x0281
    35a4:	84 31       	cpi	r24, 0x14	; 20
    35a6:	69 f4       	brne	.+26     	; 0x35c2 <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    35a8:	80 91 80 02 	lds	r24, 0x0280
    35ac:	8f 5f       	subi	r24, 0xFF	; 255
    35ae:	80 93 80 02 	sts	0x0280, r24
        col_global = 0 ;
    35b2:	10 92 81 02 	sts	0x0281, r1
        if(row_global == MAX_NUM_COL_LCD)
    35b6:	80 91 80 02 	lds	r24, 0x0280
    35ba:	84 31       	cpi	r24, 0x14	; 20
    35bc:	11 f4       	brne	.+4      	; 0x35c2 <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    35be:	10 92 80 02 	sts	0x0280, r1
    }
}
    35c2:	cc 59       	subi	r28, 0x9C	; 156
    35c4:	df 4f       	sbci	r29, 0xFF	; 255
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	cd bf       	out	0x3d, r28	; 61
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	1f 91       	pop	r17
    35d6:	0f 91       	pop	r16
    35d8:	08 95       	ret

000035da <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <LCD_DisplayString+0x6>
    35e0:	0f 92       	push	r0
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	9b 83       	std	Y+3, r25	; 0x03
    35e8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    35ea:	19 82       	std	Y+1, r1	; 0x01
    35ec:	0e c0       	rjmp	.+28     	; 0x360a <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	9b 81       	ldd	r25, Y+3	; 0x03
    35f8:	fc 01       	movw	r30, r24
    35fa:	e2 0f       	add	r30, r18
    35fc:	f3 1f       	adc	r31, r19
    35fe:	80 81       	ld	r24, Z
    3600:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
        it++;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	fc 01       	movw	r30, r24
    3616:	e2 0f       	add	r30, r18
    3618:	f3 1f       	adc	r31, r19
    361a:	80 81       	ld	r24, Z
    361c:	88 23       	and	r24, r24
    361e:	39 f7       	brne	.-50     	; 0x35ee <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	00 d0       	rcall	.+0      	; 0x3632 <LCD_MoveCursor+0x6>
    3632:	00 d0       	rcall	.+0      	; 0x3634 <LCD_MoveCursor+0x8>
    3634:	0f 92       	push	r0
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	8a 83       	std	Y+2, r24	; 0x02
    363c:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	3d 83       	std	Y+5, r19	; 0x05
    3646:	2c 83       	std	Y+4, r18	; 0x04
    3648:	8c 81       	ldd	r24, Y+4	; 0x04
    364a:	9d 81       	ldd	r25, Y+5	; 0x05
    364c:	81 30       	cpi	r24, 0x01	; 1
    364e:	91 05       	cpc	r25, r1
    3650:	e9 f0       	breq	.+58     	; 0x368c <LCD_MoveCursor+0x60>
    3652:	2c 81       	ldd	r18, Y+4	; 0x04
    3654:	3d 81       	ldd	r19, Y+5	; 0x05
    3656:	22 30       	cpi	r18, 0x02	; 2
    3658:	31 05       	cpc	r19, r1
    365a:	2c f4       	brge	.+10     	; 0x3666 <LCD_MoveCursor+0x3a>
    365c:	8c 81       	ldd	r24, Y+4	; 0x04
    365e:	9d 81       	ldd	r25, Y+5	; 0x05
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	61 f0       	breq	.+24     	; 0x367c <LCD_MoveCursor+0x50>
    3664:	30 c0       	rjmp	.+96     	; 0x36c6 <LCD_MoveCursor+0x9a>
    3666:	2c 81       	ldd	r18, Y+4	; 0x04
    3668:	3d 81       	ldd	r19, Y+5	; 0x05
    366a:	22 30       	cpi	r18, 0x02	; 2
    366c:	31 05       	cpc	r19, r1
    366e:	c1 f0       	breq	.+48     	; 0x36a0 <LCD_MoveCursor+0x74>
    3670:	8c 81       	ldd	r24, Y+4	; 0x04
    3672:	9d 81       	ldd	r25, Y+5	; 0x05
    3674:	83 30       	cpi	r24, 0x03	; 3
    3676:	91 05       	cpc	r25, r1
    3678:	e9 f0       	breq	.+58     	; 0x36b4 <LCD_MoveCursor+0x88>
    367a:	25 c0       	rjmp	.+74     	; 0x36c6 <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    367c:	8b 81       	ldd	r24, Y+3	; 0x03
    367e:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	80 93 81 02 	sts	0x0281, r24
            row_global = 0 ;
    3686:	10 92 80 02 	sts	0x0280, r1
    368a:	1d c0       	rjmp	.+58     	; 0x36c6 <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	80 5c       	subi	r24, 0xC0	; 192
    3690:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	80 93 81 02 	sts	0x0281, r24
            row_global = 1 ;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	80 93 80 02 	sts	0x0280, r24
    369e:	13 c0       	rjmp	.+38     	; 0x36c6 <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    36a0:	8b 81       	ldd	r24, Y+3	; 0x03
    36a2:	8c 5e       	subi	r24, 0xEC	; 236
    36a4:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	80 93 81 02 	sts	0x0281, r24
                row_global = 2 ;
    36ac:	82 e0       	ldi	r24, 0x02	; 2
    36ae:	80 93 80 02 	sts	0x0280, r24
    36b2:	09 c0       	rjmp	.+18     	; 0x36c6 <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	8c 5a       	subi	r24, 0xAC	; 172
    36b8:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    36ba:	8b 81       	ldd	r24, Y+3	; 0x03
    36bc:	80 93 81 02 	sts	0x0281, r24
                row_global = 3 ;
    36c0:	83 e0       	ldi	r24, 0x03	; 3
    36c2:	80 93 80 02 	sts	0x0280, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	80 68       	ori	r24, 0x80	; 128
    36ca:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
}
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <LCD_DisplayStringRowCol+0x6>
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <LCD_DisplayStringRowCol+0x8>
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	9a 83       	std	Y+2, r25	; 0x02
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	6b 83       	std	Y+3, r22	; 0x03
    36f0:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	6c 81       	ldd	r22, Y+4	; 0x04
    36f6:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
}
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    3718:	10 92 81 02 	sts	0x0281, r1
    371c:	10 92 80 02 	sts	0x0280, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
}
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    3734:	80 91 81 02 	lds	r24, 0x0281
    3738:	83 31       	cpi	r24, 0x13	; 19
    373a:	89 f4       	brne	.+34     	; 0x375e <LCD_MoveCursorRight+0x32>
    373c:	80 91 80 02 	lds	r24, 0x0280
    3740:	88 23       	and	r24, r24
    3742:	69 f4       	brne	.+26     	; 0x375e <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    3744:	10 92 81 02 	sts	0x0281, r1
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	80 93 80 02 	sts	0x0280, r24
        LCD_MoveCursor(row_global,col_global);
    374e:	80 91 80 02 	lds	r24, 0x0280
    3752:	90 91 81 02 	lds	r25, 0x0281
    3756:	69 2f       	mov	r22, r25
    3758:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    375c:	46 c0       	rjmp	.+140    	; 0x37ea <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    375e:	80 91 81 02 	lds	r24, 0x0281
    3762:	83 31       	cpi	r24, 0x13	; 19
    3764:	89 f4       	brne	.+34     	; 0x3788 <LCD_MoveCursorRight+0x5c>
    3766:	80 91 80 02 	lds	r24, 0x0280
    376a:	81 30       	cpi	r24, 0x01	; 1
    376c:	69 f4       	brne	.+26     	; 0x3788 <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    376e:	10 92 81 02 	sts	0x0281, r1
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	80 93 80 02 	sts	0x0280, r24
        LCD_MoveCursor(row_global,col_global);
    3778:	80 91 80 02 	lds	r24, 0x0280
    377c:	90 91 81 02 	lds	r25, 0x0281
    3780:	69 2f       	mov	r22, r25
    3782:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    3786:	31 c0       	rjmp	.+98     	; 0x37ea <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    3788:	80 91 81 02 	lds	r24, 0x0281
    378c:	83 31       	cpi	r24, 0x13	; 19
    378e:	89 f4       	brne	.+34     	; 0x37b2 <LCD_MoveCursorRight+0x86>
    3790:	80 91 80 02 	lds	r24, 0x0280
    3794:	82 30       	cpi	r24, 0x02	; 2
    3796:	69 f4       	brne	.+26     	; 0x37b2 <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    3798:	10 92 81 02 	sts	0x0281, r1
    379c:	83 e0       	ldi	r24, 0x03	; 3
    379e:	80 93 80 02 	sts	0x0280, r24
        LCD_MoveCursor(row_global,col_global);
    37a2:	80 91 80 02 	lds	r24, 0x0280
    37a6:	90 91 81 02 	lds	r25, 0x0281
    37aa:	69 2f       	mov	r22, r25
    37ac:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    37b0:	1c c0       	rjmp	.+56     	; 0x37ea <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    37b2:	80 91 81 02 	lds	r24, 0x0281
    37b6:	83 31       	cpi	r24, 0x13	; 19
    37b8:	81 f4       	brne	.+32     	; 0x37da <LCD_MoveCursorRight+0xae>
    37ba:	80 91 80 02 	lds	r24, 0x0280
    37be:	83 30       	cpi	r24, 0x03	; 3
    37c0:	61 f4       	brne	.+24     	; 0x37da <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    37c2:	10 92 81 02 	sts	0x0281, r1
    37c6:	10 92 80 02 	sts	0x0280, r1
        LCD_MoveCursor(row_global,col_global);
    37ca:	80 91 80 02 	lds	r24, 0x0280
    37ce:	90 91 81 02 	lds	r25, 0x0281
    37d2:	69 2f       	mov	r22, r25
    37d4:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    37d8:	08 c0       	rjmp	.+16     	; 0x37ea <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    37da:	84 e1       	ldi	r24, 0x14	; 20
    37dc:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
        col_global++;
    37e0:	80 91 81 02 	lds	r24, 0x0281
    37e4:	8f 5f       	subi	r24, 0xFF	; 255
    37e6:	80 93 81 02 	sts	0x0281, r24
    }
}
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    37f8:	80 91 81 02 	lds	r24, 0x0281
    37fc:	88 23       	and	r24, r24
    37fe:	91 f4       	brne	.+36     	; 0x3824 <LCD_MoveCursorLeft+0x34>
    3800:	80 91 80 02 	lds	r24, 0x0280
    3804:	88 23       	and	r24, r24
    3806:	71 f4       	brne	.+28     	; 0x3824 <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    3808:	83 e1       	ldi	r24, 0x13	; 19
    380a:	80 93 81 02 	sts	0x0281, r24
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	80 93 80 02 	sts	0x0280, r24
        LCD_MoveCursor(row_global,col_global);
    3814:	80 91 80 02 	lds	r24, 0x0280
    3818:	90 91 81 02 	lds	r25, 0x0281
    381c:	69 2f       	mov	r22, r25
    381e:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    3822:	49 c0       	rjmp	.+146    	; 0x38b6 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    3824:	80 91 81 02 	lds	r24, 0x0281
    3828:	88 23       	and	r24, r24
    382a:	89 f4       	brne	.+34     	; 0x384e <LCD_MoveCursorLeft+0x5e>
    382c:	80 91 80 02 	lds	r24, 0x0280
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	69 f4       	brne	.+26     	; 0x384e <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    3834:	83 e1       	ldi	r24, 0x13	; 19
    3836:	80 93 81 02 	sts	0x0281, r24
    383a:	10 92 80 02 	sts	0x0280, r1
        LCD_MoveCursor(row_global,col_global);
    383e:	80 91 80 02 	lds	r24, 0x0280
    3842:	90 91 81 02 	lds	r25, 0x0281
    3846:	69 2f       	mov	r22, r25
    3848:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    384c:	34 c0       	rjmp	.+104    	; 0x38b6 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    384e:	80 91 81 02 	lds	r24, 0x0281
    3852:	88 23       	and	r24, r24
    3854:	91 f4       	brne	.+36     	; 0x387a <LCD_MoveCursorLeft+0x8a>
    3856:	80 91 80 02 	lds	r24, 0x0280
    385a:	82 30       	cpi	r24, 0x02	; 2
    385c:	71 f4       	brne	.+28     	; 0x387a <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    385e:	83 e1       	ldi	r24, 0x13	; 19
    3860:	80 93 81 02 	sts	0x0281, r24
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	80 93 80 02 	sts	0x0280, r24
        LCD_MoveCursor(row_global,col_global);
    386a:	80 91 80 02 	lds	r24, 0x0280
    386e:	90 91 81 02 	lds	r25, 0x0281
    3872:	69 2f       	mov	r22, r25
    3874:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    3878:	1e c0       	rjmp	.+60     	; 0x38b6 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    387a:	80 91 81 02 	lds	r24, 0x0281
    387e:	88 23       	and	r24, r24
    3880:	91 f4       	brne	.+36     	; 0x38a6 <LCD_MoveCursorLeft+0xb6>
    3882:	80 91 80 02 	lds	r24, 0x0280
    3886:	83 30       	cpi	r24, 0x03	; 3
    3888:	71 f4       	brne	.+28     	; 0x38a6 <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    388a:	83 e1       	ldi	r24, 0x13	; 19
    388c:	80 93 81 02 	sts	0x0281, r24
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	80 93 80 02 	sts	0x0280, r24
        LCD_MoveCursor(row_global,col_global);
    3896:	80 91 80 02 	lds	r24, 0x0280
    389a:	90 91 81 02 	lds	r25, 0x0281
    389e:	69 2f       	mov	r22, r25
    38a0:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    38a4:	08 c0       	rjmp	.+16     	; 0x38b6 <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    38a6:	80 e1       	ldi	r24, 0x10	; 16
    38a8:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
        col_global--;
    38ac:	80 91 81 02 	lds	r24, 0x0281
    38b0:	81 50       	subi	r24, 0x01	; 1
    38b2:	80 93 81 02 	sts	0x0281, r24
    }
    
}
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    38c4:	8c e1       	ldi	r24, 0x1C	; 28
    38c6:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
}
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    38d8:	88 e1       	ldi	r24, 0x18	; 24
    38da:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
}
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <LCD_GenerateCharacterCGRAM+0x6>
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <LCD_GenerateCharacterCGRAM+0x8>
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	9b 83       	std	Y+3, r25	; 0x03
    38f2:	8a 83       	std	Y+2, r24	; 0x02
    38f4:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	88 2f       	mov	r24, r24
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	08 96       	adiw	r24, 0x08	; 8
    38fe:	88 0f       	add	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    390e:	19 82       	std	Y+1, r1	; 0x01
    3910:	0e c0       	rjmp	.+28     	; 0x392e <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	28 2f       	mov	r18, r24
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	8a 81       	ldd	r24, Y+2	; 0x02
    391a:	9b 81       	ldd	r25, Y+3	; 0x03
    391c:	fc 01       	movw	r30, r24
    391e:	e2 0f       	add	r30, r18
    3920:	f3 1f       	adc	r31, r19
    3922:	80 81       	ld	r24, Z
    3924:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	8f 5f       	subi	r24, 0xFF	; 255
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	88 30       	cpi	r24, 0x08	; 8
    3932:	78 f3       	brcs	.-34     	; 0x3912 <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	0f 92       	push	r0
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
}
    3954:	0f 90       	pop	r0
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	00 d0       	rcall	.+0      	; 0x3962 <LCD_DisplayCustomCharacterRowCol+0x6>
    3962:	0f 92       	push	r0
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	89 83       	std	Y+1, r24	; 0x01
    396a:	6a 83       	std	Y+2, r22	; 0x02
    396c:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	6b 81       	ldd	r22, Y+3	; 0x03
    3972:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
}
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    3990:	65 97       	sbiw	r28, 0x15	; 21
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	6a 8b       	std	Y+18, r22	; 0x12
    399e:	7b 8b       	std	Y+19, r23	; 0x13
    39a0:	8c 8b       	std	Y+20, r24	; 0x14
    39a2:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    39a4:	8a 89       	ldd	r24, Y+18	; 0x12
    39a6:	9b 89       	ldd	r25, Y+19	; 0x13
    39a8:	9e 01       	movw	r18, r28
    39aa:	2f 5f       	subi	r18, 0xFF	; 255
    39ac:	3f 4f       	sbci	r19, 0xFF	; 255
    39ae:	b9 01       	movw	r22, r18
    39b0:	4a e0       	ldi	r20, 0x0A	; 10
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    39b8:	ce 01       	movw	r24, r28
    39ba:	01 96       	adiw	r24, 0x01	; 1
    39bc:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
}
    39c0:	65 96       	adiw	r28, 0x15	; 21
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	cf 91       	pop	r28
    39ce:	df 91       	pop	r29
    39d0:	08 95       	ret

000039d2 <Keypad_4X3_AdjustKeyNumber>:


#if(KEYPAD_COL_NUM == 3)

static uint8 Keypad_4X3_AdjustKeyNumber(uint8 Button_Number)
{
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <Keypad_4X3_AdjustKeyNumber+0x6>
    39d8:	00 d0       	rcall	.+0      	; 0x39da <Keypad_4X3_AdjustKeyNumber+0x8>
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
    39de:	8a 83       	std	Y+2, r24	; 0x02
    uint8 pressed_key = 0;
    39e0:	19 82       	std	Y+1, r1	; 0x01
    switch (Button_Number)
    39e2:	8a 81       	ldd	r24, Y+2	; 0x02
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	3c 83       	std	Y+4, r19	; 0x04
    39ea:	2b 83       	std	Y+3, r18	; 0x03
    39ec:	8b 81       	ldd	r24, Y+3	; 0x03
    39ee:	9c 81       	ldd	r25, Y+4	; 0x04
    39f0:	8a 30       	cpi	r24, 0x0A	; 10
    39f2:	91 05       	cpc	r25, r1
    39f4:	81 f0       	breq	.+32     	; 0x3a16 <Keypad_4X3_AdjustKeyNumber+0x44>
    39f6:	2b 81       	ldd	r18, Y+3	; 0x03
    39f8:	3c 81       	ldd	r19, Y+4	; 0x04
    39fa:	2a 30       	cpi	r18, 0x0A	; 10
    39fc:	31 05       	cpc	r19, r1
    39fe:	9c f0       	brlt	.+38     	; 0x3a26 <Keypad_4X3_AdjustKeyNumber+0x54>
    3a00:	8b 81       	ldd	r24, Y+3	; 0x03
    3a02:	9c 81       	ldd	r25, Y+4	; 0x04
    3a04:	8b 30       	cpi	r24, 0x0B	; 11
    3a06:	91 05       	cpc	r25, r1
    3a08:	49 f0       	breq	.+18     	; 0x3a1c <Keypad_4X3_AdjustKeyNumber+0x4a>
    3a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    3a0e:	2c 30       	cpi	r18, 0x0C	; 12
    3a10:	31 05       	cpc	r19, r1
    3a12:	31 f0       	breq	.+12     	; 0x3a20 <Keypad_4X3_AdjustKeyNumber+0x4e>
    3a14:	08 c0       	rjmp	.+16     	; 0x3a26 <Keypad_4X3_AdjustKeyNumber+0x54>
    {
        case 10 :
            pressed_key = '*';
    3a16:	8a e2       	ldi	r24, 0x2A	; 42
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	07 c0       	rjmp	.+14     	; 0x3a2a <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 11 : 
            pressed_key = 0;
    3a1c:	19 82       	std	Y+1, r1	; 0x01
    3a1e:	05 c0       	rjmp	.+10     	; 0x3a2a <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 12 : 
            pressed_key = '#';
    3a20:	83 e2       	ldi	r24, 0x23	; 35
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	02 c0       	rjmp	.+4      	; 0x3a2a <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        default :
            pressed_key = Button_Number;   // if Button_Number =1  --> so will return 1 (as no mapping need like case 10 , 11 , 12)
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	89 83       	std	Y+1, r24	; 0x01
            break;
    }
    return pressed_key;
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <Keypad_init>:


/**************************                   Functions Definition                   **************************/

void Keypad_init(void)
{
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	00 d0       	rcall	.+0      	; 0x3a40 <Keypad_init+0x6>
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    3a44:	1a 82       	std	Y+2, r1	; 0x02
    3a46:	0f c0       	rjmp	.+30     	; 0x3a66 <Keypad_init+0x2c>
        {
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)

            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN_PULLUP );
    3a48:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4a:	88 2f       	mov	r24, r24
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	fc 01       	movw	r30, r24
    3a50:	e9 5a       	subi	r30, 0xA9	; 169
    3a52:	fd 4f       	sbci	r31, 0xFD	; 253
    3a54:	90 81       	ld	r25, Z
    3a56:	82 e0       	ldi	r24, 0x02	; 2
    3a58:	69 2f       	mov	r22, r25
    3a5a:	41 e0       	ldi	r20, 0x01	; 1
    3a5c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	8f 5f       	subi	r24, 0xFF	; 255
    3a64:	8a 83       	std	Y+2, r24	; 0x02
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	84 30       	cpi	r24, 0x04	; 4
    3a6a:	70 f3       	brcs	.-36     	; 0x3a48 <Keypad_init+0xe>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3a6c:	19 82       	std	Y+1, r1	; 0x01
    3a6e:	1b c0       	rjmp	.+54     	; 0x3aa6 <Keypad_init+0x6c>
        {
            GPIO_SetPinDirection(KEYPAD_COL_PORT , sequelizeCOL[it] , OUTPUT_PIN );
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	88 2f       	mov	r24, r24
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	fc 01       	movw	r30, r24
    3a78:	ec 5a       	subi	r30, 0xAC	; 172
    3a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a7c:	90 81       	ld	r25, Z
    3a7e:	83 e0       	ldi	r24, 0x03	; 3
    3a80:	69 2f       	mov	r22, r25
    3a82:	42 e0       	ldi	r20, 0x02	; 2
    3a84:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3a88:	89 81       	ldd	r24, Y+1	; 0x01
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	fc 01       	movw	r30, r24
    3a90:	ec 5a       	subi	r30, 0xAC	; 172
    3a92:	fd 4f       	sbci	r31, 0xFD	; 253
    3a94:	90 81       	ld	r25, Z
    3a96:	83 e0       	ldi	r24, 0x03	; 3
    3a98:	69 2f       	mov	r22, r25
    3a9a:	41 e0       	ldi	r20, 0x01	; 1
    3a9c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	8f 5f       	subi	r24, 0xFF	; 255
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	83 30       	cpi	r24, 0x03	; 3
    3aaa:	10 f3       	brcs	.-60     	; 0x3a70 <Keypad_init+0x36>
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_LOW );// set all columns to low
            #endif
        }

    #endif
}
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <Keypad_GetPressedKey>:


sint8 Keypad_GetPressedKey(void)
{
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <Keypad_GetPressedKey+0x6>
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <Keypad_GetPressedKey+0x8>
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <Keypad_GetPressedKey+0xa>
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3ac4:	1d 82       	std	Y+5, r1	; 0x05
    3ac6:	0f c0       	rjmp	.+30     	; 0x3ae6 <Keypad_GetPressedKey+0x30>
                {
                    GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    3ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aca:	88 2f       	mov	r24, r24
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	fc 01       	movw	r30, r24
    3ad0:	ec 5a       	subi	r30, 0xAC	; 172
    3ad2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ad4:	90 81       	ld	r25, Z
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	69 2f       	mov	r22, r25
    3ada:	41 e0       	ldi	r20, 0x01	; 1
    3adc:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    3ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae2:	8f 5f       	subi	r24, 0xFF	; 255
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae8:	83 30       	cpi	r24, 0x03	; 3
    3aea:	70 f3       	brcs	.-36     	; 0x3ac8 <Keypad_GetPressedKey+0x12>
            #endif

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
    3aec:	8f ef       	ldi	r24, 0xFF	; 255
    3aee:	9f ef       	ldi	r25, 0xFF	; 255
    3af0:	9a 83       	std	Y+2, r25	; 0x02
    3af2:	89 83       	std	Y+1, r24	; 0x01
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3af4:	1c 82       	std	Y+4, r1	; 0x04
    3af6:	45 c0       	rjmp	.+138    	; 0x3b82 <Keypad_GetPressedKey+0xcc>
                {
                    // set  one column with value want to read to loop in rows to read which key from this column pressed
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
    3af8:	8c 81       	ldd	r24, Y+4	; 0x04
    3afa:	88 2f       	mov	r24, r24
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	fc 01       	movw	r30, r24
    3b00:	ec 5a       	subi	r30, 0xAC	; 172
    3b02:	fd 4f       	sbci	r31, 0xFD	; 253
    3b04:	90 81       	ld	r25, Z
    3b06:	83 e0       	ldi	r24, 0x03	; 3
    3b08:	69 2f       	mov	r22, r25
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3b10:	1b 82       	std	Y+3, r1	; 0x03
    3b12:	25 c0       	rjmp	.+74     	; 0x3b5e <Keypad_GetPressedKey+0xa8>
                    {
                        if(GPIO_ReadPin(KEYPAD_ROW_PORT,sequelizeROW[row]) == KEYPAD_PRESSED_STATE)
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	88 2f       	mov	r24, r24
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	e9 5a       	subi	r30, 0xA9	; 169
    3b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b20:	90 81       	ld	r25, Z
    3b22:	82 e0       	ldi	r24, 0x02	; 2
    3b24:	69 2f       	mov	r22, r25
    3b26:	0e 94 3e 0b 	call	0x167c	; 0x167c <GPIO_ReadPin>
    3b2a:	88 23       	and	r24, r24
    3b2c:	a9 f4       	brne	.+42     	; 0x3b58 <Keypad_GetPressedKey+0xa2>
                        {
                            #if(KEYPAD_COL_NUM == 3)
                                pressed_key = Keypad_4X3_AdjustKeyNumber((row*KEYPAD_COL_NUM)+col+1);
    3b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	c9 01       	movw	r24, r18
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	82 0f       	add	r24, r18
    3b3c:	93 1f       	adc	r25, r19
    3b3e:	98 2f       	mov	r25, r24
    3b40:	8c 81       	ldd	r24, Y+4	; 0x04
    3b42:	89 0f       	add	r24, r25
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <Keypad_4X3_AdjustKeyNumber>
    3b4a:	88 2f       	mov	r24, r24
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	9a 83       	std	Y+2, r25	; 0x02
    3b50:	89 83       	std	Y+1, r24	; 0x01

                            pressed_BTN_IsReleased = TRUE;
                            /*store last pressed BTN*/
                            pressed_BTN = row ;
                        #endif
                            return pressed_key ;
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	8e 83       	std	Y+6, r24	; 0x06
    3b56:	1b c0       	rjmp	.+54     	; 0x3b8e <Keypad_GetPressedKey+0xd8>
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	8f 5f       	subi	r24, 0xFF	; 255
    3b5c:	8b 83       	std	Y+3, r24	; 0x03
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	84 30       	cpi	r24, 0x04	; 4
    3b62:	c0 f2       	brcs	.-80     	; 0x3b14 <Keypad_GetPressedKey+0x5e>
                                //          |     I mean this step
                                //          |
                                //          \/
                    // retrive change happen to make same thing to next column
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL [col] , LOGIC_HIGH ); // set all columns to High
    3b64:	8c 81       	ldd	r24, Y+4	; 0x04
    3b66:	88 2f       	mov	r24, r24
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	ec 5a       	subi	r30, 0xAC	; 172
    3b6e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b70:	90 81       	ld	r25, Z
    3b72:	83 e0       	ldi	r24, 0x03	; 3
    3b74:	69 2f       	mov	r22, r25
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    3b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7e:	8f 5f       	subi	r24, 0xFF	; 255
    3b80:	8c 83       	std	Y+4, r24	; 0x04
    3b82:	8c 81       	ldd	r24, Y+4	; 0x04
    3b84:	83 30       	cpi	r24, 0x03	; 3
    3b86:	08 f4       	brcc	.+2      	; 0x3b8a <Keypad_GetPressedKey+0xd4>
    3b88:	b7 cf       	rjmp	.-146    	; 0x3af8 <Keypad_GetPressedKey+0x42>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_LOW ); // set all columns to low
                    #endif

                }
                return pressed_key ;
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	8e 83       	std	Y+6, r24	; 0x06
    3b8e:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            

    #endif

}
    3b90:	26 96       	adiw	r28, 0x06	; 6
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	08 95       	ret

00003ba2 <Buzzer_Init>:

#include "Buzzer_interface.h"


void Buzzer_Init(uint8 PORTX , uint8 PIN )
{
    3ba2:	df 93       	push	r29
    3ba4:	cf 93       	push	r28
    3ba6:	00 d0       	rcall	.+0      	; 0x3ba8 <Buzzer_Init+0x6>
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	89 83       	std	Y+1, r24	; 0x01
    3bae:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	6a 81       	ldd	r22, Y+2	; 0x02
    3bb4:	42 e0       	ldi	r20, 0x02	; 2
    3bb6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
}
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <Buzzer_OnOffPositiveLogic>:


void Buzzer_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <Buzzer_OnOffPositiveLogic+0x6>
    3bca:	0f 92       	push	r0
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	89 83       	std	Y+1, r24	; 0x01
    3bd2:	6a 83       	std	Y+2, r22	; 0x02
    3bd4:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd8:	88 23       	and	r24, r24
    3bda:	31 f4       	brne	.+12     	; 0x3be8 <Buzzer_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01
    3bde:	6a 81       	ldd	r22, Y+2	; 0x02
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    3be6:	08 c0       	rjmp	.+16     	; 0x3bf8 <Buzzer_OnOffPositiveLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3be8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bea:	81 30       	cpi	r24, 0x01	; 1
    3bec:	29 f4       	brne	.+10     	; 0x3bf8 <Buzzer_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	6a 81       	ldd	r22, Y+2	; 0x02
    3bf2:	41 e0       	ldi	r20, 0x01	; 1
    3bf4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    }
}
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <Buzzer_OnOffNegativeLogic>:


void Buzzer_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <Buzzer_OnOffNegativeLogic+0x6>
    3c0a:	0f 92       	push	r0
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	89 83       	std	Y+1, r24	; 0x01
    3c12:	6a 83       	std	Y+2, r22	; 0x02
    3c14:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    3c16:	8b 81       	ldd	r24, Y+3	; 0x03
    3c18:	88 23       	and	r24, r24
    3c1a:	31 f4       	brne	.+12     	; 0x3c28 <Buzzer_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	6a 81       	ldd	r22, Y+2	; 0x02
    3c20:	41 e0       	ldi	r20, 0x01	; 1
    3c22:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    3c26:	08 c0       	rjmp	.+16     	; 0x3c38 <Buzzer_OnOffNegativeLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    3c28:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2a:	81 30       	cpi	r24, 0x01	; 1
    3c2c:	29 f4       	brne	.+10     	; 0x3c38 <Buzzer_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	6a 81       	ldd	r22, Y+2	; 0x02
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    }
}
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <Buzzer_Toggle>:



void Buzzer_Toggle(uint8 PORTX , uint8 PIN)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <Buzzer_Toggle+0x6>
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_TogglePin(PORTX,PIN);
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	6a 81       	ldd	r22, Y+2	; 0x02
    3c56:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_TogglePin>
}
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	08 95       	ret

00003c64 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    3c64:	df 93       	push	r29
    3c66:	cf 93       	push	r28
    3c68:	00 d0       	rcall	.+0      	; 0x3c6a <BUTTON_Init+0x6>
    3c6a:	0f 92       	push	r0
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	89 83       	std	Y+1, r24	; 0x01
    3c72:	6a 83       	std	Y+2, r22	; 0x02
    3c74:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	6a 81       	ldd	r22, Y+2	; 0x02
    3c7a:	4b 81       	ldd	r20, Y+3	; 0x03
    3c7c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>
}
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	cf 91       	pop	r28
    3c88:	df 91       	pop	r29
    3c8a:	08 95       	ret

00003c8c <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    3c8c:	df 93       	push	r29
    3c8e:	cf 93       	push	r28
    3c90:	00 d0       	rcall	.+0      	; 0x3c92 <BUTTON_GetValue+0x6>
    3c92:	cd b7       	in	r28, 0x3d	; 61
    3c94:	de b7       	in	r29, 0x3e	; 62
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	6a 81       	ldd	r22, Y+2	; 0x02
    3c9e:	0e 94 3e 0b 	call	0x167c	; 0x167c <GPIO_ReadPin>
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <StateMachineUpdate>:
enum Distance_BA_status {Distance_BA_Failed , Distance_BA_Meet} ;
uint8 Distance_BA_Current_status = Distance_BA_Failed;


void StateMachineUpdate(void)
{
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    Hanndle_GrearBox_N_State();
    3cb4:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <Hanndle_GrearBox_N_State>
    // Hanndle_GrearBox_D_State();
    Hanndle_GrearBox_R_State();
    3cb8:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <Hanndle_GrearBox_R_State>
    // Buttons_Update();

    APP_KeypadUpdate();
    3cbc:	0e 94 76 21 	call	0x42ec	; 0x42ec <APP_KeypadUpdate>
    App_SpeedUpdate ();
    3cc0:	0e 94 2b 24 	call	0x4856	; 0x4856 <App_SpeedUpdate>
    App_GetDiffCarSpeed_and_limit();
    3cc4:	0e 94 03 20 	call	0x4006	; 0x4006 <App_GetDiffCarSpeed_and_limit>

}
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <Hanndle_GrearBox_D_State>:


static void Hanndle_GrearBox_D_State(void)
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	0f 92       	push	r0
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    3cd8:	80 91 83 02 	lds	r24, 0x0283
       // ACCS_CatchDistance();
        /*  may be interrupt happen here so inside next function check if brake button pressed and make disable for ACCS    */
       // ACCS_DicisionTake();
        
    }
}
    3cdc:	0f 90       	pop	r0
    3cde:	cf 91       	pop	r28
    3ce0:	df 91       	pop	r29
    3ce2:	08 95       	ret

00003ce4 <Hanndle_GrearBox_N_State>:



static void Hanndle_GrearBox_N_State(void)
{
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == N_GearBox)
    3cec:	80 91 82 02 	lds	r24, 0x0282
    3cf0:	88 23       	and	r24, r24
    3cf2:	51 f4       	brne	.+20     	; 0x3d08 <Hanndle_GrearBox_N_State+0x24>
    {
        if(CCS_Currnet_state == CCS_Enable)
    3cf4:	80 91 83 02 	lds	r24, 0x0283
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	31 f4       	brne	.+12     	; 0x3d08 <Hanndle_GrearBox_N_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    3cfc:	10 92 83 02 	sts	0x0283, r1
            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    3d00:	80 91 83 02 	lds	r24, 0x0283
    3d04:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <DashBoard_Update_CCS_State>
           // DashBoard_DistanceHide_small();

        }
    }
   
}
    3d08:	cf 91       	pop	r28
    3d0a:	df 91       	pop	r29
    3d0c:	08 95       	ret

00003d0e <Hanndle_GrearBox_R_State>:


static void Hanndle_GrearBox_R_State(void)
{
    3d0e:	df 93       	push	r29
    3d10:	cf 93       	push	r28
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == R_GearBox)
    3d16:	80 91 82 02 	lds	r24, 0x0282
    3d1a:	82 30       	cpi	r24, 0x02	; 2
    3d1c:	51 f4       	brne	.+20     	; 0x3d32 <Hanndle_GrearBox_R_State+0x24>
    {
        /*  Turn off led that work in Adaptive cruise control  as may make switch by gearBox so I need to handle this   */
        //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
        if(CCS_Currnet_state == CCS_Enable)
    3d1e:	80 91 83 02 	lds	r24, 0x0283
    3d22:	81 30       	cpi	r24, 0x01	; 1
    3d24:	31 f4       	brne	.+12     	; 0x3d32 <Hanndle_GrearBox_R_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    3d26:	10 92 83 02 	sts	0x0283, r1

            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    3d2a:	80 91 83 02 	lds	r24, 0x0283
    3d2e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <DashBoard_Update_CCS_State>
            
            //DashBoard_DistanceHide();
            //DashBoard_DistanceHide_small();
        }
    }
}
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	08 95       	ret

00003d38 <App_Init>:




void App_Init(void)
{
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	cd b7       	in	r28, 0x3d	; 61
    3d3e:	de b7       	in	r29, 0x3e	; 62
    /*	Enable Global Interrupt  */
	sei();
    3d40:	78 94       	sei

    /*  Intialize LCD   */
    LCD_init();
    3d42:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_init>

    /*  Initalize New custom character */
    LCD_GenerateCharacterCGRAM(LCD_Page_Not_Selected,POS_LCD_Page_Not_Selected);
    3d46:	8c e1       	ldi	r24, 0x1C	; 28
    3d48:	92 e0       	ldi	r25, 0x02	; 2
    3d4a:	60 e0       	ldi	r22, 0x00	; 0
    3d4c:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Page_Selected,POS_LCD_Page_Selected);
    3d50:	84 e2       	ldi	r24, 0x24	; 36
    3d52:	92 e0       	ldi	r25, 0x02	; 2
    3d54:	61 e0       	ldi	r22, 0x01	; 1
    3d56:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Right_ICON,POS_LCD_Right_ICON);
    3d5a:	8c e2       	ldi	r24, 0x2C	; 44
    3d5c:	92 e0       	ldi	r25, 0x02	; 2
    3d5e:	62 e0       	ldi	r22, 0x02	; 2
    3d60:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_False_ICON,POS_LCD_False_ICON);
    3d64:	84 e3       	ldi	r24, 0x34	; 52
    3d66:	92 e0       	ldi	r25, 0x02	; 2
    3d68:	63 e0       	ldi	r22, 0x03	; 3
    3d6a:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Mute_ICON,POS_LCD_Mute_ICON);
    3d6e:	8c e3       	ldi	r24, 0x3C	; 60
    3d70:	92 e0       	ldi	r25, 0x02	; 2
    3d72:	64 e0       	ldi	r22, 0x04	; 4
    3d74:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Skull_ICON,POS_LCD_Skull_ICON);
    3d78:	84 e4       	ldi	r24, 0x44	; 68
    3d7a:	92 e0       	ldi	r25, 0x02	; 2
    3d7c:	65 e0       	ldi	r22, 0x05	; 5
    3d7e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Alarm_ICON,POS_LCD_Alarm_ICON);
    3d82:	8c e4       	ldi	r24, 0x4C	; 76
    3d84:	92 e0       	ldi	r25, 0x02	; 2
    3d86:	66 e0       	ldi	r22, 0x06	; 6
    3d88:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_GenerateCharacterCGRAM>

    /*  Initialize Buzzer */
    Buzzer_Init(Buzzer_PORT,Buzzer_PIN);
    3d8c:	82 e0       	ldi	r24, 0x02	; 2
    3d8e:	66 e0       	ldi	r22, 0x06	; 6
    3d90:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <Buzzer_Init>


    /*  Initialize Braking Button with EXT_INT 1    */
    INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	60 e0       	ldi	r22, 0x00	; 0
    3d98:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <INT1_init>
    /*  Set call back function  */
    INT1_SetCallBack(Braking_Button_Handling);
    3d9c:	8a e9       	ldi	r24, 0x9A	; 154
    3d9e:	92 e2       	ldi	r25, 0x22	; 34
    3da0:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <INT1_SetCallBack>

    /*  Initialize LEDS(Red,Yellow) all os them connected positive logic */

    LED_Init(Red_LED_PORT,Red_LED_PIN);
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	67 e0       	ldi	r22, 0x07	; 7
    3da8:	0e 94 85 11 	call	0x230a	; 0x230a <LED_Init>
    LED_Init(Yellow_LED_PORT,Yellow_LED_PIN);
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	66 e0       	ldi	r22, 0x06	; 6
    3db0:	0e 94 85 11 	call	0x230a	; 0x230a <LED_Init>

    /*  Initailize Relay Pin  */
    GPIO_SetPinDirection(Relay_PORT,Relay_PIN,OUTPUT_PIN);
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	67 e0       	ldi	r22, 0x07	; 7
    3db8:	42 e0       	ldi	r20, 0x02	; 2
    3dba:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_SetPinDirection>

    /*  Turn Of all of this led  */
    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN, LED_OFF);
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	67 e0       	ldi	r22, 0x07	; 7
    3dc2:	40 e0       	ldi	r20, 0x00	; 0
    3dc4:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN, LED_OFF);
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	66 e0       	ldi	r22, 0x06	; 6
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>

    /*  initialize Timer0   */
    Timer0_Init();
    3dd2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Timer0_Init>

    /*  Set callback function that will called when Timeout happen to turn of buzzer and handle anything another    */
    Timer0_SetCallBack(Buzzer_timeOutOff);
    3dd6:	8e ef       	ldi	r24, 0xFE	; 254
    3dd8:	92 e2       	ldi	r25, 0x22	; 34
    3dda:	0e 94 25 08 	call	0x104a	; 0x104a <Timer0_SetCallBack>

    /*  Initialize ADC to be used by Potentiometer to accelerate  */
    ADC_Init();
    3dde:	0e 94 67 10 	call	0x20ce	; 0x20ce <ADC_Init>

    /*  Intialize Potentiometer */
    POT_Init(ADC_Channel_0);
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <POT_Init>

    /*  Initailize Keypad  */
    Keypad_init();
    3de8:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <Keypad_init>

    /*  Intialize Bash Board for Car*/
    DashBoard_Init();
    3dec:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <DashBoard_Init>
    /*✍️LCD_SMALL_LARGE*/
    //DashBoard_Init_small();
}
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <DashBoard_Init>:


static void DashBoard_Init(void)
{
    3df6:	df 93       	push	r29
    3df8:	cf 93       	push	r28
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    cli();
    3dfe:	f8 94       	cli
    /*  Display GearBox Current state  */
    LCD_MoveCursor(0,14);
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	6e e0       	ldi	r22, 0x0E	; 14
    3e04:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"GB : N");
    3e08:	80 e6       	ldi	r24, 0x60	; 96
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>

    /*  Display speed */
    LCD_MoveCursor(1,11);
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	6b e0       	ldi	r22, 0x0B	; 11
    3e14:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"SP:0KM"); 
    3e18:	87 e6       	ldi	r24, 0x67	; 103
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>

    /*  Display state of Adaptive Cruise control  */
    LCD_MoveCursor(2,0);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"CC:");
    3e28:	8e e6       	ldi	r24, 0x6E	; 110
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e30:	83 e0       	ldi	r24, 0x03	; 3
    3e32:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" BA:");
    3e36:	82 e7       	ldi	r24, 0x72	; 114
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e3e:	83 e0       	ldi	r24, 0x03	; 3
    3e40:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" SL:");
    3e44:	87 e7       	ldi	r24, 0x77	; 119
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e4c:	83 e0       	ldi	r24, 0x03	; 3
    3e4e:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" DM:");
    3e52:	8c e7       	ldi	r24, 0x7C	; 124
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    3e5a:	83 e0       	ldi	r24, 0x03	; 3
    3e5c:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>

    /*  call function that Display pages and @ first when start program I will be in Page 2 */
    APP_DashBoardPage_update();
    3e60:	0e 94 8e 20 	call	0x411c	; 0x411c <APP_DashBoardPage_update>
    sei();
    3e64:	78 94       	sei
}
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	08 95       	ret

00003e6c <DashBoard_Update_GearBox_state>:



static void DashBoard_Update_GearBox_state(uint8 GearBox_state)
{
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	29 97       	sbiw	r28, 0x09	; 9
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	8c 83       	std	Y+4, r24	; 0x04
    cli();
    3e82:	f8 94       	cli
    /*  Array carry All Characters For GearBox as make display easier using index*/
    uint8 GearBox_Characyer [] = {'N','D','R'};
    3e84:	ce 01       	movw	r24, r28
    3e86:	01 96       	adiw	r24, 0x01	; 1
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
    3e8c:	e1 e6       	ldi	r30, 0x61	; 97
    3e8e:	f2 e0       	ldi	r31, 0x02	; 2
    3e90:	f8 87       	std	Y+8, r31	; 0x08
    3e92:	ef 83       	std	Y+7, r30	; 0x07
    3e94:	f3 e0       	ldi	r31, 0x03	; 3
    3e96:	f9 87       	std	Y+9, r31	; 0x09
    3e98:	ef 81       	ldd	r30, Y+7	; 0x07
    3e9a:	f8 85       	ldd	r31, Y+8	; 0x08
    3e9c:	00 80       	ld	r0, Z
    3e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    3ea0:	98 85       	ldd	r25, Y+8	; 0x08
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	98 87       	std	Y+8, r25	; 0x08
    3ea6:	8f 83       	std	Y+7, r24	; 0x07
    3ea8:	ed 81       	ldd	r30, Y+5	; 0x05
    3eaa:	fe 81       	ldd	r31, Y+6	; 0x06
    3eac:	00 82       	st	Z, r0
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	01 96       	adiw	r24, 0x01	; 1
    3eb4:	9e 83       	std	Y+6, r25	; 0x06
    3eb6:	8d 83       	std	Y+5, r24	; 0x05
    3eb8:	99 85       	ldd	r25, Y+9	; 0x09
    3eba:	91 50       	subi	r25, 0x01	; 1
    3ebc:	99 87       	std	Y+9, r25	; 0x09
    3ebe:	e9 85       	ldd	r30, Y+9	; 0x09
    3ec0:	ee 23       	and	r30, r30
    3ec2:	51 f7       	brne	.-44     	; 0x3e98 <DashBoard_Update_GearBox_state+0x2c>
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(0,19);
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	63 e1       	ldi	r22, 0x13	; 19
    3ec8:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    /*  Edit its state with new state given to function*/
    LCD_DisplayCharacter(GearBox_Characyer[GearBox_state]);
    3ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ece:	28 2f       	mov	r18, r24
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	ce 01       	movw	r24, r28
    3ed4:	01 96       	adiw	r24, 0x01	; 1
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	e2 0f       	add	r30, r18
    3eda:	f3 1f       	adc	r31, r19
    3edc:	80 81       	ld	r24, Z
    3ede:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    sei();
    3ee2:	78 94       	sei
}
    3ee4:	29 96       	adiw	r28, 0x09	; 9
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61
    3ef0:	cf 91       	pop	r28
    3ef2:	df 91       	pop	r29
    3ef4:	08 95       	ret

00003ef6 <DashBoard_Update_CCS_State>:

static void DashBoard_Update_CCS_State(uint8 ACCS_state)
{
    3ef6:	df 93       	push	r29
    3ef8:	cf 93       	push	r28
    3efa:	0f 92       	push	r0
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3f02:	f8 94       	cli
        
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,3);
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	63 e0       	ldi	r22, 0x03	; 3
    3f08:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        //LCD_MoveCursor(0,4);

        /*  Edit its state with new state given to function*/
        if(CCS_Currnet_state == CCS_Enable)
    3f0c:	80 91 83 02 	lds	r24, 0x0283
    3f10:	81 30       	cpi	r24, 0x01	; 1
    3f12:	21 f4       	brne	.+8      	; 0x3f1c <DashBoard_Update_CCS_State+0x26>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3f14:	82 e0       	ldi	r24, 0x02	; 2
    3f16:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <DashBoard_Update_CCS_State+0x2c>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f1c:	83 e0       	ldi	r24, 0x03	; 3
    3f1e:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>

    sei();
    3f22:	78 94       	sei
}
    3f24:	0f 90       	pop	r0
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <DashBoard_Update_BrakingAssist_State>:

static void DashBoard_Update_BrakingAssist_State(uint8 BA_state)
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	0f 92       	push	r0
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
    3f36:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3f38:	f8 94       	cli
    /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,8);
    3f3a:	82 e0       	ldi	r24, 0x02	; 2
    3f3c:	68 e0       	ldi	r22, 0x08	; 8
    3f3e:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
            /*  Edit its state with new state given to function*/
        if(BA_state == BrakingAssist_Enable)
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	81 30       	cpi	r24, 0x01	; 1
    3f46:	21 f4       	brne	.+8      	; 0x3f50 <DashBoard_Update_BrakingAssist_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    3f4e:	03 c0       	rjmp	.+6      	; 0x3f56 <DashBoard_Update_BrakingAssist_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f50:	83 e0       	ldi	r24, 0x03	; 3
    3f52:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    sei();
    3f56:	78 94       	sei
}
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <DashBoard_Update_SpeedLimiter_State>:


static void DashBoard_Update_SpeedLimiter_State(uint8 SL_state)
{
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	0f 92       	push	r0
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3f6c:	f8 94       	cli
    /*  Should don't change state of CCS before that I in page 2 that has this feature  else will happen LCD data corruption    */
    // if(Page_Current_State == Page_2_LCD)
    // {
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,13);
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	6d e0       	ldi	r22, 0x0D	; 13
    3f72:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        //LCD_MoveCursor(0,6);

        /*  Edit its state with new state given to function*/
        if(SL_state == SpeedLimit_Enable)
    3f76:	89 81       	ldd	r24, Y+1	; 0x01
    3f78:	81 30       	cpi	r24, 0x01	; 1
    3f7a:	21 f4       	brne	.+8      	; 0x3f84 <DashBoard_Update_SpeedLimiter_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3f7c:	82 e0       	ldi	r24, 0x02	; 2
    3f7e:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    3f82:	03 c0       	rjmp	.+6      	; 0x3f8a <DashBoard_Update_SpeedLimiter_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    3f84:	83 e0       	ldi	r24, 0x03	; 3
    3f86:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    // }
    sei();
    3f8a:	78 94       	sei
}
    3f8c:	0f 90       	pop	r0
    3f8e:	cf 91       	pop	r28
    3f90:	df 91       	pop	r29
    3f92:	08 95       	ret

00003f94 <DahBoard_Update_DrivingMonetoring_State>:

static void DahBoard_Update_DrivingMonetoring_State(uint8 DM_state)
{
    3f94:	df 93       	push	r29
    3f96:	cf 93       	push	r28
    3f98:	0f 92       	push	r0
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	89 83       	std	Y+1, r24	; 0x01
    cli();
    3fa0:	f8 94       	cli
    /*  Go to index that display current Driving Monetoring state*/
    LCD_MoveCursor(2,18);
    3fa2:	82 e0       	ldi	r24, 0x02	; 2
    3fa4:	62 e1       	ldi	r22, 0x12	; 18
    3fa6:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>

    if(DM_state == DirivingMonetoring_Enable)
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	81 30       	cpi	r24, 0x01	; 1
    3fae:	21 f4       	brne	.+8      	; 0x3fb8 <DahBoard_Update_DrivingMonetoring_State+0x24>
    {
        LCD_DisplayCharacter(POS_LCD_Right_ICON);
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    3fb6:	03 c0       	rjmp	.+6      	; 0x3fbe <DahBoard_Update_DrivingMonetoring_State+0x2a>
    }
    else 
    {
        LCD_DisplayCharacter(POS_LCD_False_ICON);
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    }

    sei();
    3fbe:	78 94       	sei

}
    3fc0:	0f 90       	pop	r0
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <DashBoard_updateSpeedLimitValue>:

static void DashBoard_updateSpeedLimitValue(void)
{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_3_LCD)
    3fd0:	80 91 5b 02 	lds	r24, 0x025B
    3fd4:	82 30       	cpi	r24, 0x02	; 2
    3fd6:	a1 f4       	brne	.+40     	; 0x4000 <DashBoard_updateSpeedLimitValue+0x38>
    {
        cli();
    3fd8:	f8 94       	cli
        //Global_Speed_Limiter_value
        LCD_MoveCursor(0,7);
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	67 e0       	ldi	r22, 0x07	; 7
    3fde:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        LCD_intToString(Global_Speed_Limiter_value);
    3fe2:	80 91 5d 02 	lds	r24, 0x025D
    3fe6:	88 2f       	mov	r24, r24
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	a0 e0       	ldi	r26, 0x00	; 0
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	bc 01       	movw	r22, r24
    3ff0:	cd 01       	movw	r24, r26
    3ff2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <LCD_intToString>
        LCD_DisplayString("KMH ");
    3ff6:	81 e8       	ldi	r24, 0x81	; 129
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
        sei();
    3ffe:	78 94       	sei
    }
}
    4000:	cf 91       	pop	r28
    4002:	df 91       	pop	r29
    4004:	08 95       	ret

00004006 <App_GetDiffCarSpeed_and_limit>:


static void App_GetDiffCarSpeed_and_limit(void)
{
    4006:	df 93       	push	r29
    4008:	cf 93       	push	r28
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    if(Car_Speed > Global_Speed_Limiter_value)
    400e:	80 91 5d 02 	lds	r24, 0x025D
    4012:	28 2f       	mov	r18, r24
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	80 91 8b 02 	lds	r24, 0x028B
    401a:	90 91 8c 02 	lds	r25, 0x028C
    401e:	28 17       	cp	r18, r24
    4020:	39 07       	cpc	r19, r25
    4022:	1c f4       	brge	.+6      	; 0x402a <App_GetDiffCarSpeed_and_limit+0x24>
    {
        /*  Update Status  */
        Speed_limit_Current_Status = Speed_Limit_Failed ;
    4024:	10 92 8d 02 	sts	0x028D, r1
    4028:	0e c0       	rjmp	.+28     	; 0x4046 <App_GetDiffCarSpeed_and_limit+0x40>
    }
    else if(Car_Speed <= Global_Speed_Limiter_value)
    402a:	80 91 5d 02 	lds	r24, 0x025D
    402e:	28 2f       	mov	r18, r24
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	80 91 8b 02 	lds	r24, 0x028B
    4036:	90 91 8c 02 	lds	r25, 0x028C
    403a:	28 17       	cp	r18, r24
    403c:	39 07       	cpc	r19, r25
    403e:	1c f0       	brlt	.+6      	; 0x4046 <App_GetDiffCarSpeed_and_limit+0x40>
    {
        Speed_limit_Current_Status = Speed_Limit_Meet ;
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	80 93 8d 02 	sts	0x028D, r24
    }
    if(Page_Current_State == Page_3_LCD)
    4046:	80 91 5b 02 	lds	r24, 0x025B
    404a:	82 30       	cpi	r24, 0x02	; 2
    404c:	19 f4       	brne	.+6      	; 0x4054 <App_GetDiffCarSpeed_and_limit+0x4e>
    {
        /*  Make update in LCD  and give sound notify  */
        DashBoard_SpeedLimit_status_update();
    404e:	0e 94 47 20 	call	0x408e	; 0x408e <DashBoard_SpeedLimit_status_update>
    4052:	1a c0       	rjmp	.+52     	; 0x4088 <App_GetDiffCarSpeed_and_limit+0x82>
    }
    else /* give sound notify  */
    {
        if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Meet))
    4054:	80 91 84 02 	lds	r24, 0x0284
    4058:	81 30       	cpi	r24, 0x01	; 1
    405a:	51 f4       	brne	.+20     	; 0x4070 <App_GetDiffCarSpeed_and_limit+0x6a>
    405c:	80 91 8d 02 	lds	r24, 0x028D
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	31 f4       	brne	.+12     	; 0x4070 <App_GetDiffCarSpeed_and_limit+0x6a>
        {
            GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    4064:	82 e0       	ldi	r24, 0x02	; 2
    4066:	67 e0       	ldi	r22, 0x07	; 7
    4068:	40 e0       	ldi	r20, 0x00	; 0
    406a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    406e:	0c c0       	rjmp	.+24     	; 0x4088 <App_GetDiffCarSpeed_and_limit+0x82>
        }
        else if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Failed))
    4070:	80 91 84 02 	lds	r24, 0x0284
    4074:	81 30       	cpi	r24, 0x01	; 1
    4076:	41 f4       	brne	.+16     	; 0x4088 <App_GetDiffCarSpeed_and_limit+0x82>
    4078:	80 91 8d 02 	lds	r24, 0x028D
    407c:	88 23       	and	r24, r24
    407e:	21 f4       	brne	.+8      	; 0x4088 <App_GetDiffCarSpeed_and_limit+0x82>
        {
            GPIO_TogglePin(Relay_PORT,Relay_PIN);
    4080:	82 e0       	ldi	r24, 0x02	; 2
    4082:	67 e0       	ldi	r22, 0x07	; 7
    4084:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_TogglePin>
        }
    }
}
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <DashBoard_SpeedLimit_status_update>:

static void DashBoard_SpeedLimit_status_update(void)
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    // if(Page_Current_State == Page_3_LCD)
    // {
        cli();
    4096:	f8 94       	cli
        LCD_MoveCursor(1,9);
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	69 e0       	ldi	r22, 0x09	; 9
    409c:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    40a0:	80 91 84 02 	lds	r24, 0x0284
    40a4:	81 30       	cpi	r24, 0x01	; 1
    40a6:	a9 f4       	brne	.+42     	; 0x40d2 <DashBoard_SpeedLimit_status_update+0x44>
        {
            if(Speed_limit_Current_Status == Speed_Limit_Meet)
    40a8:	80 91 8d 02 	lds	r24, 0x028D
    40ac:	81 30       	cpi	r24, 0x01	; 1
    40ae:	49 f4       	brne	.+18     	; 0x40c2 <DashBoard_SpeedLimit_status_update+0x34>
            {
                LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    40b0:	84 e0       	ldi	r24, 0x04	; 4
    40b2:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
                /*  stop sound of relay  */
                GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	67 e0       	ldi	r22, 0x07	; 7
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    40c0:	0b c0       	rjmp	.+22     	; 0x40d8 <DashBoard_SpeedLimit_status_update+0x4a>
            }
            else
            {
                LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    40c2:	86 e0       	ldi	r24, 0x06	; 6
    40c4:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
                /*  Action Will taken notify user  as it sound of relay switch*/
                GPIO_TogglePin(Relay_PORT,Relay_PIN);
    40c8:	82 e0       	ldi	r24, 0x02	; 2
    40ca:	67 e0       	ldi	r22, 0x07	; 7
    40cc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_TogglePin>
    40d0:	03 c0       	rjmp	.+6      	; 0x40d8 <DashBoard_SpeedLimit_status_update+0x4a>
            }
        }
        else 
        {
            LCD_DisplayCharacter('D'); //system disabled
    40d2:	84 e4       	ldi	r24, 0x44	; 68
    40d4:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
        }
        sei();
    40d8:	78 94       	sei
    // }
}
    40da:	cf 91       	pop	r28
    40dc:	df 91       	pop	r29
    40de:	08 95       	ret

000040e0 <DashBoard_DistanceShow>:




static void DashBoard_DistanceShow(void)
{
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(3,0);
    40e8:	83 e0       	ldi	r24, 0x03	; 3
    40ea:	60 e0       	ldi	r22, 0x00	; 0
    40ec:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"Distance : ");
    40f0:	86 e8       	ldi	r24, 0x86	; 134
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
}
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <DashBoard_DistanceHide>:


static void DashBoard_DistanceHide(void)
{
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(3,0);
    4106:	83 e0       	ldi	r24, 0x03	; 3
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"                    ");
    410e:	82 e9       	ldi	r24, 0x92	; 146
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
}
    4116:	cf 91       	pop	r28
    4118:	df 91       	pop	r29
    411a:	08 95       	ret

0000411c <APP_DashBoardPage_update>:


static void APP_DashBoardPage_update(void)
{
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	65 97       	sbiw	r28, 0x15	; 21
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    
    uint8 pages_option [4][4] = { {POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected} };
    4130:	ce 01       	movw	r24, r28
    4132:	01 96       	adiw	r24, 0x01	; 1
    4134:	9a 8b       	std	Y+18, r25	; 0x12
    4136:	89 8b       	std	Y+17, r24	; 0x11
    4138:	e4 e6       	ldi	r30, 0x64	; 100
    413a:	f2 e0       	ldi	r31, 0x02	; 2
    413c:	fc 8b       	std	Y+20, r31	; 0x14
    413e:	eb 8b       	std	Y+19, r30	; 0x13
    4140:	f0 e1       	ldi	r31, 0x10	; 16
    4142:	fd 8b       	std	Y+21, r31	; 0x15
    4144:	eb 89       	ldd	r30, Y+19	; 0x13
    4146:	fc 89       	ldd	r31, Y+20	; 0x14
    4148:	00 80       	ld	r0, Z
    414a:	8b 89       	ldd	r24, Y+19	; 0x13
    414c:	9c 89       	ldd	r25, Y+20	; 0x14
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	9c 8b       	std	Y+20, r25	; 0x14
    4152:	8b 8b       	std	Y+19, r24	; 0x13
    4154:	e9 89       	ldd	r30, Y+17	; 0x11
    4156:	fa 89       	ldd	r31, Y+18	; 0x12
    4158:	00 82       	st	Z, r0
    415a:	89 89       	ldd	r24, Y+17	; 0x11
    415c:	9a 89       	ldd	r25, Y+18	; 0x12
    415e:	01 96       	adiw	r24, 0x01	; 1
    4160:	9a 8b       	std	Y+18, r25	; 0x12
    4162:	89 8b       	std	Y+17, r24	; 0x11
    4164:	9d 89       	ldd	r25, Y+21	; 0x15
    4166:	91 50       	subi	r25, 0x01	; 1
    4168:	9d 8b       	std	Y+21, r25	; 0x15
    416a:	ed 89       	ldd	r30, Y+21	; 0x15
    416c:	ee 23       	and	r30, r30
    416e:	51 f7       	brne	.-44     	; 0x4144 <APP_DashBoardPage_update+0x28>
    cli();
    4170:	f8 94       	cli
    LCD_MoveCursor(3,8);
    4172:	83 e0       	ldi	r24, 0x03	; 3
    4174:	68 e0       	ldi	r22, 0x08	; 8
    4176:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    /*  Display indicator for current page  */
    LCD_DisplayCharacter(pages_option[Page_Current_State][0]);
    417a:	80 91 5b 02 	lds	r24, 0x025B
    417e:	99 27       	eor	r25, r25
    4180:	87 fd       	sbrc	r24, 7
    4182:	90 95       	com	r25
    4184:	9c 01       	movw	r18, r24
    4186:	22 0f       	add	r18, r18
    4188:	33 1f       	adc	r19, r19
    418a:	22 0f       	add	r18, r18
    418c:	33 1f       	adc	r19, r19
    418e:	ce 01       	movw	r24, r28
    4190:	01 96       	adiw	r24, 0x01	; 1
    4192:	fc 01       	movw	r30, r24
    4194:	e2 0f       	add	r30, r18
    4196:	f3 1f       	adc	r31, r19
    4198:	80 81       	ld	r24, Z
    419a:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][1]);
    419e:	80 91 5b 02 	lds	r24, 0x025B
    41a2:	99 27       	eor	r25, r25
    41a4:	87 fd       	sbrc	r24, 7
    41a6:	90 95       	com	r25
    41a8:	9c 01       	movw	r18, r24
    41aa:	22 0f       	add	r18, r18
    41ac:	33 1f       	adc	r19, r19
    41ae:	22 0f       	add	r18, r18
    41b0:	33 1f       	adc	r19, r19
    41b2:	ce 01       	movw	r24, r28
    41b4:	01 96       	adiw	r24, 0x01	; 1
    41b6:	82 0f       	add	r24, r18
    41b8:	93 1f       	adc	r25, r19
    41ba:	fc 01       	movw	r30, r24
    41bc:	31 96       	adiw	r30, 0x01	; 1
    41be:	80 81       	ld	r24, Z
    41c0:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][2]);
    41c4:	80 91 5b 02 	lds	r24, 0x025B
    41c8:	99 27       	eor	r25, r25
    41ca:	87 fd       	sbrc	r24, 7
    41cc:	90 95       	com	r25
    41ce:	88 0f       	add	r24, r24
    41d0:	99 1f       	adc	r25, r25
    41d2:	01 96       	adiw	r24, 0x01	; 1
    41d4:	9c 01       	movw	r18, r24
    41d6:	22 0f       	add	r18, r18
    41d8:	33 1f       	adc	r19, r19
    41da:	ce 01       	movw	r24, r28
    41dc:	01 96       	adiw	r24, 0x01	; 1
    41de:	fc 01       	movw	r30, r24
    41e0:	e2 0f       	add	r30, r18
    41e2:	f3 1f       	adc	r31, r19
    41e4:	80 81       	ld	r24, Z
    41e6:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][3]);
    41ea:	80 91 5b 02 	lds	r24, 0x025B
    41ee:	99 27       	eor	r25, r25
    41f0:	87 fd       	sbrc	r24, 7
    41f2:	90 95       	com	r25
    41f4:	9c 01       	movw	r18, r24
    41f6:	22 0f       	add	r18, r18
    41f8:	33 1f       	adc	r19, r19
    41fa:	22 0f       	add	r18, r18
    41fc:	33 1f       	adc	r19, r19
    41fe:	ce 01       	movw	r24, r28
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	82 0f       	add	r24, r18
    4204:	93 1f       	adc	r25, r19
    4206:	fc 01       	movw	r30, r24
    4208:	33 96       	adiw	r30, 0x03	; 3
    420a:	80 81       	ld	r24, Z
    420c:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    sei();
    4210:	78 94       	sei
}
    4212:	65 96       	adiw	r28, 0x15	; 21
    4214:	0f b6       	in	r0, 0x3f	; 63
    4216:	f8 94       	cli
    4218:	de bf       	out	0x3e, r29	; 62
    421a:	0f be       	out	0x3f, r0	; 63
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	cf 91       	pop	r28
    4220:	df 91       	pop	r29
    4222:	08 95       	ret

00004224 <APP_DashBoard_SwitchPages>:




static void APP_DashBoard_SwitchPages(void)
{
    4224:	df 93       	push	r29
    4226:	cf 93       	push	r28
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
    cli();
    422c:	f8 94       	cli
    LCD_MoveCursor(0,0);
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	60 e0       	ldi	r22, 0x00	; 0
    4232:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString("              ");
    4236:	87 ea       	ldi	r24, 0xA7	; 167
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    LCD_MoveCursor(1,0);
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	60 e0       	ldi	r22, 0x00	; 0
    4242:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    LCD_DisplayString("           ");
    4246:	86 eb       	ldi	r24, 0xB6	; 182
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    /*  Main window that I start with  */
    if(Page_Current_State == Page_2_LCD)
    424e:	80 91 5b 02 	lds	r24, 0x025B
    4252:	81 30       	cpi	r24, 0x01	; 1
    4254:	09 f4       	brne	.+2      	; 0x4258 <APP_DashBoard_SwitchPages+0x34>
    4256:	46 c0       	rjmp	.+140    	; 0x42e4 <APP_DashBoard_SwitchPages+0xc0>
    {
        /*  Clear parts not needed */
    }
    else if(Page_Current_State == Page_1_LCD)
    4258:	80 91 5b 02 	lds	r24, 0x025B
    425c:	88 23       	and	r24, r24
    425e:	f1 f4       	brne	.+60     	; 0x429c <APP_DashBoard_SwitchPages+0x78>
    {
        if(BrakingAssist_Current_State == BrakingAssist_Enable)
    4260:	80 91 85 02 	lds	r24, 0x0285
    4264:	81 30       	cpi	r24, 0x01	; 1
    4266:	89 f4       	brne	.+34     	; 0x428a <APP_DashBoard_SwitchPages+0x66>
        {
            LCD_MoveCursor(0,0);
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	60 e0       	ldi	r22, 0x00	; 0
    426c:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
            LCD_DisplayString("DIS : ");
    4270:	82 ec       	ldi	r24, 0xC2	; 194
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
            LCD_MoveCursor(1,0);
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
            LCD_DisplayString("Status : ");
    4280:	89 ec       	ldi	r24, 0xC9	; 201
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    4288:	2d c0       	rjmp	.+90     	; 0x42e4 <APP_DashBoard_SwitchPages+0xc0>
        }
        else 
        {
            LCD_MoveCursor(0,0);
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
            LCD_DisplayString("Disabled");
    4292:	83 ed       	ldi	r24, 0xD3	; 211
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    429a:	24 c0       	rjmp	.+72     	; 0x42e4 <APP_DashBoard_SwitchPages+0xc0>
        }

    }
    else if(Page_Current_State == Page_3_LCD)
    429c:	80 91 5b 02 	lds	r24, 0x025B
    42a0:	82 30       	cpi	r24, 0x02	; 2
    42a2:	01 f5       	brne	.+64     	; 0x42e4 <APP_DashBoard_SwitchPages+0xc0>
    {
        LCD_MoveCursor(0,0);
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	60 e0       	ldi	r22, 0x00	; 0
    42a8:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        LCD_DisplayString("SLIM : ");
    42ac:	8c ed       	ldi	r24, 0xDC	; 220
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
        LCD_intToString(Global_Speed_Limiter_value);
    42b4:	80 91 5d 02 	lds	r24, 0x025D
    42b8:	88 2f       	mov	r24, r24
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	a0 e0       	ldi	r26, 0x00	; 0
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	bc 01       	movw	r22, r24
    42c2:	cd 01       	movw	r24, r26
    42c4:	0e 94 c4 1c 	call	0x3988	; 0x3988 <LCD_intToString>
        LCD_DisplayString("KMH ");
    42c8:	81 e8       	ldi	r24, 0x81	; 129
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
        LCD_MoveCursor(1,0);
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        LCD_DisplayString("Status : ");
    42d8:	89 ec       	ldi	r24, 0xC9	; 201
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
        /* update Icons of speed limit status  */
        DashBoard_SpeedLimit_status_update();
    42e0:	0e 94 47 20 	call	0x408e	; 0x408e <DashBoard_SpeedLimit_status_update>
    }
    else if(Page_Current_State == Page_4_LCD)
    {

    }
    sei();
    42e4:	78 94       	sei
}
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <APP_KeypadUpdate>:


static void APP_KeypadUpdate(void)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	0f 92       	push	r0
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62

    static uint8 SL_DecIsStillPressed = NO_Condition ;

    static uint8 BrakingAssit_IsStillPressed = NO_Condition ;

    volatile sint8 local_currentValue_keypad = Keypad_GetPressedKey();/* Take last keypad pressed button */
    42f6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <Keypad_GetPressedKey>
    42fa:	89 83       	std	Y+1, r24	; 0x01

/* (Button 1️⃣) Handle GearBox Button   */

    /*  👀👀👀👀👀👀GearBox switch only happen when press on gearbox and brake button in same time  */
    // if( (local_currentValue_keypad == Keypad_GearBox_pressed_value) && (Global_Braking_BTN_State == BTN_Pressed_State) )
    if((local_currentValue_keypad == Keypad_GearBox_pressed_value))
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	82 30       	cpi	r24, 0x02	; 2
    4300:	c9 f4       	brne	.+50     	; 0x4334 <APP_KeypadUpdate+0x48>
    {
        /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
        if(GearBox_IsStillPressed == NO_Condition)
    4302:	80 91 98 02 	lds	r24, 0x0298
    4306:	88 23       	and	r24, r24
    4308:	b9 f4       	brne	.+46     	; 0x4338 <APP_KeypadUpdate+0x4c>
        {
            GearBox_IsStillPressed = YES_Condition ;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	80 93 98 02 	sts	0x0298, r24
            /* turn buzzer on and give timer 0 clock and set timeout    */
            Buzzer_NotifySound();
    4310:	0e 94 ed 22 	call	0x45da	; 0x45da <Buzzer_NotifySound>

            /*  Go to next state for gearbox*/
            GearBox_Current_State ++ ;
    4314:	80 91 82 02 	lds	r24, 0x0282
    4318:	8f 5f       	subi	r24, 0xFF	; 255
    431a:	80 93 82 02 	sts	0x0282, r24
            if(GearBox_Current_State == GearBox_Return_to_N  )
    431e:	80 91 82 02 	lds	r24, 0x0282
    4322:	83 30       	cpi	r24, 0x03	; 3
    4324:	11 f4       	brne	.+4      	; 0x432a <APP_KeypadUpdate+0x3e>
            {
                GearBox_Current_State = N_GearBox ;
    4326:	10 92 82 02 	sts	0x0282, r1
                
            }

            /*  call function to update gearbox state in Dashboard*/
            DashBoard_Update_GearBox_state(GearBox_Current_State);
    432a:	80 91 82 02 	lds	r24, 0x0282
    432e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <DashBoard_Update_GearBox_state>
    4332:	02 c0       	rjmp	.+4      	; 0x4338 <APP_KeypadUpdate+0x4c>
        
    }
    else
    {
        /*  Enter this state when Button released*/
        GearBox_IsStillPressed = NO_Condition ;
    4334:	10 92 98 02 	sts	0x0298, r1
    }

    /*  There buttons shouldn't take any action except on D mode like(Cruise Control , Braking Assist and Speed limiter)*/
    if(GearBox_Current_State == D_GearBox)
    4338:	80 91 82 02 	lds	r24, 0x0282
    433c:	81 30       	cpi	r24, 0x01	; 1
    433e:	09 f0       	breq	.+2      	; 0x4342 <APP_KeypadUpdate+0x56>
    4340:	6e c0       	rjmp	.+220    	; 0x441e <APP_KeypadUpdate+0x132>
    {
/* (Button 2️⃣) Handle Cruise Control system   */
        if(local_currentValue_keypad == Keypad_CCS_pressed_value) 
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	88 23       	and	r24, r24
    4346:	e1 f4       	brne	.+56     	; 0x4380 <APP_KeypadUpdate+0x94>
        {
            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(CCS_IsStillPressed == NO_Condition)
    4348:	80 91 97 02 	lds	r24, 0x0297
    434c:	88 23       	and	r24, r24
    434e:	d1 f4       	brne	.+52     	; 0x4384 <APP_KeypadUpdate+0x98>
            {
                CCS_IsStillPressed = YES_Condition ;
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	80 93 97 02 	sts	0x0297, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    4356:	0e 94 ed 22 	call	0x45da	; 0x45da <Buzzer_NotifySound>

                if(CCS_Currnet_state == CCS_Disable ) 
    435a:	80 91 83 02 	lds	r24, 0x0283
    435e:	88 23       	and	r24, r24
    4360:	41 f4       	brne	.+16     	; 0x4372 <APP_KeypadUpdate+0x86>
                {
                    
                    /*  Update ACCS state with new value (Enabled)*/
                    CCS_Currnet_state = CCS_Enable;
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	80 93 83 02 	sts	0x0283, r24
                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    4368:	80 91 83 02 	lds	r24, 0x0283
    436c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <DashBoard_Update_CCS_State>
    4370:	09 c0       	rjmp	.+18     	; 0x4384 <APP_KeypadUpdate+0x98>
                    //DashBoard_DistanceShow();
                    //DashBoard_DistanceShow_small();
                }
                else
                {
                    CCS_Currnet_state = CCS_Disable;
    4372:	10 92 83 02 	sts	0x0283, r1
                    /*  Turn off led that work in Adaptive cruise control  as may be  in not safe area and  turn off Adaptive cruise control   */
                    //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
                    /*  🚩🚩🚩🚩🚩🚩🙆‍♂️🙆‍♂️🙆‍♂️ i think that I need to put diable and enable to interrupt as I may be ACCS enabled and when I disable and press braiking at same time */
                    //LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);

                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    4376:	80 91 83 02 	lds	r24, 0x0283
    437a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <DashBoard_Update_CCS_State>
    437e:	02 c0       	rjmp	.+4      	; 0x4384 <APP_KeypadUpdate+0x98>
            
        }
        else
        {
            /*  Enter this state when Button released*/
            CCS_IsStillPressed = NO_Condition ;
    4380:	10 92 97 02 	sts	0x0297, r1
        }
/* (Button 3️⃣) Handle Speed Limiter system   */
        /*  Handle Speed Limiter System Button   */
        if(local_currentValue_keypad == Keypad_SpeedLimit_ON_OFF_pressed_value) 
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	88 30       	cpi	r24, 0x08	; 8
    4388:	09 f5       	brne	.+66     	; 0x43cc <APP_KeypadUpdate+0xe0>
        {
            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(SL_ON_OFFIsStillPressed == NO_Condition)
    438a:	80 91 94 02 	lds	r24, 0x0294
    438e:	88 23       	and	r24, r24
    4390:	f9 f4       	brne	.+62     	; 0x43d0 <APP_KeypadUpdate+0xe4>
            {
                SL_ON_OFFIsStillPressed = YES_Condition ;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	80 93 94 02 	sts	0x0294, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    4398:	0e 94 ed 22 	call	0x45da	; 0x45da <Buzzer_NotifySound>

                if(SpeedLimit_Current__State == SpeedLimit_Disable)
    439c:	80 91 84 02 	lds	r24, 0x0284
    43a0:	88 23       	and	r24, r24
    43a2:	41 f4       	brne	.+16     	; 0x43b4 <APP_KeypadUpdate+0xc8>
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Enable ;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	80 93 84 02 	sts	0x0284, r24
                    /*  Call updater for Speed limiter state */
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    43aa:	80 91 84 02 	lds	r24, 0x0284
    43ae:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <DashBoard_Update_SpeedLimiter_State>
    43b2:	0e c0       	rjmp	.+28     	; 0x43d0 <APP_KeypadUpdate+0xe4>
                }
                else 
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Disable ;
    43b4:	10 92 84 02 	sts	0x0284, r1
                    /*  Call updater for Speed limiter state */   
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    43b8:	80 91 84 02 	lds	r24, 0x0284
    43bc:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <DashBoard_Update_SpeedLimiter_State>
                    /*  stop sound of relay  as may be close this system and I also my speed higher than limit speed */
                    GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    43c0:	82 e0       	ldi	r24, 0x02	; 2
    43c2:	67 e0       	ldi	r22, 0x07	; 7
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPIO_WritePin>
    43ca:	02 c0       	rjmp	.+4      	; 0x43d0 <APP_KeypadUpdate+0xe4>
                }
            }  
        }
        else
        {
            SL_ON_OFFIsStillPressed = NO_Condition ;
    43cc:	10 92 94 02 	sts	0x0294, r1
        } 

/* (Button 4️⃣) Handle Braking Assist system   */
        if(local_currentValue_keypad == Keypad_BrakingAssist_pressed_value)
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	8a 32       	cpi	r24, 0x2A	; 42
    43d4:	11 f5       	brne	.+68     	; 0x441a <APP_KeypadUpdate+0x12e>
        {
            if(BrakingAssit_IsStillPressed == NO_Condition)
    43d6:	80 91 91 02 	lds	r24, 0x0291
    43da:	88 23       	and	r24, r24
    43dc:	01 f5       	brne	.+64     	; 0x441e <APP_KeypadUpdate+0x132>
            {
                BrakingAssit_IsStillPressed = YES_Condition ;
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	80 93 91 02 	sts	0x0291, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_NotifySound();
    43e4:	0e 94 ed 22 	call	0x45da	; 0x45da <Buzzer_NotifySound>
                if(BrakingAssist_Current_State == BrakingAssist_Disable)
    43e8:	80 91 85 02 	lds	r24, 0x0285
    43ec:	88 23       	and	r24, r24
    43ee:	41 f4       	brne	.+16     	; 0x4400 <APP_KeypadUpdate+0x114>
                {
                    BrakingAssist_Current_State = BrakingAssist_Enable ;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	80 93 85 02 	sts	0x0285, r24
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    43f6:	80 91 85 02 	lds	r24, 0x0285
    43fa:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <DashBoard_Update_BrakingAssist_State>
    43fe:	06 c0       	rjmp	.+12     	; 0x440c <APP_KeypadUpdate+0x120>
                }
                else
                {
                    BrakingAssist_Current_State = BrakingAssist_Disable ;
    4400:	10 92 85 02 	sts	0x0285, r1
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    4404:	80 91 85 02 	lds	r24, 0x0285
    4408:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <DashBoard_Update_BrakingAssist_State>
                }
                /*  As if I in page braking Assist and Enable or disable  need to update*/
                if(Page_Current_State == Page_1_LCD)
    440c:	80 91 5b 02 	lds	r24, 0x025B
    4410:	88 23       	and	r24, r24
    4412:	29 f4       	brne	.+10     	; 0x441e <APP_KeypadUpdate+0x132>
                {
                    APP_DashBoard_SwitchPages();    
    4414:	0e 94 12 21 	call	0x4224	; 0x4224 <APP_DashBoard_SwitchPages>
    4418:	02 c0       	rjmp	.+4      	; 0x441e <APP_KeypadUpdate+0x132>
                }
            }
        }
        else 
        {
            BrakingAssit_IsStillPressed = NO_Condition ;
    441a:	10 92 91 02 	sts	0x0291, r1

    }

/* (Button 5️⃣) Handle switch to right screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_R_pressed_value)
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	83 30       	cpi	r24, 0x03	; 3
    4422:	b9 f4       	brne	.+46     	; 0x4452 <APP_KeypadUpdate+0x166>
    {
        if(R_Page_IsStillPressed == NO_Condition)
    4424:	80 91 96 02 	lds	r24, 0x0296
    4428:	88 23       	and	r24, r24
    442a:	a9 f4       	brne	.+42     	; 0x4456 <APP_KeypadUpdate+0x16a>
        {
            R_Page_IsStillPressed = YES_Condition ;
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	80 93 96 02 	sts	0x0296, r24
            Page_Current_State++ ; /*   Move one right page*/
    4432:	80 91 5b 02 	lds	r24, 0x025B
    4436:	8f 5f       	subi	r24, 0xFF	; 255
    4438:	80 93 5b 02 	sts	0x025B, r24
            if(Page_Current_State == 4) /*  Exceed page 3 so it need to handle and return to page one  */
    443c:	80 91 5b 02 	lds	r24, 0x025B
    4440:	84 30       	cpi	r24, 0x04	; 4
    4442:	11 f4       	brne	.+4      	; 0x4448 <APP_KeypadUpdate+0x15c>
            {
                Page_Current_State = Page_1_LCD ;
    4444:	10 92 5b 02 	sts	0x025B, r1
            }
            /*  Call function that handle change in first two */
            APP_DashBoard_SwitchPages();
    4448:	0e 94 12 21 	call	0x4224	; 0x4224 <APP_DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            APP_DashBoardPage_update();
    444c:	0e 94 8e 20 	call	0x411c	; 0x411c <APP_DashBoardPage_update>
    4450:	02 c0       	rjmp	.+4      	; 0x4456 <APP_KeypadUpdate+0x16a>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        R_Page_IsStillPressed = NO_Condition ;
    4452:	10 92 96 02 	sts	0x0296, r1
    }


/* (Button 6️⃣) Handle switch to left screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_L_pressed_value)
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	81 30       	cpi	r24, 0x01	; 1
    445a:	c1 f4       	brne	.+48     	; 0x448c <APP_KeypadUpdate+0x1a0>
    {
        if(L_Page_IsStillPressed == NO_Condition)
    445c:	80 91 95 02 	lds	r24, 0x0295
    4460:	88 23       	and	r24, r24
    4462:	b1 f4       	brne	.+44     	; 0x4490 <APP_KeypadUpdate+0x1a4>
        {
            L_Page_IsStillPressed = YES_Condition ;
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	80 93 95 02 	sts	0x0295, r24
            Page_Current_State-- ; /*   Move one right page*/
    446a:	80 91 5b 02 	lds	r24, 0x025B
    446e:	81 50       	subi	r24, 0x01	; 1
    4470:	80 93 5b 02 	sts	0x025B, r24
            if(Page_Current_State == -1) /*  Exceed page 3 so it need to handle and return to page one  */
    4474:	80 91 5b 02 	lds	r24, 0x025B
    4478:	8f 3f       	cpi	r24, 0xFF	; 255
    447a:	19 f4       	brne	.+6      	; 0x4482 <APP_KeypadUpdate+0x196>
            {
                Page_Current_State = Page_4_LCD ;
    447c:	83 e0       	ldi	r24, 0x03	; 3
    447e:	80 93 5b 02 	sts	0x025B, r24
            }
            /*  Call function that handle change in first two */
            APP_DashBoard_SwitchPages();
    4482:	0e 94 12 21 	call	0x4224	; 0x4224 <APP_DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            APP_DashBoardPage_update();
    4486:	0e 94 8e 20 	call	0x411c	; 0x411c <APP_DashBoardPage_update>
    448a:	02 c0       	rjmp	.+4      	; 0x4490 <APP_KeypadUpdate+0x1a4>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        L_Page_IsStillPressed = NO_Condition ;
    448c:	10 92 95 02 	sts	0x0295, r1

/* (Button 7️⃣) Handle increase in speed limit   */
    /*  Handle Increasing part for speed limiter    */
    static uint8 SL_FirstTime_INC = YES_Condition ;
    static uint8 SL_INC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Inc_pressed_value)
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	89 30       	cpi	r24, 0x09	; 9
    4494:	f9 f4       	brne	.+62     	; 0x44d4 <APP_KeypadUpdate+0x1e8>
    {
        if(SL_FirstTime_INC == YES_Condition )
    4496:	80 91 5f 02 	lds	r24, 0x025F
    449a:	81 30       	cpi	r24, 0x01	; 1
    449c:	41 f4       	brne	.+16     	; 0x44ae <APP_KeypadUpdate+0x1c2>
        {
            Global_Speed_Limiter_value += 5; 
    449e:	80 91 5d 02 	lds	r24, 0x025D
    44a2:	8b 5f       	subi	r24, 0xFB	; 251
    44a4:	80 93 5d 02 	sts	0x025D, r24
            SL_FirstTime_INC = NO_Condition ;
    44a8:	10 92 5f 02 	sts	0x025F, r1
    44ac:	10 c0       	rjmp	.+32     	; 0x44ce <APP_KeypadUpdate+0x1e2>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_INC_repeation += 1;
    44ae:	80 91 90 02 	lds	r24, 0x0290
    44b2:	8f 5f       	subi	r24, 0xFF	; 255
    44b4:	80 93 90 02 	sts	0x0290, r24
            if(SL_INC_repeation == 3)
    44b8:	80 91 90 02 	lds	r24, 0x0290
    44bc:	83 30       	cpi	r24, 0x03	; 3
    44be:	39 f4       	brne	.+14     	; 0x44ce <APP_KeypadUpdate+0x1e2>
            {
                SL_INC_repeation = 0;
    44c0:	10 92 90 02 	sts	0x0290, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                Global_Speed_Limiter_value += 5; 
    44c4:	80 91 5d 02 	lds	r24, 0x025D
    44c8:	8b 5f       	subi	r24, 0xFB	; 251
    44ca:	80 93 5d 02 	sts	0x025D, r24
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    44ce:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <DashBoard_updateSpeedLimitValue>
    44d2:	05 c0       	rjmp	.+10     	; 0x44de <APP_KeypadUpdate+0x1f2>

    }
    else
    {
        SL_FirstTime_INC = YES_Condition ;
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	80 93 5f 02 	sts	0x025F, r24
        SL_INC_repeation = 0;
    44da:	10 92 90 02 	sts	0x0290, r1

/* (Button 8️⃣) Handle decrease in speed limit   */
    /*  Handle Decreasing part for speed limiter    */
    static uint8 SL_FirstTime_DEC = YES_Condition ;
    static uint8 SL_DEC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Dec_pressed_value)
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	87 30       	cpi	r24, 0x07	; 7
    44e2:	f9 f4       	brne	.+62     	; 0x4522 <APP_KeypadUpdate+0x236>
    {
        if(SL_FirstTime_DEC == YES_Condition )
    44e4:	80 91 5e 02 	lds	r24, 0x025E
    44e8:	81 30       	cpi	r24, 0x01	; 1
    44ea:	41 f4       	brne	.+16     	; 0x44fc <APP_KeypadUpdate+0x210>
        {
            Global_Speed_Limiter_value -= 5; 
    44ec:	80 91 5d 02 	lds	r24, 0x025D
    44f0:	85 50       	subi	r24, 0x05	; 5
    44f2:	80 93 5d 02 	sts	0x025D, r24
            SL_FirstTime_DEC = NO_Condition ;
    44f6:	10 92 5e 02 	sts	0x025E, r1
    44fa:	10 c0       	rjmp	.+32     	; 0x451c <APP_KeypadUpdate+0x230>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_DEC_repeation += 1;
    44fc:	80 91 8f 02 	lds	r24, 0x028F
    4500:	8f 5f       	subi	r24, 0xFF	; 255
    4502:	80 93 8f 02 	sts	0x028F, r24
            if(SL_DEC_repeation == 3)
    4506:	80 91 8f 02 	lds	r24, 0x028F
    450a:	83 30       	cpi	r24, 0x03	; 3
    450c:	39 f4       	brne	.+14     	; 0x451c <APP_KeypadUpdate+0x230>
            {
                SL_DEC_repeation = 0;
    450e:	10 92 8f 02 	sts	0x028F, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                Global_Speed_Limiter_value -= 5; 
    4512:	80 91 5d 02 	lds	r24, 0x025D
    4516:	85 50       	subi	r24, 0x05	; 5
    4518:	80 93 5d 02 	sts	0x025D, r24
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    451c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <DashBoard_updateSpeedLimitValue>
    4520:	05 c0       	rjmp	.+10     	; 0x452c <APP_KeypadUpdate+0x240>

    }
    else
    {
        SL_FirstTime_DEC = YES_Condition ;
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	80 93 5e 02 	sts	0x025E, r24
        SL_DEC_repeation = 0;
    4528:	10 92 8f 02 	sts	0x028F, r1

    }

    
}
    452c:	0f 90       	pop	r0
    452e:	cf 91       	pop	r28
    4530:	df 91       	pop	r29
    4532:	08 95       	ret

00004534 <Braking_Button_Handling>:




static void Braking_Button_Handling(void)
{
    4534:	df 93       	push	r29
    4536:	cf 93       	push	r28
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    /*  Make initial state that Button is released  */
    static uint8 Braking_BTN_State = BTN_Released_State ;
    /*  Will Enter this condition only when press button Only (this will make failling edge)  */
    if(Braking_BTN_State == BTN_Released_State)
    453c:	80 91 60 02 	lds	r24, 0x0260
    4540:	81 30       	cpi	r24, 0x01	; 1
    4542:	a1 f4       	brne	.+40     	; 0x456c <Braking_Button_Handling+0x38>
    {
        /*  So when I release utton will make Rising Edge so I need to make setup to detect this state to turn led off  */
        INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN); /*    If swap between that command and next command will face problem that If I make very short press will face problem  that led will turn on only not turn off also and this not required*/
    4544:	83 e0       	ldi	r24, 0x03	; 3
    4546:	60 e0       	ldi	r22, 0x00	; 0
    4548:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <INT1_init>

        Buzzer_NotifySound();
    454c:	0e 94 ed 22 	call	0x45da	; 0x45da <Buzzer_NotifySound>

        /*  Make update to state    */
        Braking_BTN_State = BTN_Pressed_State;
    4550:	10 92 60 02 	sts	0x0260, r1
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    4554:	80 91 60 02 	lds	r24, 0x0260
    4558:	80 93 5c 02 	sts	0x025C, r24
        /*  Turn led on  */
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	67 e0       	ldi	r22, 0x07	; 7
    4560:	41 e0       	ldi	r20, 0x01	; 1
    4562:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>

        //     DashBoard_DistanceHide();


        // }
        tessst();
    4566:	0e 94 cd 22 	call	0x459a	; 0x459a <tessst>
    456a:	14 c0       	rjmp	.+40     	; 0x4594 <Braking_Button_Handling+0x60>
    }
    /*  Will Enter this condition only when release button Only (this will make failling edge)  */
    else if(Braking_BTN_State == BTN_Pressed_State)
    456c:	80 91 60 02 	lds	r24, 0x0260
    4570:	88 23       	and	r24, r24
    4572:	81 f4       	brne	.+32     	; 0x4594 <Braking_Button_Handling+0x60>
    {

        INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    4574:	82 e0       	ldi	r24, 0x02	; 2
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <INT1_init>
        Braking_BTN_State = BTN_Released_State;
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	80 93 60 02 	sts	0x0260, r24
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    4582:	80 91 60 02 	lds	r24, 0x0260
    4586:	80 93 5c 02 	sts	0x025C, r24
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	67 e0       	ldi	r22, 0x07	; 7
    458e:	40 e0       	ldi	r20, 0x00	; 0
    4590:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
    }
}
    4594:	cf 91       	pop	r28
    4596:	df 91       	pop	r29
    4598:	08 95       	ret

0000459a <tessst>:


void tessst (void)
{
    459a:	df 93       	push	r29
    459c:	cf 93       	push	r28
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
        if((GearBox_Current_State == D_GearBox))
    45a2:	80 91 82 02 	lds	r24, 0x0282
    45a6:	81 30       	cpi	r24, 0x01	; 1
    45a8:	a9 f4       	brne	.+42     	; 0x45d4 <tessst+0x3a>
        {
            /*	Enable Global Interrupt  */
	        sei();
    45aa:	78 94       	sei
            /*  If it was CCS enabled should disabled and update in LCD*/
            if(CCS_Currnet_state == CCS_Enable)
    45ac:	80 91 83 02 	lds	r24, 0x0283
    45b0:	81 30       	cpi	r24, 0x01	; 1
    45b2:	31 f4       	brne	.+12     	; 0x45c0 <tessst+0x26>
            {
                /*  Disable ACCS if Enabled  */
                CCS_Currnet_state = CCS_Disable;
    45b4:	10 92 83 02 	sts	0x0283, r1

                /*  Update LCD with new change*/
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    45b8:	80 91 83 02 	lds	r24, 0x0283
    45bc:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <DashBoard_Update_CCS_State>
            }

            /*  If it was Braking Assist enabled should disabled and update in LCD*/
            if(BrakingAssist_Current_State == BrakingAssist_Enable)
    45c0:	80 91 85 02 	lds	r24, 0x0285
    45c4:	81 30       	cpi	r24, 0x01	; 1
    45c6:	31 f4       	brne	.+12     	; 0x45d4 <tessst+0x3a>
            {
                /*  Disable BA Sysystem */
                BrakingAssist_Current_State = BrakingAssist_Disable ;
    45c8:	10 92 85 02 	sts	0x0285, r1

                /*  Update LCD with new change*/
                DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    45cc:	80 91 85 02 	lds	r24, 0x0285
    45d0:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <DashBoard_Update_BrakingAssist_State>

            // DashBoard_DistanceHide();
            //DashBoard_DistanceHide_small();

        }
}
    45d4:	cf 91       	pop	r28
    45d6:	df 91       	pop	r29
    45d8:	08 95       	ret

000045da <Buzzer_NotifySound>:


static void Buzzer_NotifySound(void)
{
    45da:	df 93       	push	r29
    45dc:	cf 93       	push	r28
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
    /*  initialize Timer register with zero value   */
    Timer0_UpdateValue(0);
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	0e 94 97 08 	call	0x112e	; 0x112e <Timer0_UpdateValue>
    /*  Turn Buzzer on  */
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_ON);
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	66 e0       	ldi	r22, 0x06	; 6
    45ec:	41 e0       	ldi	r20, 0x01	; 1
    45ee:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <Buzzer_OnOffPositiveLogic>
    /*  Timer provide clock  */
    Timer0_ProvideClock();
    45f2:	0e 94 b3 08 	call	0x1166	; 0x1166 <Timer0_ProvideClock>

   

}
    45f6:	cf 91       	pop	r28
    45f8:	df 91       	pop	r29
    45fa:	08 95       	ret

000045fc <Buzzer_timeOutOff>:


void Buzzer_timeOutOff(void)
{
    45fc:	df 93       	push	r29
    45fe:	cf 93       	push	r28
    4600:	cd b7       	in	r28, 0x3d	; 61
    4602:	de b7       	in	r29, 0x3e	; 62
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    4604:	82 e0       	ldi	r24, 0x02	; 2
    4606:	66 e0       	ldi	r22, 0x06	; 6
    4608:	40 e0       	ldi	r20, 0x00	; 0
    460a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <Buzzer_OnOffPositiveLogic>
    Timer0_StopClock();
    460e:	0e 94 a5 08 	call	0x114a	; 0x114a <Timer0_StopClock>
}
    4612:	cf 91       	pop	r28
    4614:	df 91       	pop	r29
    4616:	08 95       	ret

00004618 <ACCS_CatchDistance>:




static void ACCS_CatchDistance(void)
{
    4618:	df 93       	push	r29
    461a:	cf 93       	push	r28
    461c:	00 d0       	rcall	.+0      	; 0x461e <ACCS_CatchDistance+0x6>
    461e:	0f 92       	push	r0
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
    * as may be before printing point(.) and number after point  press braking button and this lead to call DashBoard_DistanceHide() function
    * and this make cursor position that I make disable  be at last colimn in last row and will return here to continue this code here 
    * so this lead to make data overwrite in LCD 
    * "this is one scenario from a lot of scenarios "
    */
    cli();
    4624:	f8 94       	cli
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <ADC_ReadChannelSingleConvertion>
    462c:	9a 83       	std	Y+2, r25	; 0x02
    462e:	89 83       	std	Y+1, r24	; 0x01
    distance_ACCS = (Adc_value_pure * 10) / 1023.0 ; 
    4630:	89 81       	ldd	r24, Y+1	; 0x01
    4632:	9a 81       	ldd	r25, Y+2	; 0x02
    4634:	9c 01       	movw	r18, r24
    4636:	22 0f       	add	r18, r18
    4638:	33 1f       	adc	r19, r19
    463a:	c9 01       	movw	r24, r18
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	88 0f       	add	r24, r24
    4642:	99 1f       	adc	r25, r25
    4644:	82 0f       	add	r24, r18
    4646:	93 1f       	adc	r25, r19
    4648:	cc 01       	movw	r24, r24
    464a:	a0 e0       	ldi	r26, 0x00	; 0
    464c:	b0 e0       	ldi	r27, 0x00	; 0
    464e:	bc 01       	movw	r22, r24
    4650:	cd 01       	movw	r24, r26
    4652:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 ec       	ldi	r19, 0xC0	; 192
    4662:	4f e7       	ldi	r20, 0x7F	; 127
    4664:	54 e4       	ldi	r21, 0x44	; 68
    4666:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	80 93 87 02 	sts	0x0287, r24
    4672:	90 93 88 02 	sts	0x0288, r25
    4676:	a0 93 89 02 	sts	0x0289, r26
    467a:	b0 93 8a 02 	sts	0x028A, r27
    /*  Here trying to get first number after Sign  */
    volatile uint8 distance_after_point = ( (uint8)(distance_ACCS * 10) )  % 10;
    467e:	80 91 87 02 	lds	r24, 0x0287
    4682:	90 91 88 02 	lds	r25, 0x0288
    4686:	a0 91 89 02 	lds	r26, 0x0289
    468a:	b0 91 8a 02 	lds	r27, 0x028A
    468e:	bc 01       	movw	r22, r24
    4690:	cd 01       	movw	r24, r26
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	40 e2       	ldi	r20, 0x20	; 32
    4698:	51 e4       	ldi	r21, 0x41	; 65
    469a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    469e:	dc 01       	movw	r26, r24
    46a0:	cb 01       	movw	r24, r22
    46a2:	bc 01       	movw	r22, r24
    46a4:	cd 01       	movw	r24, r26
    46a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	9a e0       	ldi	r25, 0x0A	; 10
    46b0:	69 2f       	mov	r22, r25
    46b2:	0e 94 bf 24 	call	0x497e	; 0x497e <__udivmodqi4>
    46b6:	89 2f       	mov	r24, r25
    46b8:	8b 83       	std	Y+3, r24	; 0x03
    LCD_MoveCursor(3,11);
    46ba:	83 e0       	ldi	r24, 0x03	; 3
    46bc:	6b e0       	ldi	r22, 0x0B	; 11
    46be:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
    /*  For Small LCD*/
    //LCD_MoveCursor(1,11);
	LCD_intToString((uint8)distance_ACCS);
    46c2:	80 91 87 02 	lds	r24, 0x0287
    46c6:	90 91 88 02 	lds	r25, 0x0288
    46ca:	a0 91 89 02 	lds	r26, 0x0289
    46ce:	b0 91 8a 02 	lds	r27, 0x028A
    46d2:	bc 01       	movw	r22, r24
    46d4:	cd 01       	movw	r24, r26
    46d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	88 2f       	mov	r24, r24
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	a0 e0       	ldi	r26, 0x00	; 0
    46e4:	b0 e0       	ldi	r27, 0x00	; 0
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	0e 94 c4 1c 	call	0x3988	; 0x3988 <LCD_intToString>
	LCD_DisplayCharacter('.');
    46ee:	8e e2       	ldi	r24, 0x2E	; 46
    46f0:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_DisplayCharacter>
    LCD_intToString(distance_after_point);
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	88 2f       	mov	r24, r24
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	a0 e0       	ldi	r26, 0x00	; 0
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 c4 1c 	call	0x3988	; 0x3988 <LCD_intToString>
    LCD_DisplayString("M ");
    4706:	84 ee       	ldi	r24, 0xE4	; 228
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    sei();
    470e:	78 94       	sei
}
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	cf 91       	pop	r28
    4718:	df 91       	pop	r29
    471a:	08 95       	ret

0000471c <ACCS_DicisionTake>:



static void ACCS_DicisionTake(void)
{
    471c:	df 93       	push	r29
    471e:	cf 93       	push	r28
    4720:	00 d0       	rcall	.+0      	; 0x4722 <ACCS_DicisionTake+0x6>
    4722:	00 d0       	rcall	.+0      	; 0x4724 <ACCS_DicisionTake+0x8>
    4724:	cd b7       	in	r28, 0x3d	; 61
    4726:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    4728:	80 91 83 02 	lds	r24, 0x0283
    472c:	81 30       	cpi	r24, 0x01	; 1
    472e:	09 f0       	breq	.+2      	; 0x4732 <ACCS_DicisionTake+0x16>
    4730:	8b c0       	rjmp	.+278    	; 0x4848 <ACCS_DicisionTake+0x12c>
    4732:	80 91 82 02 	lds	r24, 0x0282
    4736:	81 30       	cpi	r24, 0x01	; 1
    4738:	09 f0       	breq	.+2      	; 0x473c <ACCS_DicisionTake+0x20>
    473a:	86 c0       	rjmp	.+268    	; 0x4848 <ACCS_DicisionTake+0x12c>
    {

        cli();
    473c:	f8 94       	cli
        if((uint8)(distance_ACCS) >= 8) /*  Case 1  */
    473e:	80 91 87 02 	lds	r24, 0x0287
    4742:	90 91 88 02 	lds	r25, 0x0288
    4746:	a0 91 89 02 	lds	r26, 0x0289
    474a:	b0 91 8a 02 	lds	r27, 0x028A
    474e:	bc 01       	movw	r22, r24
    4750:	cd 01       	movw	r24, r26
    4752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4756:	dc 01       	movw	r26, r24
    4758:	cb 01       	movw	r24, r22
    475a:	88 30       	cpi	r24, 0x08	; 8
    475c:	58 f0       	brcs	.+22     	; 0x4774 <ACCS_DicisionTake+0x58>
        {
            
            /*  Do no thing */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	66 e0       	ldi	r22, 0x06	; 6
    4762:	40 e0       	ldi	r20, 0x00	; 0
    4764:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	67 e0       	ldi	r22, 0x07	; 7
    476c:	40 e0       	ldi	r20, 0x00	; 0
    476e:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
    4772:	69 c0       	rjmp	.+210    	; 0x4846 <ACCS_DicisionTake+0x12a>

           
        }
        else if(((uint8)(distance_ACCS) >= 6)) /*  Case 2  */
    4774:	80 91 87 02 	lds	r24, 0x0287
    4778:	90 91 88 02 	lds	r25, 0x0288
    477c:	a0 91 89 02 	lds	r26, 0x0289
    4780:	b0 91 8a 02 	lds	r27, 0x028A
    4784:	bc 01       	movw	r22, r24
    4786:	cd 01       	movw	r24, r26
    4788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	86 30       	cpi	r24, 0x06	; 6
    4792:	58 f0       	brcs	.+22     	; 0x47aa <ACCS_DicisionTake+0x8e>
        {
           
            /*  in this case only turn yellow led only */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4794:	80 e0       	ldi	r24, 0x00	; 0
    4796:	66 e0       	ldi	r22, 0x06	; 6
    4798:	41 e0       	ldi	r20, 0x01	; 1
    479a:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    479e:	81 e0       	ldi	r24, 0x01	; 1
    47a0:	67 e0       	ldi	r22, 0x07	; 7
    47a2:	40 e0       	ldi	r20, 0x00	; 0
    47a4:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
    47a8:	4e c0       	rjmp	.+156    	; 0x4846 <ACCS_DicisionTake+0x12a>

          

            /*  Try to return back to speed that was make fixed*/
        }
        else if (((uint8)(distance_ACCS) >= 4)) /*  Case 3  */
    47aa:	80 91 87 02 	lds	r24, 0x0287
    47ae:	90 91 88 02 	lds	r25, 0x0288
    47b2:	a0 91 89 02 	lds	r26, 0x0289
    47b6:	b0 91 8a 02 	lds	r27, 0x028A
    47ba:	bc 01       	movw	r22, r24
    47bc:	cd 01       	movw	r24, r26
    47be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	84 30       	cpi	r24, 0x04	; 4
    47c8:	58 f0       	brcs	.+22     	; 0x47e0 <ACCS_DicisionTake+0xc4>
        {
            

            /*  in this case turn yellow and red led on*/
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	66 e0       	ldi	r22, 0x06	; 6
    47ce:	41 e0       	ldi	r20, 0x01	; 1
    47d0:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>

            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	67 e0       	ldi	r22, 0x07	; 7
    47d8:	41 e0       	ldi	r20, 0x01	; 1
    47da:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
    47de:	33 c0       	rjmp	.+102    	; 0x4846 <ACCS_DicisionTake+0x12a>

        }
        else if (((uint8)(distance_ACCS) >= 2)) /*  Case 4  */
    47e0:	80 91 87 02 	lds	r24, 0x0287
    47e4:	90 91 88 02 	lds	r25, 0x0288
    47e8:	a0 91 89 02 	lds	r26, 0x0289
    47ec:	b0 91 8a 02 	lds	r27, 0x028A
    47f0:	bc 01       	movw	r22, r24
    47f2:	cd 01       	movw	r24, r26
    47f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	82 30       	cpi	r24, 0x02	; 2
    47fe:	50 f0       	brcs	.+20     	; 0x4814 <ACCS_DicisionTake+0xf8>
        {


            /*  turn yellow led on and make red led toggles continuesly with very speed */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	66 e0       	ldi	r22, 0x06	; 6
    4804:	41 e0       	ldi	r20, 0x01	; 1
    4806:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>

            LED_Toggle(Red_LED_PORT,Red_LED_PIN);
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	67 e0       	ldi	r22, 0x07	; 7
    480e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <LED_Toggle>
    4812:	19 c0       	rjmp	.+50     	; 0x4846 <ACCS_DicisionTake+0x12a>

        }   
        else if (((uint8)(distance_ACCS) >= 0)) /*  Case 5  */
    4814:	80 91 87 02 	lds	r24, 0x0287
    4818:	90 91 88 02 	lds	r25, 0x0288
    481c:	a0 91 89 02 	lds	r26, 0x0289
    4820:	b0 91 8a 02 	lds	r27, 0x028A
        {
            /*  Turn Of all leds    */
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	67 e0       	ldi	r22, 0x07	; 7
    4828:	40 e0       	ldi	r20, 0x00	; 0
    482a:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	66 e0       	ldi	r22, 0x06	; 6
    4832:	40 e0       	ldi	r20, 0x00	; 0
    4834:	0e 94 96 11 	call	0x232c	; 0x232c <LED_OnOffPositiveLogic>


            /*  Display Crash message   */
            LCD_ClearScreen();
    4838:	0e 94 88 1b 	call	0x3710	; 0x3710 <LCD_ClearScreen>
            LCD_DisplayString((const uint8 *)"Crushed car ):");
    483c:	87 ee       	ldi	r24, 0xE7	; 231
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
    4844:	ff cf       	rjmp	.-2      	; 0x4844 <ACCS_DicisionTake+0x128>

            /*  Disable all Button*/
            while(1);
        }
        
        sei();
    4846:	78 94       	sei
    }
}
    4848:	0f 90       	pop	r0
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	cf 91       	pop	r28
    4852:	df 91       	pop	r29
    4854:	08 95       	ret

00004856 <App_SpeedUpdate>:

static void App_SpeedUpdate(void)
{
    4856:	df 93       	push	r29
    4858:	cf 93       	push	r28
    485a:	00 d0       	rcall	.+0      	; 0x485c <App_SpeedUpdate+0x6>
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    static volatile uint16 Prev_Adc_value_pure = 0;
    /*  Read current value for Potentiometer that work as Accelerator  */
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);  
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <ADC_ReadChannelSingleConvertion>
    4866:	9a 83       	std	Y+2, r25	; 0x02
    4868:	89 83       	std	Y+1, r24	; 0x01
    /*  Get speed that be assigned depend on next condition state  */ 
    Temp_Speed = (uint8)( ( (200) * ((uint32) Adc_value_pure)  ) / 1023 ) ;
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	cc 01       	movw	r24, r24
    4870:	a0 e0       	ldi	r26, 0x00	; 0
    4872:	b0 e0       	ldi	r27, 0x00	; 0
    4874:	28 ec       	ldi	r18, 0xC8	; 200
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 e0       	ldi	r20, 0x00	; 0
    487a:	50 e0       	ldi	r21, 0x00	; 0
    487c:	bc 01       	movw	r22, r24
    487e:	cd 01       	movw	r24, r26
    4880:	0e 94 a0 24 	call	0x4940	; 0x4940 <__mulsi3>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	2f ef       	ldi	r18, 0xFF	; 255
    488a:	33 e0       	ldi	r19, 0x03	; 3
    488c:	40 e0       	ldi	r20, 0x00	; 0
    488e:	50 e0       	ldi	r21, 0x00	; 0
    4890:	bc 01       	movw	r22, r24
    4892:	cd 01       	movw	r24, r26
    4894:	0e 94 cb 24 	call	0x4996	; 0x4996 <__udivmodsi4>
    4898:	da 01       	movw	r26, r20
    489a:	c9 01       	movw	r24, r18
    489c:	80 93 9c 02 	sts	0x029C, r24

    Diff_between_ADCS =  (sint16)Prev_Adc_value_pure - (sint16)Adc_value_pure;
    48a0:	80 91 99 02 	lds	r24, 0x0299
    48a4:	90 91 9a 02 	lds	r25, 0x029A
    48a8:	9c 01       	movw	r18, r24
    48aa:	89 81       	ldd	r24, Y+1	; 0x01
    48ac:	9a 81       	ldd	r25, Y+2	; 0x02
    48ae:	a9 01       	movw	r20, r18
    48b0:	48 1b       	sub	r20, r24
    48b2:	59 0b       	sbc	r21, r25
    48b4:	ca 01       	movw	r24, r20
    48b6:	90 93 9e 02 	sts	0x029E, r25
    48ba:	80 93 9d 02 	sts	0x029D, r24

    if((Diff_between_ADCS > 19) || (Diff_between_ADCS < -19)) // by try found that potentiometer in real life its value vary with max change = 15 so I want change greater than 25 in CCR or CR to accept it as human change not noise in potentiometer
    48be:	80 91 9d 02 	lds	r24, 0x029D
    48c2:	90 91 9e 02 	lds	r25, 0x029E
    48c6:	84 31       	cpi	r24, 0x14	; 20
    48c8:	91 05       	cpc	r25, r1
    48ca:	44 f4       	brge	.+16     	; 0x48dc <App_SpeedUpdate+0x86>
    48cc:	80 91 9d 02 	lds	r24, 0x029D
    48d0:	90 91 9e 02 	lds	r25, 0x029E
    48d4:	5f ef       	ldi	r21, 0xFF	; 255
    48d6:	8d 3e       	cpi	r24, 0xED	; 237
    48d8:	95 07       	cpc	r25, r21
    48da:	44 f4       	brge	.+16     	; 0x48ec <App_SpeedUpdate+0x96>
    {
        Car_Speed = Temp_Speed ;
    48dc:	80 91 9c 02 	lds	r24, 0x029C
    48e0:	88 2f       	mov	r24, r24
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	90 93 8c 02 	sts	0x028C, r25
    48e8:	80 93 8b 02 	sts	0x028B, r24
    }
        cli();
    48ec:	f8 94       	cli
        LCD_MoveCursor(1,14);
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	6e e0       	ldi	r22, 0x0E	; 14
    48f2:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_MoveCursor>
        /*✍️LCD_SMALL_LARGE*/
        // LCD_MoveCursor(0,0);
        LCD_intToString((uint8)Car_Speed) ;
    48f6:	80 91 8b 02 	lds	r24, 0x028B
    48fa:	90 91 8c 02 	lds	r25, 0x028C
    48fe:	88 2f       	mov	r24, r24
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	a0 e0       	ldi	r26, 0x00	; 0
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	bc 01       	movw	r22, r24
    4908:	cd 01       	movw	r24, r26
    490a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <LCD_intToString>
        LCD_DisplayString("KM ");
    490e:	86 ef       	ldi	r24, 0xF6	; 246
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_DisplayString>
        // LCD_intToString(Prev_Adc_value_pure) ;
        // LCD_DisplayString(" ");
        // LCD_MoveCursor(1,8);
        // LCD_intToString(Adc_value_pure) ;
        // LCD_DisplayString(" ");
        sei();
    4916:	78 94       	sei
    /*  Save last change in Speed variable that will display in LCD  */
    Prev_Adc_value_pure = Adc_value_pure ;
    4918:	89 81       	ldd	r24, Y+1	; 0x01
    491a:	9a 81       	ldd	r25, Y+2	; 0x02
    491c:	90 93 9a 02 	sts	0x029A, r25
    4920:	80 93 99 02 	sts	0x0299, r24


}
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	cf 91       	pop	r28
    492a:	df 91       	pop	r29
    492c:	08 95       	ret

0000492e <main>:


#include "Application/Application_interface.h"
uint8 Adc_value_pure = 0;
int main()
{
    492e:	df 93       	push	r29
    4930:	cf 93       	push	r28
    4932:	cd b7       	in	r28, 0x3d	; 61
    4934:	de b7       	in	r29, 0x3e	; 62
	/*	Make Initialize for Every thing*/
	App_Init();
    4936:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <App_Init>
	
	while(1)
	{
		StateMachineUpdate();
    493a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <StateMachineUpdate>
    493e:	fd cf       	rjmp	.-6      	; 0x493a <main+0xc>

00004940 <__mulsi3>:
    4940:	62 9f       	mul	r22, r18
    4942:	d0 01       	movw	r26, r0
    4944:	73 9f       	mul	r23, r19
    4946:	f0 01       	movw	r30, r0
    4948:	82 9f       	mul	r24, r18
    494a:	e0 0d       	add	r30, r0
    494c:	f1 1d       	adc	r31, r1
    494e:	64 9f       	mul	r22, r20
    4950:	e0 0d       	add	r30, r0
    4952:	f1 1d       	adc	r31, r1
    4954:	92 9f       	mul	r25, r18
    4956:	f0 0d       	add	r31, r0
    4958:	83 9f       	mul	r24, r19
    495a:	f0 0d       	add	r31, r0
    495c:	74 9f       	mul	r23, r20
    495e:	f0 0d       	add	r31, r0
    4960:	65 9f       	mul	r22, r21
    4962:	f0 0d       	add	r31, r0
    4964:	99 27       	eor	r25, r25
    4966:	72 9f       	mul	r23, r18
    4968:	b0 0d       	add	r27, r0
    496a:	e1 1d       	adc	r30, r1
    496c:	f9 1f       	adc	r31, r25
    496e:	63 9f       	mul	r22, r19
    4970:	b0 0d       	add	r27, r0
    4972:	e1 1d       	adc	r30, r1
    4974:	f9 1f       	adc	r31, r25
    4976:	bd 01       	movw	r22, r26
    4978:	cf 01       	movw	r24, r30
    497a:	11 24       	eor	r1, r1
    497c:	08 95       	ret

0000497e <__udivmodqi4>:
    497e:	99 1b       	sub	r25, r25
    4980:	79 e0       	ldi	r23, 0x09	; 9
    4982:	04 c0       	rjmp	.+8      	; 0x498c <__udivmodqi4_ep>

00004984 <__udivmodqi4_loop>:
    4984:	99 1f       	adc	r25, r25
    4986:	96 17       	cp	r25, r22
    4988:	08 f0       	brcs	.+2      	; 0x498c <__udivmodqi4_ep>
    498a:	96 1b       	sub	r25, r22

0000498c <__udivmodqi4_ep>:
    498c:	88 1f       	adc	r24, r24
    498e:	7a 95       	dec	r23
    4990:	c9 f7       	brne	.-14     	; 0x4984 <__udivmodqi4_loop>
    4992:	80 95       	com	r24
    4994:	08 95       	ret

00004996 <__udivmodsi4>:
    4996:	a1 e2       	ldi	r26, 0x21	; 33
    4998:	1a 2e       	mov	r1, r26
    499a:	aa 1b       	sub	r26, r26
    499c:	bb 1b       	sub	r27, r27
    499e:	fd 01       	movw	r30, r26
    49a0:	0d c0       	rjmp	.+26     	; 0x49bc <__udivmodsi4_ep>

000049a2 <__udivmodsi4_loop>:
    49a2:	aa 1f       	adc	r26, r26
    49a4:	bb 1f       	adc	r27, r27
    49a6:	ee 1f       	adc	r30, r30
    49a8:	ff 1f       	adc	r31, r31
    49aa:	a2 17       	cp	r26, r18
    49ac:	b3 07       	cpc	r27, r19
    49ae:	e4 07       	cpc	r30, r20
    49b0:	f5 07       	cpc	r31, r21
    49b2:	20 f0       	brcs	.+8      	; 0x49bc <__udivmodsi4_ep>
    49b4:	a2 1b       	sub	r26, r18
    49b6:	b3 0b       	sbc	r27, r19
    49b8:	e4 0b       	sbc	r30, r20
    49ba:	f5 0b       	sbc	r31, r21

000049bc <__udivmodsi4_ep>:
    49bc:	66 1f       	adc	r22, r22
    49be:	77 1f       	adc	r23, r23
    49c0:	88 1f       	adc	r24, r24
    49c2:	99 1f       	adc	r25, r25
    49c4:	1a 94       	dec	r1
    49c6:	69 f7       	brne	.-38     	; 0x49a2 <__udivmodsi4_loop>
    49c8:	60 95       	com	r22
    49ca:	70 95       	com	r23
    49cc:	80 95       	com	r24
    49ce:	90 95       	com	r25
    49d0:	9b 01       	movw	r18, r22
    49d2:	ac 01       	movw	r20, r24
    49d4:	bd 01       	movw	r22, r26
    49d6:	cf 01       	movw	r24, r30
    49d8:	08 95       	ret

000049da <__prologue_saves__>:
    49da:	2f 92       	push	r2
    49dc:	3f 92       	push	r3
    49de:	4f 92       	push	r4
    49e0:	5f 92       	push	r5
    49e2:	6f 92       	push	r6
    49e4:	7f 92       	push	r7
    49e6:	8f 92       	push	r8
    49e8:	9f 92       	push	r9
    49ea:	af 92       	push	r10
    49ec:	bf 92       	push	r11
    49ee:	cf 92       	push	r12
    49f0:	df 92       	push	r13
    49f2:	ef 92       	push	r14
    49f4:	ff 92       	push	r15
    49f6:	0f 93       	push	r16
    49f8:	1f 93       	push	r17
    49fa:	cf 93       	push	r28
    49fc:	df 93       	push	r29
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    4a02:	ca 1b       	sub	r28, r26
    4a04:	db 0b       	sbc	r29, r27
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	09 94       	ijmp

00004a12 <__epilogue_restores__>:
    4a12:	2a 88       	ldd	r2, Y+18	; 0x12
    4a14:	39 88       	ldd	r3, Y+17	; 0x11
    4a16:	48 88       	ldd	r4, Y+16	; 0x10
    4a18:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a20:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a22:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a24:	b9 84       	ldd	r11, Y+9	; 0x09
    4a26:	c8 84       	ldd	r12, Y+8	; 0x08
    4a28:	df 80       	ldd	r13, Y+7	; 0x07
    4a2a:	ee 80       	ldd	r14, Y+6	; 0x06
    4a2c:	fd 80       	ldd	r15, Y+5	; 0x05
    4a2e:	0c 81       	ldd	r16, Y+4	; 0x04
    4a30:	1b 81       	ldd	r17, Y+3	; 0x03
    4a32:	aa 81       	ldd	r26, Y+2	; 0x02
    4a34:	b9 81       	ldd	r27, Y+1	; 0x01
    4a36:	ce 0f       	add	r28, r30
    4a38:	d1 1d       	adc	r29, r1
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	de bf       	out	0x3e, r29	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	cd bf       	out	0x3d, r28	; 61
    4a44:	ed 01       	movw	r28, r26
    4a46:	08 95       	ret

00004a48 <itoa>:
    4a48:	fb 01       	movw	r30, r22
    4a4a:	9f 01       	movw	r18, r30
    4a4c:	e8 94       	clt
    4a4e:	42 30       	cpi	r20, 0x02	; 2
    4a50:	c4 f0       	brlt	.+48     	; 0x4a82 <itoa+0x3a>
    4a52:	45 32       	cpi	r20, 0x25	; 37
    4a54:	b4 f4       	brge	.+44     	; 0x4a82 <itoa+0x3a>
    4a56:	4a 30       	cpi	r20, 0x0A	; 10
    4a58:	29 f4       	brne	.+10     	; 0x4a64 <itoa+0x1c>
    4a5a:	97 fb       	bst	r25, 7
    4a5c:	1e f4       	brtc	.+6      	; 0x4a64 <itoa+0x1c>
    4a5e:	90 95       	com	r25
    4a60:	81 95       	neg	r24
    4a62:	9f 4f       	sbci	r25, 0xFF	; 255
    4a64:	64 2f       	mov	r22, r20
    4a66:	77 27       	eor	r23, r23
    4a68:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__udivmodhi4>
    4a6c:	80 5d       	subi	r24, 0xD0	; 208
    4a6e:	8a 33       	cpi	r24, 0x3A	; 58
    4a70:	0c f0       	brlt	.+2      	; 0x4a74 <itoa+0x2c>
    4a72:	89 5d       	subi	r24, 0xD9	; 217
    4a74:	81 93       	st	Z+, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	00 97       	sbiw	r24, 0x00	; 0
    4a7a:	a1 f7       	brne	.-24     	; 0x4a64 <itoa+0x1c>
    4a7c:	16 f4       	brtc	.+4      	; 0x4a82 <itoa+0x3a>
    4a7e:	5d e2       	ldi	r21, 0x2D	; 45
    4a80:	51 93       	st	Z+, r21
    4a82:	10 82       	st	Z, r1
    4a84:	c9 01       	movw	r24, r18
    4a86:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <strrev>

00004a8a <strrev>:
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	67 2f       	mov	r22, r23
    4a90:	71 91       	ld	r23, Z+
    4a92:	77 23       	and	r23, r23
    4a94:	e1 f7       	brne	.-8      	; 0x4a8e <strrev+0x4>
    4a96:	32 97       	sbiw	r30, 0x02	; 2
    4a98:	04 c0       	rjmp	.+8      	; 0x4aa2 <strrev+0x18>
    4a9a:	7c 91       	ld	r23, X
    4a9c:	6d 93       	st	X+, r22
    4a9e:	70 83       	st	Z, r23
    4aa0:	62 91       	ld	r22, -Z
    4aa2:	ae 17       	cp	r26, r30
    4aa4:	bf 07       	cpc	r27, r31
    4aa6:	c8 f3       	brcs	.-14     	; 0x4a9a <strrev+0x10>
    4aa8:	08 95       	ret

00004aaa <__udivmodhi4>:
    4aaa:	aa 1b       	sub	r26, r26
    4aac:	bb 1b       	sub	r27, r27
    4aae:	51 e1       	ldi	r21, 0x11	; 17
    4ab0:	07 c0       	rjmp	.+14     	; 0x4ac0 <__udivmodhi4_ep>

00004ab2 <__udivmodhi4_loop>:
    4ab2:	aa 1f       	adc	r26, r26
    4ab4:	bb 1f       	adc	r27, r27
    4ab6:	a6 17       	cp	r26, r22
    4ab8:	b7 07       	cpc	r27, r23
    4aba:	10 f0       	brcs	.+4      	; 0x4ac0 <__udivmodhi4_ep>
    4abc:	a6 1b       	sub	r26, r22
    4abe:	b7 0b       	sbc	r27, r23

00004ac0 <__udivmodhi4_ep>:
    4ac0:	88 1f       	adc	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	5a 95       	dec	r21
    4ac6:	a9 f7       	brne	.-22     	; 0x4ab2 <__udivmodhi4_loop>
    4ac8:	80 95       	com	r24
    4aca:	90 95       	com	r25
    4acc:	bc 01       	movw	r22, r24
    4ace:	cd 01       	movw	r24, r26
    4ad0:	08 95       	ret

00004ad2 <_exit>:
    4ad2:	f8 94       	cli

00004ad4 <__stop_program>:
    4ad4:	ff cf       	rjmp	.-2      	; 0x4ad4 <__stop_program>
