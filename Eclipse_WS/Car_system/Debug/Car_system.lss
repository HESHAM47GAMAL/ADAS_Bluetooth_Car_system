
Car_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028a  00800060  00007b82  00007c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  008002ea  008002ea  00007ea0  2**0
                  ALLOC
  3 .stab         0000a818  00000000  00000000  00007ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000630a  00000000  00000000  000126b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000189c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00018b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00018d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0001b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001c876  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001db84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001dd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001e06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001ea85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__vector_1>
       8:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_2>
       c:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <main>
      8a:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e5       	ldi	r26, 0x5C	; 92
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e5       	ldi	r24, 0x5C	; 92
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e5       	ldi	r22, 0x5C	; 92
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7b 3d 	jmp	0x7af6	; 0x7af6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 63 3d 	jmp	0x7ac6	; 0x7ac6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 60 3d 	jmp	0x7ac0	; 0x7ac0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7c 3d 	jmp	0x7af8	; 0x7af8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 83 3d 	jmp	0x7b06	; 0x7b06 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 7b 3d 	jmp	0x7af6	; 0x7af6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 59       	subi	r30, 0x9C	; 156
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_13>:

static volatile void (*g_CallBackPtr_Receive_USART)(void) = NULL_PTR;


ISR(USART_RXC)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_Receive_USART != NULL_PTR)
     f14:	80 91 ea 02 	lds	r24, 0x02EA
     f18:	90 91 eb 02 	lds	r25, 0x02EB
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	29 f0       	breq	.+10     	; 0xf2a <__vector_13+0x40>
    {
        g_CallBackPtr_Receive_USART();
     f20:	e0 91 ea 02 	lds	r30, 0x02EA
     f24:	f0 91 eb 02 	lds	r31, 0x02EB
     f28:	09 95       	icall
    }
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <USART_Init>:

void USART_Init(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
        /* configue ability of transmit and recieve  */
    if(USART_ConfigTypeParam.USART_COM_OPTION_value == USART_Transmit_Only)
     f58:	80 91 67 02 	lds	r24, 0x0267
     f5c:	88 23       	and	r24, r24
     f5e:	41 f4       	brne	.+16     	; 0xf70 <USART_Init+0x20>
    {
        SET_BIT(UCSRB,TXEN);
     f60:	aa e2       	ldi	r26, 0x2A	; 42
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ea e2       	ldi	r30, 0x2A	; 42
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	8c 93       	st	X, r24
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <USART_Init+0x5c>
    }
    else if(USART_ConfigTypeParam.USART_COM_OPTION_value == USART_Receive_Only)
     f70:	80 91 67 02 	lds	r24, 0x0267
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	41 f4       	brne	.+16     	; 0xf88 <USART_Init+0x38>
    {
        SET_BIT(UCSRB,RXEN);
     f78:	aa e2       	ldi	r26, 0x2A	; 42
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ea e2       	ldi	r30, 0x2A	; 42
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 61       	ori	r24, 0x10	; 16
     f84:	8c 93       	st	X, r24
     f86:	12 c0       	rjmp	.+36     	; 0xfac <USART_Init+0x5c>
    }
    else if(USART_ConfigTypeParam.USART_COM_OPTION_value == USART_Transmit_Receive)
     f88:	80 91 67 02 	lds	r24, 0x0267
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	71 f4       	brne	.+28     	; 0xfac <USART_Init+0x5c>
    {
        SET_BIT(UCSRB,RXEN);
     f90:	aa e2       	ldi	r26, 0x2A	; 42
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e2       	ldi	r30, 0x2A	; 42
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	8c 93       	st	X, r24
        SET_BIT(UCSRB,TXEN);
     f9e:	aa e2       	ldi	r26, 0x2A	; 42
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ea e2       	ldi	r30, 0x2A	; 42
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	8c 93       	st	X, r24
    }
    #if(USART_CURRENT_MODE == USART_Asynchronous_Normal_Speed)
    /*  SEt Asynchronous mode & parity & stop & data setting */
    UCSRC = (1 << URSEL) | (USART_ConfigTypeParam.USART_Parity_value << UPM0) | (USART_ConfigTypeParam.USART_NUM_STOP_Bit_value << USBS) | ((USART_ConfigTypeParam.USART_DATA_Bit_value ) << UCSZ0);
     fac:	e0 e4       	ldi	r30, 0x40	; 64
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 91 65 02 	lds	r24, 0x0265
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	82 95       	swap	r24
     fba:	92 95       	swap	r25
     fbc:	90 7f       	andi	r25, 0xF0	; 240
     fbe:	98 27       	eor	r25, r24
     fc0:	80 7f       	andi	r24, 0xF0	; 240
     fc2:	98 27       	eor	r25, r24
     fc4:	28 2f       	mov	r18, r24
     fc6:	20 68       	ori	r18, 0x80	; 128
     fc8:	80 91 66 02 	lds	r24, 0x0266
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	28 2b       	or	r18, r24
     fde:	80 91 64 02 	lds	r24, 0x0264
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 2b       	or	r24, r18
     fec:	80 83       	st	Z, r24
    /*  Set 9 data bit if exist in setting in config.c*/
    UCSRB = (UCSRB & 0xFB) | ((USART_ConfigTypeParam.USART_DATA_Bit_value & 0x04) << UCSZ2) ;
     fee:	aa e2       	ldi	r26, 0x2A	; 42
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ea e2       	ldi	r30, 0x2A	; 42
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	2b 7f       	andi	r18, 0xFB	; 251
     ffc:	80 91 64 02 	lds	r24, 0x0264
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	84 70       	andi	r24, 0x04	; 4
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	82 2b       	or	r24, r18
    1012:	8c 93       	st	X, r24
    /*  Set 9 data bit if exist in setting in config.c*/
    UCSRB = (UCSRB & 0xFB) | ((USART_ConfigTypeParam.USART_DATA_Bit_value & 0x04) << UCSZ2) ;
    #endif

    /*  setting value of UBRR  */
    UBRRH = ((USART_ConfigTypeParam.UBRR_value >> 8));
    1014:	e0 e4       	ldi	r30, 0x40	; 64
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 91 68 02 	lds	r24, 0x0268
    101c:	90 91 69 02 	lds	r25, 0x0269
    1020:	89 2f       	mov	r24, r25
    1022:	99 27       	eor	r25, r25
    1024:	80 83       	st	Z, r24
    UBRRL = (uint8)(USART_ConfigTypeParam.UBRR_value )  ; /* take only low * bits*/
    1026:	e9 e2       	ldi	r30, 0x29	; 41
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 91 68 02 	lds	r24, 0x0268
    102e:	90 91 69 02 	lds	r25, 0x0269
    1032:	80 83       	st	Z, r24
    // if(USART_ConfigTypeParam.UBRR_value > 0xFF)
    // {
    //     UBRRH = (~(1 << URSEL)) | ((USART_ConfigTypeParam.UBRR_value >> 8) & 0x0F);
    // }

}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <USART_SendBytePolling>:


void USART_SendBytePolling(uint16 send_data)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <USART_SendBytePolling+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
    while(BIT_IS_CLEAR(UCSRA,UDRE));
    1048:	eb e2       	ldi	r30, 0x2B	; 43
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	80 72       	andi	r24, 0x20	; 32
    1054:	90 70       	andi	r25, 0x00	; 0
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	b9 f3       	breq	.-18     	; 0x1048 <USART_SendBytePolling+0xe>
    /*  Should set value of 9th bit  of data if exist before setting value of UDR*/
    if(send_data & 0x0100)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	80 70       	andi	r24, 0x00	; 0
    1060:	91 70       	andi	r25, 0x01	; 1
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	41 f0       	breq	.+16     	; 0x1076 <USART_SendBytePolling+0x3c>
        SET_BIT(UCSRB,TXB8);
    1066:	aa e2       	ldi	r26, 0x2A	; 42
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ea e2       	ldi	r30, 0x2A	; 42
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	81 60       	ori	r24, 0x01	; 1
    1072:	8c 93       	st	X, r24
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <USART_SendBytePolling+0x4a>
    else
        CLEAR_BIT(UCSRB,TXB8);
    1076:	aa e2       	ldi	r26, 0x2A	; 42
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ea e2       	ldi	r30, 0x2A	; 42
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	8c 93       	st	X, r24

    /*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
    UDR = (uint8)(send_data & 0x00FF);
    1084:	ec e2       	ldi	r30, 0x2C	; 44
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	80 83       	st	Z, r24
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <USART_ReceiveBytePolling>:


uint16 USART_ReceiveBytePolling(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <USART_ReceiveBytePolling+0x6>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    uint16 Returned_value = 0;
    10a0:	1a 82       	std	Y+2, r1	; 0x02
    10a2:	19 82       	std	Y+1, r1	; 0x01

    /*  Will wait until receive data */
    /*  So you stuck here call this function and there are not MCU send Data for you*/
    while(BIT_IS_CLEAR(UCSRA,RXC));
    10a4:	eb e2       	ldi	r30, 0x2B	; 43
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 23       	and	r24, r24
    10ac:	dc f7       	brge	.-10     	; 0x10a4 <USART_ReceiveBytePolling+0xe>
    /*  Should read 9th bit of data if use 9 bit data before UDR*/
    Returned_value = ( (UCSRB & 0x02) << 7) ;
    10ae:	ea e2       	ldi	r30, 0x2A	; 42
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	82 70       	andi	r24, 0x02	; 2
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	96 95       	lsr	r25
    10be:	98 2f       	mov	r25, r24
    10c0:	88 27       	eor	r24, r24
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
    Returned_value |= UDR ;
    10ca:	ec e2       	ldi	r30, 0x2C	; 44
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	82 2b       	or	r24, r18
    10da:	93 2b       	or	r25, r19
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
    return Returned_value;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <USART_SendStringPolling>:



void USART_SendStringPolling(const uint8 * send_data)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <USART_SendStringPolling+0x6>
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	9b 83       	std	Y+3, r25	; 0x03
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0;
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	10 c0       	rjmp	.+32     	; 0x1122 <USART_SendStringPolling+0x34>
    while(send_data[it] != '\0')
    {
        USART_SendBytePolling(send_data[it]);
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	80 81       	ld	r24, Z
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 1d 08 	call	0x103a	; 0x103a <USART_SendBytePolling>
        it++;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	89 83       	std	Y+1, r24	; 0x01


void USART_SendStringPolling(const uint8 * send_data)
{
    uint8 it = 0;
    while(send_data[it] != '\0')
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	fc 01       	movw	r30, r24
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	80 81       	ld	r24, Z
    1134:	88 23       	and	r24, r24
    1136:	29 f7       	brne	.-54     	; 0x1102 <USART_SendStringPolling+0x14>
    {
        USART_SendBytePolling(send_data[it]);
        it++;
    }
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <USART_ReceiveStringPolling>:


void USART_ReceiveStringPolling(uint8 * receive_data)
{
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <USART_ReceiveStringPolling+0xa>
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	9b 83       	std	Y+3, r25	; 0x03
    1156:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it =0 ;
    1158:	19 82       	std	Y+1, r1	; 0x01
    receive_data[it] = (uint8)USART_ReceiveBytePolling();
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	8c 01       	movw	r16, r24
    1166:	02 0f       	add	r16, r18
    1168:	13 1f       	adc	r17, r19
    116a:	0e 94 4b 08 	call	0x1096	; 0x1096 <USART_ReceiveBytePolling>
    116e:	f8 01       	movw	r30, r16
    1170:	80 83       	st	Z, r24
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <USART_ReceiveStringPolling+0x4e>
    while(receive_data[it] != '#')
    {
        it++;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	89 83       	std	Y+1, r24	; 0x01
        receive_data[it] = (uint8)USART_ReceiveBytePolling();
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	8c 01       	movw	r16, r24
    1186:	02 0f       	add	r16, r18
    1188:	13 1f       	adc	r17, r19
    118a:	0e 94 4b 08 	call	0x1096	; 0x1096 <USART_ReceiveBytePolling>
    118e:	f8 01       	movw	r30, r16
    1190:	80 83       	st	Z, r24

void USART_ReceiveStringPolling(uint8 * receive_data)
{
    uint8 it =0 ;
    receive_data[it] = (uint8)USART_ReceiveBytePolling();
    while(receive_data[it] != '#')
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	fc 01       	movw	r30, r24
    119e:	e2 0f       	add	r30, r18
    11a0:	f3 1f       	adc	r31, r19
    11a2:	80 81       	ld	r24, Z
    11a4:	83 32       	cpi	r24, 0x23	; 35
    11a6:	31 f7       	brne	.-52     	; 0x1174 <USART_ReceiveStringPolling+0x30>
    {
        it++;
        receive_data[it] = (uint8)USART_ReceiveBytePolling();
    }
    receive_data[it] = '\0';
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	fc 01       	movw	r30, r24
    11b4:	e2 0f       	add	r30, r18
    11b6:	f3 1f       	adc	r31, r19
    11b8:	10 82       	st	Z, r1
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <USART_EnableReceiveInerrupt>:



void USART_EnableReceiveInerrupt(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB,RXCIE);
    11d2:	aa e2       	ldi	r26, 0x2A	; 42
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ea e2       	ldi	r30, 0x2A	; 42
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	8c 93       	st	X, r24
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <USART_receiveByteAsynchCallBack>:



void USART_receiveByteAsynchCallBack(void(*a_ptr)(void))
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <USART_receiveByteAsynchCallBack+0x6>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01

    g_CallBackPtr_Receive_USART = a_ptr;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	90 93 eb 02 	sts	0x02EB, r25
    11fc:	80 93 ea 02 	sts	0x02EA, r24
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <USART_receiveStringAsynchCallBack>:

void USART_receiveStringAsynchCallBack(void(*a_ptr)(void))
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <USART_receiveStringAsynchCallBack+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01

    g_CallBackPtr_Receive_USART = a_ptr;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	90 93 eb 02 	sts	0x02EB, r25
    1220:	80 93 ea 02 	sts	0x02EA, r24
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <USART_Catch_UDR_Value>:




uint16 USART_Catch_UDR_Value(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <USART_Catch_UDR_Value+0x6>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    uint16 Returned_value = 0;
    1238:	1a 82       	std	Y+2, r1	; 0x02
    123a:	19 82       	std	Y+1, r1	; 0x01
    /*  Should read 9th bit of data if use 9 bit data before UDR*/
    Returned_value = ( (UCSRB & 0x02) << 7) ;
    123c:	ea e2       	ldi	r30, 0x2A	; 42
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	82 70       	andi	r24, 0x02	; 2
    1248:	90 70       	andi	r25, 0x00	; 0
    124a:	96 95       	lsr	r25
    124c:	98 2f       	mov	r25, r24
    124e:	88 27       	eor	r24, r24
    1250:	97 95       	ror	r25
    1252:	87 95       	ror	r24
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
    Returned_value |= UDR ;
    1258:	ec e2       	ldi	r30, 0x2C	; 44
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	82 2b       	or	r24, r18
    1268:	93 2b       	or	r25, r19
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    return Returned_value;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <Timer1_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T1)(void) = NULL_PTR;

    void Timer1_SetCallBack(void(*a_ptr)(void))
    {
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <Timer1_SetCallBack+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T1 = a_ptr;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	90 93 ed 02 	sts	0x02ED, r25
    1292:	80 93 ec 02 	sts	0x02EC, r24
    }
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <__vector_6>:
                g_CallBackPtr_T1();
            }
        }
    #elif((TIMER1_CURRENT_MODE == T1_NORMAL_MODE) && (NORMAL_use_T1_state == T1_ICU))
        ISR(TIMER_1_CAPT)
        {
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T1 != NULL_PTR)
    12ca:	80 91 ec 02 	lds	r24, 0x02EC
    12ce:	90 91 ed 02 	lds	r25, 0x02ED
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <__vector_6+0x40>
            {
                g_CallBackPtr_T1();
    12d6:	e0 91 ec 02 	lds	r30, 0x02EC
    12da:	f0 91 ed 02 	lds	r31, 0x02ED
    12de:	09 95       	icall
            }   
        }
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <Timer1_Init>:




void Timer1_Init(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR1A,FOC1A);
    130e:	af e4       	ldi	r26, 0x4F	; 79
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ef e4       	ldi	r30, 0x4F	; 79
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	88 60       	ori	r24, 0x08	; 8
    131a:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
    131c:	af e4       	ldi	r26, 0x4F	; 79
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ef e4       	ldi	r30, 0x4F	; 79
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	84 60       	ori	r24, 0x04	; 4
    1328:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR1A,WGM10);
    132a:	af e4       	ldi	r26, 0x4F	; 79
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ef e4       	ldi	r30, 0x4F	; 79
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8e 7f       	andi	r24, 0xFE	; 254
    1336:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1A,WGM11);
    1338:	af e4       	ldi	r26, 0x4F	; 79
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ef e4       	ldi	r30, 0x4F	; 79
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8d 7f       	andi	r24, 0xFD	; 253
    1344:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM12);
    1346:	ae e4       	ldi	r26, 0x4E	; 78
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	87 7f       	andi	r24, 0xF7	; 247
    1352:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM13);
    1354:	ae e4       	ldi	r26, 0x4E	; 78
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ee e4       	ldi	r30, 0x4E	; 78
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 7e       	andi	r24, 0xEF	; 239
    1360:	8c 93       	st	X, r24

    #if(NORMAL_use_T1_state == T1_ICU)
    
        /*  Set this pin as input to take signal  ICP1  */
        GPIO_SetPinDirection(PORTD_ID,PIN6_ID,INPUT_PIN);
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	66 e0       	ldi	r22, 0x06	; 6
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
    136c:	af e5       	ldi	r26, 0x5F	; 95
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ef e5       	ldi	r30, 0x5F	; 95
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	80 68       	ori	r24, 0x80	; 128
    1378:	8c 93       	st	X, r24
        /*  Enable Input capture Interrupt  */
        SET_BIT(TIMSK,TICIE1);
    137a:	a9 e5       	ldi	r26, 0x59	; 89
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e9 e5       	ldi	r30, 0x59	; 89
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	80 62       	ori	r24, 0x20	; 32
    1386:	8c 93       	st	X, r24
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
#endif


    /*  Set TCNT0 value to Zero*/
    Timer1_UpdateValue(0) ;
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 cb 09 	call	0x1396	; 0x1396 <Timer1_UpdateValue>
}
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <Timer1_UpdateValue>:



void Timer1_UpdateValue(uint16 Register_value)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <Timer1_UpdateValue+0x6>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Register_value;
    13a4:	ec e4       	ldi	r30, 0x4C	; 76
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Timer1_StopClock>:


void Timer1_StopClock(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = TCCR1B & (0xF8);
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	88 7f       	andi	r24, 0xF8	; 248
    13ce:	8c 93       	st	X, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <Timer1_ProvideClock>:


void Timer1_ProvideClock(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
    13de:	ae e4       	ldi	r26, 0x4E	; 78
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ee e4       	ldi	r30, 0x4E	; 78
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	98 2f       	mov	r25, r24
    13ea:	98 7f       	andi	r25, 0xF8	; 248
    13ec:	80 91 6a 02 	lds	r24, 0x026A
    13f0:	89 2b       	or	r24, r25
    13f2:	8c 93       	st	X, r24
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <Timer1_ICU_capture_edge>:

#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)

    #if (NORMAL_use_T1_state  == T1_ICU)
        void Timer1_ICU_capture_edge (Timer1_ICU_Edge edge_type)
        {
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
            TCCR1B = ( TCCR1B & (~(1 << ICES1)) ) | (edge_type << ICES1) ;
    1406:	ae e4       	ldi	r26, 0x4E	; 78
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ee e4       	ldi	r30, 0x4E	; 78
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	2f 7b       	andi	r18, 0xBF	; 191
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	00 24       	eor	r0, r0
    141c:	96 95       	lsr	r25
    141e:	87 95       	ror	r24
    1420:	07 94       	ror	r0
    1422:	96 95       	lsr	r25
    1424:	87 95       	ror	r24
    1426:	07 94       	ror	r0
    1428:	98 2f       	mov	r25, r24
    142a:	80 2d       	mov	r24, r0
    142c:	82 2b       	or	r24, r18
    142e:	8c 93       	st	X, r24
        }
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <Icu_getInputCaptureValue>:

        uint16 Icu_getInputCaptureValue(void)
        {
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
            return ICR1;
    1440:	e6 e4       	ldi	r30, 0x46	; 70
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
        }
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <Timer1_DelayOVFInterrupt>:
        }

    #elif(INTERUPT_STATE_T1 == Enable_Interrupt_T1)

        void Timer1_DelayOVFInterrupt(void)
        {
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
            Timer1_ProvideClock();
    1456:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Timer1_ProvideClock>
        }
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <Timer1_OVFDisableInterrupt>:


        void Timer1_OVFDisableInterrupt(void)
        {
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
            /*  Disable overflow Interrupt  */
                CLEAR_BIT(TIMSK,TOIE1);   
    1468:	a9 e5       	ldi	r26, 0x59	; 89
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e9 e5       	ldi	r30, 0x59	; 89
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8b 7f       	andi	r24, 0xFB	; 251
    1474:	8c 93       	st	X, r24
        }
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <Timer1_OVFEnableInterrupt>:

        void Timer1_OVFEnableInterrupt(void)
        {
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TIMSK,TOIE1);   
    1484:	a9 e5       	ldi	r26, 0x59	; 89
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e9 e5       	ldi	r30, 0x59	; 89
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	84 60       	ori	r24, 0x04	; 4
    1490:	8c 93       	st	X, r24
        }
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <Timer0_SetCallBack>:

/**************************                   Static varaible and ISR                   **************************/
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <Timer0_SetCallBack+0x6>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	90 93 ef 02 	sts	0x02EF, r25
    14ae:	80 93 ee 02 	sts	0x02EE, r24
    }
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <__vector_11>:
            } 
        }

    #elif(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE)
        ISR(TIMER_0_OVF)
        {
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
            if(g_CallBackPtr_T0 != NULL_PTR)
    14e6:	80 91 ee 02 	lds	r24, 0x02EE
    14ea:	90 91 ef 02 	lds	r25, 0x02EF
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	29 f0       	breq	.+10     	; 0x14fc <__vector_11+0x40>
            {
                g_CallBackPtr_T0();
    14f2:	e0 91 ee 02 	lds	r30, 0x02EE
    14f6:	f0 91 ef 02 	lds	r31, 0x02EF
    14fa:	09 95       	icall
            }
        }
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	bf 91       	pop	r27
    1506:	af 91       	pop	r26
    1508:	9f 91       	pop	r25
    150a:	8f 91       	pop	r24
    150c:	7f 91       	pop	r23
    150e:	6f 91       	pop	r22
    1510:	5f 91       	pop	r21
    1512:	4f 91       	pop	r20
    1514:	3f 91       	pop	r19
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <Timer0_Init>:




void Timer0_Init(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
        CLEAR_BIT(TIMSK,OCIE0);
    #endif


#elif(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE) 
    SET_BIT(TCCR0,WGM00);
    152a:	a3 e5       	ldi	r26, 0x53	; 83
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e3 e5       	ldi	r30, 0x53	; 83
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 64       	ori	r24, 0x40	; 64
    1536:	8c 93       	st	X, r24
    SET_BIT(TCCR0,WGM01);
    1538:	a3 e5       	ldi	r26, 0x53	; 83
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e3 e5       	ldi	r30, 0x53	; 83
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	8c 93       	st	X, r24
    /*  Set Output Compare pin (OC0) behavior   */
    TCCR0 = (TCCR0 & 0xCF) | (TIMER0_ConfigTypeParam.CO_PWM_T0_value << COM00) ;
    1546:	a3 e5       	ldi	r26, 0x53	; 83
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e3 e5       	ldi	r30, 0x53	; 83
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	2f 7c       	andi	r18, 0xCF	; 207
    1554:	80 91 6c 02 	lds	r24, 0x026C
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	82 95       	swap	r24
    155e:	92 95       	swap	r25
    1560:	90 7f       	andi	r25, 0xF0	; 240
    1562:	98 27       	eor	r25, r24
    1564:	80 7f       	andi	r24, 0xF0	; 240
    1566:	98 27       	eor	r25, r24
    1568:	82 2b       	or	r24, r18
    156a:	8c 93       	st	X, r24
    if(TIMER0_ConfigTypeParam.CO_PWM_T0_value != T0_NORMAL_PORT_OPERATION)
    156c:	80 91 6c 02 	lds	r24, 0x026C
    1570:	88 23       	and	r24, r24
    1572:	29 f0       	breq	.+10     	; 0x157e <Timer0_Init+0x5c>
        /*  Need to set this pin to output*/
        GPIO_SetPinDirection(PORTB_ID,PIN3_ID,OUTPUT_PIN);  
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	63 e0       	ldi	r22, 0x03	; 3
    1578:	42 e0       	ldi	r20, 0x02	; 2
    157a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    /*  Set Clock for Timer    */
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    157e:	a3 e5       	ldi	r26, 0x53	; 83
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e3 e5       	ldi	r30, 0x53	; 83
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	98 2f       	mov	r25, r24
    158a:	98 7f       	andi	r25, 0xF8	; 248
    158c:	80 91 6b 02 	lds	r24, 0x026B
    1590:	89 2b       	or	r24, r25
    1592:	8c 93       	st	X, r24

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Timer0_UpdateValue>
}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Register_value;
    15ac:	e2 e5       	ldi	r30, 0x52	; 82
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	80 83       	st	Z, r24
}
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <Timer0_StopClock>:


void Timer0_StopClock(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = TCCR0 & (0xF8);
    15c4:	a3 e5       	ldi	r26, 0x53	; 83
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e3 e5       	ldi	r30, 0x53	; 83
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	88 7f       	andi	r24, 0xF8	; 248
    15d0:	8c 93       	st	X, r24
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <Timer0_ProvideClock>:


void Timer0_ProvideClock(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
    15e0:	a3 e5       	ldi	r26, 0x53	; 83
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e3 e5       	ldi	r30, 0x53	; 83
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	98 2f       	mov	r25, r24
    15ec:	98 7f       	andi	r25, 0xF8	; 248
    15ee:	80 91 6b 02 	lds	r24, 0x026B
    15f2:	89 2b       	or	r24, r25
    15f4:	8c 93       	st	X, r24
}
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <Timer0_FastPWMSetOCR>:
    #endif

#elif(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE)

    void Timer0_FastPWMSetOCR(uint8 OCR_Register_value)
    {
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
        OCR0 = OCR_Register_value;
    1608:	ec e5       	ldi	r30, 0x5C	; 92
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	80 83       	st	Z, r24
    }
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <Timer0_FastPWMSetDutyCycle>:

    void Timer0_FastPWMSetDutyCycle(uint8 DutyCycle_value)
    {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
        OCR0 = ( ((uint16)(255)) * DutyCycle_value ) / 100 ;
    1624:	ec e5       	ldi	r30, 0x5C	; 92
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	48 2f       	mov	r20, r24
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	ca 01       	movw	r24, r20
    1630:	9c 01       	movw	r18, r24
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	c9 01       	movw	r24, r18
    1638:	96 95       	lsr	r25
    163a:	98 2f       	mov	r25, r24
    163c:	88 27       	eor	r24, r24
    163e:	97 95       	ror	r25
    1640:	87 95       	ror	r24
    1642:	82 1b       	sub	r24, r18
    1644:	93 0b       	sbc	r25, r19
    1646:	84 0f       	add	r24, r20
    1648:	95 1f       	adc	r25, r21
    164a:	24 e6       	ldi	r18, 0x64	; 100
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	b9 01       	movw	r22, r18
    1650:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <__udivmodhi4>
    1654:	cb 01       	movw	r24, r22
    1656:	80 83       	st	Z, r24
    }
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <Timer0_Enable_OVR_Flow_Interrupt>:

    void Timer0_Enable_OVR_Flow_Interrupt(void)
    {
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
        
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
    1668:	a9 e5       	ldi	r26, 0x59	; 89
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e9 e5       	ldi	r30, 0x59	; 89
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	81 60       	ori	r24, 0x01	; 1
    1674:	8c 93       	st	X, r24
    }
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <I2C_Init>:
extern I2C_ConfigType  I2C_ConfigTypeParam ;

/**************************                   Function Implement                   **************************/

void I2C_Init(void)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    /*  set preScaler for I2C*/
    TWSR |= (I2C_ConfigTypeParam.I2C_PreScaler_value & 0x03 );
    1684:	a1 e2       	ldi	r26, 0x21	; 33
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e1 e2       	ldi	r30, 0x21	; 33
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	98 2f       	mov	r25, r24
    1690:	80 91 6d 02 	lds	r24, 0x026D
    1694:	83 70       	andi	r24, 0x03	; 3
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24
    /*  set Bit Rate  */
    TWBR = I2C_ConfigTypeParam.I2C_BitRate ;
    169a:	e0 e2       	ldi	r30, 0x20	; 32
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 91 6e 02 	lds	r24, 0x026E
    16a2:	80 83       	st	Z, r24
    /*  Set Slave Address  */
    TWAR |= ( (I2C_ConfigTypeParam.I2C_SlaveAddress & 0x7F)  << TWA0 );
    16a4:	a2 e2       	ldi	r26, 0x22	; 34
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e2 e2       	ldi	r30, 0x22	; 34
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	80 91 6f 02 	lds	r24, 0x026F
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	82 2b       	or	r24, r18
    16be:	8c 93       	st	X, r24
    /* Enable I2C  */
    SET_BIT(TWCR,TWEN);
    16c0:	a6 e5       	ldi	r26, 0x56	; 86
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e6 e5       	ldi	r30, 0x56	; 86
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	84 60       	ori	r24, 0x04	; 4
    16cc:	8c 93       	st	X, r24
 
}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <I2C_Start>:


void I2C_Start(void)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    /*  Set start Bit in I2C  & flag bit  to clear it  */
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    16dc:	e6 e5       	ldi	r30, 0x56	; 86
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	84 ea       	ldi	r24, 0xA4	; 164
    16e2:	80 83       	st	Z, r24

    /*  Wait until this flag  become  High value (start bit send successfully)*/
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16e4:	e6 e5       	ldi	r30, 0x56	; 86
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	88 23       	and	r24, r24
    16ec:	dc f7       	brge	.-10     	; 0x16e4 <I2C_Start+0x10>
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <I2C_Stop>:


void I2C_Stop(void)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    /*  Set bit of stop & clear I2C Flag*/
    TWCR |= (1 << TWINT) | (1 << TWSTO) | (1<<TWEN) ;
    16fc:	a6 e5       	ldi	r26, 0x56	; 86
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e6 e5       	ldi	r30, 0x56	; 86
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	84 69       	ori	r24, 0x94	; 148
    1708:	8c 93       	st	X, r24
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <I2C_WriteByte>:


void I2C_WriteByte(uint8 data)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    /*  Should Load I2C Data register before Clear flag*/
    TWDR = data ;
    171c:	e3 e2       	ldi	r30, 0x23	; 35
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	80 83       	st	Z, r24
    /*  Set flag bit  to clear it */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1724:	e6 e5       	ldi	r30, 0x56	; 86
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	84 e8       	ldi	r24, 0x84	; 132
    172a:	80 83       	st	Z, r24
    /*  Wait until this flag  become  High value (AS Slave address + W/R OR date was are sendded successfully)*/
    while(BIT_IS_CLEAR(TWCR,TWINT));
    172c:	e6 e5       	ldi	r30, 0x56	; 86
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	dc f7       	brge	.-10     	; 0x172c <I2C_WriteByte+0x1c>
}
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <I2C_ReadByteWithACK>:

uint8 I2C_ReadByteWithACK(void)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    /*  Return ACk @end of data or this address called  & clear flag  */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1746:	e6 e5       	ldi	r30, 0x56	; 86
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	84 ec       	ldi	r24, 0xC4	; 196
    174c:	80 83       	st	Z, r24
    /*  Wait until data received*/
    while(BIT_IS_CLEAR(TWCR,TWINT));
    174e:	e6 e5       	ldi	r30, 0x56	; 86
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 23       	and	r24, r24
    1756:	dc f7       	brge	.-10     	; 0x174e <I2C_ReadByteWithACK+0x10>
    return TWDR;
    1758:	e3 e2       	ldi	r30, 0x23	; 35
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <I2C_ReadByteWithNACK>:

uint8 I2C_ReadByteWithNACK(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    /*  clear flag  */
    TWCR = (1 << TWINT) | (1 << TWEN);
    176c:	e6 e5       	ldi	r30, 0x56	; 86
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	84 e8       	ldi	r24, 0x84	; 132
    1772:	80 83       	st	Z, r24
    /*  Wait until data received*/
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1774:	e6 e5       	ldi	r30, 0x56	; 86
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 23       	and	r24, r24
    177c:	dc f7       	brge	.-10     	; 0x1774 <I2C_ReadByteWithNACK+0x10>
    return TWDR;
    177e:	e3 e2       	ldi	r30, 0x23	; 35
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    return (TWSR & 0xF8);
    1792:	e1 e2       	ldi	r30, 0x21	; 33
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	88 7f       	andi	r24, 0xF8	; 248
}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <I2C_EnableGeneralCallRecognition>:


void I2C_EnableGeneralCallRecognition(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TWAR,TWGCE);
    17a8:	a2 e2       	ldi	r26, 0x22	; 34
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e2 e2       	ldi	r30, 0x22	; 34
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	81 60       	ori	r24, 0x01	; 1
    17b4:	8c 93       	st	X, r24
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <I2C_DisableGeneralCallRecognition>:

void I2C_DisableGeneralCallRecognition(void)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TWAR,TWGCE);
    17c4:	a2 e2       	ldi	r26, 0x22	; 34
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e2 e2       	ldi	r30, 0x22	; 34
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8e 7f       	andi	r24, 0xFE	; 254
    17d0:	8c 93       	st	X, r24
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	0f 92       	push	r0
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    17e2:	19 82       	std	Y+1, r1	; 0x01
    17e4:	57 c0       	rjmp	.+174    	; 0x1894 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	c9 01       	movw	r24, r18
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	82 0f       	add	r24, r18
    17f4:	93 1f       	adc	r25, r19
    17f6:	fc 01       	movw	r30, r24
    17f8:	ef 58       	subi	r30, 0x8F	; 143
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	80 81       	ld	r24, Z
    17fe:	88 30       	cpi	r24, 0x08	; 8
    1800:	e9 f4       	brne	.+58     	; 0x183c <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	c9 01       	movw	r24, r18
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	82 0f       	add	r24, r18
    1810:	93 1f       	adc	r25, r19
    1812:	fc 01       	movw	r30, r24
    1814:	e0 59       	subi	r30, 0x90	; 144
    1816:	fd 4f       	sbci	r31, 0xFD	; 253
    1818:	40 81       	ld	r20, Z
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	c9 01       	movw	r24, r18
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	82 0f       	add	r24, r18
    1828:	93 1f       	adc	r25, r19
    182a:	fc 01       	movw	r30, r24
    182c:	ee 58       	subi	r30, 0x8E	; 142
    182e:	fd 4f       	sbci	r31, 0xFD	; 253
    1830:	90 81       	ld	r25, Z
    1832:	84 2f       	mov	r24, r20
    1834:	69 2f       	mov	r22, r25
    1836:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <GPIO_SetPortDirection>
    183a:	29 c0       	rjmp	.+82     	; 0x188e <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	c9 01       	movw	r24, r18
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	82 0f       	add	r24, r18
    184a:	93 1f       	adc	r25, r19
    184c:	fc 01       	movw	r30, r24
    184e:	e0 59       	subi	r30, 0x90	; 144
    1850:	fd 4f       	sbci	r31, 0xFD	; 253
    1852:	50 81       	ld	r21, Z
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	c9 01       	movw	r24, r18
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	82 0f       	add	r24, r18
    1862:	93 1f       	adc	r25, r19
    1864:	fc 01       	movw	r30, r24
    1866:	ef 58       	subi	r30, 0x8F	; 143
    1868:	fd 4f       	sbci	r31, 0xFD	; 253
    186a:	40 81       	ld	r20, Z
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	c9 01       	movw	r24, r18
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	fc 01       	movw	r30, r24
    187e:	ee 58       	subi	r30, 0x8E	; 142
    1880:	fd 4f       	sbci	r31, 0xFD	; 253
    1882:	90 81       	ld	r25, Z
    1884:	85 2f       	mov	r24, r21
    1886:	64 2f       	mov	r22, r20
    1888:	49 2f       	mov	r20, r25
    188a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	88 23       	and	r24, r24
    1898:	09 f4       	brne	.+2      	; 0x189c <GPIO_init+0xc4>
    189a:	a5 cf       	rjmp	.-182    	; 0x17e6 <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_SetPinDirection+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_SetPinDirection+0x8>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
    18b6:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <GPIO_SetPinDirection+0x1c>
    18be:	d8 c1       	rjmp	.+944    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <GPIO_SetPinDirection+0x24>
    18c6:	d4 c1       	rjmp	.+936    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	2c 83       	std	Y+4, r18	; 0x04
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <GPIO_SetPinDirection+0x3a>
    18dc:	84 c0       	rjmp	.+264    	; 0x19e6 <GPIO_SetPinDirection+0x142>
    18de:	2c 81       	ldd	r18, Y+4	; 0x04
    18e0:	3d 81       	ldd	r19, Y+5	; 0x05
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <GPIO_SetPinDirection+0x4e>
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	71 f0       	breq	.+28     	; 0x190c <GPIO_SetPinDirection+0x68>
    18f0:	bf c1       	rjmp	.+894    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	3d 81       	ldd	r19, Y+5	; 0x05
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <GPIO_SetPinDirection+0x5a>
    18fc:	e1 c0       	rjmp	.+450    	; 0x1ac0 <GPIO_SetPinDirection+0x21c>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <GPIO_SetPinDirection+0x66>
    1908:	48 c1       	rjmp	.+656    	; 0x1b9a <GPIO_SetPinDirection+0x2f6>
    190a:	b2 c1       	rjmp	.+868    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 23       	and	r24, r24
    1910:	41 f5       	brne	.+80     	; 0x1962 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    1912:	aa e3       	ldi	r26, 0x3A	; 58
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ea e3       	ldi	r30, 0x3A	; 58
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_SetPinDirection+0x8a>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	2a 95       	dec	r18
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_SetPinDirection+0x86>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    1938:	ab e3       	ldi	r26, 0x3B	; 59
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	eb e3       	ldi	r30, 0x3B	; 59
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_SetPinDirection+0xb2>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_SetPinDirection+0xae>
    195a:	80 95       	com	r24
    195c:	84 23       	and	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	87 c1       	rjmp	.+782    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	39 f5       	brne	.+78     	; 0x19b6 <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    1968:	aa e3       	ldi	r26, 0x3A	; 58
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea e3       	ldi	r30, 0x3A	; 58
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_SetPinDirection+0xe0>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	2a 95       	dec	r18
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <GPIO_SetPinDirection+0xdc>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    198e:	ab e3       	ldi	r26, 0x3B	; 59
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e3       	ldi	r30, 0x3B	; 59
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <GPIO_SetPinDirection+0x108>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <GPIO_SetPinDirection+0x104>
    19b0:	84 2b       	or	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	5d c1       	rjmp	.+698    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	09 f0       	breq	.+2      	; 0x19be <GPIO_SetPinDirection+0x11a>
    19bc:	59 c1       	rjmp	.+690    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    19be:	aa e3       	ldi	r26, 0x3A	; 58
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ea e3       	ldi	r30, 0x3A	; 58
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <GPIO_SetPinDirection+0x138>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <GPIO_SetPinDirection+0x134>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	45 c1       	rjmp	.+650    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	88 23       	and	r24, r24
    19ea:	41 f5       	brne	.+80     	; 0x1a3c <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    19ec:	a7 e3       	ldi	r26, 0x37	; 55
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e7 e3       	ldi	r30, 0x37	; 55
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_SetPinDirection+0x164>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	2a 95       	dec	r18
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_SetPinDirection+0x160>
    1a0c:	80 95       	com	r24
    1a0e:	84 23       	and	r24, r20
    1a10:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    1a12:	a8 e3       	ldi	r26, 0x38	; 56
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_SetPinDirection+0x18c>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_SetPinDirection+0x188>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	1a c1       	rjmp	.+564    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	39 f5       	brne	.+78     	; 0x1a90 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    1a42:	a7 e3       	ldi	r26, 0x37	; 55
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e7 e3       	ldi	r30, 0x37	; 55
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_SetPinDirection+0x1ba>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	2a 95       	dec	r18
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_SetPinDirection+0x1b6>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_SetPinDirection+0x1e2>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_SetPinDirection+0x1de>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	f0 c0       	rjmp	.+480    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	82 30       	cpi	r24, 0x02	; 2
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <GPIO_SetPinDirection+0x1f4>
    1a96:	ec c0       	rjmp	.+472    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    1a98:	a7 e3       	ldi	r26, 0x37	; 55
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e7 e3       	ldi	r30, 0x37	; 55
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GPIO_SetPinDirection+0x212>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <GPIO_SetPinDirection+0x20e>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	d8 c0       	rjmp	.+432    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	88 23       	and	r24, r24
    1ac4:	41 f5       	brne	.+80     	; 0x1b16 <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    1ac6:	a4 e3       	ldi	r26, 0x34	; 52
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e4 e3       	ldi	r30, 0x34	; 52
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <GPIO_SetPinDirection+0x23e>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	2a 95       	dec	r18
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <GPIO_SetPinDirection+0x23a>
    1ae6:	80 95       	com	r24
    1ae8:	84 23       	and	r24, r20
    1aea:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    1aec:	a5 e3       	ldi	r26, 0x35	; 53
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e3       	ldi	r30, 0x35	; 53
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <GPIO_SetPinDirection+0x266>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <GPIO_SetPinDirection+0x262>
    1b0e:	80 95       	com	r24
    1b10:	84 23       	and	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	ad c0       	rjmp	.+346    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	39 f5       	brne	.+78     	; 0x1b6a <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    1b1c:	a4 e3       	ldi	r26, 0x34	; 52
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e4 e3       	ldi	r30, 0x34	; 52
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_SetPinDirection+0x294>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	2a 95       	dec	r18
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_SetPinDirection+0x290>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    1b42:	a5 e3       	ldi	r26, 0x35	; 53
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e3       	ldi	r30, 0x35	; 53
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <GPIO_SetPinDirection+0x2bc>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <GPIO_SetPinDirection+0x2b8>
    1b64:	84 2b       	or	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	83 c0       	rjmp	.+262    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <GPIO_SetPinDirection+0x2ce>
    1b70:	7f c0       	rjmp	.+254    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    1b72:	a4 e3       	ldi	r26, 0x34	; 52
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e4 e3       	ldi	r30, 0x34	; 52
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_SetPinDirection+0x2ec>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_SetPinDirection+0x2e8>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	6b c0       	rjmp	.+214    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	88 23       	and	r24, r24
    1b9e:	41 f5       	brne	.+80     	; 0x1bf0 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    1ba0:	a1 e3       	ldi	r26, 0x31	; 49
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e1 e3       	ldi	r30, 0x31	; 49
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <GPIO_SetPinDirection+0x318>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <GPIO_SetPinDirection+0x314>
    1bc0:	80 95       	com	r24
    1bc2:	84 23       	and	r24, r20
    1bc4:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    1bc6:	a2 e3       	ldi	r26, 0x32	; 50
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_SetPinDirection+0x340>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_SetPinDirection+0x33c>
    1be8:	80 95       	com	r24
    1bea:	84 23       	and	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	40 c0       	rjmp	.+128    	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	39 f5       	brne	.+78     	; 0x1c44 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    1bf6:	a1 e3       	ldi	r26, 0x31	; 49
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e1 e3       	ldi	r30, 0x31	; 49
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <GPIO_SetPinDirection+0x36e>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	2a 95       	dec	r18
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <GPIO_SetPinDirection+0x36a>
    1c16:	80 95       	com	r24
    1c18:	84 23       	and	r24, r20
    1c1a:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    1c1c:	a2 e3       	ldi	r26, 0x32	; 50
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e2 e3       	ldi	r30, 0x32	; 50
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <GPIO_SetPinDirection+0x396>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <GPIO_SetPinDirection+0x392>
    1c3e:	84 2b       	or	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	16 c0       	rjmp	.+44     	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	99 f4       	brne	.+38     	; 0x1c70 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    1c4a:	a1 e3       	ldi	r26, 0x31	; 49
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e1 e3       	ldi	r30, 0x31	; 49
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 2e       	mov	r0, r18
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <GPIO_SetPinDirection+0x3c4>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	0a 94       	dec	r0
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <GPIO_SetPinDirection+0x3c0>
    1c6c:	84 2b       	or	r24, r20
    1c6e:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <GPIO_ReadPin+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <GPIO_ReadPin+0x8>
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1c92:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	84 30       	cpi	r24, 0x04	; 4
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <GPIO_ReadPin+0x1c>
    1c9a:	84 c0       	rjmp	.+264    	; 0x1da4 <GPIO_ReadPin+0x124>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <GPIO_ReadPin+0x24>
    1ca2:	80 c0       	rjmp	.+256    	; 0x1da4 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	3d 83       	std	Y+5, r19	; 0x05
    1cac:	2c 83       	std	Y+4, r18	; 0x04
    1cae:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb2:	41 30       	cpi	r20, 0x01	; 1
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	79 f1       	breq	.+94     	; 0x1d16 <GPIO_ReadPin+0x96>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	34 f4       	brge	.+12     	; 0x1cce <GPIO_ReadPin+0x4e>
    1cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc6:	21 15       	cp	r18, r1
    1cc8:	31 05       	cpc	r19, r1
    1cca:	69 f0       	breq	.+26     	; 0x1ce6 <GPIO_ReadPin+0x66>
    1ccc:	6b c0       	rjmp	.+214    	; 0x1da4 <GPIO_ReadPin+0x124>
    1cce:	4c 81       	ldd	r20, Y+4	; 0x04
    1cd0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cd2:	42 30       	cpi	r20, 0x02	; 2
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	b9 f1       	breq	.+110    	; 0x1d46 <GPIO_ReadPin+0xc6>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <GPIO_ReadPin+0x64>
    1ce2:	49 c0       	rjmp	.+146    	; 0x1d76 <GPIO_ReadPin+0xf6>
    1ce4:	5f c0       	rjmp	.+190    	; 0x1da4 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    1ce6:	e9 e3       	ldi	r30, 0x39	; 57
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <GPIO_ReadPin+0x7e>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <GPIO_ReadPin+0x7a>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	88 23       	and	r24, r24
    1d0a:	19 f0       	breq	.+6      	; 0x1d12 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	49 c0       	rjmp	.+146    	; 0x1da4 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	47 c0       	rjmp	.+142    	; 0x1da4 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    1d16:	e6 e3       	ldi	r30, 0x36	; 54
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a9 01       	movw	r20, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <GPIO_ReadPin+0xae>
    1d2a:	55 95       	asr	r21
    1d2c:	47 95       	ror	r20
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <GPIO_ReadPin+0xaa>
    1d32:	ca 01       	movw	r24, r20
    1d34:	81 70       	andi	r24, 0x01	; 1
    1d36:	90 70       	andi	r25, 0x00	; 0
    1d38:	88 23       	and	r24, r24
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	31 c0       	rjmp	.+98     	; 0x1da4 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	2f c0       	rjmp	.+94     	; 0x1da4 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    1d46:	e3 e3       	ldi	r30, 0x33	; 51
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a9 01       	movw	r20, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <GPIO_ReadPin+0xde>
    1d5a:	55 95       	asr	r21
    1d5c:	47 95       	ror	r20
    1d5e:	8a 95       	dec	r24
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <GPIO_ReadPin+0xda>
    1d62:	ca 01       	movw	r24, r20
    1d64:	81 70       	andi	r24, 0x01	; 1
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	88 23       	and	r24, r24
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	19 c0       	rjmp	.+50     	; 0x1da4 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	17 c0       	rjmp	.+46     	; 0x1da4 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    1d76:	e0 e3       	ldi	r30, 0x30	; 48
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a9 01       	movw	r20, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <GPIO_ReadPin+0x10e>
    1d8a:	55 95       	asr	r21
    1d8c:	47 95       	ror	r20
    1d8e:	8a 95       	dec	r24
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <GPIO_ReadPin+0x10a>
    1d92:	ca 01       	movw	r24, r20
    1d94:	81 70       	andi	r24, 0x01	; 1
    1d96:	90 70       	andi	r25, 0x00	; 0
    1d98:	88 23       	and	r24, r24
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1da2:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <GPIO_WritePin+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <GPIO_WritePin+0x8>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	6a 83       	std	Y+2, r22	; 0x02
    1dc8:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	84 30       	cpi	r24, 0x04	; 4
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <GPIO_WritePin+0x1c>
    1dd0:	e4 c0       	rjmp	.+456    	; 0x1f9a <GPIO_WritePin+0x1e4>
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	88 30       	cpi	r24, 0x08	; 8
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <GPIO_WritePin+0x24>
    1dd8:	e0 c0       	rjmp	.+448    	; 0x1f9a <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	3d 83       	std	Y+5, r19	; 0x05
    1de2:	2c 83       	std	Y+4, r18	; 0x04
    1de4:	8c 81       	ldd	r24, Y+4	; 0x04
    1de6:	9d 81       	ldd	r25, Y+5	; 0x05
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	91 05       	cpc	r25, r1
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <GPIO_WritePin+0x3a>
    1dee:	47 c0       	rjmp	.+142    	; 0x1e7e <GPIO_WritePin+0xc8>
    1df0:	2c 81       	ldd	r18, Y+4	; 0x04
    1df2:	3d 81       	ldd	r19, Y+5	; 0x05
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	31 05       	cpc	r19, r1
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <GPIO_WritePin+0x4e>
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <GPIO_WritePin+0x68>
    1e02:	cb c0       	rjmp	.+406    	; 0x1f9a <GPIO_WritePin+0x1e4>
    1e04:	2c 81       	ldd	r18, Y+4	; 0x04
    1e06:	3d 81       	ldd	r19, Y+5	; 0x05
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <GPIO_WritePin+0x5a>
    1e0e:	67 c0       	rjmp	.+206    	; 0x1ede <GPIO_WritePin+0x128>
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <GPIO_WritePin+0x66>
    1e1a:	91 c0       	rjmp	.+290    	; 0x1f3e <GPIO_WritePin+0x188>
    1e1c:	be c0       	rjmp	.+380    	; 0x1f9a <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	a1 f4       	brne	.+40     	; 0x1e4c <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1e24:	ab e3       	ldi	r26, 0x3B	; 59
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	eb e3       	ldi	r30, 0x3B	; 59
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <GPIO_WritePin+0x8c>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <GPIO_WritePin+0x88>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	a7 c0       	rjmp	.+334    	; 0x1f9a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <GPIO_WritePin+0x9e>
    1e52:	a3 c0       	rjmp	.+326    	; 0x1f9a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    1e54:	ab e3       	ldi	r26, 0x3B	; 59
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	eb e3       	ldi	r30, 0x3B	; 59
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <GPIO_WritePin+0xbc>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <GPIO_WritePin+0xb8>
    1e76:	80 95       	com	r24
    1e78:	84 23       	and	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	8e c0       	rjmp	.+284    	; 0x1f9a <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	a1 f4       	brne	.+40     	; 0x1eac <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1e84:	a8 e3       	ldi	r26, 0x38	; 56
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e8 e3       	ldi	r30, 0x38	; 56
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_WritePin+0xec>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_WritePin+0xe8>
    1ea6:	84 2b       	or	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	77 c0       	rjmp	.+238    	; 0x1f9a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <GPIO_WritePin+0xfe>
    1eb2:	73 c0       	rjmp	.+230    	; 0x1f9a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1eb4:	a8 e3       	ldi	r26, 0x38	; 56
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e8 e3       	ldi	r30, 0x38	; 56
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <GPIO_WritePin+0x11c>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <GPIO_WritePin+0x118>
    1ed6:	80 95       	com	r24
    1ed8:	84 23       	and	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	5e c0       	rjmp	.+188    	; 0x1f9a <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	a1 f4       	brne	.+40     	; 0x1f0c <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1ee4:	a5 e3       	ldi	r26, 0x35	; 53
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e5 e3       	ldi	r30, 0x35	; 53
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <GPIO_WritePin+0x14c>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <GPIO_WritePin+0x148>
    1f06:	84 2b       	or	r24, r20
    1f08:	8c 93       	st	X, r24
    1f0a:	47 c0       	rjmp	.+142    	; 0x1f9a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	88 23       	and	r24, r24
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <GPIO_WritePin+0x15e>
    1f12:	43 c0       	rjmp	.+134    	; 0x1f9a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    1f14:	a5 e3       	ldi	r26, 0x35	; 53
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e5 e3       	ldi	r30, 0x35	; 53
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <GPIO_WritePin+0x17c>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <GPIO_WritePin+0x178>
    1f36:	80 95       	com	r24
    1f38:	84 23       	and	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	2e c0       	rjmp	.+92     	; 0x1f9a <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	a1 f4       	brne	.+40     	; 0x1f6c <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    1f44:	a2 e3       	ldi	r26, 0x32	; 50
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <GPIO_WritePin+0x1ac>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <GPIO_WritePin+0x1a8>
    1f66:	84 2b       	or	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	17 c0       	rjmp	.+46     	; 0x1f9a <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 23       	and	r24, r24
    1f70:	a1 f4       	brne	.+40     	; 0x1f9a <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    1f72:	a2 e3       	ldi	r26, 0x32	; 50
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e2 e3       	ldi	r30, 0x32	; 50
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <GPIO_WritePin+0x1da>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <GPIO_WritePin+0x1d6>
    1f94:	80 95       	com	r24
    1f96:	84 23       	and	r24, r20
    1f98:	8c 93       	st	X, r24
                break;

        }
    }
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <GPIO_TogglePin+0x6>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <GPIO_TogglePin+0x8>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <GPIO_TogglePin+0x18>
    1fc0:	72 c0       	rjmp	.+228    	; 0x20a6 <GPIO_TogglePin+0xfc>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	88 30       	cpi	r24, 0x08	; 8
    1fc6:	08 f0       	brcs	.+2      	; 0x1fca <GPIO_TogglePin+0x20>
    1fc8:	6e c0       	rjmp	.+220    	; 0x20a6 <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	3c 83       	std	Y+4, r19	; 0x04
    1fd2:	2b 83       	std	Y+3, r18	; 0x03
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	91 05       	cpc	r25, r1
    1fdc:	49 f1       	breq	.+82     	; 0x2030 <GPIO_TogglePin+0x86>
    1fde:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <GPIO_TogglePin+0x48>
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	61 f0       	breq	.+24     	; 0x2008 <GPIO_TogglePin+0x5e>
    1ff0:	5a c0       	rjmp	.+180    	; 0x20a6 <GPIO_TogglePin+0xfc>
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	71 f1       	breq	.+92     	; 0x2058 <GPIO_TogglePin+0xae>
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	91 05       	cpc	r25, r1
    2004:	e9 f1       	breq	.+122    	; 0x2080 <GPIO_TogglePin+0xd6>
    2006:	4f c0       	rjmp	.+158    	; 0x20a6 <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    2008:	ab e3       	ldi	r26, 0x3B	; 59
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	eb e3       	ldi	r30, 0x3B	; 59
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	48 2f       	mov	r20, r24
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	02 2e       	mov	r0, r18
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <GPIO_TogglePin+0x7c>
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	0a 94       	dec	r0
    2028:	e2 f7       	brpl	.-8      	; 0x2022 <GPIO_TogglePin+0x78>
    202a:	84 27       	eor	r24, r20
    202c:	8c 93       	st	X, r24
    202e:	3b c0       	rjmp	.+118    	; 0x20a6 <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    2030:	a8 e3       	ldi	r26, 0x38	; 56
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e8 e3       	ldi	r30, 0x38	; 56
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 2e       	mov	r0, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <GPIO_TogglePin+0xa4>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <GPIO_TogglePin+0xa0>
    2052:	84 27       	eor	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	27 c0       	rjmp	.+78     	; 0x20a6 <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    2058:	a5 e3       	ldi	r26, 0x35	; 53
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e3       	ldi	r30, 0x35	; 53
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <GPIO_TogglePin+0xcc>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <GPIO_TogglePin+0xc8>
    207a:	84 27       	eor	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	13 c0       	rjmp	.+38     	; 0x20a6 <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    2080:	a2 e3       	ldi	r26, 0x32	; 50
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e2 e3       	ldi	r30, 0x32	; 50
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	48 2f       	mov	r20, r24
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <GPIO_TogglePin+0xf4>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <GPIO_TogglePin+0xf0>
    20a2:	84 27       	eor	r24, r20
    20a4:	8c 93       	st	X, r24
                break;

        }
    }

}
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <GPIO_SetPortDirection+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <GPIO_SetPortDirection+0x8>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	84 30       	cpi	r24, 0x04	; 4
    20c8:	08 f0       	brcs	.+2      	; 0x20cc <GPIO_SetPortDirection+0x18>
    20ca:	96 c0       	rjmp	.+300    	; 0x21f8 <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	3c 83       	std	Y+4, r19	; 0x04
    20d4:	2b 83       	std	Y+3, r18	; 0x03
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	a9 f1       	breq	.+106    	; 0x214a <GPIO_SetPortDirection+0x96>
    20e0:	2b 81       	ldd	r18, Y+3	; 0x03
    20e2:	3c 81       	ldd	r19, Y+4	; 0x04
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <GPIO_SetPortDirection+0x40>
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	71 f0       	breq	.+28     	; 0x210e <GPIO_SetPortDirection+0x5a>
    20f2:	82 c0       	rjmp	.+260    	; 0x21f8 <GPIO_SetPortDirection+0x144>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	09 f4       	brne	.+2      	; 0x2100 <GPIO_SetPortDirection+0x4c>
    20fe:	43 c0       	rjmp	.+134    	; 0x2186 <GPIO_SetPortDirection+0xd2>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	83 30       	cpi	r24, 0x03	; 3
    2106:	91 05       	cpc	r25, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <GPIO_SetPortDirection+0x58>
    210a:	5a c0       	rjmp	.+180    	; 0x21c0 <GPIO_SetPortDirection+0x10c>
    210c:	75 c0       	rjmp	.+234    	; 0x21f8 <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	88 23       	and	r24, r24
    2112:	39 f4       	brne	.+14     	; 0x2122 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    2114:	ea e3       	ldi	r30, 0x3A	; 58
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    211a:	eb e3       	ldi	r30, 0x3B	; 59
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	10 82       	st	Z, r1
    2120:	6b c0       	rjmp	.+214    	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	41 f4       	brne	.+16     	; 0x2138 <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    2128:	ea e3       	ldi	r30, 0x3A	; 58
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    212e:	eb e3       	ldi	r30, 0x3B	; 59
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	80 83       	st	Z, r24
    2136:	60 c0       	rjmp	.+192    	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	8f 3f       	cpi	r24, 0xFF	; 255
    213c:	09 f0       	breq	.+2      	; 0x2140 <GPIO_SetPortDirection+0x8c>
    213e:	5c c0       	rjmp	.+184    	; 0x21f8 <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    2140:	ea e3       	ldi	r30, 0x3A	; 58
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	80 83       	st	Z, r24
    2148:	57 c0       	rjmp	.+174    	; 0x21f8 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	88 23       	and	r24, r24
    214e:	39 f4       	brne	.+14     	; 0x215e <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    2150:	e7 e3       	ldi	r30, 0x37	; 55
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    2156:	e8 e3       	ldi	r30, 0x38	; 56
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	10 82       	st	Z, r1
    215c:	4d c0       	rjmp	.+154    	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	41 f4       	brne	.+16     	; 0x2174 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    2164:	e7 e3       	ldi	r30, 0x37	; 55
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    216a:	e8 e3       	ldi	r30, 0x38	; 56
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	80 83       	st	Z, r24
    2172:	42 c0       	rjmp	.+132    	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	8f 3f       	cpi	r24, 0xFF	; 255
    2178:	09 f0       	breq	.+2      	; 0x217c <GPIO_SetPortDirection+0xc8>
    217a:	3e c0       	rjmp	.+124    	; 0x21f8 <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    217c:	e7 e3       	ldi	r30, 0x37	; 55
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	80 83       	st	Z, r24
    2184:	39 c0       	rjmp	.+114    	; 0x21f8 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	88 23       	and	r24, r24
    218a:	39 f4       	brne	.+14     	; 0x219a <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    218c:	e4 e3       	ldi	r30, 0x34	; 52
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    2192:	e5 e3       	ldi	r30, 0x35	; 53
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	10 82       	st	Z, r1
    2198:	2f c0       	rjmp	.+94     	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	41 f4       	brne	.+16     	; 0x21b0 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    21a0:	e4 e3       	ldi	r30, 0x34	; 52
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    21a6:	e5 e3       	ldi	r30, 0x35	; 53
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	80 83       	st	Z, r24
    21ae:	24 c0       	rjmp	.+72     	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	8f 3f       	cpi	r24, 0xFF	; 255
    21b4:	09 f5       	brne	.+66     	; 0x21f8 <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    21b6:	e4 e3       	ldi	r30, 0x34	; 52
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	8f ef       	ldi	r24, 0xFF	; 255
    21bc:	80 83       	st	Z, r24
    21be:	1c c0       	rjmp	.+56     	; 0x21f8 <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	88 23       	and	r24, r24
    21c4:	39 f4       	brne	.+14     	; 0x21d4 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    21c6:	e1 e3       	ldi	r30, 0x31	; 49
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    21cc:	e2 e3       	ldi	r30, 0x32	; 50
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	10 82       	st	Z, r1
    21d2:	12 c0       	rjmp	.+36     	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	41 f4       	brne	.+16     	; 0x21ea <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    21da:	e1 e3       	ldi	r30, 0x31	; 49
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    21e0:	e2 e3       	ldi	r30, 0x32	; 50
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	80 83       	st	Z, r24
    21e8:	07 c0       	rjmp	.+14     	; 0x21f8 <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	8f 3f       	cpi	r24, 0xFF	; 255
    21ee:	21 f4       	brne	.+8      	; 0x21f8 <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    21f0:	e1 e3       	ldi	r30, 0x31	; 49
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <GPIO_ReadPort+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <GPIO_ReadPort+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    2214:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	84 30       	cpi	r24, 0x04	; 4
    221a:	90 f5       	brcc	.+100    	; 0x2280 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	3c 83       	std	Y+4, r19	; 0x04
    2224:	2b 83       	std	Y+3, r18	; 0x03
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	91 05       	cpc	r25, r1
    222e:	d1 f0       	breq	.+52     	; 0x2264 <GPIO_ReadPort+0x5e>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	22 30       	cpi	r18, 0x02	; 2
    2236:	31 05       	cpc	r19, r1
    2238:	2c f4       	brge	.+10     	; 0x2244 <GPIO_ReadPort+0x3e>
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	61 f0       	breq	.+24     	; 0x225a <GPIO_ReadPort+0x54>
    2242:	1e c0       	rjmp	.+60     	; 0x2280 <GPIO_ReadPort+0x7a>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	81 f0       	breq	.+32     	; 0x226e <GPIO_ReadPort+0x68>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	83 30       	cpi	r24, 0x03	; 3
    2254:	91 05       	cpc	r25, r1
    2256:	81 f0       	breq	.+32     	; 0x2278 <GPIO_ReadPort+0x72>
    2258:	13 c0       	rjmp	.+38     	; 0x2280 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    225a:	e9 e3       	ldi	r30, 0x39	; 57
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	0e c0       	rjmp	.+28     	; 0x2280 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    2264:	e6 e3       	ldi	r30, 0x36	; 54
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	09 c0       	rjmp	.+18     	; 0x2280 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    226e:	e3 e3       	ldi	r30, 0x33	; 51
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    2278:	e0 e3       	ldi	r30, 0x30	; 48
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <GPIO_WritePort+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <GPIO_WritePort+0x8>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	90 f5       	brcc	.+100    	; 0x230a <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	3c 83       	std	Y+4, r19	; 0x04
    22ae:	2b 83       	std	Y+3, r18	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	81 30       	cpi	r24, 0x01	; 1
    22b6:	91 05       	cpc	r25, r1
    22b8:	d1 f0       	breq	.+52     	; 0x22ee <GPIO_WritePort+0x5e>
    22ba:	2b 81       	ldd	r18, Y+3	; 0x03
    22bc:	3c 81       	ldd	r19, Y+4	; 0x04
    22be:	22 30       	cpi	r18, 0x02	; 2
    22c0:	31 05       	cpc	r19, r1
    22c2:	2c f4       	brge	.+10     	; 0x22ce <GPIO_WritePort+0x3e>
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	61 f0       	breq	.+24     	; 0x22e4 <GPIO_WritePort+0x54>
    22cc:	1e c0       	rjmp	.+60     	; 0x230a <GPIO_WritePort+0x7a>
    22ce:	2b 81       	ldd	r18, Y+3	; 0x03
    22d0:	3c 81       	ldd	r19, Y+4	; 0x04
    22d2:	22 30       	cpi	r18, 0x02	; 2
    22d4:	31 05       	cpc	r19, r1
    22d6:	81 f0       	breq	.+32     	; 0x22f8 <GPIO_WritePort+0x68>
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	83 30       	cpi	r24, 0x03	; 3
    22de:	91 05       	cpc	r25, r1
    22e0:	81 f0       	breq	.+32     	; 0x2302 <GPIO_WritePort+0x72>
    22e2:	13 c0       	rjmp	.+38     	; 0x230a <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    22e4:	eb e3       	ldi	r30, 0x3B	; 59
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	80 83       	st	Z, r24
    22ec:	0e c0       	rjmp	.+28     	; 0x230a <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    22ee:	e8 e3       	ldi	r30, 0x38	; 56
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	80 83       	st	Z, r24
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    22f8:	e5 e3       	ldi	r30, 0x35	; 53
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	80 83       	st	Z, r24
    2300:	04 c0       	rjmp	.+8      	; 0x230a <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    2302:	e2 e3       	ldi	r30, 0x32	; 50
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	80 83       	st	Z, r24
                break ;
        }
    }
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <GPIO_TogglePort+0x6>
    231e:	0f 92       	push	r0
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	84 30       	cpi	r24, 0x04	; 4
    232a:	08 f0       	brcs	.+2      	; 0x232e <GPIO_TogglePort+0x16>
    232c:	3e c0       	rjmp	.+124    	; 0x23aa <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	3b 83       	std	Y+3, r19	; 0x03
    2336:	2a 83       	std	Y+2, r18	; 0x02
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	91 05       	cpc	r25, r1
    2340:	e9 f0       	breq	.+58     	; 0x237c <GPIO_TogglePort+0x64>
    2342:	2a 81       	ldd	r18, Y+2	; 0x02
    2344:	3b 81       	ldd	r19, Y+3	; 0x03
    2346:	22 30       	cpi	r18, 0x02	; 2
    2348:	31 05       	cpc	r19, r1
    234a:	2c f4       	brge	.+10     	; 0x2356 <GPIO_TogglePort+0x3e>
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	61 f0       	breq	.+24     	; 0x236c <GPIO_TogglePort+0x54>
    2354:	2a c0       	rjmp	.+84     	; 0x23aa <GPIO_TogglePort+0x92>
    2356:	2a 81       	ldd	r18, Y+2	; 0x02
    2358:	3b 81       	ldd	r19, Y+3	; 0x03
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	b1 f0       	breq	.+44     	; 0x238c <GPIO_TogglePort+0x74>
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	91 05       	cpc	r25, r1
    2368:	c9 f0       	breq	.+50     	; 0x239c <GPIO_TogglePort+0x84>
    236a:	1f c0       	rjmp	.+62     	; 0x23aa <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    236c:	ab e3       	ldi	r26, 0x3B	; 59
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e3       	ldi	r30, 0x3B	; 59
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 95       	com	r24
    2378:	8c 93       	st	X, r24
    237a:	17 c0       	rjmp	.+46     	; 0x23aa <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    237c:	a8 e3       	ldi	r26, 0x38	; 56
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e8 e3       	ldi	r30, 0x38	; 56
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 95       	com	r24
    2388:	8c 93       	st	X, r24
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    238c:	a5 e3       	ldi	r26, 0x35	; 53
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e5 e3       	ldi	r30, 0x35	; 53
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	80 95       	com	r24
    2398:	8c 93       	st	X, r24
    239a:	07 c0       	rjmp	.+14     	; 0x23aa <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    239c:	a2 e3       	ldi	r26, 0x32	; 50
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e2 e3       	ldi	r30, 0x32	; 50
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	80 95       	com	r24
    23a8:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <__vector_1>:
static volatile void (*g_CallBackPtr_INT0)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT1)(void) = NULL_PTR;
static volatile void (*g_CallBackPtr_INT2)(void) = NULL_PTR;

ISR(INT0)
{
    23b6:	1f 92       	push	r1
    23b8:	0f 92       	push	r0
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	0f 92       	push	r0
    23be:	11 24       	eor	r1, r1
    23c0:	2f 93       	push	r18
    23c2:	3f 93       	push	r19
    23c4:	4f 93       	push	r20
    23c6:	5f 93       	push	r21
    23c8:	6f 93       	push	r22
    23ca:	7f 93       	push	r23
    23cc:	8f 93       	push	r24
    23ce:	9f 93       	push	r25
    23d0:	af 93       	push	r26
    23d2:	bf 93       	push	r27
    23d4:	ef 93       	push	r30
    23d6:	ff 93       	push	r31
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT0 != NULL_PTR)
    23e0:	80 91 f0 02 	lds	r24, 0x02F0
    23e4:	90 91 f1 02 	lds	r25, 0x02F1
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	29 f0       	breq	.+10     	; 0x23f6 <__vector_1+0x40>
    {
        g_CallBackPtr_INT0();
    23ec:	e0 91 f0 02 	lds	r30, 0x02F0
    23f0:	f0 91 f1 02 	lds	r31, 0x02F1
    23f4:	09 95       	icall
    }
}
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	0f 90       	pop	r0
    2418:	1f 90       	pop	r1
    241a:	18 95       	reti

0000241c <__vector_2>:

ISR(INT1)
{
    241c:	1f 92       	push	r1
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	2f 93       	push	r18
    2428:	3f 93       	push	r19
    242a:	4f 93       	push	r20
    242c:	5f 93       	push	r21
    242e:	6f 93       	push	r22
    2430:	7f 93       	push	r23
    2432:	8f 93       	push	r24
    2434:	9f 93       	push	r25
    2436:	af 93       	push	r26
    2438:	bf 93       	push	r27
    243a:	ef 93       	push	r30
    243c:	ff 93       	push	r31
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT1 != NULL_PTR)
    2446:	80 91 f2 02 	lds	r24, 0x02F2
    244a:	90 91 f3 02 	lds	r25, 0x02F3
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	29 f0       	breq	.+10     	; 0x245c <__vector_2+0x40>
    {
        g_CallBackPtr_INT1();
    2452:	e0 91 f2 02 	lds	r30, 0x02F2
    2456:	f0 91 f3 02 	lds	r31, 0x02F3
    245a:	09 95       	icall
    }
}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	ff 91       	pop	r31
    2462:	ef 91       	pop	r30
    2464:	bf 91       	pop	r27
    2466:	af 91       	pop	r26
    2468:	9f 91       	pop	r25
    246a:	8f 91       	pop	r24
    246c:	7f 91       	pop	r23
    246e:	6f 91       	pop	r22
    2470:	5f 91       	pop	r21
    2472:	4f 91       	pop	r20
    2474:	3f 91       	pop	r19
    2476:	2f 91       	pop	r18
    2478:	0f 90       	pop	r0
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	0f 90       	pop	r0
    247e:	1f 90       	pop	r1
    2480:	18 95       	reti

00002482 <__vector_3>:

ISR(INT2)
{
    2482:	1f 92       	push	r1
    2484:	0f 92       	push	r0
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	0f 92       	push	r0
    248a:	11 24       	eor	r1, r1
    248c:	2f 93       	push	r18
    248e:	3f 93       	push	r19
    2490:	4f 93       	push	r20
    2492:	5f 93       	push	r21
    2494:	6f 93       	push	r22
    2496:	7f 93       	push	r23
    2498:	8f 93       	push	r24
    249a:	9f 93       	push	r25
    249c:	af 93       	push	r26
    249e:	bf 93       	push	r27
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackPtr_INT2 != NULL_PTR)
    24ac:	80 91 f4 02 	lds	r24, 0x02F4
    24b0:	90 91 f5 02 	lds	r25, 0x02F5
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	29 f0       	breq	.+10     	; 0x24c2 <__vector_3+0x40>
    {
        g_CallBackPtr_INT2();
    24b8:	e0 91 f4 02 	lds	r30, 0x02F4
    24bc:	f0 91 f5 02 	lds	r31, 0x02F5
    24c0:	09 95       	icall
    }
}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	7f 91       	pop	r23
    24d4:	6f 91       	pop	r22
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <INT0_SetCallBack>:

/**************************                  Function Implement                   **************************/

void INT0_SetCallBack(void(*a_ptr)(void))
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <INT0_SetCallBack+0x6>
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT0 = a_ptr ;
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	90 93 f1 02 	sts	0x02F1, r25
    24fe:	80 93 f0 02 	sts	0x02F0, r24
}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <INT1_SetCallBack>:

void INT1_SetCallBack(void(*a_ptr)(void))
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <INT1_SetCallBack+0x6>
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT1 = a_ptr ;
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	90 93 f3 02 	sts	0x02F3, r25
    2522:	80 93 f2 02 	sts	0x02F2, r24
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <INT2_SetCallBack>:

void INT2_SetCallBack(void(*a_ptr)(void))
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <INT2_SetCallBack+0x6>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
    g_CallBackPtr_INT2 = a_ptr ;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	90 93 f5 02 	sts	0x02F5, r25
    2546:	80 93 f4 02 	sts	0x02F4, r24
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <INT0_init>:


void INT0_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <INT0_init+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN2_ID,input_type);
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	62 e0       	ldi	r22, 0x02	; 2
    2566:	4a 81       	ldd	r20, Y+2	; 0x02
    2568:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xFC) ) | (triggerType << ISC00) ;
    256c:	a5 e5       	ldi	r26, 0x55	; 85
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e5 e5       	ldi	r30, 0x55	; 85
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	98 2f       	mov	r25, r24
    2578:	9c 7f       	andi	r25, 0xFC	; 252
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	89 2b       	or	r24, r25
    257e:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT0_bit);
    2580:	ab e5       	ldi	r26, 0x5B	; 91
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	eb e5       	ldi	r30, 0x5B	; 91
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	80 64       	ori	r24, 0x40	; 64
    258c:	8c 93       	st	X, r24
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <INT1_init>:

void INT1_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <INT1_init+0x6>
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTD_ID,PIN3_ID,input_type);
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	63 e0       	ldi	r22, 0x03	; 3
    25aa:	4a 81       	ldd	r20, Y+2	; 0x02
    25ac:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    MCUCR = ( MCUCR & (0xF3) ) | (triggerType << ISC10) ;
    25b0:	a5 e5       	ldi	r26, 0x55	; 85
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e5 e5       	ldi	r30, 0x55	; 85
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	28 2f       	mov	r18, r24
    25bc:	23 7f       	andi	r18, 0xF3	; 243
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	82 2b       	or	r24, r18
    25ce:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT1_bit);
    25d0:	ab e5       	ldi	r26, 0x5B	; 91
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	eb e5       	ldi	r30, 0x5B	; 91
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	80 68       	ori	r24, 0x80	; 128
    25dc:	8c 93       	st	X, r24
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <INT2_init>:


void INT2_init( EXT_triggerType triggerType, GPIO_PinDirectionTypes input_type)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <INT2_init+0x6>
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	6a 83       	std	Y+2, r22	; 0x02
    /*  Set pin as input Pin*/
    GPIO_SetPinDirection(PORTB_ID,PIN2_ID,input_type);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	62 e0       	ldi	r22, 0x02	; 2
    25fa:	4a 81       	ldd	r20, Y+2	; 0x02
    25fc:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    /*  Set trigger type*/
    if(triggerType == FALLING_EDGE_TRIGGER)
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	41 f4       	brne	.+16     	; 0x2616 <INT2_init+0x2e>
        CLEAR_BIT(MCUCSR,ISC2);
    2606:	a4 e5       	ldi	r26, 0x54	; 84
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e4 e5       	ldi	r30, 0x54	; 84
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8f 7b       	andi	r24, 0xBF	; 191
    2612:	8c 93       	st	X, r24
    2614:	0a c0       	rjmp	.+20     	; 0x262a <INT2_init+0x42>
    else if (triggerType == RISING_EDGE_TRIGGER)
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	39 f4       	brne	.+14     	; 0x262a <INT2_init+0x42>
        SET_BIT(MCUCSR,ISC2);
    261c:	a4 e5       	ldi	r26, 0x54	; 84
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e4 e5       	ldi	r30, 0x54	; 84
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	80 64       	ori	r24, 0x40	; 64
    2628:	8c 93       	st	X, r24
    /*  Enable EXT Interrupt 0*/
    SET_BIT(GICR , INT2_bit);
    262a:	ab e5       	ldi	r26, 0x5B	; 91
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e5       	ldi	r30, 0x5B	; 91
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 62       	ori	r24, 0x20	; 32
    2636:	8c 93       	st	X, r24
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <INT0_DeInit>:


void INT0_DeInit(void)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT0_bit);
    264a:	ab e5       	ldi	r26, 0x5B	; 91
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	eb e5       	ldi	r30, 0x5B	; 91
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	8f 7b       	andi	r24, 0xBF	; 191
    2656:	8c 93       	st	X, r24
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <INT1_DeInit>:


void INT1_DeInit(void)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT1_bit);
    2666:	ab e5       	ldi	r26, 0x5B	; 91
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	eb e5       	ldi	r30, 0x5B	; 91
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8f 77       	andi	r24, 0x7F	; 127
    2672:	8c 93       	st	X, r24
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <INT2_DeInit>:

void INT2_DeInit(void)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(GICR ,INT2_bit);
    2682:	ab e5       	ldi	r26, 0x5B	; 91
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	eb e5       	ldi	r30, 0x5B	; 91
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8f 7d       	andi	r24, 0xDF	; 223
    268e:	8c 93       	st	X, r24
}
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <ADC_OnlyStartConversionGeneral>:

#endif


void ADC_OnlyStartConversionGeneral(uint8 Channel_NUM)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	0f 92       	push	r0
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	89 83       	std	Y+1, r24	; 0x01
    /*  As this code use Single Ended input so I need to use first 7 cases from ADC Multiplexer  */
    Channel_NUM &= 0x07 ;  
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	87 70       	andi	r24, 0x07	; 7
    26a6:	89 83       	std	Y+1, r24	; 0x01
    /*  tell which channel want to read     */
    ADMUX = (ADMUX & 0xE0) | (Channel_NUM);
    26a8:	a7 e2       	ldi	r26, 0x27	; 39
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e7 e2       	ldi	r30, 0x27	; 39
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	98 2f       	mov	r25, r24
    26b4:	90 7e       	andi	r25, 0xE0	; 224
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	89 2b       	or	r24, r25
    26ba:	8c 93       	st	X, r24
    /*  Start convertion for this channel*/
    SET_BIT(ADCSRA , ADSC);
    26bc:	a6 e2       	ldi	r26, 0x26	; 38
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e6 e2       	ldi	r30, 0x26	; 38
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 64       	ori	r24, 0x40	; 64
    26c8:	8c 93       	st	X, r24
}
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <ADC_Init>:

void ADC_Init(void)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
    26da:	a7 e2       	ldi	r26, 0x27	; 39
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e7 e2       	ldi	r30, 0x27	; 39
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	28 2f       	mov	r18, r24
    26e6:	2f 73       	andi	r18, 0x3F	; 63
    26e8:	80 91 74 02 	lds	r24, 0x0274
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	00 24       	eor	r0, r0
    26f2:	96 95       	lsr	r25
    26f4:	87 95       	ror	r24
    26f6:	07 94       	ror	r0
    26f8:	96 95       	lsr	r25
    26fa:	87 95       	ror	r24
    26fc:	07 94       	ror	r0
    26fe:	98 2f       	mov	r25, r24
    2700:	80 2d       	mov	r24, r0
    2702:	82 2b       	or	r24, r18
    2704:	8c 93       	st	X, r24
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    2706:	80 91 75 02 	lds	r24, 0x0275
    270a:	88 23       	and	r24, r24
    270c:	41 f4       	brne	.+16     	; 0x271e <ADC_Init+0x4c>
        CLEAR_BIT(ADMUX, ADLAR);
    270e:	a7 e2       	ldi	r26, 0x27	; 39
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e7 e2       	ldi	r30, 0x27	; 39
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8f 7d       	andi	r24, 0xDF	; 223
    271a:	8c 93       	st	X, r24
    271c:	0b c0       	rjmp	.+22     	; 0x2734 <ADC_Init+0x62>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    271e:	80 91 75 02 	lds	r24, 0x0275
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	39 f4       	brne	.+14     	; 0x2734 <ADC_Init+0x62>
        SET_BIT(ADMUX, ADLAR);
    2726:	a7 e2       	ldi	r26, 0x27	; 39
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e7 e2       	ldi	r30, 0x27	; 39
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	80 62       	ori	r24, 0x20	; 32
    2732:	8c 93       	st	X, r24
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
    2734:	a6 e2       	ldi	r26, 0x26	; 38
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e6 e2       	ldi	r30, 0x26	; 38
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 68       	ori	r24, 0x80	; 128
    2740:	8c 93       	st	X, r24
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
    2742:	80 91 73 02 	lds	r24, 0x0273
    2746:	88 23       	and	r24, r24
    2748:	99 f1       	breq	.+102    	; 0x27b0 <ADC_Init+0xde>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
    274a:	80 91 73 02 	lds	r24, 0x0273
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	79 f4       	brne	.+30     	; 0x2770 <ADC_Init+0x9e>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    2752:	a6 e2       	ldi	r26, 0x26	; 38
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e6 e2       	ldi	r30, 0x26	; 38
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 62       	ori	r24, 0x20	; 32
    275e:	8c 93       	st	X, r24
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
    2760:	a0 e5       	ldi	r26, 0x50	; 80
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e0 e5       	ldi	r30, 0x50	; 80
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 70       	andi	r24, 0x0F	; 15
    276c:	8c 93       	st	X, r24
    276e:	20 c0       	rjmp	.+64     	; 0x27b0 <ADC_Init+0xde>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
    2770:	80 91 73 02 	lds	r24, 0x0273
    2774:	82 30       	cpi	r24, 0x02	; 2
    2776:	e1 f4       	brne	.+56     	; 0x27b0 <ADC_Init+0xde>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
    2778:	a6 e2       	ldi	r26, 0x26	; 38
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e6 e2       	ldi	r30, 0x26	; 38
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	80 62       	ori	r24, 0x20	; 32
    2784:	8c 93       	st	X, r24
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
    2786:	a0 e5       	ldi	r26, 0x50	; 80
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e0 e5       	ldi	r30, 0x50	; 80
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	28 2f       	mov	r18, r24
    2792:	2f 70       	andi	r18, 0x0F	; 15
    2794:	80 91 77 02 	lds	r24, 0x0277
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	82 95       	swap	r24
    27a2:	92 95       	swap	r25
    27a4:	90 7f       	andi	r25, 0xF0	; 240
    27a6:	98 27       	eor	r25, r24
    27a8:	80 7f       	andi	r24, 0xF0	; 240
    27aa:	98 27       	eor	r25, r24
    27ac:	82 2b       	or	r24, r18
    27ae:	8c 93       	st	X, r24
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
    27b0:	a6 e2       	ldi	r26, 0x26	; 38
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e6 e2       	ldi	r30, 0x26	; 38
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	98 2f       	mov	r25, r24
    27bc:	98 7f       	andi	r25, 0xF8	; 248
    27be:	80 91 76 02 	lds	r24, 0x0276
    27c2:	87 70       	andi	r24, 0x07	; 7
    27c4:	89 2b       	or	r24, r25
    27c6:	8c 93       	st	X, r24
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
    27c8:	a6 e2       	ldi	r26, 0x26	; 38
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e6 e2       	ldi	r30, 0x26	; 38
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	87 7f       	andi	r24, 0xF7	; 247
    27d4:	8c 93       	st	X, r24
    #endif
        
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <ADC_ReadChannelSingleConvertion>:


uint16 ADC_ReadChannelSingleConvertion(uint8 Channel_NUM)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	0f 92       	push	r0
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	0e 94 4b 13 	call	0x2696	; 0x2696 <ADC_OnlyStartConversionGeneral>
    /*  wait uintil ADIF (conversion flag) in ADCSRA register convert from Low to High As that mean conversion completed  */
    while (BIT_IS_CLEAR(ADCSRA,ADIF));
    27ee:	e6 e2       	ldi	r30, 0x26	; 38
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	80 71       	andi	r24, 0x10	; 16
    27fa:	90 70       	andi	r25, 0x00	; 0
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	b9 f3       	breq	.-18     	; 0x27ee <ADC_ReadChannelSingleConvertion+0x12>
    ADC_conversion_value = ADC_ReadConversionRegister();
    2800:	0e 94 22 14 	call	0x2844	; 0x2844 <ADC_ReadConversionRegister>
    2804:	90 93 f7 02 	sts	0x02F7, r25
    2808:	80 93 f6 02 	sts	0x02F6, r24
    /*  Clear ADIF (conversion flag) in ADCSRA register by write one when use Polling Technique     */
    SET_BIT(ADCSRA,ADIF);
    280c:	a6 e2       	ldi	r26, 0x26	; 38
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e6 e2       	ldi	r30, 0x26	; 38
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	80 61       	ori	r24, 0x10	; 16
    2818:	8c 93       	st	X, r24
    return ADC_conversion_value;
    281a:	80 91 f6 02 	lds	r24, 0x02F6
    281e:	90 91 f7 02 	lds	r25, 0x02F7
}
    2822:	0f 90       	pop	r0
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <ADC_FreeRunningStart>:

void ADC_FreeRunningStart (uint8 Channel_NUM)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	0f 92       	push	r0
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	89 83       	std	Y+1, r24	; 0x01
    ADC_OnlyStartConversionGeneral(Channel_NUM);
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	0e 94 4b 13 	call	0x2696	; 0x2696 <ADC_OnlyStartConversionGeneral>
}
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <ADC_ReadConversionRegister>:

uint16 ADC_ReadConversionRegister(void)
{   
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	00 d0       	rcall	.+0      	; 0x284a <ADC_ReadConversionRegister+0x6>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    /* ⚠️NOTE if I use #define ADC (* (volatile uint16 *) (0x24) )  will reduce all below steps */
    uint16 RegisterValue = 0 ;
    284e:	1a 82       	std	Y+2, r1	; 0x02
    2850:	19 82       	std	Y+1, r1	; 0x01
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
    2852:	80 91 75 02 	lds	r24, 0x0275
    2856:	88 23       	and	r24, r24
    2858:	b9 f4       	brne	.+46     	; 0x2888 <ADC_ReadConversionRegister+0x44>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ADCL;
    285a:	e4 e2       	ldi	r30, 0x24	; 36
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)(ADCH & 0x03) ) << 8) | RegisterValue ;
    2868:	e5 e2       	ldi	r30, 0x25	; 37
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	83 70       	andi	r24, 0x03	; 3
    2874:	90 70       	andi	r25, 0x00	; 0
    2876:	38 2f       	mov	r19, r24
    2878:	22 27       	eor	r18, r18
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	82 2b       	or	r24, r18
    2880:	93 2b       	or	r25, r19
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	20 c0       	rjmp	.+64     	; 0x28c8 <ADC_ReadConversionRegister+0x84>
    }
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
    2888:	80 91 75 02 	lds	r24, 0x0275
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	e1 f4       	brne	.+56     	; 0x28c8 <ADC_ReadConversionRegister+0x84>
    {
        /*  When ADCL is read, the ADC Data Register is not updated until ADCH is read */
        RegisterValue = ((ADCL & 0xC0) ) >> 6 ;
    2890:	e4 e2       	ldi	r30, 0x24	; 36
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	82 95       	swap	r24
    2898:	86 95       	lsr	r24
    289a:	86 95       	lsr	r24
    289c:	83 70       	andi	r24, 0x03	; 3
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	90 70       	andi	r25, 0x00	; 0
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
        RegisterValue = (( (uint16)ADCH ) << 2) | RegisterValue ;
    28a8:	e5 e2       	ldi	r30, 0x25	; 37
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	88 2f       	mov	r24, r24
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9c 01       	movw	r18, r24
    28b4:	22 0f       	add	r18, r18
    28b6:	33 1f       	adc	r19, r19
    28b8:	22 0f       	add	r18, r18
    28ba:	33 1f       	adc	r19, r19
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	82 2b       	or	r24, r18
    28c2:	93 2b       	or	r25, r19
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    }
    return RegisterValue ;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <Ultrasonic_Init>:

uint8 g_edgeDetect = 0; 
uint16 g_TimeOfEcho ;

void Ultrasonic_Init(void)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    /*  Init Timer 1 as used in ICP hardware*/
    Timer1_Init();  
    28de:	0e 94 83 09 	call	0x1306	; 0x1306 <Timer1_Init>

    /*  Set First Edge want to Detect  as It is Rising Edge  */
    Timer1_ICU_capture_edge(Timer1_ICU_capture_Rising_edge);
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer1_ICU_capture_edge>

    /*  Provide Clock */
    Timer1_ProvideClock();
    28e8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <Timer1_ProvideClock>

    /*  Set Call Back funtion*/
    Timer1_SetCallBack(ULtrasonic_SignalProcessing);
    28ec:	85 e8       	ldi	r24, 0x85	; 133
    28ee:	95 e1       	ldi	r25, 0x15	; 21
    28f0:	0e 94 3e 09 	call	0x127c	; 0x127c <Timer1_SetCallBack>

    /*  Set trigger pin direction as output*/
    GPIO_SetPinDirection(Trigger_Port,Trigger_Pin,OUTPUT_PIN);
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	42 e0       	ldi	r20, 0x02	; 2
    28fa:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>

}
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <Ultrasonic_Trigger>:


void Ultrasonic_Trigger(void)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	68 97       	sbiw	r28, 0x18	; 24
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    GPIO_WritePin(Trigger_Port,Trigger_Pin, LOGIC_HIGH);
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	67 e0       	ldi	r22, 0x07	; 7
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e2       	ldi	r26, 0x20	; 32
    2928:	b1 e4       	ldi	r27, 0x41	; 65
    292a:	8d 8b       	std	Y+21, r24	; 0x15
    292c:	9e 8b       	std	Y+22, r25	; 0x16
    292e:	af 8b       	std	Y+23, r26	; 0x17
    2930:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2932:	6d 89       	ldd	r22, Y+21	; 0x15
    2934:	7e 89       	ldd	r23, Y+22	; 0x16
    2936:	8f 89       	ldd	r24, Y+23	; 0x17
    2938:	98 8d       	ldd	r25, Y+24	; 0x18
    293a:	2b ea       	ldi	r18, 0xAB	; 171
    293c:	3a ea       	ldi	r19, 0xAA	; 170
    293e:	4a e2       	ldi	r20, 0x2A	; 42
    2940:	50 e4       	ldi	r21, 0x40	; 64
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	89 8b       	std	Y+17, r24	; 0x11
    294c:	9a 8b       	std	Y+18, r25	; 0x12
    294e:	ab 8b       	std	Y+19, r26	; 0x13
    2950:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2952:	69 89       	ldd	r22, Y+17	; 0x11
    2954:	7a 89       	ldd	r23, Y+18	; 0x12
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	1c f4       	brge	.+6      	; 0x2970 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	88 8b       	std	Y+16, r24	; 0x10
    296e:	91 c0       	rjmp	.+290    	; 0x2a92 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    2970:	69 89       	ldd	r22, Y+17	; 0x11
    2972:	7a 89       	ldd	r23, Y+18	; 0x12
    2974:	8b 89       	ldd	r24, Y+19	; 0x13
    2976:	9c 89       	ldd	r25, Y+20	; 0x14
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	53 e4       	ldi	r21, 0x43	; 67
    2980:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	0c f0       	brlt	.+2      	; 0x298a <Ultrasonic_Trigger+0x86>
    2988:	7b c0       	rjmp	.+246    	; 0x2a80 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    298a:	6d 89       	ldd	r22, Y+21	; 0x15
    298c:	7e 89       	ldd	r23, Y+22	; 0x16
    298e:	8f 89       	ldd	r24, Y+23	; 0x17
    2990:	98 8d       	ldd	r25, Y+24	; 0x18
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a e7       	ldi	r20, 0x7A	; 122
    2998:	54 e4       	ldi	r21, 0x44	; 68
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8c 87       	std	Y+12, r24	; 0x0c
    29a4:	9d 87       	std	Y+13, r25	; 0x0d
    29a6:	ae 87       	std	Y+14, r26	; 0x0e
    29a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    29ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    29ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    29b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	88 87       	std	Y+8, r24	; 0x08
    29c4:	99 87       	std	Y+9, r25	; 0x09
    29c6:	aa 87       	std	Y+10, r26	; 0x0a
    29c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29ca:	68 85       	ldd	r22, Y+8	; 0x08
    29cc:	79 85       	ldd	r23, Y+9	; 0x09
    29ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9f 83       	std	Y+7, r25	; 0x07
    29e8:	8e 83       	std	Y+6, r24	; 0x06
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    29ec:	68 85       	ldd	r22, Y+8	; 0x08
    29ee:	79 85       	ldd	r23, Y+9	; 0x09
    29f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a06:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a08:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9f 83       	std	Y+7, r25	; 0x07
    2a2a:	8e 83       	std	Y+6, r24	; 0x06
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <Ultrasonic_Trigger+0x148>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9d 83       	std	Y+5, r25	; 0x05
    2a34:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <Ultrasonic_Trigger+0x136>
    2a3e:	9d 83       	std	Y+5, r25	; 0x05
    2a40:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8e 81       	ldd	r24, Y+6	; 0x06
    2a44:	9f 81       	ldd	r25, Y+7	; 0x07
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9f 83       	std	Y+7, r25	; 0x07
    2a4a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <Ultrasonic_Trigger+0x12a>
    2a54:	24 c0       	rjmp	.+72     	; 0x2a9e <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	68 85       	ldd	r22, Y+8	; 0x08
    2a58:	79 85       	ldd	r23, Y+9	; 0x09
    2a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9f 83       	std	Y+7, r25	; 0x07
    2a68:	8e 83       	std	Y+6, r24	; 0x06
    2a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6e:	9b 83       	std	Y+3, r25	; 0x03
    2a70:	8a 83       	std	Y+2, r24	; 0x02
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <Ultrasonic_Trigger+0x172>
    2a7a:	9b 83       	std	Y+3, r25	; 0x03
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a80:	69 89       	ldd	r22, Y+17	; 0x11
    2a82:	7a 89       	ldd	r23, Y+18	; 0x12
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	88 8b       	std	Y+16, r24	; 0x10
    2a92:	88 89       	ldd	r24, Y+16	; 0x10
    2a94:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	8a 95       	dec	r24
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <Ultrasonic_Trigger+0x194>
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    GPIO_WritePin(Trigger_Port,Trigger_Pin, LOGIC_LOW);
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	67 e0       	ldi	r22, 0x07	; 7
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
}
    2aa8:	68 96       	adiw	r28, 0x18	; 24
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <Ultrasonic_Distance>:


float64 Ultrasonic_Distance(void)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    /*  Send trigger to generste 8 pulses of 40Khz*/
    Ultrasonic_Trigger();
    2ac2:	0e 94 82 14 	call	0x2904	; 0x2904 <Ultrasonic_Trigger>

    /*  wait until catch riging and failing edge for Echo */
    while(g_edgeDetect != 2);
    2ac6:	80 91 f8 02 	lds	r24, 0x02F8
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	e1 f7       	brne	.-8      	; 0x2ac6 <Ultrasonic_Distance+0xc>

    /*  Make it equal zero to be able to perform same operation*/
    g_edgeDetect = 0 ;
    2ace:	10 92 f8 02 	sts	0x02F8, r1

    return ((uint16)g_TimeOfEcho / 58.8);
    2ad2:	80 91 2a 03 	lds	r24, 0x032A
    2ad6:	90 91 2b 03 	lds	r25, 0x032B
    2ada:	cc 01       	movw	r24, r24
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	23 e3       	ldi	r18, 0x33	; 51
    2af2:	33 e3       	ldi	r19, 0x33	; 51
    2af4:	4b e6       	ldi	r20, 0x6B	; 107
    2af6:	52 e4       	ldi	r21, 0x42	; 66
    2af8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22

}
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <ULtrasonic_SignalProcessing>:


void ULtrasonic_SignalProcessing(void)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    g_edgeDetect++ ;
    2b12:	80 91 f8 02 	lds	r24, 0x02F8
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	80 93 f8 02 	sts	0x02F8, r24
    if(g_edgeDetect == 1)
    2b1c:	80 91 f8 02 	lds	r24, 0x02F8
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	41 f4       	brne	.+16     	; 0x2b34 <ULtrasonic_SignalProcessing+0x2a>
    {
        /*  Initialize Timer with value Zero*/
        Timer1_UpdateValue(0);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 cb 09 	call	0x1396	; 0x1396 <Timer1_UpdateValue>
        /*  Convert to detect Failling Edge   */
        Timer1_ICU_capture_edge(Timer1_ICU_capture_Falling_edge);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer1_ICU_capture_edge>
    2b32:	0d c0       	rjmp	.+26     	; 0x2b4e <ULtrasonic_SignalProcessing+0x44>

    }
    else if(g_edgeDetect == 2)
    2b34:	80 91 f8 02 	lds	r24, 0x02F8
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	49 f4       	brne	.+18     	; 0x2b4e <ULtrasonic_SignalProcessing+0x44>
    {
        g_TimeOfEcho = Icu_getInputCaptureValue();
    2b3c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Icu_getInputCaptureValue>
    2b40:	90 93 2b 03 	sts	0x032B, r25
    2b44:	80 93 2a 03 	sts	0x032A, r24

        /*  set detect edge as rising edge for next tring to get time of echo*/
        Timer1_ICU_capture_edge(Timer1_ICU_capture_Rising_edge);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer1_ICU_capture_edge>
    }
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <POT_Init>:

#include "POT_interface.h"


void POT_Init(uint8 ADC_Channel_value )
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	0f 92       	push	r0
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    /*  Set pin As Input PIN */
    GPIO_SetPinDirection(PORTA_ID,ADC_Channel_value,INPUT_PIN);
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	69 81       	ldd	r22, Y+1	; 0x01
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>

}
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <POT_GetValue>:


uint16 POT_GetValue(uint8 ADC_Channel_value )
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <POT_GetValue+0x6>
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LED_Init>:

#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <LED_Init+0x6>
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b9e:	42 e0       	ldi	r20, 0x02	; 2
    2ba0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <LED_OnOffPositiveLogic>:

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <LED_OnOffPositiveLogic+0x6>
    2bb4:	0f 92       	push	r0
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	6a 83       	std	Y+2, r22	; 0x02
    2bbe:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	88 23       	and	r24, r24
    2bc4:	31 f4       	brne	.+12     	; 0x2bd2 <LED_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <LED_OnOffPositiveLogic+0x34>
    }
    else if(State_value == LED_ON)
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	29 f4       	brne	.+10     	; 0x2be2 <LED_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	6a 81       	ldd	r22, Y+2	; 0x02
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    }


}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <LED_OnOffNegativeLogic>:


void LED_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <LED_OnOffNegativeLogic+0x6>
    2bf4:	0f 92       	push	r0
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	89 83       	std	Y+1, r24	; 0x01
    2bfc:	6a 83       	std	Y+2, r22	; 0x02
    2bfe:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == LED_OFF)
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	88 23       	and	r24, r24
    2c04:	31 f4       	brne	.+12     	; 0x2c12 <LED_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	6a 81       	ldd	r22, Y+2	; 0x02
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    2c10:	08 c0       	rjmp	.+16     	; 0x2c22 <LED_OnOffNegativeLogic+0x34>
    }
    else if(State_value == LED_ON)
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	81 30       	cpi	r24, 0x01	; 1
    2c16:	29 f4       	brne	.+10     	; 0x2c22 <LED_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    }


}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <LED_Toggle>:


void LED_Toggle(uint8 PORTX , uint8 PIN)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <LED_Toggle+0x6>
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_TogglePin(PORTX,PIN);
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    2c40:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <GPIO_TogglePin>
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	63 e0       	ldi	r22, 0x03	; 3
    2c5a:	42 e0       	ldi	r20, 0x02	; 2
    2c5c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	62 e0       	ldi	r22, 0x02	; 2
    2c64:	42 e0       	ldi	r20, 0x02	; 2
    2c66:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	42 e0       	ldi	r20, 0x02	; 2
    2c70:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	61 e0       	ldi	r22, 0x01	; 1
    2c78:	42 e0       	ldi	r20, 0x02	; 2
    2c7a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	62 e0       	ldi	r22, 0x02	; 2
    2c82:	42 e0       	ldi	r20, 0x02	; 2
    2c84:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	64 e0       	ldi	r22, 0x04	; 4
    2c8c:	42 e0       	ldi	r20, 0x02	; 2
    2c8e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    2c98:	88 e2       	ldi	r24, 0x28	; 40
    2c9a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2c9e:	8c e0       	ldi	r24, 0x0C	; 12
    2ca0:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
}
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    2cb0:	0f 93       	push	r16
    2cb2:	1f 93       	push	r17
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	c4 56       	subi	r28, 0x64	; 100
    2cbe:	d0 40       	sbci	r29, 0x00	; 0
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ec 59       	subi	r30, 0x9C	; 156
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	63 e0       	ldi	r22, 0x03	; 3
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e1 5a       	subi	r30, 0xA1	; 161
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	a0 e8       	ldi	r26, 0x80	; 128
    2ce8:	bf e3       	ldi	r27, 0x3F	; 63
    2cea:	80 83       	st	Z, r24
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	a2 83       	std	Z+2, r26	; 0x02
    2cf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf2:	8e 01       	movw	r16, r28
    2cf4:	05 5a       	subi	r16, 0xA5	; 165
    2cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e1 5a       	subi	r30, 0xA1	; 161
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	60 81       	ld	r22, Z
    2d00:	71 81       	ldd	r23, Z+1	; 0x01
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	93 81       	ldd	r25, Z+3	; 0x03
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4a e7       	ldi	r20, 0x7A	; 122
    2d0c:	55 e4       	ldi	r21, 0x45	; 69
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	f8 01       	movw	r30, r16
    2d18:	80 83       	st	Z, r24
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	a2 83       	std	Z+2, r26	; 0x02
    2d1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d20:	fe 01       	movw	r30, r28
    2d22:	e5 5a       	subi	r30, 0xA5	; 165
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	44 f4       	brge	.+16     	; 0x2d4e <LCD_SendCommand+0x9e>
		__ticks = 1;
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e7 5a       	subi	r30, 0xA7	; 167
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
    2d4c:	64 c0       	rjmp	.+200    	; 0x2e16 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e5 5a       	subi	r30, 0xA5	; 165
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	0c f0       	brlt	.+2      	; 0x2d6e <LCD_SendCommand+0xbe>
    2d6c:	43 c0       	rjmp	.+134    	; 0x2df4 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e1 5a       	subi	r30, 0xA1	; 161
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	8e 01       	movw	r16, r28
    2d8e:	07 5a       	subi	r16, 0xA7	; 167
    2d90:	1f 4f       	sbci	r17, 0xFF	; 255
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	f8 01       	movw	r30, r16
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	80 83       	st	Z, r24
    2da4:	1f c0       	rjmp	.+62     	; 0x2de4 <LCD_SendCommand+0x134>
    2da6:	fe 01       	movw	r30, r28
    2da8:	e9 5a       	subi	r30, 0xA9	; 169
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 e9       	ldi	r24, 0x90	; 144
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2db4:	fe 01       	movw	r30, r28
    2db6:	e9 5a       	subi	r30, 0xA9	; 169
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_SendCommand+0x10e>
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e9 5a       	subi	r30, 0xA9	; 169
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dcc:	de 01       	movw	r26, r28
    2dce:	a7 5a       	subi	r26, 0xA7	; 167
    2dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e7 5a       	subi	r30, 0xA7	; 167
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	11 96       	adiw	r26, 0x01	; 1
    2de0:	9c 93       	st	X, r25
    2de2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	fe 01       	movw	r30, r28
    2de6:	e7 5a       	subi	r30, 0xA7	; 167
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	d1 f6       	brne	.-76     	; 0x2da6 <LCD_SendCommand+0xf6>
    2df2:	27 c0       	rjmp	.+78     	; 0x2e42 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	8e 01       	movw	r16, r28
    2df6:	07 5a       	subi	r16, 0xA7	; 167
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e5 5a       	subi	r30, 0xA5	; 165
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	f8 01       	movw	r30, r16
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
    2e16:	de 01       	movw	r26, r28
    2e18:	ab 5a       	subi	r26, 0xAB	; 171
    2e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e7 5a       	subi	r30, 0xA7	; 167
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	8d 93       	st	X+, r24
    2e28:	9c 93       	st	X, r25
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	eb 5a       	subi	r30, 0xAB	; 171
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_SendCommand+0x184>
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 5a       	subi	r30, 0xAB	; 171
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	62 e0       	ldi	r22, 0x02	; 2
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ef 5a       	subi	r30, 0xAF	; 175
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e8       	ldi	r26, 0x80	; 128
    2e58:	bf e3       	ldi	r27, 0x3F	; 63
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	8e 01       	movw	r16, r28
    2e64:	03 5b       	subi	r16, 0xB3	; 179
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ef 5a       	subi	r30, 0xAF	; 175
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	4a e7       	ldi	r20, 0x7A	; 122
    2e7c:	55 e4       	ldi	r21, 0x45	; 69
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	f8 01       	movw	r30, r16
    2e88:	80 83       	st	Z, r24
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	a2 83       	std	Z+2, r26	; 0x02
    2e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e90:	fe 01       	movw	r30, r28
    2e92:	e3 5b       	subi	r30, 0xB3	; 179
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	44 f4       	brge	.+16     	; 0x2ebe <LCD_SendCommand+0x20e>
		__ticks = 1;
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e5 5b       	subi	r30, 0xB5	; 181
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
    2ebc:	64 c0       	rjmp	.+200    	; 0x2f86 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e3 5b       	subi	r30, 0xB3	; 179
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	0c f0       	brlt	.+2      	; 0x2ede <LCD_SendCommand+0x22e>
    2edc:	43 c0       	rjmp	.+134    	; 0x2f64 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ef 5a       	subi	r30, 0xAF	; 175
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8e 01       	movw	r16, r28
    2efe:	05 5b       	subi	r16, 0xB5	; 181
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	f8 01       	movw	r30, r16
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    2f14:	1f c0       	rjmp	.+62     	; 0x2f54 <LCD_SendCommand+0x2a4>
    2f16:	fe 01       	movw	r30, r28
    2f18:	e7 5b       	subi	r30, 0xB7	; 183
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 e9       	ldi	r24, 0x90	; 144
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 5b       	subi	r30, 0xB7	; 183
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	91 81       	ldd	r25, Z+1	; 0x01
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <LCD_SendCommand+0x27e>
    2f32:	fe 01       	movw	r30, r28
    2f34:	e7 5b       	subi	r30, 0xB7	; 183
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	de 01       	movw	r26, r28
    2f3e:	a5 5b       	subi	r26, 0xB5	; 181
    2f40:	bf 4f       	sbci	r27, 0xFF	; 255
    2f42:	fe 01       	movw	r30, r28
    2f44:	e5 5b       	subi	r30, 0xB5	; 181
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	11 96       	adiw	r26, 0x01	; 1
    2f50:	9c 93       	st	X, r25
    2f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e5 5b       	subi	r30, 0xB5	; 181
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 81       	ld	r24, Z
    2f5c:	91 81       	ldd	r25, Z+1	; 0x01
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	d1 f6       	brne	.-76     	; 0x2f16 <LCD_SendCommand+0x266>
    2f62:	27 c0       	rjmp	.+78     	; 0x2fb2 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f64:	8e 01       	movw	r16, r28
    2f66:	05 5b       	subi	r16, 0xB5	; 181
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e3 5b       	subi	r30, 0xB3	; 179
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	f8 01       	movw	r30, r16
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	de 01       	movw	r26, r28
    2f88:	a9 5b       	subi	r26, 0xB9	; 185
    2f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e5 5b       	subi	r30, 0xB5	; 181
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	8d 93       	st	X+, r24
    2f98:	9c 93       	st	X, r25
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e9 5b       	subi	r30, 0xB9	; 185
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LCD_SendCommand+0x2f4>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e9 5b       	subi	r30, 0xB9	; 185
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    2fb2:	de 01       	movw	r26, r28
    2fb4:	ad 59       	subi	r26, 0x9D	; 157
    2fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ec 59       	subi	r30, 0x9C	; 156
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	82 95       	swap	r24
    2fc2:	8f 70       	andi	r24, 0x0F	; 15
    2fc4:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ed 59       	subi	r30, 0x9D	; 157
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 81       	ld	r24, Z
    2fce:	98 2f       	mov	r25, r24
    2fd0:	91 70       	andi	r25, 0x01	; 1
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	49 2f       	mov	r20, r25
    2fd8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2fdc:	fe 01       	movw	r30, r28
    2fde:	ed 59       	subi	r30, 0x9D	; 157
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	86 95       	lsr	r24
    2fe6:	98 2f       	mov	r25, r24
    2fe8:	91 70       	andi	r25, 0x01	; 1
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	61 e0       	ldi	r22, 0x01	; 1
    2fee:	49 2f       	mov	r20, r25
    2ff0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ed 59       	subi	r30, 0x9D	; 157
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	80 81       	ld	r24, Z
    2ffc:	86 95       	lsr	r24
    2ffe:	86 95       	lsr	r24
    3000:	98 2f       	mov	r25, r24
    3002:	91 70       	andi	r25, 0x01	; 1
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	62 e0       	ldi	r22, 0x02	; 2
    3008:	49 2f       	mov	r20, r25
    300a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    300e:	fe 01       	movw	r30, r28
    3010:	ed 59       	subi	r30, 0x9D	; 157
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	86 95       	lsr	r24
    3018:	86 95       	lsr	r24
    301a:	86 95       	lsr	r24
    301c:	98 2f       	mov	r25, r24
    301e:	91 70       	andi	r25, 0x01	; 1
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	64 e0       	ldi	r22, 0x04	; 4
    3024:	49 2f       	mov	r20, r25
    3026:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    302a:	fe 01       	movw	r30, r28
    302c:	ed 5b       	subi	r30, 0xBD	; 189
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	a0 e8       	ldi	r26, 0x80	; 128
    3036:	bf e3       	ldi	r27, 0x3F	; 63
    3038:	80 83       	st	Z, r24
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	a2 83       	std	Z+2, r26	; 0x02
    303e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3040:	8e 01       	movw	r16, r28
    3042:	01 5c       	subi	r16, 0xC1	; 193
    3044:	1f 4f       	sbci	r17, 0xFF	; 255
    3046:	fe 01       	movw	r30, r28
    3048:	ed 5b       	subi	r30, 0xBD	; 189
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a e7       	ldi	r20, 0x7A	; 122
    305a:	55 e4       	ldi	r21, 0x45	; 69
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	80 83       	st	Z, r24
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	a2 83       	std	Z+2, r26	; 0x02
    306c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306e:	fe 01       	movw	r30, r28
    3070:	ff 96       	adiw	r30, 0x3f	; 63
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	2c f4       	brge	.+10     	; 0x3094 <LCD_SendCommand+0x3e4>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9e af       	std	Y+62, r25	; 0x3e
    3090:	8d af       	std	Y+61, r24	; 0x3d
    3092:	46 c0       	rjmp	.+140    	; 0x3120 <LCD_SendCommand+0x470>
	else if (__tmp > 65535)
    3094:	fe 01       	movw	r30, r28
    3096:	ff 96       	adiw	r30, 0x3f	; 63
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	64 f5       	brge	.+88     	; 0x3108 <LCD_SendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 5b       	subi	r30, 0xBD	; 189
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9e af       	std	Y+62, r25	; 0x3e
    30dc:	8d af       	std	Y+61, r24	; 0x3d
    30de:	0f c0       	rjmp	.+30     	; 0x30fe <LCD_SendCommand+0x44e>
    30e0:	80 e9       	ldi	r24, 0x90	; 144
    30e2:	91 e0       	ldi	r25, 0x01	; 1
    30e4:	9c af       	std	Y+60, r25	; 0x3c
    30e6:	8b af       	std	Y+59, r24	; 0x3b
    30e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    30ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <LCD_SendCommand+0x43c>
    30f0:	9c af       	std	Y+60, r25	; 0x3c
    30f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9e af       	std	Y+62, r25	; 0x3e
    30fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3100:	9e ad       	ldd	r25, Y+62	; 0x3e
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	69 f7       	brne	.-38     	; 0x30e0 <LCD_SendCommand+0x430>
    3106:	16 c0       	rjmp	.+44     	; 0x3134 <LCD_SendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	fe 01       	movw	r30, r28
    310a:	ff 96       	adiw	r30, 0x3f	; 63
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	9e af       	std	Y+62, r25	; 0x3e
    311e:	8d af       	std	Y+61, r24	; 0x3d
    3120:	8d ad       	ldd	r24, Y+61	; 0x3d
    3122:	9e ad       	ldd	r25, Y+62	; 0x3e
    3124:	9a af       	std	Y+58, r25	; 0x3a
    3126:	89 af       	std	Y+57, r24	; 0x39
    3128:	89 ad       	ldd	r24, Y+57	; 0x39
    312a:	9a ad       	ldd	r25, Y+58	; 0x3a
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <LCD_SendCommand+0x47c>
    3130:	9a af       	std	Y+58, r25	; 0x3a
    3132:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	62 e0       	ldi	r22, 0x02	; 2
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a0 e8       	ldi	r26, 0x80	; 128
    3144:	bf e3       	ldi	r27, 0x3F	; 63
    3146:	8d ab       	std	Y+53, r24	; 0x35
    3148:	9e ab       	std	Y+54, r25	; 0x36
    314a:	af ab       	std	Y+55, r26	; 0x37
    314c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314e:	6d a9       	ldd	r22, Y+53	; 0x35
    3150:	7e a9       	ldd	r23, Y+54	; 0x36
    3152:	8f a9       	ldd	r24, Y+55	; 0x37
    3154:	98 ad       	ldd	r25, Y+56	; 0x38
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	4a e7       	ldi	r20, 0x7A	; 122
    315c:	55 e4       	ldi	r21, 0x45	; 69
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	89 ab       	std	Y+49, r24	; 0x31
    3168:	9a ab       	std	Y+50, r25	; 0x32
    316a:	ab ab       	std	Y+51, r26	; 0x33
    316c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    316e:	69 a9       	ldd	r22, Y+49	; 0x31
    3170:	7a a9       	ldd	r23, Y+50	; 0x32
    3172:	8b a9       	ldd	r24, Y+51	; 0x33
    3174:	9c a9       	ldd	r25, Y+52	; 0x34
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	2c f4       	brge	.+10     	; 0x3190 <LCD_SendCommand+0x4e0>
		__ticks = 1;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	98 ab       	std	Y+48, r25	; 0x30
    318c:	8f a7       	std	Y+47, r24	; 0x2f
    318e:	3f c0       	rjmp	.+126    	; 0x320e <LCD_SendCommand+0x55e>
	else if (__tmp > 65535)
    3190:	69 a9       	ldd	r22, Y+49	; 0x31
    3192:	7a a9       	ldd	r23, Y+50	; 0x32
    3194:	8b a9       	ldd	r24, Y+51	; 0x33
    3196:	9c a9       	ldd	r25, Y+52	; 0x34
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	4f e7       	ldi	r20, 0x7F	; 127
    319e:	57 e4       	ldi	r21, 0x47	; 71
    31a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a4:	18 16       	cp	r1, r24
    31a6:	4c f5       	brge	.+82     	; 0x31fa <LCD_SendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a8:	6d a9       	ldd	r22, Y+53	; 0x35
    31aa:	7e a9       	ldd	r23, Y+54	; 0x36
    31ac:	8f a9       	ldd	r24, Y+55	; 0x37
    31ae:	98 ad       	ldd	r25, Y+56	; 0x38
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e2       	ldi	r20, 0x20	; 32
    31b6:	51 e4       	ldi	r21, 0x41	; 65
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	98 ab       	std	Y+48, r25	; 0x30
    31ce:	8f a7       	std	Y+47, r24	; 0x2f
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <LCD_SendCommand+0x540>
    31d2:	80 e9       	ldi	r24, 0x90	; 144
    31d4:	91 e0       	ldi	r25, 0x01	; 1
    31d6:	9e a7       	std	Y+46, r25	; 0x2e
    31d8:	8d a7       	std	Y+45, r24	; 0x2d
    31da:	8d a5       	ldd	r24, Y+45	; 0x2d
    31dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <LCD_SendCommand+0x52e>
    31e2:	9e a7       	std	Y+46, r25	; 0x2e
    31e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e8:	98 a9       	ldd	r25, Y+48	; 0x30
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	98 ab       	std	Y+48, r25	; 0x30
    31ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31f2:	98 a9       	ldd	r25, Y+48	; 0x30
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	69 f7       	brne	.-38     	; 0x31d2 <LCD_SendCommand+0x522>
    31f8:	14 c0       	rjmp	.+40     	; 0x3222 <LCD_SendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fa:	69 a9       	ldd	r22, Y+49	; 0x31
    31fc:	7a a9       	ldd	r23, Y+50	; 0x32
    31fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3200:	9c a9       	ldd	r25, Y+52	; 0x34
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	98 ab       	std	Y+48, r25	; 0x30
    320c:	8f a7       	std	Y+47, r24	; 0x2f
    320e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3210:	98 a9       	ldd	r25, Y+48	; 0x30
    3212:	9c a7       	std	Y+44, r25	; 0x2c
    3214:	8b a7       	std	Y+43, r24	; 0x2b
    3216:	8b a5       	ldd	r24, Y+43	; 0x2b
    3218:	9c a5       	ldd	r25, Y+44	; 0x2c
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <LCD_SendCommand+0x56a>
    321e:	9c a7       	std	Y+44, r25	; 0x2c
    3220:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	62 e0       	ldi	r22, 0x02	; 2
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	a0 e8       	ldi	r26, 0x80	; 128
    3232:	bf e3       	ldi	r27, 0x3F	; 63
    3234:	8f a3       	std	Y+39, r24	; 0x27
    3236:	98 a7       	std	Y+40, r25	; 0x28
    3238:	a9 a7       	std	Y+41, r26	; 0x29
    323a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323c:	6f a1       	ldd	r22, Y+39	; 0x27
    323e:	78 a5       	ldd	r23, Y+40	; 0x28
    3240:	89 a5       	ldd	r24, Y+41	; 0x29
    3242:	9a a5       	ldd	r25, Y+42	; 0x2a
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	4a e7       	ldi	r20, 0x7A	; 122
    324a:	55 e4       	ldi	r21, 0x45	; 69
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	8b a3       	std	Y+35, r24	; 0x23
    3256:	9c a3       	std	Y+36, r25	; 0x24
    3258:	ad a3       	std	Y+37, r26	; 0x25
    325a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    325c:	6b a1       	ldd	r22, Y+35	; 0x23
    325e:	7c a1       	ldd	r23, Y+36	; 0x24
    3260:	8d a1       	ldd	r24, Y+37	; 0x25
    3262:	9e a1       	ldd	r25, Y+38	; 0x26
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e8       	ldi	r20, 0x80	; 128
    326a:	5f e3       	ldi	r21, 0x3F	; 63
    326c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3270:	88 23       	and	r24, r24
    3272:	2c f4       	brge	.+10     	; 0x327e <LCD_SendCommand+0x5ce>
		__ticks = 1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	9a a3       	std	Y+34, r25	; 0x22
    327a:	89 a3       	std	Y+33, r24	; 0x21
    327c:	3f c0       	rjmp	.+126    	; 0x32fc <LCD_SendCommand+0x64c>
	else if (__tmp > 65535)
    327e:	6b a1       	ldd	r22, Y+35	; 0x23
    3280:	7c a1       	ldd	r23, Y+36	; 0x24
    3282:	8d a1       	ldd	r24, Y+37	; 0x25
    3284:	9e a1       	ldd	r25, Y+38	; 0x26
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	3f ef       	ldi	r19, 0xFF	; 255
    328a:	4f e7       	ldi	r20, 0x7F	; 127
    328c:	57 e4       	ldi	r21, 0x47	; 71
    328e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3292:	18 16       	cp	r1, r24
    3294:	4c f5       	brge	.+82     	; 0x32e8 <LCD_SendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3296:	6f a1       	ldd	r22, Y+39	; 0x27
    3298:	78 a5       	ldd	r23, Y+40	; 0x28
    329a:	89 a5       	ldd	r24, Y+41	; 0x29
    329c:	9a a5       	ldd	r25, Y+42	; 0x2a
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e2       	ldi	r20, 0x20	; 32
    32a4:	51 e4       	ldi	r21, 0x41	; 65
    32a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	9a a3       	std	Y+34, r25	; 0x22
    32bc:	89 a3       	std	Y+33, r24	; 0x21
    32be:	0f c0       	rjmp	.+30     	; 0x32de <LCD_SendCommand+0x62e>
    32c0:	80 e9       	ldi	r24, 0x90	; 144
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	98 a3       	std	Y+32, r25	; 0x20
    32c6:	8f 8f       	std	Y+31, r24	; 0x1f
    32c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32ca:	98 a1       	ldd	r25, Y+32	; 0x20
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <LCD_SendCommand+0x61c>
    32d0:	98 a3       	std	Y+32, r25	; 0x20
    32d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d4:	89 a1       	ldd	r24, Y+33	; 0x21
    32d6:	9a a1       	ldd	r25, Y+34	; 0x22
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	9a a3       	std	Y+34, r25	; 0x22
    32dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32de:	89 a1       	ldd	r24, Y+33	; 0x21
    32e0:	9a a1       	ldd	r25, Y+34	; 0x22
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	69 f7       	brne	.-38     	; 0x32c0 <LCD_SendCommand+0x610>
    32e6:	14 c0       	rjmp	.+40     	; 0x3310 <LCD_SendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ea:	7c a1       	ldd	r23, Y+36	; 0x24
    32ec:	8d a1       	ldd	r24, Y+37	; 0x25
    32ee:	9e a1       	ldd	r25, Y+38	; 0x26
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9a a3       	std	Y+34, r25	; 0x22
    32fa:	89 a3       	std	Y+33, r24	; 0x21
    32fc:	89 a1       	ldd	r24, Y+33	; 0x21
    32fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3300:	9e 8f       	std	Y+30, r25	; 0x1e
    3302:	8d 8f       	std	Y+29, r24	; 0x1d
    3304:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3306:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <LCD_SendCommand+0x658>
    330c:	9e 8f       	std	Y+30, r25	; 0x1e
    330e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    3310:	de 01       	movw	r26, r28
    3312:	ad 59       	subi	r26, 0x9D	; 157
    3314:	bf 4f       	sbci	r27, 0xFF	; 255
    3316:	fe 01       	movw	r30, r28
    3318:	ec 59       	subi	r30, 0x9C	; 156
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	8f 70       	andi	r24, 0x0F	; 15
    3320:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3322:	fe 01       	movw	r30, r28
    3324:	ed 59       	subi	r30, 0x9D	; 157
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	80 81       	ld	r24, Z
    332a:	98 2f       	mov	r25, r24
    332c:	91 70       	andi	r25, 0x01	; 1
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	49 2f       	mov	r20, r25
    3334:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    3338:	fe 01       	movw	r30, r28
    333a:	ed 59       	subi	r30, 0x9D	; 157
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 81       	ld	r24, Z
    3340:	86 95       	lsr	r24
    3342:	98 2f       	mov	r25, r24
    3344:	91 70       	andi	r25, 0x01	; 1
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	61 e0       	ldi	r22, 0x01	; 1
    334a:	49 2f       	mov	r20, r25
    334c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3350:	fe 01       	movw	r30, r28
    3352:	ed 59       	subi	r30, 0x9D	; 157
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	86 95       	lsr	r24
    335a:	86 95       	lsr	r24
    335c:	98 2f       	mov	r25, r24
    335e:	91 70       	andi	r25, 0x01	; 1
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	62 e0       	ldi	r22, 0x02	; 2
    3364:	49 2f       	mov	r20, r25
    3366:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    336a:	fe 01       	movw	r30, r28
    336c:	ed 59       	subi	r30, 0x9D	; 157
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	86 95       	lsr	r24
    3374:	86 95       	lsr	r24
    3376:	86 95       	lsr	r24
    3378:	98 2f       	mov	r25, r24
    337a:	91 70       	andi	r25, 0x01	; 1
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	64 e0       	ldi	r22, 0x04	; 4
    3380:	49 2f       	mov	r20, r25
    3382:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e8       	ldi	r26, 0x80	; 128
    338c:	bf e3       	ldi	r27, 0x3F	; 63
    338e:	89 8f       	std	Y+25, r24	; 0x19
    3390:	9a 8f       	std	Y+26, r25	; 0x1a
    3392:	ab 8f       	std	Y+27, r26	; 0x1b
    3394:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	69 8d       	ldd	r22, Y+25	; 0x19
    3398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	55 e4       	ldi	r21, 0x45	; 69
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8d 8b       	std	Y+21, r24	; 0x15
    33b0:	9e 8b       	std	Y+22, r25	; 0x16
    33b2:	af 8b       	std	Y+23, r26	; 0x17
    33b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33b6:	6d 89       	ldd	r22, Y+21	; 0x15
    33b8:	7e 89       	ldd	r23, Y+22	; 0x16
    33ba:	8f 89       	ldd	r24, Y+23	; 0x17
    33bc:	98 8d       	ldd	r25, Y+24	; 0x18
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <LCD_SendCommand+0x728>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9c 8b       	std	Y+20, r25	; 0x14
    33d4:	8b 8b       	std	Y+19, r24	; 0x13
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <LCD_SendCommand+0x7a6>
	else if (__tmp > 65535)
    33d8:	6d 89       	ldd	r22, Y+21	; 0x15
    33da:	7e 89       	ldd	r23, Y+22	; 0x16
    33dc:	8f 89       	ldd	r24, Y+23	; 0x17
    33de:	98 8d       	ldd	r25, Y+24	; 0x18
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <LCD_SendCommand+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	69 8d       	ldd	r22, Y+25	; 0x19
    33f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9c 8b       	std	Y+20, r25	; 0x14
    3416:	8b 8b       	std	Y+19, r24	; 0x13
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <LCD_SendCommand+0x788>
    341a:	80 e9       	ldi	r24, 0x90	; 144
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	9a 8b       	std	Y+18, r25	; 0x12
    3420:	89 8b       	std	Y+17, r24	; 0x11
    3422:	89 89       	ldd	r24, Y+17	; 0x11
    3424:	9a 89       	ldd	r25, Y+18	; 0x12
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <LCD_SendCommand+0x776>
    342a:	9a 8b       	std	Y+18, r25	; 0x12
    342c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9c 8b       	std	Y+20, r25	; 0x14
    3436:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <LCD_SendCommand+0x76a>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <LCD_SendCommand+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6d 89       	ldd	r22, Y+21	; 0x15
    3444:	7e 89       	ldd	r23, Y+22	; 0x16
    3446:	8f 89       	ldd	r24, Y+23	; 0x17
    3448:	98 8d       	ldd	r25, Y+24	; 0x18
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	98 8b       	std	Y+16, r25	; 0x10
    345c:	8f 87       	std	Y+15, r24	; 0x0f
    345e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3460:	98 89       	ldd	r25, Y+16	; 0x10
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <LCD_SendCommand+0x7b2>
    3466:	98 8b       	std	Y+16, r25	; 0x10
    3468:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	62 e0       	ldi	r22, 0x02	; 2
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	a0 e8       	ldi	r26, 0x80	; 128
    347a:	bf e3       	ldi	r27, 0x3F	; 63
    347c:	8b 87       	std	Y+11, r24	; 0x0b
    347e:	9c 87       	std	Y+12, r25	; 0x0c
    3480:	ad 87       	std	Y+13, r26	; 0x0d
    3482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3484:	6b 85       	ldd	r22, Y+11	; 0x0b
    3486:	7c 85       	ldd	r23, Y+12	; 0x0c
    3488:	8d 85       	ldd	r24, Y+13	; 0x0d
    348a:	9e 85       	ldd	r25, Y+14	; 0x0e
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	4a e7       	ldi	r20, 0x7A	; 122
    3492:	55 e4       	ldi	r21, 0x45	; 69
    3494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	8f 83       	std	Y+7, r24	; 0x07
    349e:	98 87       	std	Y+8, r25	; 0x08
    34a0:	a9 87       	std	Y+9, r26	; 0x09
    34a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a4:	6f 81       	ldd	r22, Y+7	; 0x07
    34a6:	78 85       	ldd	r23, Y+8	; 0x08
    34a8:	89 85       	ldd	r24, Y+9	; 0x09
    34aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e8       	ldi	r20, 0x80	; 128
    34b2:	5f e3       	ldi	r21, 0x3F	; 63
    34b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b8:	88 23       	and	r24, r24
    34ba:	2c f4       	brge	.+10     	; 0x34c6 <LCD_SendCommand+0x816>
		__ticks = 1;
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	9e 83       	std	Y+6, r25	; 0x06
    34c2:	8d 83       	std	Y+5, r24	; 0x05
    34c4:	3f c0       	rjmp	.+126    	; 0x3544 <LCD_SendCommand+0x894>
	else if (__tmp > 65535)
    34c6:	6f 81       	ldd	r22, Y+7	; 0x07
    34c8:	78 85       	ldd	r23, Y+8	; 0x08
    34ca:	89 85       	ldd	r24, Y+9	; 0x09
    34cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	3f ef       	ldi	r19, 0xFF	; 255
    34d2:	4f e7       	ldi	r20, 0x7F	; 127
    34d4:	57 e4       	ldi	r21, 0x47	; 71
    34d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34da:	18 16       	cp	r1, r24
    34dc:	4c f5       	brge	.+82     	; 0x3530 <LCD_SendCommand+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34de:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e2       	ldi	r20, 0x20	; 32
    34ec:	51 e4       	ldi	r21, 0x41	; 65
    34ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	bc 01       	movw	r22, r24
    34f8:	cd 01       	movw	r24, r26
    34fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	8d 83       	std	Y+5, r24	; 0x05
    3506:	0f c0       	rjmp	.+30     	; 0x3526 <LCD_SendCommand+0x876>
    3508:	80 e9       	ldi	r24, 0x90	; 144
    350a:	91 e0       	ldi	r25, 0x01	; 1
    350c:	9c 83       	std	Y+4, r25	; 0x04
    350e:	8b 83       	std	Y+3, r24	; 0x03
    3510:	8b 81       	ldd	r24, Y+3	; 0x03
    3512:	9c 81       	ldd	r25, Y+4	; 0x04
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <LCD_SendCommand+0x864>
    3518:	9c 83       	std	Y+4, r25	; 0x04
    351a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	9e 83       	std	Y+6, r25	; 0x06
    3524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	9e 81       	ldd	r25, Y+6	; 0x06
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	69 f7       	brne	.-38     	; 0x3508 <LCD_SendCommand+0x858>
    352e:	14 c0       	rjmp	.+40     	; 0x3558 <LCD_SendCommand+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3530:	6f 81       	ldd	r22, Y+7	; 0x07
    3532:	78 85       	ldd	r23, Y+8	; 0x08
    3534:	89 85       	ldd	r24, Y+9	; 0x09
    3536:	9a 85       	ldd	r25, Y+10	; 0x0a
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	8d 81       	ldd	r24, Y+5	; 0x05
    3546:	9e 81       	ldd	r25, Y+6	; 0x06
    3548:	9a 83       	std	Y+2, r25	; 0x02
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <LCD_SendCommand+0x8a0>
    3554:	9a 83       	std	Y+2, r25	; 0x02
    3556:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    3558:	cc 59       	subi	r28, 0x9C	; 156
    355a:	df 4f       	sbci	r29, 0xFF	; 255
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	08 95       	ret

00003570 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	c4 56       	subi	r28, 0x64	; 100
    357e:	d0 40       	sbci	r29, 0x00	; 0
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	fe 01       	movw	r30, r28
    358c:	ec 59       	subi	r30, 0x9C	; 156
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	63 e0       	ldi	r22, 0x03	; 3
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    359c:	fe 01       	movw	r30, r28
    359e:	e1 5a       	subi	r30, 0xA1	; 161
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	a0 e8       	ldi	r26, 0x80	; 128
    35a8:	bf e3       	ldi	r27, 0x3F	; 63
    35aa:	80 83       	st	Z, r24
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	a2 83       	std	Z+2, r26	; 0x02
    35b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b2:	8e 01       	movw	r16, r28
    35b4:	05 5a       	subi	r16, 0xA5	; 165
    35b6:	1f 4f       	sbci	r17, 0xFF	; 255
    35b8:	fe 01       	movw	r30, r28
    35ba:	e1 5a       	subi	r30, 0xA1	; 161
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4a e7       	ldi	r20, 0x7A	; 122
    35cc:	55 e4       	ldi	r21, 0x45	; 69
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	f8 01       	movw	r30, r16
    35d8:	80 83       	st	Z, r24
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	a2 83       	std	Z+2, r26	; 0x02
    35de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35e0:	fe 01       	movw	r30, r28
    35e2:	e5 5a       	subi	r30, 0xA5	; 165
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	60 81       	ld	r22, Z
    35e8:	71 81       	ldd	r23, Z+1	; 0x01
    35ea:	82 81       	ldd	r24, Z+2	; 0x02
    35ec:	93 81       	ldd	r25, Z+3	; 0x03
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	44 f4       	brge	.+16     	; 0x360e <LCD_DisplayCharacter+0x9e>
		__ticks = 1;
    35fe:	fe 01       	movw	r30, r28
    3600:	e7 5a       	subi	r30, 0xA7	; 167
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	80 83       	st	Z, r24
    360c:	64 c0       	rjmp	.+200    	; 0x36d6 <LCD_DisplayCharacter+0x166>
	else if (__tmp > 65535)
    360e:	fe 01       	movw	r30, r28
    3610:	e5 5a       	subi	r30, 0xA5	; 165
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	60 81       	ld	r22, Z
    3616:	71 81       	ldd	r23, Z+1	; 0x01
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	3f ef       	ldi	r19, 0xFF	; 255
    3620:	4f e7       	ldi	r20, 0x7F	; 127
    3622:	57 e4       	ldi	r21, 0x47	; 71
    3624:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3628:	18 16       	cp	r1, r24
    362a:	0c f0       	brlt	.+2      	; 0x362e <LCD_DisplayCharacter+0xbe>
    362c:	43 c0       	rjmp	.+134    	; 0x36b4 <LCD_DisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362e:	fe 01       	movw	r30, r28
    3630:	e1 5a       	subi	r30, 0xA1	; 161
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e2       	ldi	r20, 0x20	; 32
    3642:	51 e4       	ldi	r21, 0x41	; 65
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	8e 01       	movw	r16, r28
    364e:	07 5a       	subi	r16, 0xA7	; 167
    3650:	1f 4f       	sbci	r17, 0xFF	; 255
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	f8 01       	movw	r30, r16
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
    3664:	1f c0       	rjmp	.+62     	; 0x36a4 <LCD_DisplayCharacter+0x134>
    3666:	fe 01       	movw	r30, r28
    3668:	e9 5a       	subi	r30, 0xA9	; 169
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	80 e9       	ldi	r24, 0x90	; 144
    366e:	91 e0       	ldi	r25, 0x01	; 1
    3670:	91 83       	std	Z+1, r25	; 0x01
    3672:	80 83       	st	Z, r24
    3674:	fe 01       	movw	r30, r28
    3676:	e9 5a       	subi	r30, 0xA9	; 169
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 81       	ld	r24, Z
    367c:	91 81       	ldd	r25, Z+1	; 0x01
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <LCD_DisplayCharacter+0x10e>
    3682:	fe 01       	movw	r30, r28
    3684:	e9 5a       	subi	r30, 0xA9	; 169
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368c:	de 01       	movw	r26, r28
    368e:	a7 5a       	subi	r26, 0xA7	; 167
    3690:	bf 4f       	sbci	r27, 0xFF	; 255
    3692:	fe 01       	movw	r30, r28
    3694:	e7 5a       	subi	r30, 0xA7	; 167
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	80 81       	ld	r24, Z
    369a:	91 81       	ldd	r25, Z+1	; 0x01
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	11 96       	adiw	r26, 0x01	; 1
    36a0:	9c 93       	st	X, r25
    36a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a4:	fe 01       	movw	r30, r28
    36a6:	e7 5a       	subi	r30, 0xA7	; 167
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	80 81       	ld	r24, Z
    36ac:	91 81       	ldd	r25, Z+1	; 0x01
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	d1 f6       	brne	.-76     	; 0x3666 <LCD_DisplayCharacter+0xf6>
    36b2:	27 c0       	rjmp	.+78     	; 0x3702 <LCD_DisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b4:	8e 01       	movw	r16, r28
    36b6:	07 5a       	subi	r16, 0xA7	; 167
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	fe 01       	movw	r30, r28
    36bc:	e5 5a       	subi	r30, 0xA5	; 165
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	f8 01       	movw	r30, r16
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	de 01       	movw	r26, r28
    36d8:	ab 5a       	subi	r26, 0xAB	; 171
    36da:	bf 4f       	sbci	r27, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	e7 5a       	subi	r30, 0xA7	; 167
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	91 81       	ldd	r25, Z+1	; 0x01
    36e6:	8d 93       	st	X+, r24
    36e8:	9c 93       	st	X, r25
    36ea:	fe 01       	movw	r30, r28
    36ec:	eb 5a       	subi	r30, 0xAB	; 171
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_DisplayCharacter+0x184>
    36f8:	fe 01       	movw	r30, r28
    36fa:	eb 5a       	subi	r30, 0xAB	; 171
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	62 e0       	ldi	r22, 0x02	; 2
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    370c:	fe 01       	movw	r30, r28
    370e:	ef 5a       	subi	r30, 0xAF	; 175
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	a0 e8       	ldi	r26, 0x80	; 128
    3718:	bf e3       	ldi	r27, 0x3F	; 63
    371a:	80 83       	st	Z, r24
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	a2 83       	std	Z+2, r26	; 0x02
    3720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3722:	8e 01       	movw	r16, r28
    3724:	03 5b       	subi	r16, 0xB3	; 179
    3726:	1f 4f       	sbci	r17, 0xFF	; 255
    3728:	fe 01       	movw	r30, r28
    372a:	ef 5a       	subi	r30, 0xAF	; 175
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	4a e7       	ldi	r20, 0x7A	; 122
    373c:	55 e4       	ldi	r21, 0x45	; 69
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	f8 01       	movw	r30, r16
    3748:	80 83       	st	Z, r24
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	a2 83       	std	Z+2, r26	; 0x02
    374e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3750:	fe 01       	movw	r30, r28
    3752:	e3 5b       	subi	r30, 0xB3	; 179
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e8       	ldi	r20, 0x80	; 128
    3764:	5f e3       	ldi	r21, 0x3F	; 63
    3766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    376a:	88 23       	and	r24, r24
    376c:	44 f4       	brge	.+16     	; 0x377e <LCD_DisplayCharacter+0x20e>
		__ticks = 1;
    376e:	fe 01       	movw	r30, r28
    3770:	e5 5b       	subi	r30, 0xB5	; 181
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	91 83       	std	Z+1, r25	; 0x01
    377a:	80 83       	st	Z, r24
    377c:	64 c0       	rjmp	.+200    	; 0x3846 <LCD_DisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    377e:	fe 01       	movw	r30, r28
    3780:	e3 5b       	subi	r30, 0xB3	; 179
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	3f ef       	ldi	r19, 0xFF	; 255
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	57 e4       	ldi	r21, 0x47	; 71
    3794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3798:	18 16       	cp	r1, r24
    379a:	0c f0       	brlt	.+2      	; 0x379e <LCD_DisplayCharacter+0x22e>
    379c:	43 c0       	rjmp	.+134    	; 0x3824 <LCD_DisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	fe 01       	movw	r30, r28
    37a0:	ef 5a       	subi	r30, 0xAF	; 175
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	60 81       	ld	r22, Z
    37a6:	71 81       	ldd	r23, Z+1	; 0x01
    37a8:	82 81       	ldd	r24, Z+2	; 0x02
    37aa:	93 81       	ldd	r25, Z+3	; 0x03
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e2       	ldi	r20, 0x20	; 32
    37b2:	51 e4       	ldi	r21, 0x41	; 65
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	8e 01       	movw	r16, r28
    37be:	05 5b       	subi	r16, 0xB5	; 181
    37c0:	1f 4f       	sbci	r17, 0xFF	; 255
    37c2:	bc 01       	movw	r22, r24
    37c4:	cd 01       	movw	r24, r26
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	f8 01       	movw	r30, r16
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	1f c0       	rjmp	.+62     	; 0x3814 <LCD_DisplayCharacter+0x2a4>
    37d6:	fe 01       	movw	r30, r28
    37d8:	e7 5b       	subi	r30, 0xB7	; 183
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	80 e9       	ldi	r24, 0x90	; 144
    37de:	91 e0       	ldi	r25, 0x01	; 1
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
    37e4:	fe 01       	movw	r30, r28
    37e6:	e7 5b       	subi	r30, 0xB7	; 183
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <LCD_DisplayCharacter+0x27e>
    37f2:	fe 01       	movw	r30, r28
    37f4:	e7 5b       	subi	r30, 0xB7	; 183
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	de 01       	movw	r26, r28
    37fe:	a5 5b       	subi	r26, 0xB5	; 181
    3800:	bf 4f       	sbci	r27, 0xFF	; 255
    3802:	fe 01       	movw	r30, r28
    3804:	e5 5b       	subi	r30, 0xB5	; 181
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	11 96       	adiw	r26, 0x01	; 1
    3810:	9c 93       	st	X, r25
    3812:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	fe 01       	movw	r30, r28
    3816:	e5 5b       	subi	r30, 0xB5	; 181
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	80 81       	ld	r24, Z
    381c:	91 81       	ldd	r25, Z+1	; 0x01
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	d1 f6       	brne	.-76     	; 0x37d6 <LCD_DisplayCharacter+0x266>
    3822:	27 c0       	rjmp	.+78     	; 0x3872 <LCD_DisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3824:	8e 01       	movw	r16, r28
    3826:	05 5b       	subi	r16, 0xB5	; 181
    3828:	1f 4f       	sbci	r17, 0xFF	; 255
    382a:	fe 01       	movw	r30, r28
    382c:	e3 5b       	subi	r30, 0xB3	; 179
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	f8 01       	movw	r30, r16
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	80 83       	st	Z, r24
    3846:	de 01       	movw	r26, r28
    3848:	a9 5b       	subi	r26, 0xB9	; 185
    384a:	bf 4f       	sbci	r27, 0xFF	; 255
    384c:	fe 01       	movw	r30, r28
    384e:	e5 5b       	subi	r30, 0xB5	; 181
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	80 81       	ld	r24, Z
    3854:	91 81       	ldd	r25, Z+1	; 0x01
    3856:	8d 93       	st	X+, r24
    3858:	9c 93       	st	X, r25
    385a:	fe 01       	movw	r30, r28
    385c:	e9 5b       	subi	r30, 0xB9	; 185
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 81       	ld	r24, Z
    3862:	91 81       	ldd	r25, Z+1	; 0x01
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <LCD_DisplayCharacter+0x2f4>
    3868:	fe 01       	movw	r30, r28
    386a:	e9 5b       	subi	r30, 0xB9	; 185
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    3872:	de 01       	movw	r26, r28
    3874:	ad 59       	subi	r26, 0x9D	; 157
    3876:	bf 4f       	sbci	r27, 0xFF	; 255
    3878:	fe 01       	movw	r30, r28
    387a:	ec 59       	subi	r30, 0x9C	; 156
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	80 81       	ld	r24, Z
    3880:	82 95       	swap	r24
    3882:	8f 70       	andi	r24, 0x0F	; 15
    3884:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3886:	fe 01       	movw	r30, r28
    3888:	ed 59       	subi	r30, 0x9D	; 157
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 81       	ld	r24, Z
    388e:	98 2f       	mov	r25, r24
    3890:	91 70       	andi	r25, 0x01	; 1
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	49 2f       	mov	r20, r25
    3898:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    389c:	fe 01       	movw	r30, r28
    389e:	ed 59       	subi	r30, 0x9D	; 157
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	80 81       	ld	r24, Z
    38a4:	86 95       	lsr	r24
    38a6:	98 2f       	mov	r25, r24
    38a8:	91 70       	andi	r25, 0x01	; 1
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	61 e0       	ldi	r22, 0x01	; 1
    38ae:	49 2f       	mov	r20, r25
    38b0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    38b4:	fe 01       	movw	r30, r28
    38b6:	ed 59       	subi	r30, 0x9D	; 157
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	80 81       	ld	r24, Z
    38bc:	86 95       	lsr	r24
    38be:	86 95       	lsr	r24
    38c0:	98 2f       	mov	r25, r24
    38c2:	91 70       	andi	r25, 0x01	; 1
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	62 e0       	ldi	r22, 0x02	; 2
    38c8:	49 2f       	mov	r20, r25
    38ca:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    38ce:	fe 01       	movw	r30, r28
    38d0:	ed 59       	subi	r30, 0x9D	; 157
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	86 95       	lsr	r24
    38d8:	86 95       	lsr	r24
    38da:	86 95       	lsr	r24
    38dc:	98 2f       	mov	r25, r24
    38de:	91 70       	andi	r25, 0x01	; 1
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	64 e0       	ldi	r22, 0x04	; 4
    38e4:	49 2f       	mov	r20, r25
    38e6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    38ea:	fe 01       	movw	r30, r28
    38ec:	ed 5b       	subi	r30, 0xBD	; 189
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	a0 e8       	ldi	r26, 0x80	; 128
    38f6:	bf e3       	ldi	r27, 0x3F	; 63
    38f8:	80 83       	st	Z, r24
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	a2 83       	std	Z+2, r26	; 0x02
    38fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3900:	8e 01       	movw	r16, r28
    3902:	01 5c       	subi	r16, 0xC1	; 193
    3904:	1f 4f       	sbci	r17, 0xFF	; 255
    3906:	fe 01       	movw	r30, r28
    3908:	ed 5b       	subi	r30, 0xBD	; 189
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	4a e7       	ldi	r20, 0x7A	; 122
    391a:	55 e4       	ldi	r21, 0x45	; 69
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	f8 01       	movw	r30, r16
    3926:	80 83       	st	Z, r24
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	a2 83       	std	Z+2, r26	; 0x02
    392c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    392e:	fe 01       	movw	r30, r28
    3930:	ff 96       	adiw	r30, 0x3f	; 63
    3932:	60 81       	ld	r22, Z
    3934:	71 81       	ldd	r23, Z+1	; 0x01
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	93 81       	ldd	r25, Z+3	; 0x03
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e8       	ldi	r20, 0x80	; 128
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3946:	88 23       	and	r24, r24
    3948:	2c f4       	brge	.+10     	; 0x3954 <LCD_DisplayCharacter+0x3e4>
		__ticks = 1;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	9e af       	std	Y+62, r25	; 0x3e
    3950:	8d af       	std	Y+61, r24	; 0x3d
    3952:	46 c0       	rjmp	.+140    	; 0x39e0 <LCD_DisplayCharacter+0x470>
	else if (__tmp > 65535)
    3954:	fe 01       	movw	r30, r28
    3956:	ff 96       	adiw	r30, 0x3f	; 63
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	3f ef       	ldi	r19, 0xFF	; 255
    3964:	4f e7       	ldi	r20, 0x7F	; 127
    3966:	57 e4       	ldi	r21, 0x47	; 71
    3968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    396c:	18 16       	cp	r1, r24
    396e:	64 f5       	brge	.+88     	; 0x39c8 <LCD_DisplayCharacter+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3970:	fe 01       	movw	r30, r28
    3972:	ed 5b       	subi	r30, 0xBD	; 189
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	60 81       	ld	r22, Z
    3978:	71 81       	ldd	r23, Z+1	; 0x01
    397a:	82 81       	ldd	r24, Z+2	; 0x02
    397c:	93 81       	ldd	r25, Z+3	; 0x03
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	40 e2       	ldi	r20, 0x20	; 32
    3984:	51 e4       	ldi	r21, 0x41	; 65
    3986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	bc 01       	movw	r22, r24
    3990:	cd 01       	movw	r24, r26
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	9e af       	std	Y+62, r25	; 0x3e
    399c:	8d af       	std	Y+61, r24	; 0x3d
    399e:	0f c0       	rjmp	.+30     	; 0x39be <LCD_DisplayCharacter+0x44e>
    39a0:	80 e9       	ldi	r24, 0x90	; 144
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	9c af       	std	Y+60, r25	; 0x3c
    39a6:	8b af       	std	Y+59, r24	; 0x3b
    39a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    39aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <LCD_DisplayCharacter+0x43c>
    39b0:	9c af       	std	Y+60, r25	; 0x3c
    39b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    39b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	9e af       	std	Y+62, r25	; 0x3e
    39bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39be:	8d ad       	ldd	r24, Y+61	; 0x3d
    39c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	69 f7       	brne	.-38     	; 0x39a0 <LCD_DisplayCharacter+0x430>
    39c6:	16 c0       	rjmp	.+44     	; 0x39f4 <LCD_DisplayCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c8:	fe 01       	movw	r30, r28
    39ca:	ff 96       	adiw	r30, 0x3f	; 63
    39cc:	60 81       	ld	r22, Z
    39ce:	71 81       	ldd	r23, Z+1	; 0x01
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	9e af       	std	Y+62, r25	; 0x3e
    39de:	8d af       	std	Y+61, r24	; 0x3d
    39e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    39e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    39e4:	9a af       	std	Y+58, r25	; 0x3a
    39e6:	89 af       	std	Y+57, r24	; 0x39
    39e8:	89 ad       	ldd	r24, Y+57	; 0x39
    39ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <LCD_DisplayCharacter+0x47c>
    39f0:	9a af       	std	Y+58, r25	; 0x3a
    39f2:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	62 e0       	ldi	r22, 0x02	; 2
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	a0 e8       	ldi	r26, 0x80	; 128
    3a04:	bf e3       	ldi	r27, 0x3F	; 63
    3a06:	8d ab       	std	Y+53, r24	; 0x35
    3a08:	9e ab       	std	Y+54, r25	; 0x36
    3a0a:	af ab       	std	Y+55, r26	; 0x37
    3a0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a10:	7e a9       	ldd	r23, Y+54	; 0x36
    3a12:	8f a9       	ldd	r24, Y+55	; 0x37
    3a14:	98 ad       	ldd	r25, Y+56	; 0x38
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	4a e7       	ldi	r20, 0x7A	; 122
    3a1c:	55 e4       	ldi	r21, 0x45	; 69
    3a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	89 ab       	std	Y+49, r24	; 0x31
    3a28:	9a ab       	std	Y+50, r25	; 0x32
    3a2a:	ab ab       	std	Y+51, r26	; 0x33
    3a2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a30:	7a a9       	ldd	r23, Y+50	; 0x32
    3a32:	8b a9       	ldd	r24, Y+51	; 0x33
    3a34:	9c a9       	ldd	r25, Y+52	; 0x34
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e8       	ldi	r20, 0x80	; 128
    3a3c:	5f e3       	ldi	r21, 0x3F	; 63
    3a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a42:	88 23       	and	r24, r24
    3a44:	2c f4       	brge	.+10     	; 0x3a50 <LCD_DisplayCharacter+0x4e0>
		__ticks = 1;
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	98 ab       	std	Y+48, r25	; 0x30
    3a4c:	8f a7       	std	Y+47, r24	; 0x2f
    3a4e:	3f c0       	rjmp	.+126    	; 0x3ace <LCD_DisplayCharacter+0x55e>
	else if (__tmp > 65535)
    3a50:	69 a9       	ldd	r22, Y+49	; 0x31
    3a52:	7a a9       	ldd	r23, Y+50	; 0x32
    3a54:	8b a9       	ldd	r24, Y+51	; 0x33
    3a56:	9c a9       	ldd	r25, Y+52	; 0x34
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	3f ef       	ldi	r19, 0xFF	; 255
    3a5c:	4f e7       	ldi	r20, 0x7F	; 127
    3a5e:	57 e4       	ldi	r21, 0x47	; 71
    3a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a64:	18 16       	cp	r1, r24
    3a66:	4c f5       	brge	.+82     	; 0x3aba <LCD_DisplayCharacter+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a68:	6d a9       	ldd	r22, Y+53	; 0x35
    3a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e2       	ldi	r20, 0x20	; 32
    3a76:	51 e4       	ldi	r21, 0x41	; 65
    3a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	bc 01       	movw	r22, r24
    3a82:	cd 01       	movw	r24, r26
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	98 ab       	std	Y+48, r25	; 0x30
    3a8e:	8f a7       	std	Y+47, r24	; 0x2f
    3a90:	0f c0       	rjmp	.+30     	; 0x3ab0 <LCD_DisplayCharacter+0x540>
    3a92:	80 e9       	ldi	r24, 0x90	; 144
    3a94:	91 e0       	ldi	r25, 0x01	; 1
    3a96:	9e a7       	std	Y+46, r25	; 0x2e
    3a98:	8d a7       	std	Y+45, r24	; 0x2d
    3a9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	f1 f7       	brne	.-4      	; 0x3a9e <LCD_DisplayCharacter+0x52e>
    3aa2:	9e a7       	std	Y+46, r25	; 0x2e
    3aa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	98 ab       	std	Y+48, r25	; 0x30
    3aae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	69 f7       	brne	.-38     	; 0x3a92 <LCD_DisplayCharacter+0x522>
    3ab8:	14 c0       	rjmp	.+40     	; 0x3ae2 <LCD_DisplayCharacter+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aba:	69 a9       	ldd	r22, Y+49	; 0x31
    3abc:	7a a9       	ldd	r23, Y+50	; 0x32
    3abe:	8b a9       	ldd	r24, Y+51	; 0x33
    3ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	98 ab       	std	Y+48, r25	; 0x30
    3acc:	8f a7       	std	Y+47, r24	; 0x2f
    3ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ad2:	9c a7       	std	Y+44, r25	; 0x2c
    3ad4:	8b a7       	std	Y+43, r24	; 0x2b
    3ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <LCD_DisplayCharacter+0x56a>
    3ade:	9c a7       	std	Y+44, r25	; 0x2c
    3ae0:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	62 e0       	ldi	r22, 0x02	; 2
    3ae6:	41 e0       	ldi	r20, 0x01	; 1
    3ae8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	a0 e8       	ldi	r26, 0x80	; 128
    3af2:	bf e3       	ldi	r27, 0x3F	; 63
    3af4:	8f a3       	std	Y+39, r24	; 0x27
    3af6:	98 a7       	std	Y+40, r25	; 0x28
    3af8:	a9 a7       	std	Y+41, r26	; 0x29
    3afa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afc:	6f a1       	ldd	r22, Y+39	; 0x27
    3afe:	78 a5       	ldd	r23, Y+40	; 0x28
    3b00:	89 a5       	ldd	r24, Y+41	; 0x29
    3b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	4a e7       	ldi	r20, 0x7A	; 122
    3b0a:	55 e4       	ldi	r21, 0x45	; 69
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	8b a3       	std	Y+35, r24	; 0x23
    3b16:	9c a3       	std	Y+36, r25	; 0x24
    3b18:	ad a3       	std	Y+37, r26	; 0x25
    3b1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b20:	8d a1       	ldd	r24, Y+37	; 0x25
    3b22:	9e a1       	ldd	r25, Y+38	; 0x26
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e8       	ldi	r20, 0x80	; 128
    3b2a:	5f e3       	ldi	r21, 0x3F	; 63
    3b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b30:	88 23       	and	r24, r24
    3b32:	2c f4       	brge	.+10     	; 0x3b3e <LCD_DisplayCharacter+0x5ce>
		__ticks = 1;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	9a a3       	std	Y+34, r25	; 0x22
    3b3a:	89 a3       	std	Y+33, r24	; 0x21
    3b3c:	3f c0       	rjmp	.+126    	; 0x3bbc <LCD_DisplayCharacter+0x64c>
	else if (__tmp > 65535)
    3b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b40:	7c a1       	ldd	r23, Y+36	; 0x24
    3b42:	8d a1       	ldd	r24, Y+37	; 0x25
    3b44:	9e a1       	ldd	r25, Y+38	; 0x26
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	4f e7       	ldi	r20, 0x7F	; 127
    3b4c:	57 e4       	ldi	r21, 0x47	; 71
    3b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	4c f5       	brge	.+82     	; 0x3ba8 <LCD_DisplayCharacter+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b56:	6f a1       	ldd	r22, Y+39	; 0x27
    3b58:	78 a5       	ldd	r23, Y+40	; 0x28
    3b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9a a3       	std	Y+34, r25	; 0x22
    3b7c:	89 a3       	std	Y+33, r24	; 0x21
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <LCD_DisplayCharacter+0x62e>
    3b80:	80 e9       	ldi	r24, 0x90	; 144
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	98 a3       	std	Y+32, r25	; 0x20
    3b86:	8f 8f       	std	Y+31, r24	; 0x1f
    3b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <LCD_DisplayCharacter+0x61c>
    3b90:	98 a3       	std	Y+32, r25	; 0x20
    3b92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b94:	89 a1       	ldd	r24, Y+33	; 0x21
    3b96:	9a a1       	ldd	r25, Y+34	; 0x22
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	9a a3       	std	Y+34, r25	; 0x22
    3b9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    3ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f7       	brne	.-38     	; 0x3b80 <LCD_DisplayCharacter+0x610>
    3ba6:	14 c0       	rjmp	.+40     	; 0x3bd0 <LCD_DisplayCharacter+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    3baa:	7c a1       	ldd	r23, Y+36	; 0x24
    3bac:	8d a1       	ldd	r24, Y+37	; 0x25
    3bae:	9e a1       	ldd	r25, Y+38	; 0x26
    3bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	9a a3       	std	Y+34, r25	; 0x22
    3bba:	89 a3       	std	Y+33, r24	; 0x21
    3bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    3bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    3bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    3bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    3bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <LCD_DisplayCharacter+0x658>
    3bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    3bce:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    3bd0:	de 01       	movw	r26, r28
    3bd2:	ad 59       	subi	r26, 0x9D	; 157
    3bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ec 59       	subi	r30, 0x9C	; 156
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	8f 70       	andi	r24, 0x0F	; 15
    3be0:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    3be2:	fe 01       	movw	r30, r28
    3be4:	ed 59       	subi	r30, 0x9D	; 157
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	98 2f       	mov	r25, r24
    3bec:	91 70       	andi	r25, 0x01	; 1
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	49 2f       	mov	r20, r25
    3bf4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	ed 59       	subi	r30, 0x9D	; 157
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	86 95       	lsr	r24
    3c02:	98 2f       	mov	r25, r24
    3c04:	91 70       	andi	r25, 0x01	; 1
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	49 2f       	mov	r20, r25
    3c0c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    3c10:	fe 01       	movw	r30, r28
    3c12:	ed 59       	subi	r30, 0x9D	; 157
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 81       	ld	r24, Z
    3c18:	86 95       	lsr	r24
    3c1a:	86 95       	lsr	r24
    3c1c:	98 2f       	mov	r25, r24
    3c1e:	91 70       	andi	r25, 0x01	; 1
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	62 e0       	ldi	r22, 0x02	; 2
    3c24:	49 2f       	mov	r20, r25
    3c26:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	ed 59       	subi	r30, 0x9D	; 157
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	80 81       	ld	r24, Z
    3c32:	86 95       	lsr	r24
    3c34:	86 95       	lsr	r24
    3c36:	86 95       	lsr	r24
    3c38:	98 2f       	mov	r25, r24
    3c3a:	91 70       	andi	r25, 0x01	; 1
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	64 e0       	ldi	r22, 0x04	; 4
    3c40:	49 2f       	mov	r20, r25
    3c42:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	a0 e8       	ldi	r26, 0x80	; 128
    3c4c:	bf e3       	ldi	r27, 0x3F	; 63
    3c4e:	89 8f       	std	Y+25, r24	; 0x19
    3c50:	9a 8f       	std	Y+26, r25	; 0x1a
    3c52:	ab 8f       	std	Y+27, r26	; 0x1b
    3c54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c56:	69 8d       	ldd	r22, Y+25	; 0x19
    3c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	4a e7       	ldi	r20, 0x7A	; 122
    3c64:	55 e4       	ldi	r21, 0x45	; 69
    3c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	8d 8b       	std	Y+21, r24	; 0x15
    3c70:	9e 8b       	std	Y+22, r25	; 0x16
    3c72:	af 8b       	std	Y+23, r26	; 0x17
    3c74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c76:	6d 89       	ldd	r22, Y+21	; 0x15
    3c78:	7e 89       	ldd	r23, Y+22	; 0x16
    3c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	40 e8       	ldi	r20, 0x80	; 128
    3c84:	5f e3       	ldi	r21, 0x3F	; 63
    3c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8a:	88 23       	and	r24, r24
    3c8c:	2c f4       	brge	.+10     	; 0x3c98 <LCD_DisplayCharacter+0x728>
		__ticks = 1;
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	9c 8b       	std	Y+20, r25	; 0x14
    3c94:	8b 8b       	std	Y+19, r24	; 0x13
    3c96:	3f c0       	rjmp	.+126    	; 0x3d16 <LCD_DisplayCharacter+0x7a6>
	else if (__tmp > 65535)
    3c98:	6d 89       	ldd	r22, Y+21	; 0x15
    3c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	3f ef       	ldi	r19, 0xFF	; 255
    3ca4:	4f e7       	ldi	r20, 0x7F	; 127
    3ca6:	57 e4       	ldi	r21, 0x47	; 71
    3ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cac:	18 16       	cp	r1, r24
    3cae:	4c f5       	brge	.+82     	; 0x3d02 <LCD_DisplayCharacter+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    3cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e2       	ldi	r20, 0x20	; 32
    3cbe:	51 e4       	ldi	r21, 0x41	; 65
    3cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	bc 01       	movw	r22, r24
    3cca:	cd 01       	movw	r24, r26
    3ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	9c 8b       	std	Y+20, r25	; 0x14
    3cd6:	8b 8b       	std	Y+19, r24	; 0x13
    3cd8:	0f c0       	rjmp	.+30     	; 0x3cf8 <LCD_DisplayCharacter+0x788>
    3cda:	80 e9       	ldi	r24, 0x90	; 144
    3cdc:	91 e0       	ldi	r25, 0x01	; 1
    3cde:	9a 8b       	std	Y+18, r25	; 0x12
    3ce0:	89 8b       	std	Y+17, r24	; 0x11
    3ce2:	89 89       	ldd	r24, Y+17	; 0x11
    3ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ce6:	01 97       	sbiw	r24, 0x01	; 1
    3ce8:	f1 f7       	brne	.-4      	; 0x3ce6 <LCD_DisplayCharacter+0x776>
    3cea:	9a 8b       	std	Y+18, r25	; 0x12
    3cec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cee:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	9c 8b       	std	Y+20, r25	; 0x14
    3cf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    3cfc:	00 97       	sbiw	r24, 0x00	; 0
    3cfe:	69 f7       	brne	.-38     	; 0x3cda <LCD_DisplayCharacter+0x76a>
    3d00:	14 c0       	rjmp	.+40     	; 0x3d2a <LCD_DisplayCharacter+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d02:	6d 89       	ldd	r22, Y+21	; 0x15
    3d04:	7e 89       	ldd	r23, Y+22	; 0x16
    3d06:	8f 89       	ldd	r24, Y+23	; 0x17
    3d08:	98 8d       	ldd	r25, Y+24	; 0x18
    3d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	9c 8b       	std	Y+20, r25	; 0x14
    3d14:	8b 8b       	std	Y+19, r24	; 0x13
    3d16:	8b 89       	ldd	r24, Y+19	; 0x13
    3d18:	9c 89       	ldd	r25, Y+20	; 0x14
    3d1a:	98 8b       	std	Y+16, r25	; 0x10
    3d1c:	8f 87       	std	Y+15, r24	; 0x0f
    3d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d20:	98 89       	ldd	r25, Y+16	; 0x10
    3d22:	01 97       	sbiw	r24, 0x01	; 1
    3d24:	f1 f7       	brne	.-4      	; 0x3d22 <LCD_DisplayCharacter+0x7b2>
    3d26:	98 8b       	std	Y+16, r25	; 0x10
    3d28:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	62 e0       	ldi	r22, 0x02	; 2
    3d2e:	40 e0       	ldi	r20, 0x00	; 0
    3d30:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	a0 e8       	ldi	r26, 0x80	; 128
    3d3a:	bf e3       	ldi	r27, 0x3F	; 63
    3d3c:	8b 87       	std	Y+11, r24	; 0x0b
    3d3e:	9c 87       	std	Y+12, r25	; 0x0c
    3d40:	ad 87       	std	Y+13, r26	; 0x0d
    3d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	4a e7       	ldi	r20, 0x7A	; 122
    3d52:	55 e4       	ldi	r21, 0x45	; 69
    3d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	8f 83       	std	Y+7, r24	; 0x07
    3d5e:	98 87       	std	Y+8, r25	; 0x08
    3d60:	a9 87       	std	Y+9, r26	; 0x09
    3d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d64:	6f 81       	ldd	r22, Y+7	; 0x07
    3d66:	78 85       	ldd	r23, Y+8	; 0x08
    3d68:	89 85       	ldd	r24, Y+9	; 0x09
    3d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	2c f4       	brge	.+10     	; 0x3d86 <LCD_DisplayCharacter+0x816>
		__ticks = 1;
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	3f c0       	rjmp	.+126    	; 0x3e04 <LCD_DisplayCharacter+0x894>
	else if (__tmp > 65535)
    3d86:	6f 81       	ldd	r22, Y+7	; 0x07
    3d88:	78 85       	ldd	r23, Y+8	; 0x08
    3d8a:	89 85       	ldd	r24, Y+9	; 0x09
    3d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	3f ef       	ldi	r19, 0xFF	; 255
    3d92:	4f e7       	ldi	r20, 0x7F	; 127
    3d94:	57 e4       	ldi	r21, 0x47	; 71
    3d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d9a:	18 16       	cp	r1, r24
    3d9c:	4c f5       	brge	.+82     	; 0x3df0 <LCD_DisplayCharacter+0x880>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e2       	ldi	r20, 0x20	; 32
    3dac:	51 e4       	ldi	r21, 0x41	; 65
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	9e 83       	std	Y+6, r25	; 0x06
    3dc4:	8d 83       	std	Y+5, r24	; 0x05
    3dc6:	0f c0       	rjmp	.+30     	; 0x3de6 <LCD_DisplayCharacter+0x876>
    3dc8:	80 e9       	ldi	r24, 0x90	; 144
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	9c 83       	std	Y+4, r25	; 0x04
    3dce:	8b 83       	std	Y+3, r24	; 0x03
    3dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <LCD_DisplayCharacter+0x864>
    3dd8:	9c 83       	std	Y+4, r25	; 0x04
    3dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dde:	9e 81       	ldd	r25, Y+6	; 0x06
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	9e 83       	std	Y+6, r25	; 0x06
    3de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	69 f7       	brne	.-38     	; 0x3dc8 <LCD_DisplayCharacter+0x858>
    3dee:	14 c0       	rjmp	.+40     	; 0x3e18 <LCD_DisplayCharacter+0x8a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df0:	6f 81       	ldd	r22, Y+7	; 0x07
    3df2:	78 85       	ldd	r23, Y+8	; 0x08
    3df4:	89 85       	ldd	r24, Y+9	; 0x09
    3df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	cb 01       	movw	r24, r22
    3e00:	9e 83       	std	Y+6, r25	; 0x06
    3e02:	8d 83       	std	Y+5, r24	; 0x05
    3e04:	8d 81       	ldd	r24, Y+5	; 0x05
    3e06:	9e 81       	ldd	r25, Y+6	; 0x06
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <LCD_DisplayCharacter+0x8a0>
    3e14:	9a 83       	std	Y+2, r25	; 0x02
    3e16:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    3e18:	80 91 fa 02 	lds	r24, 0x02FA
    3e1c:	8f 5f       	subi	r24, 0xFF	; 255
    3e1e:	80 93 fa 02 	sts	0x02FA, r24
    if(col_global == MAX_NUM_COL_LCD)
    3e22:	80 91 fa 02 	lds	r24, 0x02FA
    3e26:	84 31       	cpi	r24, 0x14	; 20
    3e28:	69 f4       	brne	.+26     	; 0x3e44 <LCD_DisplayCharacter+0x8d4>
    {
        row_global += 1 ;
    3e2a:	80 91 f9 02 	lds	r24, 0x02F9
    3e2e:	8f 5f       	subi	r24, 0xFF	; 255
    3e30:	80 93 f9 02 	sts	0x02F9, r24
        col_global = 0 ;
    3e34:	10 92 fa 02 	sts	0x02FA, r1
        if(row_global == MAX_NUM_COL_LCD)
    3e38:	80 91 f9 02 	lds	r24, 0x02F9
    3e3c:	84 31       	cpi	r24, 0x14	; 20
    3e3e:	11 f4       	brne	.+4      	; 0x3e44 <LCD_DisplayCharacter+0x8d4>
            row_global = 0;
    3e40:	10 92 f9 02 	sts	0x02F9, r1
    }
}
    3e44:	cc 59       	subi	r28, 0x9C	; 156
    3e46:	df 4f       	sbci	r29, 0xFF	; 255
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	08 95       	ret

00003e5c <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    3e5c:	df 93       	push	r29
    3e5e:	cf 93       	push	r28
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <LCD_DisplayString+0x6>
    3e62:	0f 92       	push	r0
    3e64:	cd b7       	in	r28, 0x3d	; 61
    3e66:	de b7       	in	r29, 0x3e	; 62
    3e68:	9b 83       	std	Y+3, r25	; 0x03
    3e6a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    3e6c:	19 82       	std	Y+1, r1	; 0x01
    3e6e:	0e c0       	rjmp	.+28     	; 0x3e8c <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	28 2f       	mov	r18, r24
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	9b 81       	ldd	r25, Y+3	; 0x03
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	e2 0f       	add	r30, r18
    3e7e:	f3 1f       	adc	r31, r19
    3e80:	80 81       	ld	r24, Z
    3e82:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
        it++;
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	8f 5f       	subi	r24, 0xFF	; 255
    3e8a:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	28 2f       	mov	r18, r24
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	8a 81       	ldd	r24, Y+2	; 0x02
    3e94:	9b 81       	ldd	r25, Y+3	; 0x03
    3e96:	fc 01       	movw	r30, r24
    3e98:	e2 0f       	add	r30, r18
    3e9a:	f3 1f       	adc	r31, r19
    3e9c:	80 81       	ld	r24, Z
    3e9e:	88 23       	and	r24, r24
    3ea0:	39 f7       	brne	.-50     	; 0x3e70 <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	cf 91       	pop	r28
    3eaa:	df 91       	pop	r29
    3eac:	08 95       	ret

00003eae <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    3eae:	df 93       	push	r29
    3eb0:	cf 93       	push	r28
    3eb2:	00 d0       	rcall	.+0      	; 0x3eb4 <LCD_MoveCursor+0x6>
    3eb4:	00 d0       	rcall	.+0      	; 0x3eb6 <LCD_MoveCursor+0x8>
    3eb6:	0f 92       	push	r0
    3eb8:	cd b7       	in	r28, 0x3d	; 61
    3eba:	de b7       	in	r29, 0x3e	; 62
    3ebc:	8a 83       	std	Y+2, r24	; 0x02
    3ebe:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	28 2f       	mov	r18, r24
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	3d 83       	std	Y+5, r19	; 0x05
    3ec8:	2c 83       	std	Y+4, r18	; 0x04
    3eca:	8c 81       	ldd	r24, Y+4	; 0x04
    3ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    3ece:	81 30       	cpi	r24, 0x01	; 1
    3ed0:	91 05       	cpc	r25, r1
    3ed2:	e9 f0       	breq	.+58     	; 0x3f0e <LCD_MoveCursor+0x60>
    3ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ed8:	22 30       	cpi	r18, 0x02	; 2
    3eda:	31 05       	cpc	r19, r1
    3edc:	2c f4       	brge	.+10     	; 0x3ee8 <LCD_MoveCursor+0x3a>
    3ede:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee2:	00 97       	sbiw	r24, 0x00	; 0
    3ee4:	61 f0       	breq	.+24     	; 0x3efe <LCD_MoveCursor+0x50>
    3ee6:	30 c0       	rjmp	.+96     	; 0x3f48 <LCD_MoveCursor+0x9a>
    3ee8:	2c 81       	ldd	r18, Y+4	; 0x04
    3eea:	3d 81       	ldd	r19, Y+5	; 0x05
    3eec:	22 30       	cpi	r18, 0x02	; 2
    3eee:	31 05       	cpc	r19, r1
    3ef0:	c1 f0       	breq	.+48     	; 0x3f22 <LCD_MoveCursor+0x74>
    3ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ef6:	83 30       	cpi	r24, 0x03	; 3
    3ef8:	91 05       	cpc	r25, r1
    3efa:	e9 f0       	breq	.+58     	; 0x3f36 <LCD_MoveCursor+0x88>
    3efc:	25 c0       	rjmp	.+74     	; 0x3f48 <LCD_MoveCursor+0x9a>
    {
        case 0 : 
            New_Location = col ;
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	80 93 fa 02 	sts	0x02FA, r24
            row_global = 0 ;
    3f08:	10 92 f9 02 	sts	0x02F9, r1
    3f0c:	1d c0       	rjmp	.+58     	; 0x3f48 <LCD_MoveCursor+0x9a>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    3f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f10:	80 5c       	subi	r24, 0xC0	; 192
    3f12:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    3f14:	8b 81       	ldd	r24, Y+3	; 0x03
    3f16:	80 93 fa 02 	sts	0x02FA, r24
            row_global = 1 ;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	80 93 f9 02 	sts	0x02F9, r24
    3f20:	13 c0       	rjmp	.+38     	; 0x3f48 <LCD_MoveCursor+0x9a>
                break;

        #elif(MAX_NUM_COL_LCD == 20)    // if LCD 20 Columns

            case 2 :
                New_Location = col + 0x14 ;
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	8c 5e       	subi	r24, 0xEC	; 236
    3f26:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    3f28:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2a:	80 93 fa 02 	sts	0x02FA, r24
                row_global = 2 ;
    3f2e:	82 e0       	ldi	r24, 0x02	; 2
    3f30:	80 93 f9 02 	sts	0x02F9, r24
    3f34:	09 c0       	rjmp	.+18     	; 0x3f48 <LCD_MoveCursor+0x9a>
                break;

            case 3 : 
                New_Location = col + 0x54 ;
    3f36:	8b 81       	ldd	r24, Y+3	; 0x03
    3f38:	8c 5a       	subi	r24, 0xAC	; 172
    3f3a:	89 83       	std	Y+1, r24	; 0x01
                col_global = col ;
    3f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3e:	80 93 fa 02 	sts	0x02FA, r24
                row_global = 3 ;
    3f42:	83 e0       	ldi	r24, 0x03	; 3
    3f44:	80 93 f9 02 	sts	0x02F9, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	80 68       	ori	r24, 0x80	; 128
    3f4c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
}
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <LCD_DisplayStringRowCol+0x6>
    3f66:	00 d0       	rcall	.+0      	; 0x3f68 <LCD_DisplayStringRowCol+0x8>
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	9a 83       	std	Y+2, r25	; 0x02
    3f6e:	89 83       	std	Y+1, r24	; 0x01
    3f70:	6b 83       	std	Y+3, r22	; 0x03
    3f72:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    3f74:	8b 81       	ldd	r24, Y+3	; 0x03
    3f76:	6c 81       	ldd	r22, Y+4	; 0x04
    3f78:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f80:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
}
    3f84:	0f 90       	pop	r0
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	cf 91       	pop	r28
    3f8e:	df 91       	pop	r29
    3f90:	08 95       	ret

00003f92 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    3f9a:	10 92 fa 02 	sts	0x02FA, r1
    3f9e:	10 92 f9 02 	sts	0x02F9, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
}
    3fa8:	cf 91       	pop	r28
    3faa:	df 91       	pop	r29
    3fac:	08 95       	ret

00003fae <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    3fae:	df 93       	push	r29
    3fb0:	cf 93       	push	r28
    3fb2:	cd b7       	in	r28, 0x3d	; 61
    3fb4:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    3fb6:	80 91 fa 02 	lds	r24, 0x02FA
    3fba:	83 31       	cpi	r24, 0x13	; 19
    3fbc:	89 f4       	brne	.+34     	; 0x3fe0 <LCD_MoveCursorRight+0x32>
    3fbe:	80 91 f9 02 	lds	r24, 0x02F9
    3fc2:	88 23       	and	r24, r24
    3fc4:	69 f4       	brne	.+26     	; 0x3fe0 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    3fc6:	10 92 fa 02 	sts	0x02FA, r1
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	80 93 f9 02 	sts	0x02F9, r24
        LCD_MoveCursor(row_global,col_global);
    3fd0:	80 91 f9 02 	lds	r24, 0x02F9
    3fd4:	90 91 fa 02 	lds	r25, 0x02FA
    3fd8:	69 2f       	mov	r22, r25
    3fda:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    3fde:	46 c0       	rjmp	.+140    	; 0x406c <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    3fe0:	80 91 fa 02 	lds	r24, 0x02FA
    3fe4:	83 31       	cpi	r24, 0x13	; 19
    3fe6:	89 f4       	brne	.+34     	; 0x400a <LCD_MoveCursorRight+0x5c>
    3fe8:	80 91 f9 02 	lds	r24, 0x02F9
    3fec:	81 30       	cpi	r24, 0x01	; 1
    3fee:	69 f4       	brne	.+26     	; 0x400a <LCD_MoveCursorRight+0x5c>
    {
        col_global = 0 , row_global = 2 ;
    3ff0:	10 92 fa 02 	sts	0x02FA, r1
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	80 93 f9 02 	sts	0x02F9, r24
        LCD_MoveCursor(row_global,col_global);
    3ffa:	80 91 f9 02 	lds	r24, 0x02F9
    3ffe:	90 91 fa 02 	lds	r25, 0x02FA
    4002:	69 2f       	mov	r22, r25
    4004:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    4008:	31 c0       	rjmp	.+98     	; 0x406c <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 2 )
    400a:	80 91 fa 02 	lds	r24, 0x02FA
    400e:	83 31       	cpi	r24, 0x13	; 19
    4010:	89 f4       	brne	.+34     	; 0x4034 <LCD_MoveCursorRight+0x86>
    4012:	80 91 f9 02 	lds	r24, 0x02F9
    4016:	82 30       	cpi	r24, 0x02	; 2
    4018:	69 f4       	brne	.+26     	; 0x4034 <LCD_MoveCursorRight+0x86>
    {
        col_global = 0 , row_global = 3 ;
    401a:	10 92 fa 02 	sts	0x02FA, r1
    401e:	83 e0       	ldi	r24, 0x03	; 3
    4020:	80 93 f9 02 	sts	0x02F9, r24
        LCD_MoveCursor(row_global,col_global);
    4024:	80 91 f9 02 	lds	r24, 0x02F9
    4028:	90 91 fa 02 	lds	r25, 0x02FA
    402c:	69 2f       	mov	r22, r25
    402e:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    4032:	1c c0       	rjmp	.+56     	; 0x406c <LCD_MoveCursorRight+0xbe>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 3 )
    4034:	80 91 fa 02 	lds	r24, 0x02FA
    4038:	83 31       	cpi	r24, 0x13	; 19
    403a:	81 f4       	brne	.+32     	; 0x405c <LCD_MoveCursorRight+0xae>
    403c:	80 91 f9 02 	lds	r24, 0x02F9
    4040:	83 30       	cpi	r24, 0x03	; 3
    4042:	61 f4       	brne	.+24     	; 0x405c <LCD_MoveCursorRight+0xae>
    {
        col_global = 0 , row_global = 0 ;
    4044:	10 92 fa 02 	sts	0x02FA, r1
    4048:	10 92 f9 02 	sts	0x02F9, r1
        LCD_MoveCursor(row_global,col_global);
    404c:	80 91 f9 02 	lds	r24, 0x02F9
    4050:	90 91 fa 02 	lds	r25, 0x02FA
    4054:	69 2f       	mov	r22, r25
    4056:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    405a:	08 c0       	rjmp	.+16     	; 0x406c <LCD_MoveCursorRight+0xbe>
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    405c:	84 e1       	ldi	r24, 0x14	; 20
    405e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
        col_global++;
    4062:	80 91 fa 02 	lds	r24, 0x02FA
    4066:	8f 5f       	subi	r24, 0xFF	; 255
    4068:	80 93 fa 02 	sts	0x02FA, r24
    }
}
    406c:	cf 91       	pop	r28
    406e:	df 91       	pop	r29
    4070:	08 95       	ret

00004072 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    4072:	df 93       	push	r29
    4074:	cf 93       	push	r28
    4076:	cd b7       	in	r28, 0x3d	; 61
    4078:	de b7       	in	r29, 0x3e	; 62
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#elif(MAX_NUM_ROW_LCD == 4)
    if(col_global == 0 && row_global == 0)
    407a:	80 91 fa 02 	lds	r24, 0x02FA
    407e:	88 23       	and	r24, r24
    4080:	91 f4       	brne	.+36     	; 0x40a6 <LCD_MoveCursorLeft+0x34>
    4082:	80 91 f9 02 	lds	r24, 0x02F9
    4086:	88 23       	and	r24, r24
    4088:	71 f4       	brne	.+28     	; 0x40a6 <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 3 ;
    408a:	83 e1       	ldi	r24, 0x13	; 19
    408c:	80 93 fa 02 	sts	0x02FA, r24
    4090:	83 e0       	ldi	r24, 0x03	; 3
    4092:	80 93 f9 02 	sts	0x02F9, r24
        LCD_MoveCursor(row_global,col_global);
    4096:	80 91 f9 02 	lds	r24, 0x02F9
    409a:	90 91 fa 02 	lds	r25, 0x02FA
    409e:	69 2f       	mov	r22, r25
    40a0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    40a4:	49 c0       	rjmp	.+146    	; 0x4138 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 1)
    40a6:	80 91 fa 02 	lds	r24, 0x02FA
    40aa:	88 23       	and	r24, r24
    40ac:	89 f4       	brne	.+34     	; 0x40d0 <LCD_MoveCursorLeft+0x5e>
    40ae:	80 91 f9 02 	lds	r24, 0x02F9
    40b2:	81 30       	cpi	r24, 0x01	; 1
    40b4:	69 f4       	brne	.+26     	; 0x40d0 <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    40b6:	83 e1       	ldi	r24, 0x13	; 19
    40b8:	80 93 fa 02 	sts	0x02FA, r24
    40bc:	10 92 f9 02 	sts	0x02F9, r1
        LCD_MoveCursor(row_global,col_global);
    40c0:	80 91 f9 02 	lds	r24, 0x02F9
    40c4:	90 91 fa 02 	lds	r25, 0x02FA
    40c8:	69 2f       	mov	r22, r25
    40ca:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    40ce:	34 c0       	rjmp	.+104    	; 0x4138 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 2)
    40d0:	80 91 fa 02 	lds	r24, 0x02FA
    40d4:	88 23       	and	r24, r24
    40d6:	91 f4       	brne	.+36     	; 0x40fc <LCD_MoveCursorLeft+0x8a>
    40d8:	80 91 f9 02 	lds	r24, 0x02F9
    40dc:	82 30       	cpi	r24, 0x02	; 2
    40de:	71 f4       	brne	.+28     	; 0x40fc <LCD_MoveCursorLeft+0x8a>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    40e0:	83 e1       	ldi	r24, 0x13	; 19
    40e2:	80 93 fa 02 	sts	0x02FA, r24
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	80 93 f9 02 	sts	0x02F9, r24
        LCD_MoveCursor(row_global,col_global);
    40ec:	80 91 f9 02 	lds	r24, 0x02F9
    40f0:	90 91 fa 02 	lds	r25, 0x02FA
    40f4:	69 2f       	mov	r22, r25
    40f6:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    40fa:	1e c0       	rjmp	.+60     	; 0x4138 <LCD_MoveCursorLeft+0xc6>
    }
    else if (col_global == 0 && row_global == 3)
    40fc:	80 91 fa 02 	lds	r24, 0x02FA
    4100:	88 23       	and	r24, r24
    4102:	91 f4       	brne	.+36     	; 0x4128 <LCD_MoveCursorLeft+0xb6>
    4104:	80 91 f9 02 	lds	r24, 0x02F9
    4108:	83 30       	cpi	r24, 0x03	; 3
    410a:	71 f4       	brne	.+28     	; 0x4128 <LCD_MoveCursorLeft+0xb6>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 2 ;
    410c:	83 e1       	ldi	r24, 0x13	; 19
    410e:	80 93 fa 02 	sts	0x02FA, r24
    4112:	82 e0       	ldi	r24, 0x02	; 2
    4114:	80 93 f9 02 	sts	0x02F9, r24
        LCD_MoveCursor(row_global,col_global);
    4118:	80 91 f9 02 	lds	r24, 0x02F9
    411c:	90 91 fa 02 	lds	r25, 0x02FA
    4120:	69 2f       	mov	r22, r25
    4122:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    4126:	08 c0       	rjmp	.+16     	; 0x4138 <LCD_MoveCursorLeft+0xc6>
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    4128:	80 e1       	ldi	r24, 0x10	; 16
    412a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
        col_global--;
    412e:	80 91 fa 02 	lds	r24, 0x02FA
    4132:	81 50       	subi	r24, 0x01	; 1
    4134:	80 93 fa 02 	sts	0x02FA, r24
    }
    
}
    4138:	cf 91       	pop	r28
    413a:	df 91       	pop	r29
    413c:	08 95       	ret

0000413e <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    413e:	df 93       	push	r29
    4140:	cf 93       	push	r28
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    4146:	8c e1       	ldi	r24, 0x1C	; 28
    4148:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
}
    414c:	cf 91       	pop	r28
    414e:	df 91       	pop	r29
    4150:	08 95       	ret

00004152 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    4152:	df 93       	push	r29
    4154:	cf 93       	push	r28
    4156:	cd b7       	in	r28, 0x3d	; 61
    4158:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    415a:	88 e1       	ldi	r24, 0x18	; 24
    415c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
}
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	08 95       	ret

00004166 <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    4166:	df 93       	push	r29
    4168:	cf 93       	push	r28
    416a:	00 d0       	rcall	.+0      	; 0x416c <LCD_GenerateCharacterCGRAM+0x6>
    416c:	00 d0       	rcall	.+0      	; 0x416e <LCD_GenerateCharacterCGRAM+0x8>
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	9b 83       	std	Y+3, r25	; 0x03
    4174:	8a 83       	std	Y+2, r24	; 0x02
    4176:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    4178:	8c 81       	ldd	r24, Y+4	; 0x04
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	08 96       	adiw	r24, 0x08	; 8
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	88 0f       	add	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    4190:	19 82       	std	Y+1, r1	; 0x01
    4192:	0e c0       	rjmp	.+28     	; 0x41b0 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    4194:	89 81       	ldd	r24, Y+1	; 0x01
    4196:	28 2f       	mov	r18, r24
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	8a 81       	ldd	r24, Y+2	; 0x02
    419c:	9b 81       	ldd	r25, Y+3	; 0x03
    419e:	fc 01       	movw	r30, r24
    41a0:	e2 0f       	add	r30, r18
    41a2:	f3 1f       	adc	r31, r19
    41a4:	80 81       	ld	r24, Z
    41a6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	8f 5f       	subi	r24, 0xFF	; 255
    41ae:	89 83       	std	Y+1, r24	; 0x01
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	88 30       	cpi	r24, 0x08	; 8
    41b4:	78 f3       	brcs	.-34     	; 0x4194 <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	cf 91       	pop	r28
    41c0:	df 91       	pop	r29
    41c2:	08 95       	ret

000041c4 <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    41c4:	df 93       	push	r29
    41c6:	cf 93       	push	r28
    41c8:	0f 92       	push	r0
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    41ce:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
}
    41d6:	0f 90       	pop	r0
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret

000041de <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <LCD_DisplayCustomCharacterRowCol+0x6>
    41e4:	0f 92       	push	r0
    41e6:	cd b7       	in	r28, 0x3d	; 61
    41e8:	de b7       	in	r29, 0x3e	; 62
    41ea:	89 83       	std	Y+1, r24	; 0x01
    41ec:	6a 83       	std	Y+2, r22	; 0x02
    41ee:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	6b 81       	ldd	r22, Y+3	; 0x03
    41f4:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
}
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	cf 91       	pop	r28
    4206:	df 91       	pop	r29
    4208:	08 95       	ret

0000420a <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    420a:	df 93       	push	r29
    420c:	cf 93       	push	r28
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	65 97       	sbiw	r28, 0x15	; 21
    4214:	0f b6       	in	r0, 0x3f	; 63
    4216:	f8 94       	cli
    4218:	de bf       	out	0x3e, r29	; 62
    421a:	0f be       	out	0x3f, r0	; 63
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	6a 8b       	std	Y+18, r22	; 0x12
    4220:	7b 8b       	std	Y+19, r23	; 0x13
    4222:	8c 8b       	std	Y+20, r24	; 0x14
    4224:	9d 8b       	std	Y+21, r25	; 0x15
    uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
    itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4226:	8a 89       	ldd	r24, Y+18	; 0x12
    4228:	9b 89       	ldd	r25, Y+19	; 0x13
    422a:	9e 01       	movw	r18, r28
    422c:	2f 5f       	subi	r18, 0xFF	; 255
    422e:	3f 4f       	sbci	r19, 0xFF	; 255
    4230:	b9 01       	movw	r22, r18
    4232:	4a e0       	ldi	r20, 0x0A	; 10
    4234:	50 e0       	ldi	r21, 0x00	; 0
    4236:	0e 94 8e 3d 	call	0x7b1c	; 0x7b1c <itoa>
    LCD_DisplayString( (uint8_t *)string_buff);
    423a:	ce 01       	movw	r24, r28
    423c:	01 96       	adiw	r24, 0x01	; 1
    423e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
}
    4242:	65 96       	adiw	r28, 0x15	; 21
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	cf 91       	pop	r28
    4250:	df 91       	pop	r29
    4252:	08 95       	ret

00004254 <LCD_FloatToString>:

uint8 LCD_FloatToString(float64 num)
{
    4254:	df 93       	push	r29
    4256:	cf 93       	push	r28
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	a9 97       	sbiw	r28, 0x29	; 41
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	68 a3       	std	Y+32, r22	; 0x20
    426a:	79 a3       	std	Y+33, r23	; 0x21
    426c:	8a a3       	std	Y+34, r24	; 0x22
    426e:	9b a3       	std	Y+35, r25	; 0x23
    uint8 charcter_Counter = 0 ;
    4270:	1f 8a       	std	Y+23, r1	; 0x17

    uint8 str[8];
    
    int wholePart = (int)num;
    4272:	68 a1       	ldd	r22, Y+32	; 0x20
    4274:	79 a1       	ldd	r23, Y+33	; 0x21
    4276:	8a a1       	ldd	r24, Y+34	; 0x22
    4278:	9b a1       	ldd	r25, Y+35	; 0x23
    427a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	9e 8b       	std	Y+22, r25	; 0x16
    4284:	8d 8b       	std	Y+21, r24	; 0x15

    // Extract fractional part
    float fractionalPart = num - wholePart;
    4286:	8d 89       	ldd	r24, Y+21	; 0x15
    4288:	9e 89       	ldd	r25, Y+22	; 0x16
    428a:	aa 27       	eor	r26, r26
    428c:	97 fd       	sbrc	r25, 7
    428e:	a0 95       	com	r26
    4290:	ba 2f       	mov	r27, r26
    4292:	bc 01       	movw	r22, r24
    4294:	cd 01       	movw	r24, r26
    4296:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    429a:	9b 01       	movw	r18, r22
    429c:	ac 01       	movw	r20, r24
    429e:	68 a1       	ldd	r22, Y+32	; 0x20
    42a0:	79 a1       	ldd	r23, Y+33	; 0x21
    42a2:	8a a1       	ldd	r24, Y+34	; 0x22
    42a4:	9b a1       	ldd	r25, Y+35	; 0x23
    42a6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	89 8b       	std	Y+17, r24	; 0x11
    42b0:	9a 8b       	std	Y+18, r25	; 0x12
    42b2:	ab 8b       	std	Y+19, r26	; 0x13
    42b4:	bc 8b       	std	Y+20, r27	; 0x14
	
    // convert integer part to string
    int i = 0;
    42b6:	18 8a       	std	Y+16, r1	; 0x10
    42b8:	1f 86       	std	Y+15, r1	; 0x0f
    42ba:	35 c0       	rjmp	.+106    	; 0x4326 <LCD_FloatToString+0xd2>
    while (wholePart != 0) {
        int rem = wholePart % 10;
    42bc:	8d 89       	ldd	r24, Y+21	; 0x15
    42be:	9e 89       	ldd	r25, Y+22	; 0x16
    42c0:	2a e0       	ldi	r18, 0x0A	; 10
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	b9 01       	movw	r22, r18
    42c6:	0e 94 22 3d 	call	0x7a44	; 0x7a44 <__divmodhi4>
    42ca:	9d 83       	std	Y+5, r25	; 0x05
    42cc:	8c 83       	std	Y+4, r24	; 0x04
        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
    42ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d0:	98 89       	ldd	r25, Y+16	; 0x10
    42d2:	99 a7       	std	Y+41, r25	; 0x29
    42d4:	88 a7       	std	Y+40, r24	; 0x28
    42d6:	8c 81       	ldd	r24, Y+4	; 0x04
    42d8:	9d 81       	ldd	r25, Y+5	; 0x05
    42da:	8a 30       	cpi	r24, 0x0A	; 10
    42dc:	91 05       	cpc	r25, r1
    42de:	2c f0       	brlt	.+10     	; 0x42ea <LCD_FloatToString+0x96>
    42e0:	8c 81       	ldd	r24, Y+4	; 0x04
    42e2:	98 2f       	mov	r25, r24
    42e4:	99 5a       	subi	r25, 0xA9	; 169
    42e6:	9f a3       	std	Y+39, r25	; 0x27
    42e8:	04 c0       	rjmp	.+8      	; 0x42f2 <LCD_FloatToString+0x9e>
    42ea:	8c 81       	ldd	r24, Y+4	; 0x04
    42ec:	98 2f       	mov	r25, r24
    42ee:	90 5d       	subi	r25, 0xD0	; 208
    42f0:	9f a3       	std	Y+39, r25	; 0x27
    42f2:	ce 01       	movw	r24, r28
    42f4:	48 96       	adiw	r24, 0x18	; 24
    42f6:	e8 a5       	ldd	r30, Y+40	; 0x28
    42f8:	f9 a5       	ldd	r31, Y+41	; 0x29
    42fa:	e8 0f       	add	r30, r24
    42fc:	f9 1f       	adc	r31, r25
    42fe:	8f a1       	ldd	r24, Y+39	; 0x27
    4300:	80 83       	st	Z, r24
    4302:	8f 85       	ldd	r24, Y+15	; 0x0f
    4304:	98 89       	ldd	r25, Y+16	; 0x10
    4306:	01 96       	adiw	r24, 0x01	; 1
    4308:	98 8b       	std	Y+16, r25	; 0x10
    430a:	8f 87       	std	Y+15, r24	; 0x0f
        wholePart = wholePart/10;
    430c:	8d 89       	ldd	r24, Y+21	; 0x15
    430e:	9e 89       	ldd	r25, Y+22	; 0x16
    4310:	2a e0       	ldi	r18, 0x0A	; 10
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	b9 01       	movw	r22, r18
    4316:	0e 94 22 3d 	call	0x7a44	; 0x7a44 <__divmodhi4>
    431a:	cb 01       	movw	r24, r22
    431c:	9e 8b       	std	Y+22, r25	; 0x16
    431e:	8d 8b       	std	Y+21, r24	; 0x15
        charcter_Counter++;
    4320:	8f 89       	ldd	r24, Y+23	; 0x17
    4322:	8f 5f       	subi	r24, 0xFF	; 255
    4324:	8f 8b       	std	Y+23, r24	; 0x17
    // Extract fractional part
    float fractionalPart = num - wholePart;
	
    // convert integer part to string
    int i = 0;
    while (wholePart != 0) {
    4326:	8d 89       	ldd	r24, Y+21	; 0x15
    4328:	9e 89       	ldd	r25, Y+22	; 0x16
    432a:	00 97       	sbiw	r24, 0x00	; 0
    432c:	39 f6       	brne	.-114    	; 0x42bc <LCD_FloatToString+0x68>
        wholePart = wholePart/10;
        charcter_Counter++;
    }

    // Reverse the string
    int start = 0;
    432e:	1e 86       	std	Y+14, r1	; 0x0e
    4330:	1d 86       	std	Y+13, r1	; 0x0d
    int end = i - 1;
    4332:	8f 85       	ldd	r24, Y+15	; 0x0f
    4334:	98 89       	ldd	r25, Y+16	; 0x10
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	9c 87       	std	Y+12, r25	; 0x0c
    433a:	8b 87       	std	Y+11, r24	; 0x0b
    433c:	2c c0       	rjmp	.+88     	; 0x4396 <LCD_FloatToString+0x142>
    while (start < end) {
        char temp = str[start];
    433e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4340:	3e 85       	ldd	r19, Y+14	; 0x0e
    4342:	ce 01       	movw	r24, r28
    4344:	48 96       	adiw	r24, 0x18	; 24
    4346:	fc 01       	movw	r30, r24
    4348:	e2 0f       	add	r30, r18
    434a:	f3 1f       	adc	r31, r19
    434c:	80 81       	ld	r24, Z
    434e:	8b 83       	std	Y+3, r24	; 0x03
        str[start] = str[end];
    4350:	4d 85       	ldd	r20, Y+13	; 0x0d
    4352:	5e 85       	ldd	r21, Y+14	; 0x0e
    4354:	2b 85       	ldd	r18, Y+11	; 0x0b
    4356:	3c 85       	ldd	r19, Y+12	; 0x0c
    4358:	ce 01       	movw	r24, r28
    435a:	48 96       	adiw	r24, 0x18	; 24
    435c:	fc 01       	movw	r30, r24
    435e:	e2 0f       	add	r30, r18
    4360:	f3 1f       	adc	r31, r19
    4362:	20 81       	ld	r18, Z
    4364:	ce 01       	movw	r24, r28
    4366:	48 96       	adiw	r24, 0x18	; 24
    4368:	fc 01       	movw	r30, r24
    436a:	e4 0f       	add	r30, r20
    436c:	f5 1f       	adc	r31, r21
    436e:	20 83       	st	Z, r18
        str[end] = temp;
    4370:	2b 85       	ldd	r18, Y+11	; 0x0b
    4372:	3c 85       	ldd	r19, Y+12	; 0x0c
    4374:	ce 01       	movw	r24, r28
    4376:	48 96       	adiw	r24, 0x18	; 24
    4378:	fc 01       	movw	r30, r24
    437a:	e2 0f       	add	r30, r18
    437c:	f3 1f       	adc	r31, r19
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	80 83       	st	Z, r24
        start++;
    4382:	8d 85       	ldd	r24, Y+13	; 0x0d
    4384:	9e 85       	ldd	r25, Y+14	; 0x0e
    4386:	01 96       	adiw	r24, 0x01	; 1
    4388:	9e 87       	std	Y+14, r25	; 0x0e
    438a:	8d 87       	std	Y+13, r24	; 0x0d
        end--;
    438c:	8b 85       	ldd	r24, Y+11	; 0x0b
    438e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	9c 87       	std	Y+12, r25	; 0x0c
    4394:	8b 87       	std	Y+11, r24	; 0x0b
    }

    // Reverse the string
    int start = 0;
    int end = i - 1;
    while (start < end) {
    4396:	2d 85       	ldd	r18, Y+13	; 0x0d
    4398:	3e 85       	ldd	r19, Y+14	; 0x0e
    439a:	8b 85       	ldd	r24, Y+11	; 0x0b
    439c:	9c 85       	ldd	r25, Y+12	; 0x0c
    439e:	28 17       	cp	r18, r24
    43a0:	39 07       	cpc	r19, r25
    43a2:	6c f2       	brlt	.-102    	; 0x433e <LCD_FloatToString+0xea>
        start++;
        end--;
    }

    // Add decimal point
    str[i] = '.';
    43a4:	2f 85       	ldd	r18, Y+15	; 0x0f
    43a6:	38 89       	ldd	r19, Y+16	; 0x10
    43a8:	ce 01       	movw	r24, r28
    43aa:	48 96       	adiw	r24, 0x18	; 24
    43ac:	fc 01       	movw	r30, r24
    43ae:	e2 0f       	add	r30, r18
    43b0:	f3 1f       	adc	r31, r19
    43b2:	8e e2       	ldi	r24, 0x2E	; 46
    43b4:	80 83       	st	Z, r24
    charcter_Counter++;
    43b6:	8f 89       	ldd	r24, Y+23	; 0x17
    43b8:	8f 5f       	subi	r24, 0xFF	; 255
    43ba:	8f 8b       	std	Y+23, r24	; 0x17

    // Convert fractional part to string
    fractionalPart = fractionalPart * 100;  // for 2 decimal places
    43bc:	69 89       	ldd	r22, Y+17	; 0x11
    43be:	7a 89       	ldd	r23, Y+18	; 0x12
    43c0:	8b 89       	ldd	r24, Y+19	; 0x13
    43c2:	9c 89       	ldd	r25, Y+20	; 0x14
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	48 ec       	ldi	r20, 0xC8	; 200
    43ca:	52 e4       	ldi	r21, 0x42	; 66
    43cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	89 8b       	std	Y+17, r24	; 0x11
    43d6:	9a 8b       	std	Y+18, r25	; 0x12
    43d8:	ab 8b       	std	Y+19, r26	; 0x13
    43da:	bc 8b       	std	Y+20, r27	; 0x14
    int fractionalPartInt = (int)fractionalPart;
    43dc:	69 89       	ldd	r22, Y+17	; 0x11
    43de:	7a 89       	ldd	r23, Y+18	; 0x12
    43e0:	8b 89       	ldd	r24, Y+19	; 0x13
    43e2:	9c 89       	ldd	r25, Y+20	; 0x14
    43e4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	9a 87       	std	Y+10, r25	; 0x0a
    43ee:	89 87       	std	Y+9, r24	; 0x09
    int j = i + 1;
    43f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f2:	98 89       	ldd	r25, Y+16	; 0x10
    43f4:	01 96       	adiw	r24, 0x01	; 1
    43f6:	98 87       	std	Y+8, r25	; 0x08
    43f8:	8f 83       	std	Y+7, r24	; 0x07
    uint8 NumbersAfterPoint =0 ;
    43fa:	1e 82       	std	Y+6, r1	; 0x06
    43fc:	38 c0       	rjmp	.+112    	; 0x446e <LCD_FloatToString+0x21a>
    while (fractionalPartInt != 0) {
        NumbersAfterPoint++;
    43fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4400:	8f 5f       	subi	r24, 0xFF	; 255
    4402:	8e 83       	std	Y+6, r24	; 0x06
        int rem = fractionalPartInt % 10;
    4404:	89 85       	ldd	r24, Y+9	; 0x09
    4406:	9a 85       	ldd	r25, Y+10	; 0x0a
    4408:	2a e0       	ldi	r18, 0x0A	; 10
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	b9 01       	movw	r22, r18
    440e:	0e 94 22 3d 	call	0x7a44	; 0x7a44 <__divmodhi4>
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	89 83       	std	Y+1, r24	; 0x01
        str[j++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
    4416:	8f 81       	ldd	r24, Y+7	; 0x07
    4418:	98 85       	ldd	r25, Y+8	; 0x08
    441a:	9e a3       	std	Y+38, r25	; 0x26
    441c:	8d a3       	std	Y+37, r24	; 0x25
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	9a 81       	ldd	r25, Y+2	; 0x02
    4422:	8a 30       	cpi	r24, 0x0A	; 10
    4424:	91 05       	cpc	r25, r1
    4426:	2c f0       	brlt	.+10     	; 0x4432 <LCD_FloatToString+0x1de>
    4428:	89 81       	ldd	r24, Y+1	; 0x01
    442a:	98 2f       	mov	r25, r24
    442c:	99 5a       	subi	r25, 0xA9	; 169
    442e:	9c a3       	std	Y+36, r25	; 0x24
    4430:	04 c0       	rjmp	.+8      	; 0x443a <LCD_FloatToString+0x1e6>
    4432:	89 81       	ldd	r24, Y+1	; 0x01
    4434:	98 2f       	mov	r25, r24
    4436:	90 5d       	subi	r25, 0xD0	; 208
    4438:	9c a3       	std	Y+36, r25	; 0x24
    443a:	ce 01       	movw	r24, r28
    443c:	48 96       	adiw	r24, 0x18	; 24
    443e:	ed a1       	ldd	r30, Y+37	; 0x25
    4440:	fe a1       	ldd	r31, Y+38	; 0x26
    4442:	e8 0f       	add	r30, r24
    4444:	f9 1f       	adc	r31, r25
    4446:	8c a1       	ldd	r24, Y+36	; 0x24
    4448:	80 83       	st	Z, r24
    444a:	8f 81       	ldd	r24, Y+7	; 0x07
    444c:	98 85       	ldd	r25, Y+8	; 0x08
    444e:	01 96       	adiw	r24, 0x01	; 1
    4450:	98 87       	std	Y+8, r25	; 0x08
    4452:	8f 83       	std	Y+7, r24	; 0x07
        fractionalPartInt = fractionalPartInt/10;
    4454:	89 85       	ldd	r24, Y+9	; 0x09
    4456:	9a 85       	ldd	r25, Y+10	; 0x0a
    4458:	2a e0       	ldi	r18, 0x0A	; 10
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	b9 01       	movw	r22, r18
    445e:	0e 94 22 3d 	call	0x7a44	; 0x7a44 <__divmodhi4>
    4462:	cb 01       	movw	r24, r22
    4464:	9a 87       	std	Y+10, r25	; 0x0a
    4466:	89 87       	std	Y+9, r24	; 0x09
        charcter_Counter++;
    4468:	8f 89       	ldd	r24, Y+23	; 0x17
    446a:	8f 5f       	subi	r24, 0xFF	; 255
    446c:	8f 8b       	std	Y+23, r24	; 0x17
    // Convert fractional part to string
    fractionalPart = fractionalPart * 100;  // for 2 decimal places
    int fractionalPartInt = (int)fractionalPart;
    int j = i + 1;
    uint8 NumbersAfterPoint =0 ;
    while (fractionalPartInt != 0) {
    446e:	89 85       	ldd	r24, Y+9	; 0x09
    4470:	9a 85       	ldd	r25, Y+10	; 0x0a
    4472:	00 97       	sbiw	r24, 0x00	; 0
    4474:	21 f6       	brne	.-120    	; 0x43fe <LCD_FloatToString+0x1aa>
        int rem = fractionalPartInt % 10;
        str[j++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
        fractionalPartInt = fractionalPartInt/10;
        charcter_Counter++;
    }
    str[j] = '\0';  // end of string
    4476:	2f 81       	ldd	r18, Y+7	; 0x07
    4478:	38 85       	ldd	r19, Y+8	; 0x08
    447a:	ce 01       	movw	r24, r28
    447c:	48 96       	adiw	r24, 0x18	; 24
    447e:	fc 01       	movw	r30, r24
    4480:	e2 0f       	add	r30, r18
    4482:	f3 1f       	adc	r31, r19
    4484:	10 82       	st	Z, r1
    LCD_DisplayString( (uint8_t *)str);
    4486:	ce 01       	movw	r24, r28
    4488:	48 96       	adiw	r24, 0x18	; 24
    448a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    if(NumbersAfterPoint == 1)
    448e:	8e 81       	ldd	r24, Y+6	; 0x06
    4490:	81 30       	cpi	r24, 0x01	; 1
    4492:	21 f4       	brne	.+8      	; 0x449c <LCD_FloatToString+0x248>
    {
        LCD_DisplayString( (uint8_t *)" ");
    4494:	80 e6       	ldi	r24, 0x60	; 96
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    }

    return charcter_Counter;
    449c:	8f 89       	ldd	r24, Y+23	; 0x17
    449e:	a9 96       	adiw	r28, 0x29	; 41
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	f8 94       	cli
    44a4:	de bf       	out	0x3e, r29	; 62
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	cd bf       	out	0x3d, r28	; 61
    44aa:	cf 91       	pop	r28
    44ac:	df 91       	pop	r29
    44ae:	08 95       	ret

000044b0 <Keypad_4X3_AdjustKeyNumber>:


#if(KEYPAD_COL_NUM == 3)

static uint8 Keypad_4X3_AdjustKeyNumber(uint8 Button_Number)
{
    44b0:	df 93       	push	r29
    44b2:	cf 93       	push	r28
    44b4:	00 d0       	rcall	.+0      	; 0x44b6 <Keypad_4X3_AdjustKeyNumber+0x6>
    44b6:	00 d0       	rcall	.+0      	; 0x44b8 <Keypad_4X3_AdjustKeyNumber+0x8>
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
    44bc:	8a 83       	std	Y+2, r24	; 0x02
    uint8 pressed_key = 0;
    44be:	19 82       	std	Y+1, r1	; 0x01
    switch (Button_Number)
    44c0:	8a 81       	ldd	r24, Y+2	; 0x02
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	3c 83       	std	Y+4, r19	; 0x04
    44c8:	2b 83       	std	Y+3, r18	; 0x03
    44ca:	8b 81       	ldd	r24, Y+3	; 0x03
    44cc:	9c 81       	ldd	r25, Y+4	; 0x04
    44ce:	8a 30       	cpi	r24, 0x0A	; 10
    44d0:	91 05       	cpc	r25, r1
    44d2:	81 f0       	breq	.+32     	; 0x44f4 <Keypad_4X3_AdjustKeyNumber+0x44>
    44d4:	2b 81       	ldd	r18, Y+3	; 0x03
    44d6:	3c 81       	ldd	r19, Y+4	; 0x04
    44d8:	2a 30       	cpi	r18, 0x0A	; 10
    44da:	31 05       	cpc	r19, r1
    44dc:	9c f0       	brlt	.+38     	; 0x4504 <Keypad_4X3_AdjustKeyNumber+0x54>
    44de:	8b 81       	ldd	r24, Y+3	; 0x03
    44e0:	9c 81       	ldd	r25, Y+4	; 0x04
    44e2:	8b 30       	cpi	r24, 0x0B	; 11
    44e4:	91 05       	cpc	r25, r1
    44e6:	49 f0       	breq	.+18     	; 0x44fa <Keypad_4X3_AdjustKeyNumber+0x4a>
    44e8:	2b 81       	ldd	r18, Y+3	; 0x03
    44ea:	3c 81       	ldd	r19, Y+4	; 0x04
    44ec:	2c 30       	cpi	r18, 0x0C	; 12
    44ee:	31 05       	cpc	r19, r1
    44f0:	31 f0       	breq	.+12     	; 0x44fe <Keypad_4X3_AdjustKeyNumber+0x4e>
    44f2:	08 c0       	rjmp	.+16     	; 0x4504 <Keypad_4X3_AdjustKeyNumber+0x54>
    {
        case 10 :
            pressed_key = '*';
    44f4:	8a e2       	ldi	r24, 0x2A	; 42
    44f6:	89 83       	std	Y+1, r24	; 0x01
    44f8:	07 c0       	rjmp	.+14     	; 0x4508 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 11 : 
            pressed_key = 0;
    44fa:	19 82       	std	Y+1, r1	; 0x01
    44fc:	05 c0       	rjmp	.+10     	; 0x4508 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        case 12 : 
            pressed_key = '#';
    44fe:	83 e2       	ldi	r24, 0x23	; 35
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	02 c0       	rjmp	.+4      	; 0x4508 <Keypad_4X3_AdjustKeyNumber+0x58>
            break;

        default :
            pressed_key = Button_Number;   // if Button_Number =1  --> so will return 1 (as no mapping need like case 10 , 11 , 12)
    4504:	8a 81       	ldd	r24, Y+2	; 0x02
    4506:	89 83       	std	Y+1, r24	; 0x01
            break;
    }
    return pressed_key;
    4508:	89 81       	ldd	r24, Y+1	; 0x01
}
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	0f 90       	pop	r0
    4510:	0f 90       	pop	r0
    4512:	cf 91       	pop	r28
    4514:	df 91       	pop	r29
    4516:	08 95       	ret

00004518 <Keypad_init>:


/**************************                   Functions Definition                   **************************/

void Keypad_init(void)
{
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	00 d0       	rcall	.+0      	; 0x451e <Keypad_init+0x6>
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    4522:	1a 82       	std	Y+2, r1	; 0x02
    4524:	0f c0       	rjmp	.+30     	; 0x4544 <Keypad_init+0x2c>
        {
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)

            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN_PULLUP );
    4526:	8a 81       	ldd	r24, Y+2	; 0x02
    4528:	88 2f       	mov	r24, r24
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	fc 01       	movw	r30, r24
    452e:	ed 53       	subi	r30, 0x3D	; 61
    4530:	fd 4f       	sbci	r31, 0xFD	; 253
    4532:	90 81       	ld	r25, Z
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	69 2f       	mov	r22, r25
    4538:	41 e0       	ldi	r20, 0x01	; 1
    453a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
            #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                GPIO_WritePin(PORT_FOR_KEYPAD , KEYPAD_FIRST_PIN_COL_ID + it , LOGIC_LOW ); // set all columns to low
            #endif
        }
    #elif(Option_PIN_KEYPAD == KEYPAD_NOTSequencePin)
        for(uint8 it = 0 ; it < KEYPAD_ROW_NUM ; it++)  // to setup all rows
    453e:	8a 81       	ldd	r24, Y+2	; 0x02
    4540:	8f 5f       	subi	r24, 0xFF	; 255
    4542:	8a 83       	std	Y+2, r24	; 0x02
    4544:	8a 81       	ldd	r24, Y+2	; 0x02
    4546:	84 30       	cpi	r24, 0x04	; 4
    4548:	70 f3       	brcs	.-36     	; 0x4526 <Keypad_init+0xe>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    454a:	19 82       	std	Y+1, r1	; 0x01
    454c:	1b c0       	rjmp	.+54     	; 0x4584 <Keypad_init+0x6c>
        {
            GPIO_SetPinDirection(KEYPAD_COL_PORT , sequelizeCOL[it] , OUTPUT_PIN );
    454e:	89 81       	ldd	r24, Y+1	; 0x01
    4550:	88 2f       	mov	r24, r24
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	fc 01       	movw	r30, r24
    4556:	e0 54       	subi	r30, 0x40	; 64
    4558:	fd 4f       	sbci	r31, 0xFD	; 253
    455a:	90 81       	ld	r25, Z
    455c:	83 e0       	ldi	r24, 0x03	; 3
    455e:	69 2f       	mov	r22, r25
    4560:	42 e0       	ldi	r20, 0x02	; 2
    4562:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	88 2f       	mov	r24, r24
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	fc 01       	movw	r30, r24
    456e:	e0 54       	subi	r30, 0x40	; 64
    4570:	fd 4f       	sbci	r31, 0xFD	; 253
    4572:	90 81       	ld	r25, Z
    4574:	83 e0       	ldi	r24, 0x03	; 3
    4576:	69 2f       	mov	r22, r25
    4578:	41 e0       	ldi	r20, 0x01	; 1
    457a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            #elif(KEYPAD_PRESSED_STATE == LOGIC_HIGH)
            GPIO_SetPinDirection(KEYPAD_ROW_PORT ,sequelizeROW[it] , INPUT_PIN ); // need external pull down

            #endif
        }
        for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	8f 5f       	subi	r24, 0xFF	; 255
    4582:	89 83       	std	Y+1, r24	; 0x01
    4584:	89 81       	ldd	r24, Y+1	; 0x01
    4586:	83 30       	cpi	r24, 0x03	; 3
    4588:	10 f3       	brcs	.-60     	; 0x454e <Keypad_init+0x36>
                GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_LOW );// set all columns to low
            #endif
        }

    #endif
}
    458a:	0f 90       	pop	r0
    458c:	0f 90       	pop	r0
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	08 95       	ret

00004594 <Keypad_GetPressedKey>:


sint8 Keypad_GetPressedKey(void)
{
    4594:	df 93       	push	r29
    4596:	cf 93       	push	r28
    4598:	00 d0       	rcall	.+0      	; 0x459a <Keypad_GetPressedKey+0x6>
    459a:	00 d0       	rcall	.+0      	; 0x459c <Keypad_GetPressedKey+0x8>
    459c:	00 d0       	rcall	.+0      	; 0x459e <Keypad_GetPressedKey+0xa>
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    45a2:	1d 82       	std	Y+5, r1	; 0x05
    45a4:	0f c0       	rjmp	.+30     	; 0x45c4 <Keypad_GetPressedKey+0x30>
                {
                    GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[it] , LOGIC_HIGH ); // set all columns to High
    45a6:	8d 81       	ldd	r24, Y+5	; 0x05
    45a8:	88 2f       	mov	r24, r24
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	fc 01       	movw	r30, r24
    45ae:	e0 54       	subi	r30, 0x40	; 64
    45b0:	fd 4f       	sbci	r31, 0xFD	; 253
    45b2:	90 81       	ld	r25, Z
    45b4:	83 e0       	ldi	r24, 0x03	; 3
    45b6:	69 2f       	mov	r22, r25
    45b8:	41 e0       	ldi	r20, 0x01	; 1
    45ba:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            static uint8 pressed_BTN_IsReleased = FALSE ;
        #endif
        
            // set  one column with value want to read to loop in rows to read which key from this column pressed
            #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                for(uint8 it = 0 ; it < KEYPAD_COL_NUM ; it++)
    45be:	8d 81       	ldd	r24, Y+5	; 0x05
    45c0:	8f 5f       	subi	r24, 0xFF	; 255
    45c2:	8d 83       	std	Y+5, r24	; 0x05
    45c4:	8d 81       	ldd	r24, Y+5	; 0x05
    45c6:	83 30       	cpi	r24, 0x03	; 3
    45c8:	70 f3       	brcs	.-36     	; 0x45a6 <Keypad_GetPressedKey+0x12>
            #endif

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
    45ca:	8f ef       	ldi	r24, 0xFF	; 255
    45cc:	9f ef       	ldi	r25, 0xFF	; 255
    45ce:	9a 83       	std	Y+2, r25	; 0x02
    45d0:	89 83       	std	Y+1, r24	; 0x01
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    45d2:	1c 82       	std	Y+4, r1	; 0x04
    45d4:	45 c0       	rjmp	.+138    	; 0x4660 <Keypad_GetPressedKey+0xcc>
                {
                    // set  one column with value want to read to loop in rows to read which key from this column pressed
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
    45d6:	8c 81       	ldd	r24, Y+4	; 0x04
    45d8:	88 2f       	mov	r24, r24
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	fc 01       	movw	r30, r24
    45de:	e0 54       	subi	r30, 0x40	; 64
    45e0:	fd 4f       	sbci	r31, 0xFD	; 253
    45e2:	90 81       	ld	r25, Z
    45e4:	83 e0       	ldi	r24, 0x03	; 3
    45e6:	69 2f       	mov	r22, r25
    45e8:	40 e0       	ldi	r20, 0x00	; 0
    45ea:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    45ee:	1b 82       	std	Y+3, r1	; 0x03
    45f0:	25 c0       	rjmp	.+74     	; 0x463c <Keypad_GetPressedKey+0xa8>
                    {
                        if(GPIO_ReadPin(KEYPAD_ROW_PORT,sequelizeROW[row]) == KEYPAD_PRESSED_STATE)
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	88 2f       	mov	r24, r24
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	fc 01       	movw	r30, r24
    45fa:	ed 53       	subi	r30, 0x3D	; 61
    45fc:	fd 4f       	sbci	r31, 0xFD	; 253
    45fe:	90 81       	ld	r25, Z
    4600:	82 e0       	ldi	r24, 0x02	; 2
    4602:	69 2f       	mov	r22, r25
    4604:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <GPIO_ReadPin>
    4608:	88 23       	and	r24, r24
    460a:	a9 f4       	brne	.+42     	; 0x4636 <Keypad_GetPressedKey+0xa2>
                        {
                            #if(KEYPAD_COL_NUM == 3)
                                pressed_key = Keypad_4X3_AdjustKeyNumber((row*KEYPAD_COL_NUM)+col+1);
    460c:	8b 81       	ldd	r24, Y+3	; 0x03
    460e:	28 2f       	mov	r18, r24
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	c9 01       	movw	r24, r18
    4614:	88 0f       	add	r24, r24
    4616:	99 1f       	adc	r25, r25
    4618:	82 0f       	add	r24, r18
    461a:	93 1f       	adc	r25, r19
    461c:	98 2f       	mov	r25, r24
    461e:	8c 81       	ldd	r24, Y+4	; 0x04
    4620:	89 0f       	add	r24, r25
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	0e 94 58 22 	call	0x44b0	; 0x44b0 <Keypad_4X3_AdjustKeyNumber>
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9a 83       	std	Y+2, r25	; 0x02
    462e:	89 83       	std	Y+1, r24	; 0x01

                            pressed_BTN_IsReleased = TRUE;
                            /*store last pressed BTN*/
                            pressed_BTN = row ;
                        #endif
                            return pressed_key ;
    4630:	89 81       	ldd	r24, Y+1	; 0x01
    4632:	8e 83       	std	Y+6, r24	; 0x06
    4634:	1b c0       	rjmp	.+54     	; 0x466c <Keypad_GetPressedKey+0xd8>
                        GPIO_WritePin(KEYPAD_COL_PORT ,  sequelizeCOL[col] , LOGIC_LOW ); // set one of columns to low
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_HIGH ); // set one of columns to high
                    #endif

                    for(row = 0 ; row < KEYPAD_ROW_NUM ; row++)
    4636:	8b 81       	ldd	r24, Y+3	; 0x03
    4638:	8f 5f       	subi	r24, 0xFF	; 255
    463a:	8b 83       	std	Y+3, r24	; 0x03
    463c:	8b 81       	ldd	r24, Y+3	; 0x03
    463e:	84 30       	cpi	r24, 0x04	; 4
    4640:	c0 f2       	brcs	.-80     	; 0x45f2 <Keypad_GetPressedKey+0x5e>
                                //          |     I mean this step
                                //          |
                                //          \/
                    // retrive change happen to make same thing to next column
                    #if (KEYPAD_PRESSED_STATE == LOGIC_LOW)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL [col] , LOGIC_HIGH ); // set all columns to High
    4642:	8c 81       	ldd	r24, Y+4	; 0x04
    4644:	88 2f       	mov	r24, r24
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	fc 01       	movw	r30, r24
    464a:	e0 54       	subi	r30, 0x40	; 64
    464c:	fd 4f       	sbci	r31, 0xFD	; 253
    464e:	90 81       	ld	r25, Z
    4650:	83 e0       	ldi	r24, 0x03	; 3
    4652:	69 2f       	mov	r22, r25
    4654:	41 e0       	ldi	r20, 0x01	; 1
    4656:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>

            while(1)
            {
                uint8 col , row;
                signed pressed_key = -1 ;
                for(col = 0 ; col < KEYPAD_COL_NUM ; col++)
    465a:	8c 81       	ldd	r24, Y+4	; 0x04
    465c:	8f 5f       	subi	r24, 0xFF	; 255
    465e:	8c 83       	std	Y+4, r24	; 0x04
    4660:	8c 81       	ldd	r24, Y+4	; 0x04
    4662:	83 30       	cpi	r24, 0x03	; 3
    4664:	08 f4       	brcc	.+2      	; 0x4668 <Keypad_GetPressedKey+0xd4>
    4666:	b7 cf       	rjmp	.-146    	; 0x45d6 <Keypad_GetPressedKey+0x42>
                    #elif  (KEYPAD_PRESSED_STATE == LOGIC_HIGH)
                        GPIO_WritePin(KEYPAD_COL_PORT , sequelizeCOL[col] , LOGIC_LOW ); // set all columns to low
                    #endif

                }
                return pressed_key ;
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	8e 83       	std	Y+6, r24	; 0x06
    466c:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            

    #endif

}
    466e:	26 96       	adiw	r28, 0x06	; 6
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	f8 94       	cli
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	cf 91       	pop	r28
    467c:	df 91       	pop	r29
    467e:	08 95       	ret

00004680 <EEPROM_writeByte>:
#include "../../SERVICE/COMMON_MACROS.h"
#include "../../SERVICE/IVT.h"
#include "EXT_EEPROM_interface.h"

uint8 EEPROM_writeByte(uint8 u8addr,uint8 u8data)
{
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	00 d0       	rcall	.+0      	; 0x4686 <EEPROM_writeByte+0x6>
    4686:	0f 92       	push	r0
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
    468c:	89 83       	std	Y+1, r24	; 0x01
    468e:	6a 83       	std	Y+2, r22	; 0x02
    /*  Start communication*/
    I2C_Start();
    4690:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <I2C_Start>

    /*  get state and check it as expected to be start condition state  */
    if(TWI_getStatus() != I2C_Start_Condition)
    4694:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    4698:	88 30       	cpi	r24, 0x08	; 8
    469a:	11 f0       	breq	.+4      	; 0x46a0 <EEPROM_writeByte+0x20>
        return Error_EEPROM;
    469c:	1b 82       	std	Y+3, r1	; 0x03
    469e:	1f c0       	rjmp	.+62     	; 0x46de <EEPROM_writeByte+0x5e>

    /*  send EEPROM Address + write access*/
    I2C_WriteByte(SLA_W_I2C);
    46a0:	84 ea       	ldi	r24, 0xA4	; 164
    46a2:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteByte>

    /*  get state and check it as expected to be slave take its address + write operation  */
    if(TWI_getStatus() != I2C_SLA_W_transmitted_ACK)
    46a6:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    46aa:	88 31       	cpi	r24, 0x18	; 24
    46ac:	11 f0       	breq	.+4      	; 0x46b2 <EEPROM_writeByte+0x32>
        return Error_EEPROM;
    46ae:	1b 82       	std	Y+3, r1	; 0x03
    46b0:	16 c0       	rjmp	.+44     	; 0x46de <EEPROM_writeByte+0x5e>
    
    /*  send word address that I will write data to it*/
    I2C_WriteByte(u8addr);
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteByte>

    /*  get state and check it as expected to data transimited and received ACK  */
    if(TWI_getStatus() != I2C_Date_transmitted_ACK)
    46b8:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    46bc:	88 32       	cpi	r24, 0x28	; 40
    46be:	11 f0       	breq	.+4      	; 0x46c4 <EEPROM_writeByte+0x44>
        return Error_EEPROM;
    46c0:	1b 82       	std	Y+3, r1	; 0x03
    46c2:	0d c0       	rjmp	.+26     	; 0x46de <EEPROM_writeByte+0x5e>


    /*  send data that will assigned to this word address */
    I2C_WriteByte(u8data);
    46c4:	8a 81       	ldd	r24, Y+2	; 0x02
    46c6:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteByte>

    /*  get state and check it as expected to data transimited and received ACK  */
    if(TWI_getStatus() != I2C_Date_transmitted_ACK)
    46ca:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    46ce:	88 32       	cpi	r24, 0x28	; 40
    46d0:	11 f0       	breq	.+4      	; 0x46d6 <EEPROM_writeByte+0x56>
        return Error_EEPROM;
    46d2:	1b 82       	std	Y+3, r1	; 0x03
    46d4:	04 c0       	rjmp	.+8      	; 0x46de <EEPROM_writeByte+0x5e>

    /*  Send Stop Bit*/
    I2C_Stop();
    46d6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <I2C_Stop>

    return Success_EEPROM;
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	8b 81       	ldd	r24, Y+3	; 0x03
}
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <EEPROM_readByte>:



uint8 EEPROM_readByte(uint8 u8addr,uint8 *u8data)
{
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	00 d0       	rcall	.+0      	; 0x46f2 <EEPROM_readByte+0x6>
    46f2:	00 d0       	rcall	.+0      	; 0x46f4 <EEPROM_readByte+0x8>
    46f4:	cd b7       	in	r28, 0x3d	; 61
    46f6:	de b7       	in	r29, 0x3e	; 62
    46f8:	89 83       	std	Y+1, r24	; 0x01
    46fa:	7b 83       	std	Y+3, r23	; 0x03
    46fc:	6a 83       	std	Y+2, r22	; 0x02
    /*  Start communication*/
    I2C_Start();
    46fe:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <I2C_Start>

    /*  get state and check it as expected to be start condition state  */
    if(TWI_getStatus() != I2C_Start_Condition)
    4702:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    4706:	88 30       	cpi	r24, 0x08	; 8
    4708:	11 f0       	breq	.+4      	; 0x470e <EEPROM_readByte+0x22>
        return Error_EEPROM;
    470a:	1c 82       	std	Y+4, r1	; 0x04
    470c:	32 c0       	rjmp	.+100    	; 0x4772 <EEPROM_readByte+0x86>

    /*  Send Slave Address + W  */
    I2C_WriteByte(SLA_W_I2C);
    470e:	84 ea       	ldi	r24, 0xA4	; 164
    4710:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteByte>

    /*  Wait until Slave respond  */
    if(TWI_getStatus() != I2C_SLA_W_transmitted_ACK)
    4714:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    4718:	88 31       	cpi	r24, 0x18	; 24
    471a:	11 f0       	breq	.+4      	; 0x4720 <EEPROM_readByte+0x34>
        return Error_EEPROM ;
    471c:	1c 82       	std	Y+4, r1	; 0x04
    471e:	29 c0       	rjmp	.+82     	; 0x4772 <EEPROM_readByte+0x86>

    /*  Write address of word byte i will read from  */
    I2C_WriteByte(u8addr);
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteByte>

    /*  check that data send and received by slave */
    if(TWI_getStatus() != I2C_Date_transmitted_ACK)
    4726:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    472a:	88 32       	cpi	r24, 0x28	; 40
    472c:	11 f0       	breq	.+4      	; 0x4732 <EEPROM_readByte+0x46>
        return Error_EEPROM ;   
    472e:	1c 82       	std	Y+4, r1	; 0x04
    4730:	20 c0       	rjmp	.+64     	; 0x4772 <EEPROM_readByte+0x86>
    
    /*  make repeat start to make slave send data to master  */
    I2C_Start() ;
    4732:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <I2C_Start>

    /*  check that data send and slave respond to this  */
    if(TWI_getStatus() != I2C_Repeat_Start_condition)
    4736:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    473a:	80 31       	cpi	r24, 0x10	; 16
    473c:	11 f0       	breq	.+4      	; 0x4742 <EEPROM_readByte+0x56>
        return Error_EEPROM ;
    473e:	1c 82       	std	Y+4, r1	; 0x04
    4740:	18 c0       	rjmp	.+48     	; 0x4772 <EEPROM_readByte+0x86>

    /*  Send Slave Address + R*/
    I2C_WriteByte(SLA_R_I2C);
    4742:	85 ea       	ldi	r24, 0xA5	; 165
    4744:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteByte>

    /*  Check that slave respond with ACK  */
    if(TWI_getStatus() != I2C_SLA_R_transmitted_ACK)
    4748:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    474c:	80 34       	cpi	r24, 0x40	; 64
    474e:	11 f0       	breq	.+4      	; 0x4754 <EEPROM_readByte+0x68>
        return Error_EEPROM ;
    4750:	1c 82       	std	Y+4, r1	; 0x04
    4752:	0f c0       	rjmp	.+30     	; 0x4772 <EEPROM_readByte+0x86>
    
    /*  Master will wait until receive data */
    *u8data = I2C_ReadByteWithNACK();
    4754:	0e 94 b2 0b 	call	0x1764	; 0x1764 <I2C_ReadByteWithNACK>
    4758:	ea 81       	ldd	r30, Y+2	; 0x02
    475a:	fb 81       	ldd	r31, Y+3	; 0x03
    475c:	80 83       	st	Z, r24

    /*  check on data received with NACK*/
    if(TWI_getStatus() != I2C_Date_received_NACK)
    475e:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    4762:	88 35       	cpi	r24, 0x58	; 88
    4764:	11 f0       	breq	.+4      	; 0x476a <EEPROM_readByte+0x7e>
        return Error_EEPROM ;
    4766:	1c 82       	std	Y+4, r1	; 0x04
    4768:	04 c0       	rjmp	.+8      	; 0x4772 <EEPROM_readByte+0x86>
    /*  send stop bit  */
    I2C_Stop();
    476a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <I2C_Stop>

    return Success_EEPROM ;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	8c 83       	std	Y+4, r24	; 0x04
    4772:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	0f 90       	pop	r0
    477c:	cf 91       	pop	r28
    477e:	df 91       	pop	r29
    4780:	08 95       	ret

00004782 <DC_Motor_Init>:
#include "../../MCAL/GPIO/GPIO_interface.h"

/**************************                   Impelementation                   **************************/

void DC_Motor_Init(DC_Pin_Type *DC_Pin_Value)
{
    4782:	df 93       	push	r29
    4784:	cf 93       	push	r28
    4786:	00 d0       	rcall	.+0      	; 0x4788 <DC_Motor_Init+0x6>
    4788:	cd b7       	in	r28, 0x3d	; 61
    478a:	de b7       	in	r29, 0x3e	; 62
    478c:	9a 83       	std	Y+2, r25	; 0x02
    478e:	89 83       	std	Y+1, r24	; 0x01
    /*  Set direction as output for first pin of control direction for Motor*/
    GPIO_SetPinDirection(DC_Pin_Value->DC_EN1_PORT , DC_Pin_Value->DC_EN1_PIN , OUTPUT_PIN);
    4790:	e9 81       	ldd	r30, Y+1	; 0x01
    4792:	fa 81       	ldd	r31, Y+2	; 0x02
    4794:	80 81       	ld	r24, Z
    4796:	e9 81       	ldd	r30, Y+1	; 0x01
    4798:	fa 81       	ldd	r31, Y+2	; 0x02
    479a:	91 81       	ldd	r25, Z+1	; 0x01
    479c:	69 2f       	mov	r22, r25
    479e:	42 e0       	ldi	r20, 0x02	; 2
    47a0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>

    /*  Set direction as output for first pin of control direction for Motor*/
    GPIO_SetPinDirection(DC_Pin_Value->DC_EN2_PORT , DC_Pin_Value->DC_EN2_PIN , OUTPUT_PIN);
    47a4:	e9 81       	ldd	r30, Y+1	; 0x01
    47a6:	fa 81       	ldd	r31, Y+2	; 0x02
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	e9 81       	ldd	r30, Y+1	; 0x01
    47ac:	fa 81       	ldd	r31, Y+2	; 0x02
    47ae:	93 81       	ldd	r25, Z+3	; 0x03
    47b0:	69 2f       	mov	r22, r25
    47b2:	42 e0       	ldi	r20, 0x02	; 2
    47b4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>

    /*  Set motor @ first stopped   */
    GPIO_WritePin(DC_Pin_Value->DC_EN1_PORT , DC_Pin_Value->DC_EN1_PIN ,LOGIC_LOW);
    47b8:	e9 81       	ldd	r30, Y+1	; 0x01
    47ba:	fa 81       	ldd	r31, Y+2	; 0x02
    47bc:	80 81       	ld	r24, Z
    47be:	e9 81       	ldd	r30, Y+1	; 0x01
    47c0:	fa 81       	ldd	r31, Y+2	; 0x02
    47c2:	91 81       	ldd	r25, Z+1	; 0x01
    47c4:	69 2f       	mov	r22, r25
    47c6:	40 e0       	ldi	r20, 0x00	; 0
    47c8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    GPIO_WritePin(DC_Pin_Value->DC_EN2_PORT , DC_Pin_Value->DC_EN2_PIN ,LOGIC_LOW);
    47cc:	e9 81       	ldd	r30, Y+1	; 0x01
    47ce:	fa 81       	ldd	r31, Y+2	; 0x02
    47d0:	82 81       	ldd	r24, Z+2	; 0x02
    47d2:	e9 81       	ldd	r30, Y+1	; 0x01
    47d4:	fa 81       	ldd	r31, Y+2	; 0x02
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	69 2f       	mov	r22, r25
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>

    /*  Init used Timer     */
    #if(current_Timer_Source_Used == TImer0_Source)
        Timer0_Init();
    47e0:	0e 94 91 0a 	call	0x1522	; 0x1522 <Timer0_Init>
        Timer1_Init();
    #elif(current_Timer_Source_Used == TImer2_Source)

    #endif

}
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	08 95       	ret

000047ee <DC_Motor_Speed>:

void DC_Motor_Speed(DC_Pin_Type *DC_Pin_Value , DC_movementState_Type DC_movementState_value , uint8 speed)
{
    47ee:	df 93       	push	r29
    47f0:	cf 93       	push	r28
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <DC_Motor_Speed+0x6>
    47f4:	00 d0       	rcall	.+0      	; 0x47f6 <DC_Motor_Speed+0x8>
    47f6:	00 d0       	rcall	.+0      	; 0x47f8 <DC_Motor_Speed+0xa>
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62
    47fc:	9a 83       	std	Y+2, r25	; 0x02
    47fe:	89 83       	std	Y+1, r24	; 0x01
    4800:	6b 83       	std	Y+3, r22	; 0x03
    4802:	4c 83       	std	Y+4, r20	; 0x04
    switch (DC_movementState_value)
    4804:	8b 81       	ldd	r24, Y+3	; 0x03
    4806:	28 2f       	mov	r18, r24
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	3e 83       	std	Y+6, r19	; 0x06
    480c:	2d 83       	std	Y+5, r18	; 0x05
    480e:	8d 81       	ldd	r24, Y+5	; 0x05
    4810:	9e 81       	ldd	r25, Y+6	; 0x06
    4812:	81 30       	cpi	r24, 0x01	; 1
    4814:	91 05       	cpc	r25, r1
    4816:	f9 f0       	breq	.+62     	; 0x4856 <DC_Motor_Speed+0x68>
    4818:	2d 81       	ldd	r18, Y+5	; 0x05
    481a:	3e 81       	ldd	r19, Y+6	; 0x06
    481c:	22 30       	cpi	r18, 0x02	; 2
    481e:	31 05       	cpc	r19, r1
    4820:	79 f1       	breq	.+94     	; 0x4880 <DC_Motor_Speed+0x92>
    4822:	8d 81       	ldd	r24, Y+5	; 0x05
    4824:	9e 81       	ldd	r25, Y+6	; 0x06
    4826:	00 97       	sbiw	r24, 0x00	; 0
    4828:	09 f0       	breq	.+2      	; 0x482c <DC_Motor_Speed+0x3e>
    482a:	3e c0       	rjmp	.+124    	; 0x48a8 <DC_Motor_Speed+0xba>
    {
        case DC_Motor_CW :
            GPIO_WritePin(DC_Pin_Value->DC_EN1_PORT , DC_Pin_Value->DC_EN1_PIN ,LOGIC_LOW);
    482c:	e9 81       	ldd	r30, Y+1	; 0x01
    482e:	fa 81       	ldd	r31, Y+2	; 0x02
    4830:	80 81       	ld	r24, Z
    4832:	e9 81       	ldd	r30, Y+1	; 0x01
    4834:	fa 81       	ldd	r31, Y+2	; 0x02
    4836:	91 81       	ldd	r25, Z+1	; 0x01
    4838:	69 2f       	mov	r22, r25
    483a:	40 e0       	ldi	r20, 0x00	; 0
    483c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(DC_Pin_Value->DC_EN2_PORT , DC_Pin_Value->DC_EN2_PIN ,LOGIC_HIGH); 
    4840:	e9 81       	ldd	r30, Y+1	; 0x01
    4842:	fa 81       	ldd	r31, Y+2	; 0x02
    4844:	82 81       	ldd	r24, Z+2	; 0x02
    4846:	e9 81       	ldd	r30, Y+1	; 0x01
    4848:	fa 81       	ldd	r31, Y+2	; 0x02
    484a:	93 81       	ldd	r25, Z+3	; 0x03
    484c:	69 2f       	mov	r22, r25
    484e:	41 e0       	ldi	r20, 0x01	; 1
    4850:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    4854:	29 c0       	rjmp	.+82     	; 0x48a8 <DC_Motor_Speed+0xba>
        break ;

        case DC_Motor_ACW :
            GPIO_WritePin(DC_Pin_Value->DC_EN1_PORT , DC_Pin_Value->DC_EN1_PIN ,LOGIC_HIGH);
    4856:	e9 81       	ldd	r30, Y+1	; 0x01
    4858:	fa 81       	ldd	r31, Y+2	; 0x02
    485a:	80 81       	ld	r24, Z
    485c:	e9 81       	ldd	r30, Y+1	; 0x01
    485e:	fa 81       	ldd	r31, Y+2	; 0x02
    4860:	91 81       	ldd	r25, Z+1	; 0x01
    4862:	69 2f       	mov	r22, r25
    4864:	41 e0       	ldi	r20, 0x01	; 1
    4866:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(DC_Pin_Value->DC_EN2_PORT , DC_Pin_Value->DC_EN2_PIN ,LOGIC_LOW); 
    486a:	e9 81       	ldd	r30, Y+1	; 0x01
    486c:	fa 81       	ldd	r31, Y+2	; 0x02
    486e:	82 81       	ldd	r24, Z+2	; 0x02
    4870:	e9 81       	ldd	r30, Y+1	; 0x01
    4872:	fa 81       	ldd	r31, Y+2	; 0x02
    4874:	93 81       	ldd	r25, Z+3	; 0x03
    4876:	69 2f       	mov	r22, r25
    4878:	40 e0       	ldi	r20, 0x00	; 0
    487a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    487e:	14 c0       	rjmp	.+40     	; 0x48a8 <DC_Motor_Speed+0xba>
        break ;

        case DC_Motor_Stop :
            GPIO_WritePin(DC_Pin_Value->DC_EN1_PORT , DC_Pin_Value->DC_EN1_PIN ,LOGIC_LOW);
    4880:	e9 81       	ldd	r30, Y+1	; 0x01
    4882:	fa 81       	ldd	r31, Y+2	; 0x02
    4884:	80 81       	ld	r24, Z
    4886:	e9 81       	ldd	r30, Y+1	; 0x01
    4888:	fa 81       	ldd	r31, Y+2	; 0x02
    488a:	91 81       	ldd	r25, Z+1	; 0x01
    488c:	69 2f       	mov	r22, r25
    488e:	40 e0       	ldi	r20, 0x00	; 0
    4890:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
            GPIO_WritePin(DC_Pin_Value->DC_EN2_PORT , DC_Pin_Value->DC_EN2_PIN ,LOGIC_LOW); 
    4894:	e9 81       	ldd	r30, Y+1	; 0x01
    4896:	fa 81       	ldd	r31, Y+2	; 0x02
    4898:	82 81       	ldd	r24, Z+2	; 0x02
    489a:	e9 81       	ldd	r30, Y+1	; 0x01
    489c:	fa 81       	ldd	r31, Y+2	; 0x02
    489e:	93 81       	ldd	r25, Z+3	; 0x03
    48a0:	69 2f       	mov	r22, r25
    48a2:	40 e0       	ldi	r20, 0x00	; 0
    48a4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    }

    /*  Set pin value of PWM*/
    #if(current_Timer_Source_Used == TImer0_Source)
        #if(TIMER0_CURRENT_MODE == T0_FAST_PWM_MODE)
            if(speed >=100) 
    48a8:	8c 81       	ldd	r24, Y+4	; 0x04
    48aa:	84 36       	cpi	r24, 0x64	; 100
    48ac:	18 f0       	brcs	.+6      	; 0x48b4 <DC_Motor_Speed+0xc6>
                speed = 99 ;
    48ae:	83 e6       	ldi	r24, 0x63	; 99
    48b0:	8c 83       	std	Y+4, r24	; 0x04
    48b2:	05 c0       	rjmp	.+10     	; 0x48be <DC_Motor_Speed+0xd0>
            else if(speed <= 0)
    48b4:	8c 81       	ldd	r24, Y+4	; 0x04
    48b6:	88 23       	and	r24, r24
    48b8:	11 f4       	brne	.+4      	; 0x48be <DC_Motor_Speed+0xd0>
                speed = 1;
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	8c 83       	std	Y+4, r24	; 0x04
            Timer0_FastPWMSetDutyCycle(speed);
    48be:	8c 81       	ldd	r24, Y+4	; 0x04
    48c0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <Timer0_FastPWMSetDutyCycle>
    #elif(current_Timer_Source_Used == TImer2_Source)


    #endif

}
    48c4:	26 96       	adiw	r28, 0x06	; 6
    48c6:	0f b6       	in	r0, 0x3f	; 63
    48c8:	f8 94       	cli
    48ca:	de bf       	out	0x3e, r29	; 62
    48cc:	0f be       	out	0x3f, r0	; 63
    48ce:	cd bf       	out	0x3d, r28	; 61
    48d0:	cf 91       	pop	r28
    48d2:	df 91       	pop	r29
    48d4:	08 95       	ret

000048d6 <Buzzer_Init>:

#include "Buzzer_interface.h"


void Buzzer_Init(uint8 PORTX , uint8 PIN )
{
    48d6:	df 93       	push	r29
    48d8:	cf 93       	push	r28
    48da:	00 d0       	rcall	.+0      	; 0x48dc <Buzzer_Init+0x6>
    48dc:	cd b7       	in	r28, 0x3d	; 61
    48de:	de b7       	in	r29, 0x3e	; 62
    48e0:	89 83       	std	Y+1, r24	; 0x01
    48e2:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
    48e4:	89 81       	ldd	r24, Y+1	; 0x01
    48e6:	6a 81       	ldd	r22, Y+2	; 0x02
    48e8:	42 e0       	ldi	r20, 0x02	; 2
    48ea:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
}
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	cf 91       	pop	r28
    48f4:	df 91       	pop	r29
    48f6:	08 95       	ret

000048f8 <Buzzer_OnOffPositiveLogic>:


void Buzzer_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    48f8:	df 93       	push	r29
    48fa:	cf 93       	push	r28
    48fc:	00 d0       	rcall	.+0      	; 0x48fe <Buzzer_OnOffPositiveLogic+0x6>
    48fe:	0f 92       	push	r0
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	89 83       	std	Y+1, r24	; 0x01
    4906:	6a 83       	std	Y+2, r22	; 0x02
    4908:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    490a:	8b 81       	ldd	r24, Y+3	; 0x03
    490c:	88 23       	and	r24, r24
    490e:	31 f4       	brne	.+12     	; 0x491c <Buzzer_OnOffPositiveLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    4910:	89 81       	ldd	r24, Y+1	; 0x01
    4912:	6a 81       	ldd	r22, Y+2	; 0x02
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    491a:	08 c0       	rjmp	.+16     	; 0x492c <Buzzer_OnOffPositiveLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    491c:	8b 81       	ldd	r24, Y+3	; 0x03
    491e:	81 30       	cpi	r24, 0x01	; 1
    4920:	29 f4       	brne	.+10     	; 0x492c <Buzzer_OnOffPositiveLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    4922:	89 81       	ldd	r24, Y+1	; 0x01
    4924:	6a 81       	ldd	r22, Y+2	; 0x02
    4926:	41 e0       	ldi	r20, 0x01	; 1
    4928:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    }
}
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	cf 91       	pop	r28
    4934:	df 91       	pop	r29
    4936:	08 95       	ret

00004938 <Buzzer_OnOffNegativeLogic>:


void Buzzer_OnOffNegativeLogic(uint8 PORTX , uint8 PIN ,BuzzerState_config State_value)
{
    4938:	df 93       	push	r29
    493a:	cf 93       	push	r28
    493c:	00 d0       	rcall	.+0      	; 0x493e <Buzzer_OnOffNegativeLogic+0x6>
    493e:	0f 92       	push	r0
    4940:	cd b7       	in	r28, 0x3d	; 61
    4942:	de b7       	in	r29, 0x3e	; 62
    4944:	89 83       	std	Y+1, r24	; 0x01
    4946:	6a 83       	std	Y+2, r22	; 0x02
    4948:	4b 83       	std	Y+3, r20	; 0x03
    if(State_value == Buzzer_OFF)
    494a:	8b 81       	ldd	r24, Y+3	; 0x03
    494c:	88 23       	and	r24, r24
    494e:	31 f4       	brne	.+12     	; 0x495c <Buzzer_OnOffNegativeLogic+0x24>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	6a 81       	ldd	r22, Y+2	; 0x02
    4954:	41 e0       	ldi	r20, 0x01	; 1
    4956:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    495a:	08 c0       	rjmp	.+16     	; 0x496c <Buzzer_OnOffNegativeLogic+0x34>
    }
    else if(State_value == Buzzer_ON)
    495c:	8b 81       	ldd	r24, Y+3	; 0x03
    495e:	81 30       	cpi	r24, 0x01	; 1
    4960:	29 f4       	brne	.+10     	; 0x496c <Buzzer_OnOffNegativeLogic+0x34>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
    4962:	89 81       	ldd	r24, Y+1	; 0x01
    4964:	6a 81       	ldd	r22, Y+2	; 0x02
    4966:	40 e0       	ldi	r20, 0x00	; 0
    4968:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    }
}
    496c:	0f 90       	pop	r0
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	08 95       	ret

00004978 <Buzzer_Toggle>:



void Buzzer_Toggle(uint8 PORTX , uint8 PIN)
{
    4978:	df 93       	push	r29
    497a:	cf 93       	push	r28
    497c:	00 d0       	rcall	.+0      	; 0x497e <Buzzer_Toggle+0x6>
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	89 83       	std	Y+1, r24	; 0x01
    4984:	6a 83       	std	Y+2, r22	; 0x02
    GPIO_TogglePin(PORTX,PIN);
    4986:	89 81       	ldd	r24, Y+1	; 0x01
    4988:	6a 81       	ldd	r22, Y+2	; 0x02
    498a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <GPIO_TogglePin>
}
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	cf 91       	pop	r28
    4994:	df 91       	pop	r29
    4996:	08 95       	ret

00004998 <UART_Receive_Handler>:

uint8 UART_Buffer[DEFAULT_BUFFER_SIZE] = {};
volatile uint8 UART_Counter = 0 ;

void UART_Receive_Handler(void)
{   
    4998:	0f 93       	push	r16
    499a:	1f 93       	push	r17
    499c:	df 93       	push	r29
    499e:	cf 93       	push	r28
    49a0:	cd b7       	in	r28, 0x3d	; 61
    49a2:	de b7       	in	r29, 0x3e	; 62
    UART_Buffer[UART_Counter]  =    USART_Catch_UDR_Value();
    49a4:	80 91 04 03 	lds	r24, 0x0304
    49a8:	08 2f       	mov	r16, r24
    49aa:	10 e0       	ldi	r17, 0x00	; 0
    49ac:	0e 94 17 09 	call	0x122e	; 0x122e <USART_Catch_UDR_Value>
    49b0:	f8 01       	movw	r30, r16
    49b2:	e5 50       	subi	r30, 0x05	; 5
    49b4:	fd 4f       	sbci	r31, 0xFD	; 253
    49b6:	80 83       	st	Z, r24
    UART_Counter++;
    49b8:	80 91 04 03 	lds	r24, 0x0304
    49bc:	8f 5f       	subi	r24, 0xFF	; 255
    49be:	80 93 04 03 	sts	0x0304, r24
    if(UART_Counter == (DEFAULT_BUFFER_SIZE - 1))
    49c2:	80 91 04 03 	lds	r24, 0x0304
    49c6:	88 30       	cpi	r24, 0x08	; 8
    49c8:	11 f4       	brne	.+4      	; 0x49ce <UART_Receive_Handler+0x36>
    {
        UART_Counter = 0 ;
    49ca:	10 92 04 03 	sts	0x0304, r1
    }
}
    49ce:	cf 91       	pop	r28
    49d0:	df 91       	pop	r29
    49d2:	1f 91       	pop	r17
    49d4:	0f 91       	pop	r16
    49d6:	08 95       	ret

000049d8 <Bluetooth_Init>:


void Bluetooth_Init(void)
{
    49d8:	df 93       	push	r29
    49da:	cf 93       	push	r28
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
    /*  Initialize UART*/
    USART_Init();
    49e0:	0e 94 a8 07 	call	0xf50	; 0xf50 <USART_Init>
    /*  Enable Receive Interrupt    */
    USART_EnableReceiveInerrupt();
    49e4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <USART_EnableReceiveInerrupt>
    /*  Set call back function  */
    USART_receiveByteAsynchCallBack(UART_Receive_Handler);
    49e8:	8c ec       	ldi	r24, 0xCC	; 204
    49ea:	94 e2       	ldi	r25, 0x24	; 36
    49ec:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <USART_receiveByteAsynchCallBack>

}
    49f0:	cf 91       	pop	r28
    49f2:	df 91       	pop	r29
    49f4:	08 95       	ret

000049f6 <Bluetooth_Send>:


void Bluetooth_Send(const uint8 * string)
{
    49f6:	df 93       	push	r29
    49f8:	cf 93       	push	r28
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <Bluetooth_Send+0x6>
    49fc:	cd b7       	in	r28, 0x3d	; 61
    49fe:	de b7       	in	r29, 0x3e	; 62
    4a00:	9a 83       	std	Y+2, r25	; 0x02
    4a02:	89 83       	std	Y+1, r24	; 0x01
    USART_SendStringPolling(string);
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	9a 81       	ldd	r25, Y+2	; 0x02
    4a08:	0e 94 77 08 	call	0x10ee	; 0x10ee <USART_SendStringPolling>
}
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	cf 91       	pop	r28
    4a12:	df 91       	pop	r29
    4a14:	08 95       	ret

00004a16 <BUTTON_Init>:
 *******************************************************************************/

#include "BUTTON_interface.h"

void BUTTON_Init(uint8 PORTX ,uint8 PIN ,GPIO_PinDirectionTypes typeOfInput )
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	00 d0       	rcall	.+0      	; 0x4a1c <BUTTON_Init+0x6>
    4a1c:	0f 92       	push	r0
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	89 83       	std	Y+1, r24	; 0x01
    4a24:	6a 83       	std	Y+2, r22	; 0x02
    4a26:	4b 83       	std	Y+3, r20	; 0x03
    GPIO_SetPinDirection(PORTX,PIN,typeOfInput);
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	6a 81       	ldd	r22, Y+2	; 0x02
    4a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    4a2e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
}
    4a32:	0f 90       	pop	r0
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	cf 91       	pop	r28
    4a3a:	df 91       	pop	r29
    4a3c:	08 95       	ret

00004a3e <BUTTON_GetValue>:

uint8 BUTTON_GetValue(uint8 PORTX ,uint8 PIN )
{
    4a3e:	df 93       	push	r29
    4a40:	cf 93       	push	r28
    4a42:	00 d0       	rcall	.+0      	; 0x4a44 <BUTTON_GetValue+0x6>
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	6a 83       	std	Y+2, r22	; 0x02
    return GPIO_ReadPin(PORTX,PIN);
    4a4c:	89 81       	ldd	r24, Y+1	; 0x01
    4a4e:	6a 81       	ldd	r22, Y+2	; 0x02
    4a50:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <GPIO_ReadPin>
    4a54:	0f 90       	pop	r0
    4a56:	0f 90       	pop	r0
    4a58:	cf 91       	pop	r28
    4a5a:	df 91       	pop	r29
    4a5c:	08 95       	ret

00004a5e <App_StateMachineUpdate>:
static uint8 EXT0_Count = 0 ;

/*  👀👀 Function called inside While(1) Loop  */

void App_StateMachineUpdate(void)
{
    4a5e:	df 93       	push	r29
    4a60:	cf 93       	push	r28
    4a62:	cd b7       	in	r28, 0x3d	; 61
    4a64:	de b7       	in	r29, 0x3e	; 62
    Hanndle_GrearBox_N_State();
    4a66:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <Hanndle_GrearBox_N_State>

    // Hanndle_GrearBox_D_State();

    Hanndle_GrearBox_R_State();
    4a6a:	0e 94 76 25 	call	0x4aec	; 0x4aec <Hanndle_GrearBox_R_State>


    APP_KeypadUpdate();
    4a6e:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <APP_KeypadUpdate>

    Braking_LongPressHandle();
    4a72:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <Braking_LongPressHandle>

    App_CarSpeedUpdate ();
    4a76:	0e 94 00 3a 	call	0x7400	; 0x7400 <App_CarSpeedUpdate>

    GetDiffCarSpeed_and_limit();
    4a7a:	0e 94 96 29 	call	0x532c	; 0x532c <GetDiffCarSpeed_and_limit>

    /*  make continous update for dashboard if I in page 2   */
    DashBoard_DrivingMonetoring_continous_Status_update();
    4a7e:	0e 94 3d 2a 	call	0x547a	; 0x547a <DashBoard_DrivingMonetoring_continous_Status_update>
    
    /*  used to update time if I in page 4*/
    DashBoard_updateTime();
    4a82:	0e 94 91 37 	call	0x6f22	; 0x6f22 <DashBoard_updateTime>

    /*  Update Kilko meters for Kilo metrers moved in Dashboard */  
    APP_CarMovedKiloMeters();
    4a86:	0e 94 c9 3c 	call	0x7992	; 0x7992 <APP_CarMovedKiloMeters>

    if( (BrakingAssist_Current_State == BrakingAssist_Enable) && (D_GearBox == GearBox_Current_State) )
    4a8a:	80 91 09 03 	lds	r24, 0x0309
    4a8e:	81 30       	cpi	r24, 0x01	; 1
    4a90:	41 f4       	brne	.+16     	; 0x4aa2 <App_StateMachineUpdate+0x44>
    4a92:	80 91 06 03 	lds	r24, 0x0306
    4a96:	81 30       	cpi	r24, 0x01	; 1
    4a98:	21 f4       	brne	.+8      	; 0x4aa2 <App_StateMachineUpdate+0x44>
    {
        ACCS_CatchDistance();
    4a9a:	0e 94 04 38 	call	0x7008	; 0x7008 <ACCS_CatchDistance>
        ACCS_DicisionTake();
    4a9e:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <ACCS_DicisionTake>
    }

    Bluetooth_Buffer_Decision();
    4aa2:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Bluetooth_Buffer_Decision>
}
    4aa6:	cf 91       	pop	r28
    4aa8:	df 91       	pop	r29
    4aaa:	08 95       	ret

00004aac <Hanndle_GrearBox_D_State>:


static void Hanndle_GrearBox_D_State(void)
{
    4aac:	df 93       	push	r29
    4aae:	cf 93       	push	r28
    4ab0:	0f 92       	push	r0
    4ab2:	cd b7       	in	r28, 0x3d	; 61
    4ab4:	de b7       	in	r29, 0x3e	; 62
    if((CCS_Currnet_state == CCS_Enable) && (D_GearBox == GearBox_Current_State))
    4ab6:	80 91 07 03 	lds	r24, 0x0307
       // ACCS_CatchDistance();
        /*  may be interrupt happen here so inside next function check if brake button pressed and make disable for ACCS    */
       // ACCS_DicisionTake();
        
    }
}
    4aba:	0f 90       	pop	r0
    4abc:	cf 91       	pop	r28
    4abe:	df 91       	pop	r29
    4ac0:	08 95       	ret

00004ac2 <Hanndle_GrearBox_N_State>:



static void Hanndle_GrearBox_N_State(void)
{
    4ac2:	df 93       	push	r29
    4ac4:	cf 93       	push	r28
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    if(GearBox_Current_State == N_GearBox)
    4aca:	80 91 06 03 	lds	r24, 0x0306
    4ace:	88 23       	and	r24, r24
    4ad0:	51 f4       	brne	.+20     	; 0x4ae6 <Hanndle_GrearBox_N_State+0x24>
    {
        if(CCS_Currnet_state == CCS_Enable)
    4ad2:	80 91 07 03 	lds	r24, 0x0307
    4ad6:	81 30       	cpi	r24, 0x01	; 1
    4ad8:	31 f4       	brne	.+12     	; 0x4ae6 <Hanndle_GrearBox_N_State+0x24>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    4ada:	10 92 07 03 	sts	0x0307, r1
            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    4ade:	80 91 07 03 	lds	r24, 0x0307
    4ae2:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>

        }
    }
   
}
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	08 95       	ret

00004aec <Hanndle_GrearBox_R_State>:


static void Hanndle_GrearBox_R_State(void)
{
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62
    4af4:	6c 97       	sbiw	r28, 0x1c	; 28
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    if(GearBox_Current_State == R_GearBox)
    4b00:	80 91 06 03 	lds	r24, 0x0306
    4b04:	82 30       	cpi	r24, 0x02	; 2
    4b06:	09 f0       	breq	.+2      	; 0x4b0a <Hanndle_GrearBox_R_State+0x1e>
    4b08:	0c c1       	rjmp	.+536    	; 0x4d22 <Hanndle_GrearBox_R_State+0x236>
    {
        /*  Turn off led that work in Adaptive cruise control  as may make switch by gearBox so I need to handle this   */
        //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
        if(CCS_Currnet_state == CCS_Enable)
    4b0a:	80 91 07 03 	lds	r24, 0x0307
    4b0e:	81 30       	cpi	r24, 0x01	; 1
    4b10:	31 f4       	brne	.+12     	; 0x4b1e <Hanndle_GrearBox_R_State+0x32>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    4b12:	10 92 07 03 	sts	0x0307, r1

            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    4b16:	80 91 07 03 	lds	r24, 0x0307
    4b1a:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>
            
            //DashBoard_DistanceHide();
            //DashBoard_DistanceHide_small();
        }

        if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    4b1e:	80 91 0a 03 	lds	r24, 0x030A
    4b22:	81 30       	cpi	r24, 0x01	; 1
    4b24:	09 f0       	breq	.+2      	; 0x4b28 <Hanndle_GrearBox_R_State+0x3c>
    4b26:	7c c0       	rjmp	.+248    	; 0x4c20 <Hanndle_GrearBox_R_State+0x134>
        {
            DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    4b28:	10 92 0a 03 	sts	0x030A, r1
            /*  Update in LCD */
            DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    4b2c:	80 91 0a 03 	lds	r24, 0x030A
    4b30:	0e 94 03 2a 	call	0x5406	; 0x5406 <DahBoard_Update_DrivingMonetoring_State>

            /*  👀👀Send update of Brake Assist to mobile app using bluetooth*/
            //Bluetooth
            Bluetooth_Send((const uint8 * )"*0");
    4b34:	82 e6       	ldi	r24, 0x62	; 98
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	a0 e2       	ldi	r26, 0x20	; 32
    4b42:	b1 e4       	ldi	r27, 0x41	; 65
    4b44:	89 8f       	std	Y+25, r24	; 0x19
    4b46:	9a 8f       	std	Y+26, r25	; 0x1a
    4b48:	ab 8f       	std	Y+27, r26	; 0x1b
    4b4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    4b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	4a ef       	ldi	r20, 0xFA	; 250
    4b5a:	54 e4       	ldi	r21, 0x44	; 68
    4b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	8d 8b       	std	Y+21, r24	; 0x15
    4b66:	9e 8b       	std	Y+22, r25	; 0x16
    4b68:	af 8b       	std	Y+23, r26	; 0x17
    4b6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b6c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b6e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b70:	8f 89       	ldd	r24, Y+23	; 0x17
    4b72:	98 8d       	ldd	r25, Y+24	; 0x18
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e8       	ldi	r20, 0x80	; 128
    4b7a:	5f e3       	ldi	r21, 0x3F	; 63
    4b7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b80:	88 23       	and	r24, r24
    4b82:	2c f4       	brge	.+10     	; 0x4b8e <Hanndle_GrearBox_R_State+0xa2>
		__ticks = 1;
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	9c 8b       	std	Y+20, r25	; 0x14
    4b8a:	8b 8b       	std	Y+19, r24	; 0x13
    4b8c:	3f c0       	rjmp	.+126    	; 0x4c0c <Hanndle_GrearBox_R_State+0x120>
	else if (__tmp > 65535)
    4b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    4b90:	7e 89       	ldd	r23, Y+22	; 0x16
    4b92:	8f 89       	ldd	r24, Y+23	; 0x17
    4b94:	98 8d       	ldd	r25, Y+24	; 0x18
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	3f ef       	ldi	r19, 0xFF	; 255
    4b9a:	4f e7       	ldi	r20, 0x7F	; 127
    4b9c:	57 e4       	ldi	r21, 0x47	; 71
    4b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ba2:	18 16       	cp	r1, r24
    4ba4:	4c f5       	brge	.+82     	; 0x4bf8 <Hanndle_GrearBox_R_State+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ba6:	69 8d       	ldd	r22, Y+25	; 0x19
    4ba8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4baa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	40 e2       	ldi	r20, 0x20	; 32
    4bb4:	51 e4       	ldi	r21, 0x41	; 65
    4bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	bc 01       	movw	r22, r24
    4bc0:	cd 01       	movw	r24, r26
    4bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	9c 8b       	std	Y+20, r25	; 0x14
    4bcc:	8b 8b       	std	Y+19, r24	; 0x13
    4bce:	0f c0       	rjmp	.+30     	; 0x4bee <Hanndle_GrearBox_R_State+0x102>
    4bd0:	88 ec       	ldi	r24, 0xC8	; 200
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	9a 8b       	std	Y+18, r25	; 0x12
    4bd6:	89 8b       	std	Y+17, r24	; 0x11
    4bd8:	89 89       	ldd	r24, Y+17	; 0x11
    4bda:	9a 89       	ldd	r25, Y+18	; 0x12
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	f1 f7       	brne	.-4      	; 0x4bdc <Hanndle_GrearBox_R_State+0xf0>
    4be0:	9a 8b       	std	Y+18, r25	; 0x12
    4be2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be4:	8b 89       	ldd	r24, Y+19	; 0x13
    4be6:	9c 89       	ldd	r25, Y+20	; 0x14
    4be8:	01 97       	sbiw	r24, 0x01	; 1
    4bea:	9c 8b       	std	Y+20, r25	; 0x14
    4bec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bee:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf2:	00 97       	sbiw	r24, 0x00	; 0
    4bf4:	69 f7       	brne	.-38     	; 0x4bd0 <Hanndle_GrearBox_R_State+0xe4>
    4bf6:	14 c0       	rjmp	.+40     	; 0x4c20 <Hanndle_GrearBox_R_State+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    4bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    4bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    4bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    4c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	9c 8b       	std	Y+20, r25	; 0x14
    4c0a:	8b 8b       	std	Y+19, r24	; 0x13
    4c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c10:	98 8b       	std	Y+16, r25	; 0x10
    4c12:	8f 87       	std	Y+15, r24	; 0x0f
    4c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c16:	98 89       	ldd	r25, Y+16	; 0x10
    4c18:	01 97       	sbiw	r24, 0x01	; 1
    4c1a:	f1 f7       	brne	.-4      	; 0x4c18 <Hanndle_GrearBox_R_State+0x12c>
    4c1c:	98 8b       	std	Y+16, r25	; 0x10
    4c1e:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);
        }

        /*  If it was Speed Limiter enabled should disabled and update in LCD*/
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    4c20:	80 91 08 03 	lds	r24, 0x0308
    4c24:	81 30       	cpi	r24, 0x01	; 1
    4c26:	09 f0       	breq	.+2      	; 0x4c2a <Hanndle_GrearBox_R_State+0x13e>
    4c28:	7c c0       	rjmp	.+248    	; 0x4d22 <Hanndle_GrearBox_R_State+0x236>
        {
            /*  Disable BA Sysystem */
            SpeedLimit_Current__State = SpeedLimit_Disable ;
    4c2a:	10 92 08 03 	sts	0x0308, r1
            
            /*  Update LCD with new change*/
            DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    4c2e:	80 91 08 03 	lds	r24, 0x0308
    4c32:	0e 94 5d 29 	call	0x52ba	; 0x52ba <DashBoard_Update_SpeedLimiter_State>

            /*  👀👀Send update of Speed limit to mobile app using bluetooth*/
            //Bluetooth
            Bluetooth_Send((const uint8 * )"&0");
    4c36:	85 e6       	ldi	r24, 0x65	; 101
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	a0 e2       	ldi	r26, 0x20	; 32
    4c44:	b1 e4       	ldi	r27, 0x41	; 65
    4c46:	8b 87       	std	Y+11, r24	; 0x0b
    4c48:	9c 87       	std	Y+12, r25	; 0x0c
    4c4a:	ad 87       	std	Y+13, r26	; 0x0d
    4c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	4a ef       	ldi	r20, 0xFA	; 250
    4c5c:	54 e4       	ldi	r21, 0x44	; 68
    4c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	8f 83       	std	Y+7, r24	; 0x07
    4c68:	98 87       	std	Y+8, r25	; 0x08
    4c6a:	a9 87       	std	Y+9, r26	; 0x09
    4c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c70:	78 85       	ldd	r23, Y+8	; 0x08
    4c72:	89 85       	ldd	r24, Y+9	; 0x09
    4c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e8       	ldi	r20, 0x80	; 128
    4c7c:	5f e3       	ldi	r21, 0x3F	; 63
    4c7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c82:	88 23       	and	r24, r24
    4c84:	2c f4       	brge	.+10     	; 0x4c90 <Hanndle_GrearBox_R_State+0x1a4>
		__ticks = 1;
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	9e 83       	std	Y+6, r25	; 0x06
    4c8c:	8d 83       	std	Y+5, r24	; 0x05
    4c8e:	3f c0       	rjmp	.+126    	; 0x4d0e <Hanndle_GrearBox_R_State+0x222>
	else if (__tmp > 65535)
    4c90:	6f 81       	ldd	r22, Y+7	; 0x07
    4c92:	78 85       	ldd	r23, Y+8	; 0x08
    4c94:	89 85       	ldd	r24, Y+9	; 0x09
    4c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	3f ef       	ldi	r19, 0xFF	; 255
    4c9c:	4f e7       	ldi	r20, 0x7F	; 127
    4c9e:	57 e4       	ldi	r21, 0x47	; 71
    4ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ca4:	18 16       	cp	r1, r24
    4ca6:	4c f5       	brge	.+82     	; 0x4cfa <Hanndle_GrearBox_R_State+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	40 e2       	ldi	r20, 0x20	; 32
    4cb6:	51 e4       	ldi	r21, 0x41	; 65
    4cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	bc 01       	movw	r22, r24
    4cc2:	cd 01       	movw	r24, r26
    4cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	9e 83       	std	Y+6, r25	; 0x06
    4cce:	8d 83       	std	Y+5, r24	; 0x05
    4cd0:	0f c0       	rjmp	.+30     	; 0x4cf0 <Hanndle_GrearBox_R_State+0x204>
    4cd2:	88 ec       	ldi	r24, 0xC8	; 200
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	9c 83       	std	Y+4, r25	; 0x04
    4cd8:	8b 83       	std	Y+3, r24	; 0x03
    4cda:	8b 81       	ldd	r24, Y+3	; 0x03
    4cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	f1 f7       	brne	.-4      	; 0x4cde <Hanndle_GrearBox_R_State+0x1f2>
    4ce2:	9c 83       	std	Y+4, r25	; 0x04
    4ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    4cea:	01 97       	sbiw	r24, 0x01	; 1
    4cec:	9e 83       	std	Y+6, r25	; 0x06
    4cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf4:	00 97       	sbiw	r24, 0x00	; 0
    4cf6:	69 f7       	brne	.-38     	; 0x4cd2 <Hanndle_GrearBox_R_State+0x1e6>
    4cf8:	14 c0       	rjmp	.+40     	; 0x4d22 <Hanndle_GrearBox_R_State+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    4cfc:	78 85       	ldd	r23, Y+8	; 0x08
    4cfe:	89 85       	ldd	r24, Y+9	; 0x09
    4d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	9e 83       	std	Y+6, r25	; 0x06
    4d0c:	8d 83       	std	Y+5, r24	; 0x05
    4d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d10:	9e 81       	ldd	r25, Y+6	; 0x06
    4d12:	9a 83       	std	Y+2, r25	; 0x02
    4d14:	89 83       	std	Y+1, r24	; 0x01
    4d16:	89 81       	ldd	r24, Y+1	; 0x01
    4d18:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	f1 f7       	brne	.-4      	; 0x4d1a <Hanndle_GrearBox_R_State+0x22e>
    4d1e:	9a 83       	std	Y+2, r25	; 0x02
    4d20:	89 83       	std	Y+1, r24	; 0x01
        }

        /*  No need to put Brake assist here as it will be disabled once press brake paddle */

    }
}
    4d22:	6c 96       	adiw	r28, 0x1c	; 28
    4d24:	0f b6       	in	r0, 0x3f	; 63
    4d26:	f8 94       	cli
    4d28:	de bf       	out	0x3e, r29	; 62
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	cd bf       	out	0x3d, r28	; 61
    4d2e:	cf 91       	pop	r28
    4d30:	df 91       	pop	r29
    4d32:	08 95       	ret

00004d34 <App_Init>:




void App_Init(void)
{
    4d34:	df 93       	push	r29
    4d36:	cf 93       	push	r28
    4d38:	cd b7       	in	r28, 0x3d	; 61
    4d3a:	de b7       	in	r29, 0x3e	; 62
    4d3c:	2e 97       	sbiw	r28, 0x0e	; 14
    4d3e:	0f b6       	in	r0, 0x3f	; 63
    4d40:	f8 94       	cli
    4d42:	de bf       	out	0x3e, r29	; 62
    4d44:	0f be       	out	0x3f, r0	; 63
    4d46:	cd bf       	out	0x3d, r28	; 61
    /*	Enable Global Interrupt  */
	sei();
    4d48:	78 94       	sei

    /*  Intialize LCD   */
    LCD_init();
    4d4a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <LCD_init>

    /*  Initalize New custom character */
    LCD_GenerateCharacterCGRAM(LCD_Page_Not_Selected,POS_LCD_Page_Not_Selected);
    4d4e:	88 e8       	ldi	r24, 0x88	; 136
    4d50:	92 e0       	ldi	r25, 0x02	; 2
    4d52:	60 e0       	ldi	r22, 0x00	; 0
    4d54:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Page_Selected,POS_LCD_Page_Selected);
    4d58:	80 e9       	ldi	r24, 0x90	; 144
    4d5a:	92 e0       	ldi	r25, 0x02	; 2
    4d5c:	61 e0       	ldi	r22, 0x01	; 1
    4d5e:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Right_ICON,POS_LCD_Right_ICON);
    4d62:	88 e9       	ldi	r24, 0x98	; 152
    4d64:	92 e0       	ldi	r25, 0x02	; 2
    4d66:	62 e0       	ldi	r22, 0x02	; 2
    4d68:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_False_ICON,POS_LCD_False_ICON);
    4d6c:	80 ea       	ldi	r24, 0xA0	; 160
    4d6e:	92 e0       	ldi	r25, 0x02	; 2
    4d70:	63 e0       	ldi	r22, 0x03	; 3
    4d72:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Mute_ICON,POS_LCD_Mute_ICON);
    4d76:	88 ea       	ldi	r24, 0xA8	; 168
    4d78:	92 e0       	ldi	r25, 0x02	; 2
    4d7a:	64 e0       	ldi	r22, 0x04	; 4
    4d7c:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Skull_ICON,POS_LCD_Skull_ICON);
    4d80:	80 eb       	ldi	r24, 0xB0	; 176
    4d82:	92 e0       	ldi	r25, 0x02	; 2
    4d84:	65 e0       	ldi	r22, 0x05	; 5
    4d86:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>
    LCD_GenerateCharacterCGRAM(LCD_Alarm_ICON,POS_LCD_Alarm_ICON);
    4d8a:	88 eb       	ldi	r24, 0xB8	; 184
    4d8c:	92 e0       	ldi	r25, 0x02	; 2
    4d8e:	66 e0       	ldi	r22, 0x06	; 6
    4d90:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_GenerateCharacterCGRAM>

    /*  Initialize Buzzer */
    Buzzer_Init(Buzzer_PORT,Buzzer_PIN);
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	66 e0       	ldi	r22, 0x06	; 6
    4d98:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <Buzzer_Init>


    /*  Initialize Braking Button with EXT_INT 1    */
    INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    4d9c:	82 e0       	ldi	r24, 0x02	; 2
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	0e 94 cc 12 	call	0x2598	; 0x2598 <INT1_init>

    /*  Set call back function  */
    INT1_SetCallBack(Braking_Button_Handling);
    4da4:	8c e9       	ldi	r24, 0x9C	; 156
    4da6:	95 e3       	ldi	r25, 0x35	; 53
    4da8:	0e 94 86 12 	call	0x250c	; 0x250c <INT1_SetCallBack>

    /*  Initialize Braking Button with EXT_INT 1    */
    INT0_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    4dac:	82 e0       	ldi	r24, 0x02	; 2
    4dae:	60 e0       	ldi	r22, 0x00	; 0
    4db0:	0e 94 aa 12 	call	0x2554	; 0x2554 <INT0_init>

    /*  Set call back function  */
    INT0_SetCallBack(Engine_Control_Handling);
    4db4:	8f ef       	ldi	r24, 0xFF	; 255
    4db6:	9f e2       	ldi	r25, 0x2F	; 47
    4db8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <INT0_SetCallBack>

    /*  Initialize LEDS(Red,Yellow) all os them connected positive logic */

    LED_Init(Red_LED_PORT,Red_LED_PIN);
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	67 e0       	ldi	r22, 0x07	; 7
    4dc0:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LED_Init>
    LED_Init(Yellow_LED_PORT,Yellow_LED_PIN);
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	66 e0       	ldi	r22, 0x06	; 6
    4dc8:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LED_Init>

    /*  Initailize Relay Pin  */
    GPIO_SetPinDirection(Relay_PORT,Relay_PIN,OUTPUT_PIN);
    4dcc:	82 e0       	ldi	r24, 0x02	; 2
    4dce:	67 e0       	ldi	r22, 0x07	; 7
    4dd0:	42 e0       	ldi	r20, 0x02	; 2
    4dd2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>

    /*  Initialize pins that control direction for DC motor  */
    GPIO_SetPinDirection(DC_RIR_1_PORT,DC_RIR_1_PIN,OUTPUT_PIN);
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	65 e0       	ldi	r22, 0x05	; 5
    4dda:	42 e0       	ldi	r20, 0x02	; 2
    4ddc:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    GPIO_SetPinDirection(DC_RIR_2_PORT,DC_RIR_2_PIN,OUTPUT_PIN);
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	66 e0       	ldi	r22, 0x06	; 6
    4de4:	42 e0       	ldi	r20, 0x02	; 2
    4de6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_SetPinDirection>
    /*  initialize PWM pin fo motor  */
    DC_Motor_Init(&DC_pins_Motor);
    4dea:	8a ec       	ldi	r24, 0xCA	; 202
    4dec:	92 e0       	ldi	r25, 0x02	; 2
    4dee:	0e 94 c1 23 	call	0x4782	; 0x4782 <DC_Motor_Init>
    /*  Turn Of all of this led  */
    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN, LED_OFF);
    4df2:	81 e0       	ldi	r24, 0x01	; 1
    4df4:	67 e0       	ldi	r22, 0x07	; 7
    4df6:	40 e0       	ldi	r20, 0x00	; 0
    4df8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN, LED_OFF);
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	66 e0       	ldi	r22, 0x06	; 6
    4e00:	40 e0       	ldi	r20, 0x00	; 0
    4e02:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

    /*  initialize Timer0   */
    Timer0_Init();
    4e06:	0e 94 91 0a 	call	0x1522	; 0x1522 <Timer0_Init>
    

    /*  Set callback function that will called when Timeout happen to turn of buzzer and handle anything another    */
    Timer0_SetCallBack(TImer0_OVF_Handling_Fun);
    4e0a:	84 e2       	ldi	r24, 0x24	; 36
    4e0c:	9c e3       	ldi	r25, 0x3C	; 60
    4e0e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <Timer0_SetCallBack>
    
    /*  Enable Overflow Interrupt  */
    Timer0_Enable_OVR_Flow_Interrupt();
    4e12:	0e 94 30 0b 	call	0x1660	; 0x1660 <Timer0_Enable_OVR_Flow_Interrupt>

    /*  Initailize Ultrasonic System and Time 1  with required configuration  */
    Ultrasonic_Init();
    4e16:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <Ultrasonic_Init>

    /*  Initialize ADC to be used by Potentiometer to accelerate  */
    ADC_Init();
    4e1a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_Init>

    /*  Intialize Potentiometer */
    POT_Init(ADC_Channel_0);
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <POT_Init>

    /*  Initailize Keypad  */
    Keypad_init();
    4e24:	0e 94 8c 22 	call	0x4518	; 0x4518 <Keypad_init>

    /*  Initialize I2C for EEPROM   */
    I2C_Init();
    4e28:	0e 94 3e 0b 	call	0x167c	; 0x167c <I2C_Init>
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	a8 e4       	ldi	r26, 0x48	; 72
    4e32:	b2 e4       	ldi	r27, 0x42	; 66
    4e34:	8b 87       	std	Y+11, r24	; 0x0b
    4e36:	9c 87       	std	Y+12, r25	; 0x0c
    4e38:	ad 87       	std	Y+13, r26	; 0x0d
    4e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	4a ef       	ldi	r20, 0xFA	; 250
    4e4a:	54 e4       	ldi	r21, 0x44	; 68
    4e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	8f 83       	std	Y+7, r24	; 0x07
    4e56:	98 87       	std	Y+8, r25	; 0x08
    4e58:	a9 87       	std	Y+9, r26	; 0x09
    4e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e5e:	78 85       	ldd	r23, Y+8	; 0x08
    4e60:	89 85       	ldd	r24, Y+9	; 0x09
    4e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	40 e8       	ldi	r20, 0x80	; 128
    4e6a:	5f e3       	ldi	r21, 0x3F	; 63
    4e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e70:	88 23       	and	r24, r24
    4e72:	2c f4       	brge	.+10     	; 0x4e7e <App_Init+0x14a>
		__ticks = 1;
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	9e 83       	std	Y+6, r25	; 0x06
    4e7a:	8d 83       	std	Y+5, r24	; 0x05
    4e7c:	3f c0       	rjmp	.+126    	; 0x4efc <App_Init+0x1c8>
	else if (__tmp > 65535)
    4e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e80:	78 85       	ldd	r23, Y+8	; 0x08
    4e82:	89 85       	ldd	r24, Y+9	; 0x09
    4e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	3f ef       	ldi	r19, 0xFF	; 255
    4e8a:	4f e7       	ldi	r20, 0x7F	; 127
    4e8c:	57 e4       	ldi	r21, 0x47	; 71
    4e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e92:	18 16       	cp	r1, r24
    4e94:	4c f5       	brge	.+82     	; 0x4ee8 <App_Init+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	40 e2       	ldi	r20, 0x20	; 32
    4ea4:	51 e4       	ldi	r21, 0x41	; 65
    4ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	bc 01       	movw	r22, r24
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	9e 83       	std	Y+6, r25	; 0x06
    4ebc:	8d 83       	std	Y+5, r24	; 0x05
    4ebe:	0f c0       	rjmp	.+30     	; 0x4ede <App_Init+0x1aa>
    4ec0:	88 ec       	ldi	r24, 0xC8	; 200
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	9c 83       	std	Y+4, r25	; 0x04
    4ec6:	8b 83       	std	Y+3, r24	; 0x03
    4ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <App_Init+0x198>
    4ed0:	9c 83       	std	Y+4, r25	; 0x04
    4ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	9e 83       	std	Y+6, r25	; 0x06
    4edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ede:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	69 f7       	brne	.-38     	; 0x4ec0 <App_Init+0x18c>
    4ee6:	14 c0       	rjmp	.+40     	; 0x4f10 <App_Init+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    4eea:	78 85       	ldd	r23, Y+8	; 0x08
    4eec:	89 85       	ldd	r24, Y+9	; 0x09
    4eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22
    4ef8:	9e 83       	std	Y+6, r25	; 0x06
    4efa:	8d 83       	std	Y+5, r24	; 0x05
    4efc:	8d 81       	ldd	r24, Y+5	; 0x05
    4efe:	9e 81       	ldd	r25, Y+6	; 0x06
    4f00:	9a 83       	std	Y+2, r25	; 0x02
    4f02:	89 83       	std	Y+1, r24	; 0x01
    4f04:	89 81       	ldd	r24, Y+1	; 0x01
    4f06:	9a 81       	ldd	r25, Y+2	; 0x02
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	f1 f7       	brne	.-4      	; 0x4f08 <App_Init+0x1d4>
    4f0c:	9a 83       	std	Y+2, r25	; 0x02
    4f0e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50);

    /*  Initialize UART and Bluetooth */
    Bluetooth_Init();
    4f10:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <Bluetooth_Init>

    LCD_MoveCursor(1,5);
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	65 e0       	ldi	r22, 0x05	; 5
    4f18:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"Start Engine");
    4f1c:	88 e6       	ldi	r24, 0x68	; 104
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    /*  Display Message to start Engine */
    while(Start_main_program == FALSE);
    4f24:	80 91 19 03 	lds	r24, 0x0319
    4f28:	88 23       	and	r24, r24
    4f2a:	e1 f3       	breq	.-8      	; 0x4f24 <App_Init+0x1f0>

    
    
    /*  Intialize Bash Board for Car*/
    DashBoard_Init();
    4f2c:	0e 94 5d 28 	call	0x50ba	; 0x50ba <DashBoard_Init>
}
    4f30:	2e 96       	adiw	r28, 0x0e	; 14
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	cf 91       	pop	r28
    4f3e:	df 91       	pop	r29
    4f40:	08 95       	ret

00004f42 <Bluetooth_Buffer_Decision>:
//Bluetooth
void Bluetooth_Buffer_Decision(void)
{
    4f42:	df 93       	push	r29
    4f44:	cf 93       	push	r28
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    cli();
    4f4a:	f8 94       	cli
    LCD_MoveCursor(3,0);
    4f4c:	83 e0       	ldi	r24, 0x03	; 3
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_intToString(UART_Counter);
    4f54:	80 91 04 03 	lds	r24, 0x0304
    4f58:	88 2f       	mov	r24, r24
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	a0 e0       	ldi	r26, 0x00	; 0
    4f5e:	b0 e0       	ldi	r27, 0x00	; 0
    4f60:	bc 01       	movw	r22, r24
    4f62:	cd 01       	movw	r24, r26
    4f64:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
    if(UART_Counter == 3)
    4f68:	80 91 04 03 	lds	r24, 0x0304
    4f6c:	83 30       	cpi	r24, 0x03	; 3
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <Bluetooth_Buffer_Decision+0x30>
    4f70:	a1 c0       	rjmp	.+322    	; 0x50b4 <Bluetooth_Buffer_Decision+0x172>
    {   /*  Debug only  */
        LCD_DisplayString(UART_Buffer);
    4f72:	8b ef       	ldi	r24, 0xFB	; 251
    4f74:	92 e0       	ldi	r25, 0x02	; 2
    4f76:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        
        sei();
    4f7a:	78 94       	sei

        /* This message related to GearBox */
        if(UART_Buffer[0] == '!')
    4f7c:	80 91 fb 02 	lds	r24, 0x02FB
    4f80:	81 32       	cpi	r24, 0x21	; 33
    4f82:	21 f5       	brne	.+72     	; 0x4fcc <Bluetooth_Buffer_Decision+0x8a>
        {
            if(UART_Buffer[1] == '0')
    4f84:	80 91 fc 02 	lds	r24, 0x02FC
    4f88:	80 33       	cpi	r24, 0x30	; 48
    4f8a:	39 f4       	brne	.+14     	; 0x4f9a <Bluetooth_Buffer_Decision+0x58>
            {
                GearBox_Current_State = N_GearBox;
    4f8c:	10 92 06 03 	sts	0x0306, r1
                /*  call function to update gearbox state in Dashboard*/
                DashBoard_Update_GearBox_state(GearBox_Current_State);
    4f90:	80 91 06 03 	lds	r24, 0x0306
    4f94:	0e 94 bf 28 	call	0x517e	; 0x517e <DashBoard_Update_GearBox_state>
    4f98:	8b c0       	rjmp	.+278    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
            else if(UART_Buffer[1] == '1')
    4f9a:	80 91 fc 02 	lds	r24, 0x02FC
    4f9e:	81 33       	cpi	r24, 0x31	; 49
    4fa0:	41 f4       	brne	.+16     	; 0x4fb2 <Bluetooth_Buffer_Decision+0x70>
            {
                GearBox_Current_State = D_GearBox;
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	80 93 06 03 	sts	0x0306, r24
                /*  call function to update gearbox state in Dashboard*/
                DashBoard_Update_GearBox_state(GearBox_Current_State);
    4fa8:	80 91 06 03 	lds	r24, 0x0306
    4fac:	0e 94 bf 28 	call	0x517e	; 0x517e <DashBoard_Update_GearBox_state>
    4fb0:	7f c0       	rjmp	.+254    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
            else if(UART_Buffer[1] == '2')
    4fb2:	80 91 fc 02 	lds	r24, 0x02FC
    4fb6:	82 33       	cpi	r24, 0x32	; 50
    4fb8:	09 f0       	breq	.+2      	; 0x4fbc <Bluetooth_Buffer_Decision+0x7a>
    4fba:	7a c0       	rjmp	.+244    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            {
                GearBox_Current_State = R_GearBox;
    4fbc:	82 e0       	ldi	r24, 0x02	; 2
    4fbe:	80 93 06 03 	sts	0x0306, r24
                /*  call function to update gearbox state in Dashboard*/
                DashBoard_Update_GearBox_state(GearBox_Current_State);
    4fc2:	80 91 06 03 	lds	r24, 0x0306
    4fc6:	0e 94 bf 28 	call	0x517e	; 0x517e <DashBoard_Update_GearBox_state>
    4fca:	72 c0       	rjmp	.+228    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
            
                // sei();
        }
        /* This message related to Cruise Control system */
        else if(UART_Buffer[0] == '$')
    4fcc:	80 91 fb 02 	lds	r24, 0x02FB
    4fd0:	84 32       	cpi	r24, 0x24	; 36
    4fd2:	c1 f4       	brne	.+48     	; 0x5004 <Bluetooth_Buffer_Decision+0xc2>
        {
            if(UART_Buffer[1] == '0')
    4fd4:	80 91 fc 02 	lds	r24, 0x02FC
    4fd8:	80 33       	cpi	r24, 0x30	; 48
    4fda:	39 f4       	brne	.+14     	; 0x4fea <Bluetooth_Buffer_Decision+0xa8>
            {
                CCS_Currnet_state = CCS_Disable;
    4fdc:	10 92 07 03 	sts	0x0307, r1
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    4fe0:	80 91 07 03 	lds	r24, 0x0307
    4fe4:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>
    4fe8:	63 c0       	rjmp	.+198    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
            else if(UART_Buffer[1] == '1')
    4fea:	80 91 fc 02 	lds	r24, 0x02FC
    4fee:	81 33       	cpi	r24, 0x31	; 49
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <Bluetooth_Buffer_Decision+0xb2>
    4ff2:	5e c0       	rjmp	.+188    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            {
                CCS_Currnet_state = CCS_Enable;
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	80 93 07 03 	sts	0x0307, r24
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    4ffa:	80 91 07 03 	lds	r24, 0x0307
    4ffe:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>
    5002:	56 c0       	rjmp	.+172    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
        }
        /* This message related to Brake Assist system */
        else if(UART_Buffer[0] == '%')
    5004:	80 91 fb 02 	lds	r24, 0x02FB
    5008:	85 32       	cpi	r24, 0x25	; 37
    500a:	e9 f4       	brne	.+58     	; 0x5046 <Bluetooth_Buffer_Decision+0x104>
        {
            if(UART_Buffer[1] == '0')
    500c:	80 91 fc 02 	lds	r24, 0x02FC
    5010:	80 33       	cpi	r24, 0x30	; 48
    5012:	39 f4       	brne	.+14     	; 0x5022 <Bluetooth_Buffer_Decision+0xe0>
            {
                BrakingAssist_Current_State = BrakingAssist_Disable ;
    5014:	10 92 09 03 	sts	0x0309, r1
                /*  call function update state of Brake assist*/
                DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    5018:	80 91 09 03 	lds	r24, 0x0309
    501c:	0e 94 1f 29 	call	0x523e	; 0x523e <DashBoard_Update_BrakingAssist_State>
    5020:	0b c0       	rjmp	.+22     	; 0x5038 <Bluetooth_Buffer_Decision+0xf6>
            }
            else if(UART_Buffer[1] == '1')
    5022:	80 91 fc 02 	lds	r24, 0x02FC
    5026:	81 33       	cpi	r24, 0x31	; 49
    5028:	39 f4       	brne	.+14     	; 0x5038 <Bluetooth_Buffer_Decision+0xf6>
            {
                BrakingAssist_Current_State = BrakingAssist_Enable ;
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	80 93 09 03 	sts	0x0309, r24
                /*  call function update state of Brake assist*/
                DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    5030:	80 91 09 03 	lds	r24, 0x0309
    5034:	0e 94 1f 29 	call	0x523e	; 0x523e <DashBoard_Update_BrakingAssist_State>
            }
            /*  As if I in page braking Assist and Enable or disable  need to update*/
            if(Page_Current_State == Page_1_LCD)
    5038:	80 91 c7 02 	lds	r24, 0x02C7
    503c:	88 23       	and	r24, r24
    503e:	c1 f5       	brne	.+112    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            {
                DashBoard_SwitchPages();    
    5040:	0e 94 ce 2a 	call	0x559c	; 0x559c <DashBoard_SwitchPages>
    5044:	35 c0       	rjmp	.+106    	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
        }
        /* This message related to Speed Limiter system */
        else if(UART_Buffer[0] == '&')
    5046:	80 91 fb 02 	lds	r24, 0x02FB
    504a:	86 32       	cpi	r24, 0x26	; 38
    504c:	b9 f4       	brne	.+46     	; 0x507c <Bluetooth_Buffer_Decision+0x13a>
        {
            if(UART_Buffer[1] == '0')
    504e:	80 91 fc 02 	lds	r24, 0x02FC
    5052:	80 33       	cpi	r24, 0x30	; 48
    5054:	39 f4       	brne	.+14     	; 0x5064 <Bluetooth_Buffer_Decision+0x122>
            {
                SpeedLimit_Current__State = SpeedLimit_Disable ;
    5056:	10 92 08 03 	sts	0x0308, r1
                /*  call function update state of Brake assist*/
                DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    505a:	80 91 08 03 	lds	r24, 0x0308
    505e:	0e 94 5d 29 	call	0x52ba	; 0x52ba <DashBoard_Update_SpeedLimiter_State>
    5062:	26 c0       	rjmp	.+76     	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
            else if(UART_Buffer[1] == '1')
    5064:	80 91 fc 02 	lds	r24, 0x02FC
    5068:	81 33       	cpi	r24, 0x31	; 49
    506a:	11 f5       	brne	.+68     	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            {
                SpeedLimit_Current__State = SpeedLimit_Enable ;
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	80 93 08 03 	sts	0x0308, r24
                /*  call function update state of Brake assist*/
                DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    5072:	80 91 08 03 	lds	r24, 0x0308
    5076:	0e 94 5d 29 	call	0x52ba	; 0x52ba <DashBoard_Update_SpeedLimiter_State>
    507a:	1a c0       	rjmp	.+52     	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
        }
        /* This message related to Speed Limiter system */
        else if(UART_Buffer[0] == '*')
    507c:	80 91 fb 02 	lds	r24, 0x02FB
    5080:	8a 32       	cpi	r24, 0x2A	; 42
    5082:	b1 f4       	brne	.+44     	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
        {
            if(UART_Buffer[1] == '0')
    5084:	80 91 fc 02 	lds	r24, 0x02FC
    5088:	80 33       	cpi	r24, 0x30	; 48
    508a:	39 f4       	brne	.+14     	; 0x509a <Bluetooth_Buffer_Decision+0x158>
            {
                DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    508c:	10 92 0a 03 	sts	0x030A, r1
                /*  call function update state of Brake assist*/
                DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    5090:	80 91 0a 03 	lds	r24, 0x030A
    5094:	0e 94 03 2a 	call	0x5406	; 0x5406 <DahBoard_Update_DrivingMonetoring_State>
    5098:	0b c0       	rjmp	.+22     	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            }
            else if(UART_Buffer[1] == '1')
    509a:	80 91 fc 02 	lds	r24, 0x02FC
    509e:	81 33       	cpi	r24, 0x31	; 49
    50a0:	39 f4       	brne	.+14     	; 0x50b0 <Bluetooth_Buffer_Decision+0x16e>
            {
                DrivingMonetoring_Current_State = DirivingMonetoring_Enable ;
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	80 93 0a 03 	sts	0x030A, r24
                /*  call function update state of Brake assist*/
                DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    50a8:	80 91 0a 03 	lds	r24, 0x030A
    50ac:	0e 94 03 2a 	call	0x5406	; 0x5406 <DahBoard_Update_DrivingMonetoring_State>
            }
        }

        /*clear it to avoid any conflict */
        UART_Counter = 0 ;
    50b0:	10 92 04 03 	sts	0x0304, r1

    }
}
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret

000050ba <DashBoard_Init>:



static void DashBoard_Init(void)
{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
    cli();
    50c2:	f8 94       	cli
    LCD_ClearScreen();
    50c4:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <LCD_ClearScreen>
    DashBoard_SwitchPages();
    50c8:	0e 94 ce 2a 	call	0x559c	; 0x559c <DashBoard_SwitchPages>
    // LCD_DisplayString((const uint8 * )"DM Status:");
    // /*  call function that will handle status for DM  */
    // DashBoard_DrivingMonetoring_Status_update();

    /*  Display GearBox Current state  */
    LCD_MoveCursor(0,14);
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	6e e0       	ldi	r22, 0x0E	; 14
    50d0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"GB : ");
    50d4:	85 e7       	ldi	r24, 0x75	; 117
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    LCD_MoveCursor(0,19);
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	63 e1       	ldi	r22, 0x13	; 19
    50e0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    if(GearBox_Current_State == N_GearBox)
    50e4:	80 91 06 03 	lds	r24, 0x0306
    50e8:	88 23       	and	r24, r24
    50ea:	21 f4       	brne	.+8      	; 0x50f4 <DashBoard_Init+0x3a>
        LCD_DisplayCharacter('N');
    50ec:	8e e4       	ldi	r24, 0x4E	; 78
    50ee:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    50f2:	15 c0       	rjmp	.+42     	; 0x511e <DashBoard_Init+0x64>
    else if(GearBox_Current_State == D_GearBox)
    50f4:	80 91 06 03 	lds	r24, 0x0306
    50f8:	81 30       	cpi	r24, 0x01	; 1
    50fa:	21 f4       	brne	.+8      	; 0x5104 <DashBoard_Init+0x4a>
        LCD_DisplayCharacter('D');
    50fc:	84 e4       	ldi	r24, 0x44	; 68
    50fe:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    5102:	0d c0       	rjmp	.+26     	; 0x511e <DashBoard_Init+0x64>
    else if(GearBox_Current_State == R_GearBox)
    5104:	80 91 06 03 	lds	r24, 0x0306
    5108:	82 30       	cpi	r24, 0x02	; 2
    510a:	21 f4       	brne	.+8      	; 0x5114 <DashBoard_Init+0x5a>
        LCD_DisplayCharacter('R');
    510c:	82 e5       	ldi	r24, 0x52	; 82
    510e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    5112:	05 c0       	rjmp	.+10     	; 0x511e <DashBoard_Init+0x64>
    else
        LCD_DisplayCharacter('N'),GearBox_Current_State = N_GearBox;
    5114:	8e e4       	ldi	r24, 0x4E	; 78
    5116:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    511a:	10 92 06 03 	sts	0x0306, r1
    // LCD_MoveCursor(1,0);
    // LCD_DisplayString((const uint8 * )"KMC:"); 
    // LCD_FloatToString(Accumulative_Distance_KM);

    /*  Display speed */
    LCD_MoveCursor(1,11);
    511e:	81 e0       	ldi	r24, 0x01	; 1
    5120:	6b e0       	ldi	r22, 0x0B	; 11
    5122:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"SP:"); 
    5126:	8b e7       	ldi	r24, 0x7B	; 123
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    /*  Call function that catch current speed to dispaly  */
    App_CarSpeedUpdate();
    512e:	0e 94 00 3a 	call	0x7400	; 0x7400 <App_CarSpeedUpdate>

    /*  Display state of Adaptive Cruise control  */
    LCD_MoveCursor(2,0);
    5132:	82 e0       	ldi	r24, 0x02	; 2
    5134:	60 e0       	ldi	r22, 0x00	; 0
    5136:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayString((const uint8 * )"CC:");
    513a:	8f e7       	ldi	r24, 0x7F	; 127
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    5142:	83 e0       	ldi	r24, 0x03	; 3
    5144:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" BA:");
    5148:	83 e8       	ldi	r24, 0x83	; 131
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    5150:	83 e0       	ldi	r24, 0x03	; 3
    5152:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" SL:");
    5156:	88 e8       	ldi	r24, 0x88	; 136
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    515e:	83 e0       	ldi	r24, 0x03	; 3
    5160:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>

    LCD_DisplayString((const uint8 * )" DM:");
    5164:	8d e8       	ldi	r24, 0x8D	; 141
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    LCD_DisplayCharacter(POS_LCD_False_ICON);
    516c:	83 e0       	ldi	r24, 0x03	; 3
    516e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>

    /*  call function that Display pages and @ first when start program I will be in Page 2 */
    DashBoardPageFooter_update();
    5172:	0e 94 4a 2a 	call	0x5494	; 0x5494 <DashBoardPageFooter_update>
    sei();
    5176:	78 94       	sei
}
    5178:	cf 91       	pop	r28
    517a:	df 91       	pop	r29
    517c:	08 95       	ret

0000517e <DashBoard_Update_GearBox_state>:



static void DashBoard_Update_GearBox_state(uint8 GearBox_state)
{
    517e:	df 93       	push	r29
    5180:	cf 93       	push	r28
    5182:	cd b7       	in	r28, 0x3d	; 61
    5184:	de b7       	in	r29, 0x3e	; 62
    5186:	29 97       	sbiw	r28, 0x09	; 9
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	de bf       	out	0x3e, r29	; 62
    518e:	0f be       	out	0x3f, r0	; 63
    5190:	cd bf       	out	0x3d, r28	; 61
    5192:	8c 83       	std	Y+4, r24	; 0x04
    cli();
    5194:	f8 94       	cli
    /*  Array carry All Characters For GearBox as make display easier using index*/
    uint8 GearBox_Characyer [] = {'N','D','R'};
    5196:	ce 01       	movw	r24, r28
    5198:	01 96       	adiw	r24, 0x01	; 1
    519a:	9e 83       	std	Y+6, r25	; 0x06
    519c:	8d 83       	std	Y+5, r24	; 0x05
    519e:	e7 ed       	ldi	r30, 0xD7	; 215
    51a0:	f2 e0       	ldi	r31, 0x02	; 2
    51a2:	f8 87       	std	Y+8, r31	; 0x08
    51a4:	ef 83       	std	Y+7, r30	; 0x07
    51a6:	f3 e0       	ldi	r31, 0x03	; 3
    51a8:	f9 87       	std	Y+9, r31	; 0x09
    51aa:	ef 81       	ldd	r30, Y+7	; 0x07
    51ac:	f8 85       	ldd	r31, Y+8	; 0x08
    51ae:	00 80       	ld	r0, Z
    51b0:	8f 81       	ldd	r24, Y+7	; 0x07
    51b2:	98 85       	ldd	r25, Y+8	; 0x08
    51b4:	01 96       	adiw	r24, 0x01	; 1
    51b6:	98 87       	std	Y+8, r25	; 0x08
    51b8:	8f 83       	std	Y+7, r24	; 0x07
    51ba:	ed 81       	ldd	r30, Y+5	; 0x05
    51bc:	fe 81       	ldd	r31, Y+6	; 0x06
    51be:	00 82       	st	Z, r0
    51c0:	8d 81       	ldd	r24, Y+5	; 0x05
    51c2:	9e 81       	ldd	r25, Y+6	; 0x06
    51c4:	01 96       	adiw	r24, 0x01	; 1
    51c6:	9e 83       	std	Y+6, r25	; 0x06
    51c8:	8d 83       	std	Y+5, r24	; 0x05
    51ca:	99 85       	ldd	r25, Y+9	; 0x09
    51cc:	91 50       	subi	r25, 0x01	; 1
    51ce:	99 87       	std	Y+9, r25	; 0x09
    51d0:	e9 85       	ldd	r30, Y+9	; 0x09
    51d2:	ee 23       	and	r30, r30
    51d4:	51 f7       	brne	.-44     	; 0x51aa <DashBoard_Update_GearBox_state+0x2c>
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(0,19);
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	63 e1       	ldi	r22, 0x13	; 19
    51da:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    /*  Edit its state with new state given to function*/
    LCD_DisplayCharacter(GearBox_Characyer[GearBox_state]);
    51de:	8c 81       	ldd	r24, Y+4	; 0x04
    51e0:	28 2f       	mov	r18, r24
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	ce 01       	movw	r24, r28
    51e6:	01 96       	adiw	r24, 0x01	; 1
    51e8:	fc 01       	movw	r30, r24
    51ea:	e2 0f       	add	r30, r18
    51ec:	f3 1f       	adc	r31, r19
    51ee:	80 81       	ld	r24, Z
    51f0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    sei();
    51f4:	78 94       	sei
}
    51f6:	29 96       	adiw	r28, 0x09	; 9
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	de bf       	out	0x3e, r29	; 62
    51fe:	0f be       	out	0x3f, r0	; 63
    5200:	cd bf       	out	0x3d, r28	; 61
    5202:	cf 91       	pop	r28
    5204:	df 91       	pop	r29
    5206:	08 95       	ret

00005208 <DashBoard_Update_CCS_State>:

static void DashBoard_Update_CCS_State(uint8 ACCS_state)
{
    5208:	df 93       	push	r29
    520a:	cf 93       	push	r28
    520c:	0f 92       	push	r0
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	89 83       	std	Y+1, r24	; 0x01
    cli();
    5214:	f8 94       	cli
        
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,3);
    5216:	82 e0       	ldi	r24, 0x02	; 2
    5218:	63 e0       	ldi	r22, 0x03	; 3
    521a:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>

        /*  Edit its state with new state given to function*/
        if(CCS_Currnet_state == CCS_Enable)
    521e:	80 91 07 03 	lds	r24, 0x0307
    5222:	81 30       	cpi	r24, 0x01	; 1
    5224:	21 f4       	brne	.+8      	; 0x522e <DashBoard_Update_CCS_State+0x26>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    5226:	82 e0       	ldi	r24, 0x02	; 2
    5228:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    522c:	03 c0       	rjmp	.+6      	; 0x5234 <DashBoard_Update_CCS_State+0x2c>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    522e:	83 e0       	ldi	r24, 0x03	; 3
    5230:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>

    sei();
    5234:	78 94       	sei
}
    5236:	0f 90       	pop	r0
    5238:	cf 91       	pop	r28
    523a:	df 91       	pop	r29
    523c:	08 95       	ret

0000523e <DashBoard_Update_BrakingAssist_State>:

static void DashBoard_Update_BrakingAssist_State(uint8 BA_state)
{
    523e:	df 93       	push	r29
    5240:	cf 93       	push	r28
    5242:	0f 92       	push	r0
    5244:	cd b7       	in	r28, 0x3d	; 61
    5246:	de b7       	in	r29, 0x3e	; 62
    5248:	89 83       	std	Y+1, r24	; 0x01
    cli();
    524a:	f8 94       	cli
    /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,8);
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	68 e0       	ldi	r22, 0x08	; 8
    5250:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
            /*  Edit its state with new state given to function*/
        if(BA_state == BrakingAssist_Enable)
    5254:	89 81       	ldd	r24, Y+1	; 0x01
    5256:	81 30       	cpi	r24, 0x01	; 1
    5258:	21 f4       	brne	.+8      	; 0x5262 <DashBoard_Update_BrakingAssist_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    525a:	82 e0       	ldi	r24, 0x02	; 2
    525c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <DashBoard_Update_BrakingAssist_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    5262:	83 e0       	ldi	r24, 0x03	; 3
    5264:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    sei();
    5268:	78 94       	sei
}
    526a:	0f 90       	pop	r0
    526c:	cf 91       	pop	r28
    526e:	df 91       	pop	r29
    5270:	08 95       	ret

00005272 <DashBoard_BrakingAssist_Status_update>:

static void DashBoard_BrakingAssist_Status_update(void)
{
    5272:	df 93       	push	r29
    5274:	cf 93       	push	r28
    5276:	cd b7       	in	r28, 0x3d	; 61
    5278:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_1_LCD)
    527a:	80 91 c7 02 	lds	r24, 0x02C7
    527e:	88 23       	and	r24, r24
    5280:	c9 f4       	brne	.+50     	; 0x52b4 <DashBoard_BrakingAssist_Status_update+0x42>
    {
        cli();
    5282:	f8 94       	cli
        LCD_MoveCursor(0,11);
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	6b e0       	ldi	r22, 0x0B	; 11
    5288:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        if(BrakingAssist_Current_State == BrakingAssist_Enable)
    528c:	80 91 09 03 	lds	r24, 0x0309
    5290:	81 30       	cpi	r24, 0x01	; 1
    5292:	61 f4       	brne	.+24     	; 0x52ac <DashBoard_BrakingAssist_Status_update+0x3a>
        {
            if(Distance_BA_Current_status == Distance_BA_Meet)
    5294:	80 91 cf 02 	lds	r24, 0x02CF
    5298:	81 30       	cpi	r24, 0x01	; 1
    529a:	21 f4       	brne	.+8      	; 0x52a4 <DashBoard_BrakingAssist_Status_update+0x32>
            {
                LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    529c:	84 e0       	ldi	r24, 0x04	; 4
    529e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    52a2:	07 c0       	rjmp	.+14     	; 0x52b2 <DashBoard_BrakingAssist_Status_update+0x40>
            }
            else
            {
                LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    52a4:	86 e0       	ldi	r24, 0x06	; 6
    52a6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    52aa:	03 c0       	rjmp	.+6      	; 0x52b2 <DashBoard_BrakingAssist_Status_update+0x40>
            }
        }
        else
        {
            LCD_DisplayCharacter('D'); //system disabled
    52ac:	84 e4       	ldi	r24, 0x44	; 68
    52ae:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
        }
        sei();
    52b2:	78 94       	sei
    }
}
    52b4:	cf 91       	pop	r28
    52b6:	df 91       	pop	r29
    52b8:	08 95       	ret

000052ba <DashBoard_Update_SpeedLimiter_State>:

static void DashBoard_Update_SpeedLimiter_State(uint8 SL_state)
{
    52ba:	df 93       	push	r29
    52bc:	cf 93       	push	r28
    52be:	0f 92       	push	r0
    52c0:	cd b7       	in	r28, 0x3d	; 61
    52c2:	de b7       	in	r29, 0x3e	; 62
    52c4:	89 83       	std	Y+1, r24	; 0x01
    cli();
    52c6:	f8 94       	cli
        /*  Go to index that display current GearBox state*/
        LCD_MoveCursor(2,13);
    52c8:	82 e0       	ldi	r24, 0x02	; 2
    52ca:	6d e0       	ldi	r22, 0x0D	; 13
    52cc:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>

        /*  Edit its state with new state given to function*/
        if(SL_state == SpeedLimit_Enable)
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
    52d2:	81 30       	cpi	r24, 0x01	; 1
    52d4:	21 f4       	brne	.+8      	; 0x52de <DashBoard_Update_SpeedLimiter_State+0x24>
            LCD_DisplayCharacter(POS_LCD_Right_ICON);
    52d6:	82 e0       	ldi	r24, 0x02	; 2
    52d8:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    52dc:	03 c0       	rjmp	.+6      	; 0x52e4 <DashBoard_Update_SpeedLimiter_State+0x2a>

        else
            LCD_DisplayCharacter(POS_LCD_False_ICON);
    52de:	83 e0       	ldi	r24, 0x03	; 3
    52e0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    sei();
    52e4:	78 94       	sei
}
    52e6:	0f 90       	pop	r0
    52e8:	cf 91       	pop	r28
    52ea:	df 91       	pop	r29
    52ec:	08 95       	ret

000052ee <DashBoard_updateSpeedLimitValue>:


static void DashBoard_updateSpeedLimitValue(void)
{
    52ee:	df 93       	push	r29
    52f0:	cf 93       	push	r28
    52f2:	cd b7       	in	r28, 0x3d	; 61
    52f4:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_3_LCD)
    52f6:	80 91 c7 02 	lds	r24, 0x02C7
    52fa:	82 30       	cpi	r24, 0x02	; 2
    52fc:	a1 f4       	brne	.+40     	; 0x5326 <DashBoard_updateSpeedLimitValue+0x38>
    {
        cli();
    52fe:	f8 94       	cli
        //Global_Speed_Limiter_value
        LCD_MoveCursor(0,7);
    5300:	80 e0       	ldi	r24, 0x00	; 0
    5302:	67 e0       	ldi	r22, 0x07	; 7
    5304:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_intToString(Global_Speed_Limiter_value);
    5308:	80 91 c9 02 	lds	r24, 0x02C9
    530c:	88 2f       	mov	r24, r24
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	a0 e0       	ldi	r26, 0x00	; 0
    5312:	b0 e0       	ldi	r27, 0x00	; 0
    5314:	bc 01       	movw	r22, r24
    5316:	cd 01       	movw	r24, r26
    5318:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
        LCD_DisplayString("KMH ");
    531c:	82 e9       	ldi	r24, 0x92	; 146
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        sei();
    5324:	78 94       	sei
    }
}
    5326:	cf 91       	pop	r28
    5328:	df 91       	pop	r29
    532a:	08 95       	ret

0000532c <GetDiffCarSpeed_and_limit>:


static void GetDiffCarSpeed_and_limit(void)
{
    532c:	df 93       	push	r29
    532e:	cf 93       	push	r28
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    if(Car_Speed > Global_Speed_Limiter_value)
    5334:	80 91 c9 02 	lds	r24, 0x02C9
    5338:	28 2f       	mov	r18, r24
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	80 91 0b 03 	lds	r24, 0x030B
    5340:	90 91 0c 03 	lds	r25, 0x030C
    5344:	28 17       	cp	r18, r24
    5346:	39 07       	cpc	r19, r25
    5348:	1c f4       	brge	.+6      	; 0x5350 <GetDiffCarSpeed_and_limit+0x24>
    {
        /*  Update Status  */
        Speed_limit_Current_Status = Speed_Limit_Failed ;
    534a:	10 92 ce 02 	sts	0x02CE, r1
    534e:	0e c0       	rjmp	.+28     	; 0x536c <GetDiffCarSpeed_and_limit+0x40>
    }
    else if(Car_Speed <= Global_Speed_Limiter_value)
    5350:	80 91 c9 02 	lds	r24, 0x02C9
    5354:	28 2f       	mov	r18, r24
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	80 91 0b 03 	lds	r24, 0x030B
    535c:	90 91 0c 03 	lds	r25, 0x030C
    5360:	28 17       	cp	r18, r24
    5362:	39 07       	cpc	r19, r25
    5364:	1c f0       	brlt	.+6      	; 0x536c <GetDiffCarSpeed_and_limit+0x40>
    {
        Speed_limit_Current_Status = Speed_Limit_Meet ;
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	80 93 ce 02 	sts	0x02CE, r24
    }
    if(Page_Current_State == Page_3_LCD)
    536c:	80 91 c7 02 	lds	r24, 0x02C7
    5370:	82 30       	cpi	r24, 0x02	; 2
    5372:	19 f4       	brne	.+6      	; 0x537a <GetDiffCarSpeed_and_limit+0x4e>
    {
        /*  Make update in LCD  and give sound notify */
        DashBoard_SpeedLimit_status_update();
    5374:	0e 94 da 29 	call	0x53b4	; 0x53b4 <DashBoard_SpeedLimit_status_update>
    5378:	1a c0       	rjmp	.+52     	; 0x53ae <GetDiffCarSpeed_and_limit+0x82>
    }
    else /* give sound notify  */
    {
        if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Meet))
    537a:	80 91 08 03 	lds	r24, 0x0308
    537e:	81 30       	cpi	r24, 0x01	; 1
    5380:	51 f4       	brne	.+20     	; 0x5396 <GetDiffCarSpeed_and_limit+0x6a>
    5382:	80 91 ce 02 	lds	r24, 0x02CE
    5386:	81 30       	cpi	r24, 0x01	; 1
    5388:	31 f4       	brne	.+12     	; 0x5396 <GetDiffCarSpeed_and_limit+0x6a>
        {
            GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    538a:	82 e0       	ldi	r24, 0x02	; 2
    538c:	67 e0       	ldi	r22, 0x07	; 7
    538e:	40 e0       	ldi	r20, 0x00	; 0
    5390:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    5394:	0c c0       	rjmp	.+24     	; 0x53ae <GetDiffCarSpeed_and_limit+0x82>
        }
        else if((SpeedLimit_Current__State == SpeedLimit_Enable) && (Speed_limit_Current_Status == Speed_Limit_Failed))
    5396:	80 91 08 03 	lds	r24, 0x0308
    539a:	81 30       	cpi	r24, 0x01	; 1
    539c:	41 f4       	brne	.+16     	; 0x53ae <GetDiffCarSpeed_and_limit+0x82>
    539e:	80 91 ce 02 	lds	r24, 0x02CE
    53a2:	88 23       	and	r24, r24
    53a4:	21 f4       	brne	.+8      	; 0x53ae <GetDiffCarSpeed_and_limit+0x82>
        {
            GPIO_TogglePin(Relay_PORT,Relay_PIN);
    53a6:	82 e0       	ldi	r24, 0x02	; 2
    53a8:	67 e0       	ldi	r22, 0x07	; 7
    53aa:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <GPIO_TogglePin>
        }
    }
}
    53ae:	cf 91       	pop	r28
    53b0:	df 91       	pop	r29
    53b2:	08 95       	ret

000053b4 <DashBoard_SpeedLimit_status_update>:

static void DashBoard_SpeedLimit_status_update(void)
{
    53b4:	df 93       	push	r29
    53b6:	cf 93       	push	r28
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
    // if(Page_Current_State == Page_3_LCD)
    // {
        cli();
    53bc:	f8 94       	cli
        LCD_MoveCursor(1,9);
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	69 e0       	ldi	r22, 0x09	; 9
    53c2:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        if(SpeedLimit_Current__State == SpeedLimit_Enable)
    53c6:	80 91 08 03 	lds	r24, 0x0308
    53ca:	81 30       	cpi	r24, 0x01	; 1
    53cc:	a9 f4       	brne	.+42     	; 0x53f8 <DashBoard_SpeedLimit_status_update+0x44>
        {
            if(Speed_limit_Current_Status == Speed_Limit_Meet)
    53ce:	80 91 ce 02 	lds	r24, 0x02CE
    53d2:	81 30       	cpi	r24, 0x01	; 1
    53d4:	49 f4       	brne	.+18     	; 0x53e8 <DashBoard_SpeedLimit_status_update+0x34>
            {
                LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    53d6:	84 e0       	ldi	r24, 0x04	; 4
    53d8:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
                /*  stop sound of relay  */
                GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    53dc:	82 e0       	ldi	r24, 0x02	; 2
    53de:	67 e0       	ldi	r22, 0x07	; 7
    53e0:	40 e0       	ldi	r20, 0x00	; 0
    53e2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
    53e6:	0b c0       	rjmp	.+22     	; 0x53fe <DashBoard_SpeedLimit_status_update+0x4a>
            }
            else
            {
                LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    53e8:	86 e0       	ldi	r24, 0x06	; 6
    53ea:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
                /*  Action Will taken notify user  as it sound of relay switch*/
                GPIO_TogglePin(Relay_PORT,Relay_PIN);
    53ee:	82 e0       	ldi	r24, 0x02	; 2
    53f0:	67 e0       	ldi	r22, 0x07	; 7
    53f2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <GPIO_TogglePin>
    53f6:	03 c0       	rjmp	.+6      	; 0x53fe <DashBoard_SpeedLimit_status_update+0x4a>
            }
        }
        else 
        {
            LCD_DisplayCharacter('D'); //system disabled
    53f8:	84 e4       	ldi	r24, 0x44	; 68
    53fa:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
        }
        sei();
    53fe:	78 94       	sei
    // }
}
    5400:	cf 91       	pop	r28
    5402:	df 91       	pop	r29
    5404:	08 95       	ret

00005406 <DahBoard_Update_DrivingMonetoring_State>:



static void DahBoard_Update_DrivingMonetoring_State(uint8 DM_state)
{
    5406:	df 93       	push	r29
    5408:	cf 93       	push	r28
    540a:	0f 92       	push	r0
    540c:	cd b7       	in	r28, 0x3d	; 61
    540e:	de b7       	in	r29, 0x3e	; 62
    5410:	89 83       	std	Y+1, r24	; 0x01
    cli();
    5412:	f8 94       	cli
    /*  Go to index that display current Driving Monetoring state*/
    LCD_MoveCursor(2,18);
    5414:	82 e0       	ldi	r24, 0x02	; 2
    5416:	62 e1       	ldi	r22, 0x12	; 18
    5418:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>

    if(DM_state == DirivingMonetoring_Enable)
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	81 30       	cpi	r24, 0x01	; 1
    5420:	21 f4       	brne	.+8      	; 0x542a <DahBoard_Update_DrivingMonetoring_State+0x24>
    {
        LCD_DisplayCharacter(POS_LCD_Right_ICON);
    5422:	82 e0       	ldi	r24, 0x02	; 2
    5424:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    5428:	03 c0       	rjmp	.+6      	; 0x5430 <DahBoard_Update_DrivingMonetoring_State+0x2a>
    }
    else 
    {
        LCD_DisplayCharacter(POS_LCD_False_ICON);
    542a:	83 e0       	ldi	r24, 0x03	; 3
    542c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    }

    sei();
    5430:	78 94       	sei

}
    5432:	0f 90       	pop	r0
    5434:	cf 91       	pop	r28
    5436:	df 91       	pop	r29
    5438:	08 95       	ret

0000543a <DashBoard_DrivingMonetoring_Status_update>:

static void DashBoard_DrivingMonetoring_Status_update(void)
{
    543a:	df 93       	push	r29
    543c:	cf 93       	push	r28
    543e:	cd b7       	in	r28, 0x3d	; 61
    5440:	de b7       	in	r29, 0x3e	; 62
    cli();
    5442:	f8 94       	cli
    LCD_MoveCursor(0,10);
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	6a e0       	ldi	r22, 0x0A	; 10
    5448:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    544c:	80 91 0a 03 	lds	r24, 0x030A
    5450:	81 30       	cpi	r24, 0x01	; 1
    5452:	61 f4       	brne	.+24     	; 0x546c <DashBoard_DrivingMonetoring_Status_update+0x32>
    {
        if(DrivingMonetoring_Current_Status == DM_Meet)
    5454:	80 91 d0 02 	lds	r24, 0x02D0
    5458:	81 30       	cpi	r24, 0x01	; 1
    545a:	21 f4       	brne	.+8      	; 0x5464 <DashBoard_DrivingMonetoring_Status_update+0x2a>
        {
            LCD_DisplayCharacter(POS_LCD_Mute_ICON);
    545c:	84 e0       	ldi	r24, 0x04	; 4
    545e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    5462:	07 c0       	rjmp	.+14     	; 0x5472 <DashBoard_DrivingMonetoring_Status_update+0x38>
        }
        else
        {
            LCD_DisplayCharacter(POS_LCD_Alarm_ICON);
    5464:	86 e0       	ldi	r24, 0x06	; 6
    5466:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    546a:	03 c0       	rjmp	.+6      	; 0x5472 <DashBoard_DrivingMonetoring_Status_update+0x38>
        }
    }
    else
    {
        LCD_DisplayCharacter('D'); //system disabled
    546c:	84 e4       	ldi	r24, 0x44	; 68
    546e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    }
    sei();
    5472:	78 94       	sei
}
    5474:	cf 91       	pop	r28
    5476:	df 91       	pop	r29
    5478:	08 95       	ret

0000547a <DashBoard_DrivingMonetoring_continous_Status_update>:

static void DashBoard_DrivingMonetoring_continous_Status_update(void)
{
    547a:	df 93       	push	r29
    547c:	cf 93       	push	r28
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_2_LCD)
    5482:	80 91 c7 02 	lds	r24, 0x02C7
    5486:	81 30       	cpi	r24, 0x01	; 1
    5488:	11 f4       	brne	.+4      	; 0x548e <DashBoard_DrivingMonetoring_continous_Status_update+0x14>
    {
        DashBoard_DrivingMonetoring_Status_update();
    548a:	0e 94 1d 2a 	call	0x543a	; 0x543a <DashBoard_DrivingMonetoring_Status_update>
    }
}
    548e:	cf 91       	pop	r28
    5490:	df 91       	pop	r29
    5492:	08 95       	ret

00005494 <DashBoardPageFooter_update>:




static void DashBoardPageFooter_update(void)
{
    5494:	df 93       	push	r29
    5496:	cf 93       	push	r28
    5498:	cd b7       	in	r28, 0x3d	; 61
    549a:	de b7       	in	r29, 0x3e	; 62
    549c:	65 97       	sbiw	r28, 0x15	; 21
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	f8 94       	cli
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	cd bf       	out	0x3d, r28	; 61
    
    uint8 pages_option [4][4] = { {POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected , POS_LCD_Page_Not_Selected} , {POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Not_Selected , POS_LCD_Page_Selected} };
    54a8:	ce 01       	movw	r24, r28
    54aa:	01 96       	adiw	r24, 0x01	; 1
    54ac:	9a 8b       	std	Y+18, r25	; 0x12
    54ae:	89 8b       	std	Y+17, r24	; 0x11
    54b0:	ea ed       	ldi	r30, 0xDA	; 218
    54b2:	f2 e0       	ldi	r31, 0x02	; 2
    54b4:	fc 8b       	std	Y+20, r31	; 0x14
    54b6:	eb 8b       	std	Y+19, r30	; 0x13
    54b8:	f0 e1       	ldi	r31, 0x10	; 16
    54ba:	fd 8b       	std	Y+21, r31	; 0x15
    54bc:	eb 89       	ldd	r30, Y+19	; 0x13
    54be:	fc 89       	ldd	r31, Y+20	; 0x14
    54c0:	00 80       	ld	r0, Z
    54c2:	8b 89       	ldd	r24, Y+19	; 0x13
    54c4:	9c 89       	ldd	r25, Y+20	; 0x14
    54c6:	01 96       	adiw	r24, 0x01	; 1
    54c8:	9c 8b       	std	Y+20, r25	; 0x14
    54ca:	8b 8b       	std	Y+19, r24	; 0x13
    54cc:	e9 89       	ldd	r30, Y+17	; 0x11
    54ce:	fa 89       	ldd	r31, Y+18	; 0x12
    54d0:	00 82       	st	Z, r0
    54d2:	89 89       	ldd	r24, Y+17	; 0x11
    54d4:	9a 89       	ldd	r25, Y+18	; 0x12
    54d6:	01 96       	adiw	r24, 0x01	; 1
    54d8:	9a 8b       	std	Y+18, r25	; 0x12
    54da:	89 8b       	std	Y+17, r24	; 0x11
    54dc:	9d 89       	ldd	r25, Y+21	; 0x15
    54de:	91 50       	subi	r25, 0x01	; 1
    54e0:	9d 8b       	std	Y+21, r25	; 0x15
    54e2:	ed 89       	ldd	r30, Y+21	; 0x15
    54e4:	ee 23       	and	r30, r30
    54e6:	51 f7       	brne	.-44     	; 0x54bc <DashBoardPageFooter_update+0x28>
    cli();
    54e8:	f8 94       	cli
    LCD_MoveCursor(3,8);
    54ea:	83 e0       	ldi	r24, 0x03	; 3
    54ec:	68 e0       	ldi	r22, 0x08	; 8
    54ee:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    /*  Display indicator for current page  */
    LCD_DisplayCharacter(pages_option[Page_Current_State][0]);
    54f2:	80 91 c7 02 	lds	r24, 0x02C7
    54f6:	99 27       	eor	r25, r25
    54f8:	87 fd       	sbrc	r24, 7
    54fa:	90 95       	com	r25
    54fc:	9c 01       	movw	r18, r24
    54fe:	22 0f       	add	r18, r18
    5500:	33 1f       	adc	r19, r19
    5502:	22 0f       	add	r18, r18
    5504:	33 1f       	adc	r19, r19
    5506:	ce 01       	movw	r24, r28
    5508:	01 96       	adiw	r24, 0x01	; 1
    550a:	fc 01       	movw	r30, r24
    550c:	e2 0f       	add	r30, r18
    550e:	f3 1f       	adc	r31, r19
    5510:	80 81       	ld	r24, Z
    5512:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][1]);
    5516:	80 91 c7 02 	lds	r24, 0x02C7
    551a:	99 27       	eor	r25, r25
    551c:	87 fd       	sbrc	r24, 7
    551e:	90 95       	com	r25
    5520:	9c 01       	movw	r18, r24
    5522:	22 0f       	add	r18, r18
    5524:	33 1f       	adc	r19, r19
    5526:	22 0f       	add	r18, r18
    5528:	33 1f       	adc	r19, r19
    552a:	ce 01       	movw	r24, r28
    552c:	01 96       	adiw	r24, 0x01	; 1
    552e:	82 0f       	add	r24, r18
    5530:	93 1f       	adc	r25, r19
    5532:	fc 01       	movw	r30, r24
    5534:	31 96       	adiw	r30, 0x01	; 1
    5536:	80 81       	ld	r24, Z
    5538:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][2]);
    553c:	80 91 c7 02 	lds	r24, 0x02C7
    5540:	99 27       	eor	r25, r25
    5542:	87 fd       	sbrc	r24, 7
    5544:	90 95       	com	r25
    5546:	88 0f       	add	r24, r24
    5548:	99 1f       	adc	r25, r25
    554a:	01 96       	adiw	r24, 0x01	; 1
    554c:	9c 01       	movw	r18, r24
    554e:	22 0f       	add	r18, r18
    5550:	33 1f       	adc	r19, r19
    5552:	ce 01       	movw	r24, r28
    5554:	01 96       	adiw	r24, 0x01	; 1
    5556:	fc 01       	movw	r30, r24
    5558:	e2 0f       	add	r30, r18
    555a:	f3 1f       	adc	r31, r19
    555c:	80 81       	ld	r24, Z
    555e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    LCD_DisplayCharacter(pages_option[Page_Current_State][3]);
    5562:	80 91 c7 02 	lds	r24, 0x02C7
    5566:	99 27       	eor	r25, r25
    5568:	87 fd       	sbrc	r24, 7
    556a:	90 95       	com	r25
    556c:	9c 01       	movw	r18, r24
    556e:	22 0f       	add	r18, r18
    5570:	33 1f       	adc	r19, r19
    5572:	22 0f       	add	r18, r18
    5574:	33 1f       	adc	r19, r19
    5576:	ce 01       	movw	r24, r28
    5578:	01 96       	adiw	r24, 0x01	; 1
    557a:	82 0f       	add	r24, r18
    557c:	93 1f       	adc	r25, r19
    557e:	fc 01       	movw	r30, r24
    5580:	33 96       	adiw	r30, 0x03	; 3
    5582:	80 81       	ld	r24, Z
    5584:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
    sei();
    5588:	78 94       	sei
}
    558a:	65 96       	adiw	r28, 0x15	; 21
    558c:	0f b6       	in	r0, 0x3f	; 63
    558e:	f8 94       	cli
    5590:	de bf       	out	0x3e, r29	; 62
    5592:	0f be       	out	0x3f, r0	; 63
    5594:	cd bf       	out	0x3d, r28	; 61
    5596:	cf 91       	pop	r28
    5598:	df 91       	pop	r29
    559a:	08 95       	ret

0000559c <DashBoard_SwitchPages>:




static void DashBoard_SwitchPages(void)
{
    559c:	df 93       	push	r29
    559e:	cf 93       	push	r28
    55a0:	cd b7       	in	r28, 0x3d	; 61
    55a2:	de b7       	in	r29, 0x3e	; 62
    cli();
    55a4:	f8 94       	cli
    LCD_MoveCursor(0,0);
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	60 e0       	ldi	r22, 0x00	; 0
    55aa:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    LCD_DisplayString("              ");
    55ae:	87 e9       	ldi	r24, 0x97	; 151
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    LCD_MoveCursor(1,0);
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	60 e0       	ldi	r22, 0x00	; 0
    55ba:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    /*  Solve bug of system design that after some time should turn buzzer of but as I disable interrupt that timer 0 depend on it to turn buzzer off  */
    /*  This probblem appear when press BA on/off during exisatnce in page 1*/
    if(Buzzer_GiveSound == YES_Condition)
    55be:	80 91 17 03 	lds	r24, 0x0317
    55c2:	81 30       	cpi	r24, 0x01	; 1
    55c4:	49 f4       	brne	.+18     	; 0x55d8 <DashBoard_SwitchPages+0x3c>
    {
        Buzzer_GiveSound = NO_Condition ;
    55c6:	10 92 17 03 	sts	0x0317, r1
        Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    55ca:	82 e0       	ldi	r24, 0x02	; 2
    55cc:	66 e0       	ldi	r22, 0x06	; 6
    55ce:	40 e0       	ldi	r20, 0x00	; 0
    55d0:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <Buzzer_OnOffPositiveLogic>
        Buzzer_Timer0_OVF_count = 0;
    55d4:	10 92 18 03 	sts	0x0318, r1
    }   
    LCD_DisplayString("           ");
    55d8:	86 ea       	ldi	r24, 0xA6	; 166
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    /*  Main window that I start with  */
    if(Page_Current_State == Page_2_LCD)
    55e0:	80 91 c7 02 	lds	r24, 0x02C7
    55e4:	81 30       	cpi	r24, 0x01	; 1
    55e6:	f9 f4       	brne	.+62     	; 0x5626 <DashBoard_SwitchPages+0x8a>
    {
        /*  display data for Driving monetoring */
        LCD_MoveCursor(0,0);
    55e8:	80 e0       	ldi	r24, 0x00	; 0
    55ea:	60 e0       	ldi	r22, 0x00	; 0
    55ec:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString((const uint8 * )"DM Status:");
    55f0:	82 eb       	ldi	r24, 0xB2	; 178
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        /*  Call function that will handle status for DM */
        DashBoard_DrivingMonetoring_Status_update();
    55f8:	0e 94 1d 2a 	call	0x543a	; 0x543a <DashBoard_DrivingMonetoring_Status_update>

        /*  Display kilo meters counter value  */
        LCD_MoveCursor(1,0);
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	60 e0       	ldi	r22, 0x00	; 0
    5600:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString((const uint8 * )"KMC:"); 
    5604:	8d eb       	ldi	r24, 0xBD	; 189
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        LCD_FloatToString(Accumulative_Distance_KM);
    560c:	80 91 10 03 	lds	r24, 0x0310
    5610:	90 91 11 03 	lds	r25, 0x0311
    5614:	a0 91 12 03 	lds	r26, 0x0312
    5618:	b0 91 13 03 	lds	r27, 0x0313
    561c:	bc 01       	movw	r22, r24
    561e:	cd 01       	movw	r24, r26
    5620:	0e 94 2a 21 	call	0x4254	; 0x4254 <LCD_FloatToString>
    5624:	59 c0       	rjmp	.+178    	; 0x56d8 <DashBoard_SwitchPages+0x13c>
    }
    else if(Page_Current_State == Page_1_LCD)
    5626:	80 91 c7 02 	lds	r24, 0x02C7
    562a:	88 23       	and	r24, r24
    562c:	11 f5       	brne	.+68     	; 0x5672 <DashBoard_SwitchPages+0xd6>
    {
        LCD_MoveCursor(0,0);
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	60 e0       	ldi	r22, 0x00	; 0
    5632:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString("BA Status : ");
    5636:	82 ec       	ldi	r24, 0xC2	; 194
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        DashBoard_BrakingAssist_Status_update();
    563e:	0e 94 39 29 	call	0x5272	; 0x5272 <DashBoard_BrakingAssist_Status_update>
        if(BrakingAssist_Current_State == BrakingAssist_Enable)
    5642:	80 91 09 03 	lds	r24, 0x0309
    5646:	81 30       	cpi	r24, 0x01	; 1
    5648:	59 f4       	brne	.+22     	; 0x5660 <DashBoard_SwitchPages+0xc4>
        {
            LCD_MoveCursor(1,0);
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	60 e0       	ldi	r22, 0x00	; 0
    564e:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
            LCD_DisplayString("DIS:");
    5652:	8f ec       	ldi	r24, 0xCF	; 207
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
            ACCS_CatchDistance();
    565a:	0e 94 04 38 	call	0x7008	; 0x7008 <ACCS_CatchDistance>
    565e:	3c c0       	rjmp	.+120    	; 0x56d8 <DashBoard_SwitchPages+0x13c>
        }
        else 
        {
            LCD_MoveCursor(1,0);
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	60 e0       	ldi	r22, 0x00	; 0
    5664:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
            LCD_DisplayString("          ");
    5668:	84 ed       	ldi	r24, 0xD4	; 212
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    5670:	33 c0       	rjmp	.+102    	; 0x56d8 <DashBoard_SwitchPages+0x13c>
        }

    }
    else if(Page_Current_State == Page_3_LCD)
    5672:	80 91 c7 02 	lds	r24, 0x02C7
    5676:	82 30       	cpi	r24, 0x02	; 2
    5678:	09 f5       	brne	.+66     	; 0x56bc <DashBoard_SwitchPages+0x120>
    {
        LCD_MoveCursor(0,0);
    567a:	80 e0       	ldi	r24, 0x00	; 0
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString("SLIM : ");
    5682:	8f ed       	ldi	r24, 0xDF	; 223
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        LCD_intToString(Global_Speed_Limiter_value);
    568a:	80 91 c9 02 	lds	r24, 0x02C9
    568e:	88 2f       	mov	r24, r24
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	a0 e0       	ldi	r26, 0x00	; 0
    5694:	b0 e0       	ldi	r27, 0x00	; 0
    5696:	bc 01       	movw	r22, r24
    5698:	cd 01       	movw	r24, r26
    569a:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
        LCD_DisplayString("KMH ");
    569e:	82 e9       	ldi	r24, 0x92	; 146
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        LCD_MoveCursor(1,0);
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	60 e0       	ldi	r22, 0x00	; 0
    56aa:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString("Status : ");
    56ae:	87 ee       	ldi	r24, 0xE7	; 231
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        /* update Icons of speed limit status  */
        DashBoard_SpeedLimit_status_update();
    56b6:	0e 94 da 29 	call	0x53b4	; 0x53b4 <DashBoard_SpeedLimit_status_update>
    56ba:	0e c0       	rjmp	.+28     	; 0x56d8 <DashBoard_SwitchPages+0x13c>
    }
    else if(Page_Current_State == Page_4_LCD)
    56bc:	80 91 c7 02 	lds	r24, 0x02C7
    56c0:	83 30       	cpi	r24, 0x03	; 3
    56c2:	51 f4       	brne	.+20     	; 0x56d8 <DashBoard_SwitchPages+0x13c>
    {
        LCD_MoveCursor(0,0);
    56c4:	80 e0       	ldi	r24, 0x00	; 0
    56c6:	60 e0       	ldi	r22, 0x00	; 0
    56c8:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString("D=18/3/2024");
    56cc:	81 ef       	ldi	r24, 0xF1	; 241
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        DashBoard_updateTime();
    56d4:	0e 94 91 37 	call	0x6f22	; 0x6f22 <DashBoard_updateTime>

        

    }
    sei();
    56d8:	78 94       	sei
}
    56da:	cf 91       	pop	r28
    56dc:	df 91       	pop	r29
    56de:	08 95       	ret

000056e0 <APP_KeypadUpdate>:


static void APP_KeypadUpdate(void)
{
    56e0:	0f 93       	push	r16
    56e2:	1f 93       	push	r17
    56e4:	df 93       	push	r29
    56e6:	cf 93       	push	r28
    56e8:	cd b7       	in	r28, 0x3d	; 61
    56ea:	de b7       	in	r29, 0x3e	; 62
    56ec:	c7 54       	subi	r28, 0x47	; 71
    56ee:	d0 40       	sbci	r29, 0x00	; 0
    56f0:	0f b6       	in	r0, 0x3f	; 63
    56f2:	f8 94       	cli
    56f4:	de bf       	out	0x3e, r29	; 62
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	cd bf       	out	0x3d, r28	; 61

    static uint8 BrakingAssit_IsStillPressed = NO_Condition ;

    static uint8 DrivingMonetoring_IsStillPressed = NO_Condition ;

    volatile sint8 local_currentValue_keypad = Keypad_GetPressedKey();/* Take last keypad pressed button */
    56fa:	0e 94 ca 22 	call	0x4594	; 0x4594 <Keypad_GetPressedKey>
    56fe:	fe 01       	movw	r30, r28
    5700:	e9 5b       	subi	r30, 0xB9	; 185
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
    5704:	80 83       	st	Z, r24


/* (Button 1️⃣) Handle GearBox Button   */

    /*  👀👀👀👀👀👀GearBox switch only happen when press on gearbox and brake button in same time  */
    if( (local_currentValue_keypad == Keypad_GearBox_pressed_value) && (Global_Braking_BTN_State == BTN_Pressed_State) && (Car_Speed == 0))
    5706:	fe 01       	movw	r30, r28
    5708:	e9 5b       	subi	r30, 0xB9	; 185
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	80 81       	ld	r24, Z
    570e:	82 30       	cpi	r24, 0x02	; 2
    5710:	09 f0       	breq	.+2      	; 0x5714 <APP_KeypadUpdate+0x34>
    5712:	cf c0       	rjmp	.+414    	; 0x58b2 <APP_KeypadUpdate+0x1d2>
    5714:	80 91 c8 02 	lds	r24, 0x02C8
    5718:	88 23       	and	r24, r24
    571a:	09 f0       	breq	.+2      	; 0x571e <APP_KeypadUpdate+0x3e>
    571c:	ca c0       	rjmp	.+404    	; 0x58b2 <APP_KeypadUpdate+0x1d2>
    571e:	80 91 0b 03 	lds	r24, 0x030B
    5722:	90 91 0c 03 	lds	r25, 0x030C
    5726:	00 97       	sbiw	r24, 0x00	; 0
    5728:	09 f0       	breq	.+2      	; 0x572c <APP_KeypadUpdate+0x4c>
    572a:	c3 c0       	rjmp	.+390    	; 0x58b2 <APP_KeypadUpdate+0x1d2>
    // if((local_currentValue_keypad == Keypad_GearBox_pressed_value))
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ;//old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    572c:	10 92 16 03 	sts	0x0316, r1
    5730:	10 92 15 03 	sts	0x0315, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	80 93 d0 02 	sts	0x02D0, r24

        /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
        if(GearBox_IsStillPressed == NO_Condition)
    573a:	80 91 25 03 	lds	r24, 0x0325
    573e:	88 23       	and	r24, r24
    5740:	09 f0       	breq	.+2      	; 0x5744 <APP_KeypadUpdate+0x64>
    5742:	b9 c0       	rjmp	.+370    	; 0x58b6 <APP_KeypadUpdate+0x1d6>
        {
            GearBox_IsStillPressed = YES_Condition ;
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	80 93 25 03 	sts	0x0325, r24
            /* turn buzzer on and give timer 0 clock and set timeout    */
            Buzzer_GiveSound = YES_Condition; 
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	80 93 17 03 	sts	0x0317, r24

            /*  Go to next state for gearbox*/
            GearBox_Current_State ++ ;
    5750:	80 91 06 03 	lds	r24, 0x0306
    5754:	8f 5f       	subi	r24, 0xFF	; 255
    5756:	80 93 06 03 	sts	0x0306, r24
            if(GearBox_Current_State == GearBox_Return_to_N  )
    575a:	80 91 06 03 	lds	r24, 0x0306
    575e:	83 30       	cpi	r24, 0x03	; 3
    5760:	11 f4       	brne	.+4      	; 0x5766 <APP_KeypadUpdate+0x86>
            {
                GearBox_Current_State = N_GearBox ;
    5762:	10 92 06 03 	sts	0x0306, r1
                
            }
            /*  👀👀Send current state of Gearbox to mobile app using bluetooth*/
            //Bluetooth
            cli();
    5766:	f8 94       	cli
            if(GearBox_Current_State == N_GearBox)
    5768:	80 91 06 03 	lds	r24, 0x0306
    576c:	88 23       	and	r24, r24
    576e:	29 f4       	brne	.+10     	; 0x577a <APP_KeypadUpdate+0x9a>
                Bluetooth_Send((const uint8 * )"!0");
    5770:	8d ef       	ldi	r24, 0xFD	; 253
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5778:	11 c0       	rjmp	.+34     	; 0x579c <APP_KeypadUpdate+0xbc>
            else if(GearBox_Current_State == D_GearBox)
    577a:	80 91 06 03 	lds	r24, 0x0306
    577e:	81 30       	cpi	r24, 0x01	; 1
    5780:	29 f4       	brne	.+10     	; 0x578c <APP_KeypadUpdate+0xac>
                Bluetooth_Send((const uint8 * )"!1");
    5782:	80 e0       	ldi	r24, 0x00	; 0
    5784:	91 e0       	ldi	r25, 0x01	; 1
    5786:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    578a:	08 c0       	rjmp	.+16     	; 0x579c <APP_KeypadUpdate+0xbc>
            else if(GearBox_Current_State == R_GearBox)
    578c:	80 91 06 03 	lds	r24, 0x0306
    5790:	82 30       	cpi	r24, 0x02	; 2
    5792:	21 f4       	brne	.+8      	; 0x579c <APP_KeypadUpdate+0xbc>
                Bluetooth_Send((const uint8 * )"!2");
    5794:	83 e0       	ldi	r24, 0x03	; 3
    5796:	91 e0       	ldi	r25, 0x01	; 1
    5798:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    579c:	fe 01       	movw	r30, r28
    579e:	ed 5b       	subi	r30, 0xBD	; 189
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	80 e0       	ldi	r24, 0x00	; 0
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	a0 e2       	ldi	r26, 0x20	; 32
    57a8:	b1 e4       	ldi	r27, 0x41	; 65
    57aa:	80 83       	st	Z, r24
    57ac:	91 83       	std	Z+1, r25	; 0x01
    57ae:	a2 83       	std	Z+2, r26	; 0x02
    57b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57b2:	8e 01       	movw	r16, r28
    57b4:	01 5c       	subi	r16, 0xC1	; 193
    57b6:	1f 4f       	sbci	r17, 0xFF	; 255
    57b8:	fe 01       	movw	r30, r28
    57ba:	ed 5b       	subi	r30, 0xBD	; 189
    57bc:	ff 4f       	sbci	r31, 0xFF	; 255
    57be:	60 81       	ld	r22, Z
    57c0:	71 81       	ldd	r23, Z+1	; 0x01
    57c2:	82 81       	ldd	r24, Z+2	; 0x02
    57c4:	93 81       	ldd	r25, Z+3	; 0x03
    57c6:	20 e0       	ldi	r18, 0x00	; 0
    57c8:	30 e0       	ldi	r19, 0x00	; 0
    57ca:	4a ef       	ldi	r20, 0xFA	; 250
    57cc:	54 e4       	ldi	r21, 0x44	; 68
    57ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d2:	dc 01       	movw	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	f8 01       	movw	r30, r16
    57d8:	80 83       	st	Z, r24
    57da:	91 83       	std	Z+1, r25	; 0x01
    57dc:	a2 83       	std	Z+2, r26	; 0x02
    57de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57e0:	fe 01       	movw	r30, r28
    57e2:	ff 96       	adiw	r30, 0x3f	; 63
    57e4:	60 81       	ld	r22, Z
    57e6:	71 81       	ldd	r23, Z+1	; 0x01
    57e8:	82 81       	ldd	r24, Z+2	; 0x02
    57ea:	93 81       	ldd	r25, Z+3	; 0x03
    57ec:	20 e0       	ldi	r18, 0x00	; 0
    57ee:	30 e0       	ldi	r19, 0x00	; 0
    57f0:	40 e8       	ldi	r20, 0x80	; 128
    57f2:	5f e3       	ldi	r21, 0x3F	; 63
    57f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57f8:	88 23       	and	r24, r24
    57fa:	2c f4       	brge	.+10     	; 0x5806 <APP_KeypadUpdate+0x126>
		__ticks = 1;
    57fc:	81 e0       	ldi	r24, 0x01	; 1
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	9e af       	std	Y+62, r25	; 0x3e
    5802:	8d af       	std	Y+61, r24	; 0x3d
    5804:	46 c0       	rjmp	.+140    	; 0x5892 <APP_KeypadUpdate+0x1b2>
	else if (__tmp > 65535)
    5806:	fe 01       	movw	r30, r28
    5808:	ff 96       	adiw	r30, 0x3f	; 63
    580a:	60 81       	ld	r22, Z
    580c:	71 81       	ldd	r23, Z+1	; 0x01
    580e:	82 81       	ldd	r24, Z+2	; 0x02
    5810:	93 81       	ldd	r25, Z+3	; 0x03
    5812:	20 e0       	ldi	r18, 0x00	; 0
    5814:	3f ef       	ldi	r19, 0xFF	; 255
    5816:	4f e7       	ldi	r20, 0x7F	; 127
    5818:	57 e4       	ldi	r21, 0x47	; 71
    581a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    581e:	18 16       	cp	r1, r24
    5820:	64 f5       	brge	.+88     	; 0x587a <APP_KeypadUpdate+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5822:	fe 01       	movw	r30, r28
    5824:	ed 5b       	subi	r30, 0xBD	; 189
    5826:	ff 4f       	sbci	r31, 0xFF	; 255
    5828:	60 81       	ld	r22, Z
    582a:	71 81       	ldd	r23, Z+1	; 0x01
    582c:	82 81       	ldd	r24, Z+2	; 0x02
    582e:	93 81       	ldd	r25, Z+3	; 0x03
    5830:	20 e0       	ldi	r18, 0x00	; 0
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	40 e2       	ldi	r20, 0x20	; 32
    5836:	51 e4       	ldi	r21, 0x41	; 65
    5838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	bc 01       	movw	r22, r24
    5842:	cd 01       	movw	r24, r26
    5844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5848:	dc 01       	movw	r26, r24
    584a:	cb 01       	movw	r24, r22
    584c:	9e af       	std	Y+62, r25	; 0x3e
    584e:	8d af       	std	Y+61, r24	; 0x3d
    5850:	0f c0       	rjmp	.+30     	; 0x5870 <APP_KeypadUpdate+0x190>
    5852:	88 ec       	ldi	r24, 0xC8	; 200
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	9c af       	std	Y+60, r25	; 0x3c
    5858:	8b af       	std	Y+59, r24	; 0x3b
    585a:	8b ad       	ldd	r24, Y+59	; 0x3b
    585c:	9c ad       	ldd	r25, Y+60	; 0x3c
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	f1 f7       	brne	.-4      	; 0x585e <APP_KeypadUpdate+0x17e>
    5862:	9c af       	std	Y+60, r25	; 0x3c
    5864:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5866:	8d ad       	ldd	r24, Y+61	; 0x3d
    5868:	9e ad       	ldd	r25, Y+62	; 0x3e
    586a:	01 97       	sbiw	r24, 0x01	; 1
    586c:	9e af       	std	Y+62, r25	; 0x3e
    586e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5870:	8d ad       	ldd	r24, Y+61	; 0x3d
    5872:	9e ad       	ldd	r25, Y+62	; 0x3e
    5874:	00 97       	sbiw	r24, 0x00	; 0
    5876:	69 f7       	brne	.-38     	; 0x5852 <APP_KeypadUpdate+0x172>
    5878:	16 c0       	rjmp	.+44     	; 0x58a6 <APP_KeypadUpdate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    587a:	fe 01       	movw	r30, r28
    587c:	ff 96       	adiw	r30, 0x3f	; 63
    587e:	60 81       	ld	r22, Z
    5880:	71 81       	ldd	r23, Z+1	; 0x01
    5882:	82 81       	ldd	r24, Z+2	; 0x02
    5884:	93 81       	ldd	r25, Z+3	; 0x03
    5886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	9e af       	std	Y+62, r25	; 0x3e
    5890:	8d af       	std	Y+61, r24	; 0x3d
    5892:	8d ad       	ldd	r24, Y+61	; 0x3d
    5894:	9e ad       	ldd	r25, Y+62	; 0x3e
    5896:	9a af       	std	Y+58, r25	; 0x3a
    5898:	89 af       	std	Y+57, r24	; 0x39
    589a:	89 ad       	ldd	r24, Y+57	; 0x39
    589c:	9a ad       	ldd	r25, Y+58	; 0x3a
    589e:	01 97       	sbiw	r24, 0x01	; 1
    58a0:	f1 f7       	brne	.-4      	; 0x589e <APP_KeypadUpdate+0x1be>
    58a2:	9a af       	std	Y+58, r25	; 0x3a
    58a4:	89 af       	std	Y+57, r24	; 0x39

            _delay_ms(10);
            sei();
    58a6:	78 94       	sei
            /*  call function to update gearbox state in Dashboard*/
            DashBoard_Update_GearBox_state(GearBox_Current_State);
    58a8:	80 91 06 03 	lds	r24, 0x0306
    58ac:	0e 94 bf 28 	call	0x517e	; 0x517e <DashBoard_Update_GearBox_state>
    58b0:	02 c0       	rjmp	.+4      	; 0x58b6 <APP_KeypadUpdate+0x1d6>
        
    }
    else
    {
        /*  Enter this state when Button released*/
        GearBox_IsStillPressed = NO_Condition ;
    58b2:	10 92 25 03 	sts	0x0325, r1
    }

    /*  There buttons shouldn't take any action except on D mode like(Cruise Control , Braking Assist and Speed limiter)*/
    if(GearBox_Current_State == D_GearBox)
    58b6:	80 91 06 03 	lds	r24, 0x0306
    58ba:	81 30       	cpi	r24, 0x01	; 1
    58bc:	09 f0       	breq	.+2      	; 0x58c0 <APP_KeypadUpdate+0x1e0>
    58be:	d4 c2       	rjmp	.+1448   	; 0x5e68 <APP_KeypadUpdate+0x788>
    {
/* (Button 2️⃣) Handle Cruise Control system   */
        if(local_currentValue_keypad == Keypad_CCS_pressed_value) 
    58c0:	fe 01       	movw	r30, r28
    58c2:	e9 5b       	subi	r30, 0xB9	; 185
    58c4:	ff 4f       	sbci	r31, 0xFF	; 255
    58c6:	80 81       	ld	r24, Z
    58c8:	88 23       	and	r24, r24
    58ca:	09 f0       	breq	.+2      	; 0x58ce <APP_KeypadUpdate+0x1ee>
    58cc:	aa c0       	rjmp	.+340    	; 0x5a22 <APP_KeypadUpdate+0x342>
        {
            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ;//old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    58ce:	10 92 16 03 	sts	0x0316, r1
    58d2:	10 92 15 03 	sts	0x0315, r1

            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    58d6:	81 e0       	ldi	r24, 0x01	; 1
    58d8:	80 93 d0 02 	sts	0x02D0, r24

            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(CCS_IsStillPressed == NO_Condition)
    58dc:	80 91 24 03 	lds	r24, 0x0324
    58e0:	88 23       	and	r24, r24
    58e2:	09 f0       	breq	.+2      	; 0x58e6 <APP_KeypadUpdate+0x206>
    58e4:	a0 c0       	rjmp	.+320    	; 0x5a26 <APP_KeypadUpdate+0x346>
            {
                CCS_IsStillPressed = YES_Condition ;
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	80 93 24 03 	sts	0x0324, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_GiveSound = YES_Condition; 
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	80 93 17 03 	sts	0x0317, r24

                if(CCS_Currnet_state == CCS_Disable ) 
    58f2:	80 91 07 03 	lds	r24, 0x0307
    58f6:	88 23       	and	r24, r24
    58f8:	41 f4       	brne	.+16     	; 0x590a <APP_KeypadUpdate+0x22a>
                {
                    
                    /*  Update ACCS state with new value (Enabled)*/
                    CCS_Currnet_state = CCS_Enable;
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	80 93 07 03 	sts	0x0307, r24
                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    5900:	80 91 07 03 	lds	r24, 0x0307
    5904:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>
    5908:	06 c0       	rjmp	.+12     	; 0x5916 <APP_KeypadUpdate+0x236>
                    
                }
                else
                {
                    CCS_Currnet_state = CCS_Disable;
    590a:	10 92 07 03 	sts	0x0307, r1
                    /*  Turn off led that work in Adaptive cruise control  as may be  in not safe area and  turn off Adaptive cruise control   */
                    //LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
                    /*  🚩🚩🚩🚩🚩🚩🙆‍♂️🙆‍♂️🙆‍♂️ i think that I need to put diable and enable to interrupt as I may be ACCS enabled and when I disable and press braiking at same time */
                    //LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);

                    DashBoard_Update_CCS_State(CCS_Currnet_state);
    590e:	80 91 07 03 	lds	r24, 0x0307
    5912:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>

                }
                
                /*  👀👀Send current state of Cruise control state to mobile app using bluetooth*/
                //Bluetooth
                cli();
    5916:	f8 94       	cli
                if(CCS_Currnet_state == CCS_Enable)
    5918:	80 91 07 03 	lds	r24, 0x0307
    591c:	81 30       	cpi	r24, 0x01	; 1
    591e:	29 f4       	brne	.+10     	; 0x592a <APP_KeypadUpdate+0x24a>
                    Bluetooth_Send((const uint8 * )"$1");
    5920:	86 e0       	ldi	r24, 0x06	; 6
    5922:	91 e0       	ldi	r25, 0x01	; 1
    5924:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5928:	08 c0       	rjmp	.+16     	; 0x593a <APP_KeypadUpdate+0x25a>
                else if(CCS_Currnet_state == CCS_Disable)
    592a:	80 91 07 03 	lds	r24, 0x0307
    592e:	88 23       	and	r24, r24
    5930:	21 f4       	brne	.+8      	; 0x593a <APP_KeypadUpdate+0x25a>
                    Bluetooth_Send((const uint8 * )"$0");
    5932:	89 e0       	ldi	r24, 0x09	; 9
    5934:	91 e0       	ldi	r25, 0x01	; 1
    5936:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    593a:	80 e0       	ldi	r24, 0x00	; 0
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	a0 e2       	ldi	r26, 0x20	; 32
    5940:	b1 e4       	ldi	r27, 0x41	; 65
    5942:	8d ab       	std	Y+53, r24	; 0x35
    5944:	9e ab       	std	Y+54, r25	; 0x36
    5946:	af ab       	std	Y+55, r26	; 0x37
    5948:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    594a:	6d a9       	ldd	r22, Y+53	; 0x35
    594c:	7e a9       	ldd	r23, Y+54	; 0x36
    594e:	8f a9       	ldd	r24, Y+55	; 0x37
    5950:	98 ad       	ldd	r25, Y+56	; 0x38
    5952:	20 e0       	ldi	r18, 0x00	; 0
    5954:	30 e0       	ldi	r19, 0x00	; 0
    5956:	4a ef       	ldi	r20, 0xFA	; 250
    5958:	54 e4       	ldi	r21, 0x44	; 68
    595a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    595e:	dc 01       	movw	r26, r24
    5960:	cb 01       	movw	r24, r22
    5962:	89 ab       	std	Y+49, r24	; 0x31
    5964:	9a ab       	std	Y+50, r25	; 0x32
    5966:	ab ab       	std	Y+51, r26	; 0x33
    5968:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    596a:	69 a9       	ldd	r22, Y+49	; 0x31
    596c:	7a a9       	ldd	r23, Y+50	; 0x32
    596e:	8b a9       	ldd	r24, Y+51	; 0x33
    5970:	9c a9       	ldd	r25, Y+52	; 0x34
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	40 e8       	ldi	r20, 0x80	; 128
    5978:	5f e3       	ldi	r21, 0x3F	; 63
    597a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    597e:	88 23       	and	r24, r24
    5980:	2c f4       	brge	.+10     	; 0x598c <APP_KeypadUpdate+0x2ac>
		__ticks = 1;
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	98 ab       	std	Y+48, r25	; 0x30
    5988:	8f a7       	std	Y+47, r24	; 0x2f
    598a:	3f c0       	rjmp	.+126    	; 0x5a0a <APP_KeypadUpdate+0x32a>
	else if (__tmp > 65535)
    598c:	69 a9       	ldd	r22, Y+49	; 0x31
    598e:	7a a9       	ldd	r23, Y+50	; 0x32
    5990:	8b a9       	ldd	r24, Y+51	; 0x33
    5992:	9c a9       	ldd	r25, Y+52	; 0x34
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	3f ef       	ldi	r19, 0xFF	; 255
    5998:	4f e7       	ldi	r20, 0x7F	; 127
    599a:	57 e4       	ldi	r21, 0x47	; 71
    599c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59a0:	18 16       	cp	r1, r24
    59a2:	4c f5       	brge	.+82     	; 0x59f6 <APP_KeypadUpdate+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59a4:	6d a9       	ldd	r22, Y+53	; 0x35
    59a6:	7e a9       	ldd	r23, Y+54	; 0x36
    59a8:	8f a9       	ldd	r24, Y+55	; 0x37
    59aa:	98 ad       	ldd	r25, Y+56	; 0x38
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	40 e2       	ldi	r20, 0x20	; 32
    59b2:	51 e4       	ldi	r21, 0x41	; 65
    59b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	bc 01       	movw	r22, r24
    59be:	cd 01       	movw	r24, r26
    59c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	98 ab       	std	Y+48, r25	; 0x30
    59ca:	8f a7       	std	Y+47, r24	; 0x2f
    59cc:	0f c0       	rjmp	.+30     	; 0x59ec <APP_KeypadUpdate+0x30c>
    59ce:	88 ec       	ldi	r24, 0xC8	; 200
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	9e a7       	std	Y+46, r25	; 0x2e
    59d4:	8d a7       	std	Y+45, r24	; 0x2d
    59d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    59d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    59da:	01 97       	sbiw	r24, 0x01	; 1
    59dc:	f1 f7       	brne	.-4      	; 0x59da <APP_KeypadUpdate+0x2fa>
    59de:	9e a7       	std	Y+46, r25	; 0x2e
    59e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    59e4:	98 a9       	ldd	r25, Y+48	; 0x30
    59e6:	01 97       	sbiw	r24, 0x01	; 1
    59e8:	98 ab       	std	Y+48, r25	; 0x30
    59ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    59ee:	98 a9       	ldd	r25, Y+48	; 0x30
    59f0:	00 97       	sbiw	r24, 0x00	; 0
    59f2:	69 f7       	brne	.-38     	; 0x59ce <APP_KeypadUpdate+0x2ee>
    59f4:	14 c0       	rjmp	.+40     	; 0x5a1e <APP_KeypadUpdate+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59f6:	69 a9       	ldd	r22, Y+49	; 0x31
    59f8:	7a a9       	ldd	r23, Y+50	; 0x32
    59fa:	8b a9       	ldd	r24, Y+51	; 0x33
    59fc:	9c a9       	ldd	r25, Y+52	; 0x34
    59fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a02:	dc 01       	movw	r26, r24
    5a04:	cb 01       	movw	r24, r22
    5a06:	98 ab       	std	Y+48, r25	; 0x30
    5a08:	8f a7       	std	Y+47, r24	; 0x2f
    5a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    5a0e:	9c a7       	std	Y+44, r25	; 0x2c
    5a10:	8b a7       	std	Y+43, r24	; 0x2b
    5a12:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a14:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a16:	01 97       	sbiw	r24, 0x01	; 1
    5a18:	f1 f7       	brne	.-4      	; 0x5a16 <APP_KeypadUpdate+0x336>
    5a1a:	9c a7       	std	Y+44, r25	; 0x2c
    5a1c:	8b a7       	std	Y+43, r24	; 0x2b

                _delay_ms(10);
                sei();
    5a1e:	78 94       	sei
    5a20:	02 c0       	rjmp	.+4      	; 0x5a26 <APP_KeypadUpdate+0x346>
            
        }
        else
        {
            /*  Enter this state when Button released*/
            CCS_IsStillPressed = NO_Condition ;
    5a22:	10 92 24 03 	sts	0x0324, r1
        }
/* (Button 3️⃣) Handle Speed Limiter system   */
        /*  Handle Speed Limiter System Button   */
        if(local_currentValue_keypad == Keypad_SpeedLimit_ON_OFF_pressed_value) 
    5a26:	fe 01       	movw	r30, r28
    5a28:	e9 5b       	subi	r30, 0xB9	; 185
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	80 81       	ld	r24, Z
    5a2e:	88 30       	cpi	r24, 0x08	; 8
    5a30:	09 f0       	breq	.+2      	; 0x5a34 <APP_KeypadUpdate+0x354>
    5a32:	af c0       	rjmp	.+350    	; 0x5b92 <APP_KeypadUpdate+0x4b2>
        {
            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ;//old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    5a34:	10 92 16 03 	sts	0x0316, r1
    5a38:	10 92 15 03 	sts	0x0315, r1

            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ; 
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	80 93 d0 02 	sts	0x02D0, r24


            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(SL_ON_OFFIsStillPressed == NO_Condition)
    5a42:	80 91 21 03 	lds	r24, 0x0321
    5a46:	88 23       	and	r24, r24
    5a48:	09 f0       	breq	.+2      	; 0x5a4c <APP_KeypadUpdate+0x36c>
    5a4a:	a5 c0       	rjmp	.+330    	; 0x5b96 <APP_KeypadUpdate+0x4b6>
            {
                SL_ON_OFFIsStillPressed = YES_Condition ;
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	80 93 21 03 	sts	0x0321, r24
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_GiveSound = YES_Condition; 
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	80 93 17 03 	sts	0x0317, r24

                if(SpeedLimit_Current__State == SpeedLimit_Disable)
    5a58:	80 91 08 03 	lds	r24, 0x0308
    5a5c:	88 23       	and	r24, r24
    5a5e:	41 f4       	brne	.+16     	; 0x5a70 <APP_KeypadUpdate+0x390>
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Enable ;
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    5a62:	80 93 08 03 	sts	0x0308, r24
                    /*  Call updater for Speed limiter state */
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    5a66:	80 91 08 03 	lds	r24, 0x0308
    5a6a:	0e 94 5d 29 	call	0x52ba	; 0x52ba <DashBoard_Update_SpeedLimiter_State>
    5a6e:	0b c0       	rjmp	.+22     	; 0x5a86 <APP_KeypadUpdate+0x3a6>
                }
                else 
                {
                    /*  update State of Speed Limiter   */
                    SpeedLimit_Current__State = SpeedLimit_Disable ;
    5a70:	10 92 08 03 	sts	0x0308, r1
                    /*  Call updater for Speed limiter state */   
                    DashBoard_Update_SpeedLimiter_State(SpeedLimit_Current__State);
    5a74:	80 91 08 03 	lds	r24, 0x0308
    5a78:	0e 94 5d 29 	call	0x52ba	; 0x52ba <DashBoard_Update_SpeedLimiter_State>
                    /*  stop sound of relay  as may be close this system and I also my speed higher than limit speed */
                    GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    5a7c:	82 e0       	ldi	r24, 0x02	; 2
    5a7e:	67 e0       	ldi	r22, 0x07	; 7
    5a80:	40 e0       	ldi	r20, 0x00	; 0
    5a82:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
                }

                /*  👀👀Send current state of Speed Limiter state to mobile app using bluetooth*/
                //Bluetooth
                cli();
    5a86:	f8 94       	cli
                if(SpeedLimit_Current__State == SpeedLimit_Enable)
    5a88:	80 91 08 03 	lds	r24, 0x0308
    5a8c:	81 30       	cpi	r24, 0x01	; 1
    5a8e:	29 f4       	brne	.+10     	; 0x5a9a <APP_KeypadUpdate+0x3ba>
                    Bluetooth_Send((const uint8 * )"&1");
    5a90:	8c e0       	ldi	r24, 0x0C	; 12
    5a92:	91 e0       	ldi	r25, 0x01	; 1
    5a94:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5a98:	08 c0       	rjmp	.+16     	; 0x5aaa <APP_KeypadUpdate+0x3ca>
                else if(SpeedLimit_Current__State == SpeedLimit_Disable)
    5a9a:	80 91 08 03 	lds	r24, 0x0308
    5a9e:	88 23       	and	r24, r24
    5aa0:	21 f4       	brne	.+8      	; 0x5aaa <APP_KeypadUpdate+0x3ca>
                    Bluetooth_Send((const uint8 * )"&0");
    5aa2:	85 e6       	ldi	r24, 0x65	; 101
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	a0 e2       	ldi	r26, 0x20	; 32
    5ab0:	b1 e4       	ldi	r27, 0x41	; 65
    5ab2:	8f a3       	std	Y+39, r24	; 0x27
    5ab4:	98 a7       	std	Y+40, r25	; 0x28
    5ab6:	a9 a7       	std	Y+41, r26	; 0x29
    5ab8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aba:	6f a1       	ldd	r22, Y+39	; 0x27
    5abc:	78 a5       	ldd	r23, Y+40	; 0x28
    5abe:	89 a5       	ldd	r24, Y+41	; 0x29
    5ac0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	4a ef       	ldi	r20, 0xFA	; 250
    5ac8:	54 e4       	ldi	r21, 0x44	; 68
    5aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	8b a3       	std	Y+35, r24	; 0x23
    5ad4:	9c a3       	std	Y+36, r25	; 0x24
    5ad6:	ad a3       	std	Y+37, r26	; 0x25
    5ad8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ada:	6b a1       	ldd	r22, Y+35	; 0x23
    5adc:	7c a1       	ldd	r23, Y+36	; 0x24
    5ade:	8d a1       	ldd	r24, Y+37	; 0x25
    5ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    5ae2:	20 e0       	ldi	r18, 0x00	; 0
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	40 e8       	ldi	r20, 0x80	; 128
    5ae8:	5f e3       	ldi	r21, 0x3F	; 63
    5aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5aee:	88 23       	and	r24, r24
    5af0:	2c f4       	brge	.+10     	; 0x5afc <APP_KeypadUpdate+0x41c>
		__ticks = 1;
    5af2:	81 e0       	ldi	r24, 0x01	; 1
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	9a a3       	std	Y+34, r25	; 0x22
    5af8:	89 a3       	std	Y+33, r24	; 0x21
    5afa:	3f c0       	rjmp	.+126    	; 0x5b7a <APP_KeypadUpdate+0x49a>
	else if (__tmp > 65535)
    5afc:	6b a1       	ldd	r22, Y+35	; 0x23
    5afe:	7c a1       	ldd	r23, Y+36	; 0x24
    5b00:	8d a1       	ldd	r24, Y+37	; 0x25
    5b02:	9e a1       	ldd	r25, Y+38	; 0x26
    5b04:	20 e0       	ldi	r18, 0x00	; 0
    5b06:	3f ef       	ldi	r19, 0xFF	; 255
    5b08:	4f e7       	ldi	r20, 0x7F	; 127
    5b0a:	57 e4       	ldi	r21, 0x47	; 71
    5b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b10:	18 16       	cp	r1, r24
    5b12:	4c f5       	brge	.+82     	; 0x5b66 <APP_KeypadUpdate+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b14:	6f a1       	ldd	r22, Y+39	; 0x27
    5b16:	78 a5       	ldd	r23, Y+40	; 0x28
    5b18:	89 a5       	ldd	r24, Y+41	; 0x29
    5b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	40 e2       	ldi	r20, 0x20	; 32
    5b22:	51 e4       	ldi	r21, 0x41	; 65
    5b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	bc 01       	movw	r22, r24
    5b2e:	cd 01       	movw	r24, r26
    5b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b34:	dc 01       	movw	r26, r24
    5b36:	cb 01       	movw	r24, r22
    5b38:	9a a3       	std	Y+34, r25	; 0x22
    5b3a:	89 a3       	std	Y+33, r24	; 0x21
    5b3c:	0f c0       	rjmp	.+30     	; 0x5b5c <APP_KeypadUpdate+0x47c>
    5b3e:	88 ec       	ldi	r24, 0xC8	; 200
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	98 a3       	std	Y+32, r25	; 0x20
    5b44:	8f 8f       	std	Y+31, r24	; 0x1f
    5b46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b48:	98 a1       	ldd	r25, Y+32	; 0x20
    5b4a:	01 97       	sbiw	r24, 0x01	; 1
    5b4c:	f1 f7       	brne	.-4      	; 0x5b4a <APP_KeypadUpdate+0x46a>
    5b4e:	98 a3       	std	Y+32, r25	; 0x20
    5b50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b52:	89 a1       	ldd	r24, Y+33	; 0x21
    5b54:	9a a1       	ldd	r25, Y+34	; 0x22
    5b56:	01 97       	sbiw	r24, 0x01	; 1
    5b58:	9a a3       	std	Y+34, r25	; 0x22
    5b5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    5b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	69 f7       	brne	.-38     	; 0x5b3e <APP_KeypadUpdate+0x45e>
    5b64:	14 c0       	rjmp	.+40     	; 0x5b8e <APP_KeypadUpdate+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b66:	6b a1       	ldd	r22, Y+35	; 0x23
    5b68:	7c a1       	ldd	r23, Y+36	; 0x24
    5b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    5b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    5b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b72:	dc 01       	movw	r26, r24
    5b74:	cb 01       	movw	r24, r22
    5b76:	9a a3       	std	Y+34, r25	; 0x22
    5b78:	89 a3       	std	Y+33, r24	; 0x21
    5b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b80:	8d 8f       	std	Y+29, r24	; 0x1d
    5b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b86:	01 97       	sbiw	r24, 0x01	; 1
    5b88:	f1 f7       	brne	.-4      	; 0x5b86 <APP_KeypadUpdate+0x4a6>
    5b8a:	9e 8f       	std	Y+30, r25	; 0x1e
    5b8c:	8d 8f       	std	Y+29, r24	; 0x1d

                _delay_ms(10);
                sei();
    5b8e:	78 94       	sei
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <APP_KeypadUpdate+0x4b6>
            }  
        }
        else
        {
            SL_ON_OFFIsStillPressed = NO_Condition ;
    5b92:	10 92 21 03 	sts	0x0321, r1
        } 

/* (Button 4️⃣) Handle Braking Assist system   */
        if(local_currentValue_keypad == Keypad_BrakingAssist_pressed_value)
    5b96:	fe 01       	movw	r30, r28
    5b98:	e9 5b       	subi	r30, 0xB9	; 185
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	80 81       	ld	r24, Z
    5b9e:	8a 32       	cpi	r24, 0x2A	; 42
    5ba0:	09 f0       	breq	.+2      	; 0x5ba4 <APP_KeypadUpdate+0x4c4>
    5ba2:	ad c0       	rjmp	.+346    	; 0x5cfe <APP_KeypadUpdate+0x61e>
        {
            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ; //old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    5ba4:	10 92 16 03 	sts	0x0316, r1
    5ba8:	10 92 15 03 	sts	0x0315, r1
            
            

            if(BrakingAssit_IsStillPressed == NO_Condition)
    5bac:	80 91 1e 03 	lds	r24, 0x031E
    5bb0:	88 23       	and	r24, r24
    5bb2:	09 f0       	breq	.+2      	; 0x5bb6 <APP_KeypadUpdate+0x4d6>
    5bb4:	a6 c0       	rjmp	.+332    	; 0x5d02 <APP_KeypadUpdate+0x622>
            {
                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_GiveSound = YES_Condition; 
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	80 93 17 03 	sts	0x0317, r24

                BrakingAssit_IsStillPressed = YES_Condition ;
    5bbc:	81 e0       	ldi	r24, 0x01	; 1
    5bbe:	80 93 1e 03 	sts	0x031E, r24

                if(BrakingAssist_Current_State == BrakingAssist_Disable)
    5bc2:	80 91 09 03 	lds	r24, 0x0309
    5bc6:	88 23       	and	r24, r24
    5bc8:	41 f4       	brne	.+16     	; 0x5bda <APP_KeypadUpdate+0x4fa>
                {
                    BrakingAssist_Current_State = BrakingAssist_Enable ;
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	80 93 09 03 	sts	0x0309, r24
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    5bd0:	80 91 09 03 	lds	r24, 0x0309
    5bd4:	0e 94 1f 29 	call	0x523e	; 0x523e <DashBoard_Update_BrakingAssist_State>
    5bd8:	06 c0       	rjmp	.+12     	; 0x5be6 <APP_KeypadUpdate+0x506>
                }
                else
                {
                    BrakingAssist_Current_State = BrakingAssist_Disable ;
    5bda:	10 92 09 03 	sts	0x0309, r1
                    /*  call function update state of Brake assist*/
                    DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    5bde:	80 91 09 03 	lds	r24, 0x0309
    5be2:	0e 94 1f 29 	call	0x523e	; 0x523e <DashBoard_Update_BrakingAssist_State>
                }
                /*  As if I in page braking Assist and Enable or disable  need to update*/
                if(Page_Current_State == Page_1_LCD)
    5be6:	80 91 c7 02 	lds	r24, 0x02C7
    5bea:	88 23       	and	r24, r24
    5bec:	11 f4       	brne	.+4      	; 0x5bf2 <APP_KeypadUpdate+0x512>
                {
                    DashBoard_SwitchPages();    
    5bee:	0e 94 ce 2a 	call	0x559c	; 0x559c <DashBoard_SwitchPages>
                }

                /*  👀👀Send current state of Brake assist state to mobile app using bluetooth*/
                //Bluetooth
                cli();
    5bf2:	f8 94       	cli
                if(BrakingAssist_Current_State == BrakingAssist_Enable)
    5bf4:	80 91 09 03 	lds	r24, 0x0309
    5bf8:	81 30       	cpi	r24, 0x01	; 1
    5bfa:	29 f4       	brne	.+10     	; 0x5c06 <APP_KeypadUpdate+0x526>
                    Bluetooth_Send((const uint8 * )"%1");
    5bfc:	8f e0       	ldi	r24, 0x0F	; 15
    5bfe:	91 e0       	ldi	r25, 0x01	; 1
    5c00:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5c04:	08 c0       	rjmp	.+16     	; 0x5c16 <APP_KeypadUpdate+0x536>
                else if(BrakingAssist_Current_State == BrakingAssist_Disable)
    5c06:	80 91 09 03 	lds	r24, 0x0309
    5c0a:	88 23       	and	r24, r24
    5c0c:	21 f4       	brne	.+8      	; 0x5c16 <APP_KeypadUpdate+0x536>
                    Bluetooth_Send((const uint8 * )"%0");
    5c0e:	82 e1       	ldi	r24, 0x12	; 18
    5c10:	91 e0       	ldi	r25, 0x01	; 1
    5c12:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5c16:	80 e0       	ldi	r24, 0x00	; 0
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	a0 e2       	ldi	r26, 0x20	; 32
    5c1c:	b1 e4       	ldi	r27, 0x41	; 65
    5c1e:	89 8f       	std	Y+25, r24	; 0x19
    5c20:	9a 8f       	std	Y+26, r25	; 0x1a
    5c22:	ab 8f       	std	Y+27, r26	; 0x1b
    5c24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c26:	69 8d       	ldd	r22, Y+25	; 0x19
    5c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c2e:	20 e0       	ldi	r18, 0x00	; 0
    5c30:	30 e0       	ldi	r19, 0x00	; 0
    5c32:	4a ef       	ldi	r20, 0xFA	; 250
    5c34:	54 e4       	ldi	r21, 0x44	; 68
    5c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	8d 8b       	std	Y+21, r24	; 0x15
    5c40:	9e 8b       	std	Y+22, r25	; 0x16
    5c42:	af 8b       	std	Y+23, r26	; 0x17
    5c44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c46:	6d 89       	ldd	r22, Y+21	; 0x15
    5c48:	7e 89       	ldd	r23, Y+22	; 0x16
    5c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c4e:	20 e0       	ldi	r18, 0x00	; 0
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	40 e8       	ldi	r20, 0x80	; 128
    5c54:	5f e3       	ldi	r21, 0x3F	; 63
    5c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c5a:	88 23       	and	r24, r24
    5c5c:	2c f4       	brge	.+10     	; 0x5c68 <APP_KeypadUpdate+0x588>
		__ticks = 1;
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	9c 8b       	std	Y+20, r25	; 0x14
    5c64:	8b 8b       	std	Y+19, r24	; 0x13
    5c66:	3f c0       	rjmp	.+126    	; 0x5ce6 <APP_KeypadUpdate+0x606>
	else if (__tmp > 65535)
    5c68:	6d 89       	ldd	r22, Y+21	; 0x15
    5c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    5c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	3f ef       	ldi	r19, 0xFF	; 255
    5c74:	4f e7       	ldi	r20, 0x7F	; 127
    5c76:	57 e4       	ldi	r21, 0x47	; 71
    5c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c7c:	18 16       	cp	r1, r24
    5c7e:	4c f5       	brge	.+82     	; 0x5cd2 <APP_KeypadUpdate+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c80:	69 8d       	ldd	r22, Y+25	; 0x19
    5c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c88:	20 e0       	ldi	r18, 0x00	; 0
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	40 e2       	ldi	r20, 0x20	; 32
    5c8e:	51 e4       	ldi	r21, 0x41	; 65
    5c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	bc 01       	movw	r22, r24
    5c9a:	cd 01       	movw	r24, r26
    5c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ca0:	dc 01       	movw	r26, r24
    5ca2:	cb 01       	movw	r24, r22
    5ca4:	9c 8b       	std	Y+20, r25	; 0x14
    5ca6:	8b 8b       	std	Y+19, r24	; 0x13
    5ca8:	0f c0       	rjmp	.+30     	; 0x5cc8 <APP_KeypadUpdate+0x5e8>
    5caa:	88 ec       	ldi	r24, 0xC8	; 200
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	9a 8b       	std	Y+18, r25	; 0x12
    5cb0:	89 8b       	std	Y+17, r24	; 0x11
    5cb2:	89 89       	ldd	r24, Y+17	; 0x11
    5cb4:	9a 89       	ldd	r25, Y+18	; 0x12
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	f1 f7       	brne	.-4      	; 0x5cb6 <APP_KeypadUpdate+0x5d6>
    5cba:	9a 8b       	std	Y+18, r25	; 0x12
    5cbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    5cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    5cc2:	01 97       	sbiw	r24, 0x01	; 1
    5cc4:	9c 8b       	std	Y+20, r25	; 0x14
    5cc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    5cca:	9c 89       	ldd	r25, Y+20	; 0x14
    5ccc:	00 97       	sbiw	r24, 0x00	; 0
    5cce:	69 f7       	brne	.-38     	; 0x5caa <APP_KeypadUpdate+0x5ca>
    5cd0:	14 c0       	rjmp	.+40     	; 0x5cfa <APP_KeypadUpdate+0x61a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    5cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    5cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    5cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    5cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cde:	dc 01       	movw	r26, r24
    5ce0:	cb 01       	movw	r24, r22
    5ce2:	9c 8b       	std	Y+20, r25	; 0x14
    5ce4:	8b 8b       	std	Y+19, r24	; 0x13
    5ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    5cea:	98 8b       	std	Y+16, r25	; 0x10
    5cec:	8f 87       	std	Y+15, r24	; 0x0f
    5cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cf0:	98 89       	ldd	r25, Y+16	; 0x10
    5cf2:	01 97       	sbiw	r24, 0x01	; 1
    5cf4:	f1 f7       	brne	.-4      	; 0x5cf2 <APP_KeypadUpdate+0x612>
    5cf6:	98 8b       	std	Y+16, r25	; 0x10
    5cf8:	8f 87       	std	Y+15, r24	; 0x0f

                _delay_ms(10);
                sei();
    5cfa:	78 94       	sei
    5cfc:	02 c0       	rjmp	.+4      	; 0x5d02 <APP_KeypadUpdate+0x622>
            }
        }
        else 
        {
            BrakingAssit_IsStillPressed = NO_Condition ;
    5cfe:	10 92 1e 03 	sts	0x031E, r1
        }

        /* (Button 10) Handle Driving monetoring Button   */
        if(local_currentValue_keypad == Keypad_DrivingMonetoring_pressed_value)
    5d02:	fe 01       	movw	r30, r28
    5d04:	e9 5b       	subi	r30, 0xB9	; 185
    5d06:	ff 4f       	sbci	r31, 0xFF	; 255
    5d08:	80 81       	ld	r24, Z
    5d0a:	83 32       	cpi	r24, 0x23	; 35
    5d0c:	09 f0       	breq	.+2      	; 0x5d10 <APP_KeypadUpdate+0x630>
    5d0e:	aa c0       	rjmp	.+340    	; 0x5e64 <APP_KeypadUpdate+0x784>
        {
            if(DrivingMonetoring_IsStillPressed == NO_Condition)
    5d10:	80 91 1d 03 	lds	r24, 0x031D
    5d14:	88 23       	and	r24, r24
    5d16:	09 f0       	breq	.+2      	; 0x5d1a <APP_KeypadUpdate+0x63a>
    5d18:	a7 c0       	rjmp	.+334    	; 0x5e68 <APP_KeypadUpdate+0x788>
            {
                DrivingMonetoring_IsStillPressed = YES_Condition ;
    5d1a:	81 e0       	ldi	r24, 0x01	; 1
    5d1c:	80 93 1d 03 	sts	0x031D, r24

                /* turn buzzer on and give timer 0 clock and set timeout    */
                Buzzer_GiveSound = YES_Condition; 
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	80 93 17 03 	sts	0x0317, r24
                
                if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    5d26:	80 91 0a 03 	lds	r24, 0x030A
    5d2a:	88 23       	and	r24, r24
    5d2c:	79 f4       	brne	.+30     	; 0x5d4c <APP_KeypadUpdate+0x66c>
                {
                    DrivingMonetoring_Current_State = DirivingMonetoring_Enable ;
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	80 93 0a 03 	sts	0x030A, r24
                    /*  Update in LCD   */
                    DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    5d34:	80 91 0a 03 	lds	r24, 0x030A
    5d38:	0e 94 03 2a 	call	0x5406	; 0x5406 <DahBoard_Update_DrivingMonetoring_State>

                    /*  Make counter start from zero Again  */
                    // TimeOut_Counter = 0 ;//old one when I use timer1
                    Timer0_Overflow_counter_DM = 0 ;
    5d3c:	10 92 16 03 	sts	0x0316, r1
    5d40:	10 92 15 03 	sts	0x0315, r1

                    /*  intialize that will meeting state at first  */
                    DrivingMonetoring_Current_Status = DM_Meet ;
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	80 93 d0 02 	sts	0x02D0, r24
    5d4a:	06 c0       	rjmp	.+12     	; 0x5d58 <APP_KeypadUpdate+0x678>
                }  
                else
                {
                    DrivingMonetoring_Current_State = DirivingMonetoring_Disable ;
    5d4c:	10 92 0a 03 	sts	0x030A, r1
                    /*  Update in LCD */
                    DahBoard_Update_DrivingMonetoring_State(DrivingMonetoring_Current_State);
    5d50:	80 91 0a 03 	lds	r24, 0x030A
    5d54:	0e 94 03 2a 	call	0x5406	; 0x5406 <DahBoard_Update_DrivingMonetoring_State>
                } 
                /*  👀👀Send current state of Brake assist state to mobile app using bluetooth*/
                //Bluetooth
                cli();
    5d58:	f8 94       	cli
                if(DrivingMonetoring_Current_State == DirivingMonetoring_Enable)
    5d5a:	80 91 0a 03 	lds	r24, 0x030A
    5d5e:	81 30       	cpi	r24, 0x01	; 1
    5d60:	29 f4       	brne	.+10     	; 0x5d6c <APP_KeypadUpdate+0x68c>
                    Bluetooth_Send((const uint8 * )"*1");
    5d62:	85 e1       	ldi	r24, 0x15	; 21
    5d64:	91 e0       	ldi	r25, 0x01	; 1
    5d66:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <APP_KeypadUpdate+0x69c>
                else if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    5d6c:	80 91 0a 03 	lds	r24, 0x030A
    5d70:	88 23       	and	r24, r24
    5d72:	21 f4       	brne	.+8      	; 0x5d7c <APP_KeypadUpdate+0x69c>
                    Bluetooth_Send((const uint8 * )"*0");
    5d74:	82 e6       	ldi	r24, 0x62	; 98
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    5d7c:	80 e0       	ldi	r24, 0x00	; 0
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	a0 e2       	ldi	r26, 0x20	; 32
    5d82:	b1 e4       	ldi	r27, 0x41	; 65
    5d84:	8b 87       	std	Y+11, r24	; 0x0b
    5d86:	9c 87       	std	Y+12, r25	; 0x0c
    5d88:	ad 87       	std	Y+13, r26	; 0x0d
    5d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d94:	20 e0       	ldi	r18, 0x00	; 0
    5d96:	30 e0       	ldi	r19, 0x00	; 0
    5d98:	4a ef       	ldi	r20, 0xFA	; 250
    5d9a:	54 e4       	ldi	r21, 0x44	; 68
    5d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5da0:	dc 01       	movw	r26, r24
    5da2:	cb 01       	movw	r24, r22
    5da4:	8f 83       	std	Y+7, r24	; 0x07
    5da6:	98 87       	std	Y+8, r25	; 0x08
    5da8:	a9 87       	std	Y+9, r26	; 0x09
    5daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5dac:	6f 81       	ldd	r22, Y+7	; 0x07
    5dae:	78 85       	ldd	r23, Y+8	; 0x08
    5db0:	89 85       	ldd	r24, Y+9	; 0x09
    5db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5db4:	20 e0       	ldi	r18, 0x00	; 0
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	40 e8       	ldi	r20, 0x80	; 128
    5dba:	5f e3       	ldi	r21, 0x3F	; 63
    5dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dc0:	88 23       	and	r24, r24
    5dc2:	2c f4       	brge	.+10     	; 0x5dce <APP_KeypadUpdate+0x6ee>
		__ticks = 1;
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	9e 83       	std	Y+6, r25	; 0x06
    5dca:	8d 83       	std	Y+5, r24	; 0x05
    5dcc:	3f c0       	rjmp	.+126    	; 0x5e4c <APP_KeypadUpdate+0x76c>
	else if (__tmp > 65535)
    5dce:	6f 81       	ldd	r22, Y+7	; 0x07
    5dd0:	78 85       	ldd	r23, Y+8	; 0x08
    5dd2:	89 85       	ldd	r24, Y+9	; 0x09
    5dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dd6:	20 e0       	ldi	r18, 0x00	; 0
    5dd8:	3f ef       	ldi	r19, 0xFF	; 255
    5dda:	4f e7       	ldi	r20, 0x7F	; 127
    5ddc:	57 e4       	ldi	r21, 0x47	; 71
    5dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5de2:	18 16       	cp	r1, r24
    5de4:	4c f5       	brge	.+82     	; 0x5e38 <APP_KeypadUpdate+0x758>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dee:	20 e0       	ldi	r18, 0x00	; 0
    5df0:	30 e0       	ldi	r19, 0x00	; 0
    5df2:	40 e2       	ldi	r20, 0x20	; 32
    5df4:	51 e4       	ldi	r21, 0x41	; 65
    5df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	cb 01       	movw	r24, r22
    5dfe:	bc 01       	movw	r22, r24
    5e00:	cd 01       	movw	r24, r26
    5e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e06:	dc 01       	movw	r26, r24
    5e08:	cb 01       	movw	r24, r22
    5e0a:	9e 83       	std	Y+6, r25	; 0x06
    5e0c:	8d 83       	std	Y+5, r24	; 0x05
    5e0e:	0f c0       	rjmp	.+30     	; 0x5e2e <APP_KeypadUpdate+0x74e>
    5e10:	88 ec       	ldi	r24, 0xC8	; 200
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	9c 83       	std	Y+4, r25	; 0x04
    5e16:	8b 83       	std	Y+3, r24	; 0x03
    5e18:	8b 81       	ldd	r24, Y+3	; 0x03
    5e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e1c:	01 97       	sbiw	r24, 0x01	; 1
    5e1e:	f1 f7       	brne	.-4      	; 0x5e1c <APP_KeypadUpdate+0x73c>
    5e20:	9c 83       	std	Y+4, r25	; 0x04
    5e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e24:	8d 81       	ldd	r24, Y+5	; 0x05
    5e26:	9e 81       	ldd	r25, Y+6	; 0x06
    5e28:	01 97       	sbiw	r24, 0x01	; 1
    5e2a:	9e 83       	std	Y+6, r25	; 0x06
    5e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e30:	9e 81       	ldd	r25, Y+6	; 0x06
    5e32:	00 97       	sbiw	r24, 0x00	; 0
    5e34:	69 f7       	brne	.-38     	; 0x5e10 <APP_KeypadUpdate+0x730>
    5e36:	14 c0       	rjmp	.+40     	; 0x5e60 <APP_KeypadUpdate+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e38:	6f 81       	ldd	r22, Y+7	; 0x07
    5e3a:	78 85       	ldd	r23, Y+8	; 0x08
    5e3c:	89 85       	ldd	r24, Y+9	; 0x09
    5e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	9e 83       	std	Y+6, r25	; 0x06
    5e4a:	8d 83       	std	Y+5, r24	; 0x05
    5e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e50:	9a 83       	std	Y+2, r25	; 0x02
    5e52:	89 83       	std	Y+1, r24	; 0x01
    5e54:	89 81       	ldd	r24, Y+1	; 0x01
    5e56:	9a 81       	ldd	r25, Y+2	; 0x02
    5e58:	01 97       	sbiw	r24, 0x01	; 1
    5e5a:	f1 f7       	brne	.-4      	; 0x5e58 <APP_KeypadUpdate+0x778>
    5e5c:	9a 83       	std	Y+2, r25	; 0x02
    5e5e:	89 83       	std	Y+1, r24	; 0x01

                _delay_ms(10);
                sei();
    5e60:	78 94       	sei
    5e62:	02 c0       	rjmp	.+4      	; 0x5e68 <APP_KeypadUpdate+0x788>
            }
        }
        else
        {
            DrivingMonetoring_IsStillPressed = NO_Condition ;
    5e64:	10 92 1d 03 	sts	0x031D, r1

    }

/* (Button 5️⃣) Handle switch to right screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_R_pressed_value)
    5e68:	fe 01       	movw	r30, r28
    5e6a:	e9 5b       	subi	r30, 0xB9	; 185
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	80 81       	ld	r24, Z
    5e70:	83 30       	cpi	r24, 0x03	; 3
    5e72:	f1 f4       	brne	.+60     	; 0x5eb0 <APP_KeypadUpdate+0x7d0>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ;//old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    5e74:	10 92 16 03 	sts	0x0316, r1
    5e78:	10 92 15 03 	sts	0x0315, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	80 93 d0 02 	sts	0x02D0, r24

        if(R_Page_IsStillPressed == NO_Condition)
    5e82:	80 91 23 03 	lds	r24, 0x0323
    5e86:	88 23       	and	r24, r24
    5e88:	a9 f4       	brne	.+42     	; 0x5eb4 <APP_KeypadUpdate+0x7d4>
        {
            R_Page_IsStillPressed = YES_Condition ;
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	80 93 23 03 	sts	0x0323, r24
            Page_Current_State++ ; /*   Move one right page*/
    5e90:	80 91 c7 02 	lds	r24, 0x02C7
    5e94:	8f 5f       	subi	r24, 0xFF	; 255
    5e96:	80 93 c7 02 	sts	0x02C7, r24
            if(Page_Current_State == 4) /*  Exceed page 3 so it need to handle and return to page one  */
    5e9a:	80 91 c7 02 	lds	r24, 0x02C7
    5e9e:	84 30       	cpi	r24, 0x04	; 4
    5ea0:	11 f4       	brne	.+4      	; 0x5ea6 <APP_KeypadUpdate+0x7c6>
            {
                Page_Current_State = Page_1_LCD ;
    5ea2:	10 92 c7 02 	sts	0x02C7, r1
            }
            /*  Call function that handle change in first two */
            DashBoard_SwitchPages();
    5ea6:	0e 94 ce 2a 	call	0x559c	; 0x559c <DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            DashBoardPageFooter_update();
    5eaa:	0e 94 4a 2a 	call	0x5494	; 0x5494 <DashBoardPageFooter_update>
    5eae:	02 c0       	rjmp	.+4      	; 0x5eb4 <APP_KeypadUpdate+0x7d4>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        R_Page_IsStillPressed = NO_Condition ;
    5eb0:	10 92 23 03 	sts	0x0323, r1
    }


/* (Button 6️⃣) Handle switch to left screen   */
    /*  ⚠️⚠️⚠️⚠️ I think that is critical section   */
    if(local_currentValue_keypad == Keypad_Page_L_pressed_value)
    5eb4:	fe 01       	movw	r30, r28
    5eb6:	e9 5b       	subi	r30, 0xB9	; 185
    5eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eba:	80 81       	ld	r24, Z
    5ebc:	81 30       	cpi	r24, 0x01	; 1
    5ebe:	f9 f4       	brne	.+62     	; 0x5efe <APP_KeypadUpdate+0x81e>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ; //old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    5ec0:	10 92 16 03 	sts	0x0316, r1
    5ec4:	10 92 15 03 	sts	0x0315, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    5ec8:	81 e0       	ldi	r24, 0x01	; 1
    5eca:	80 93 d0 02 	sts	0x02D0, r24

        if(L_Page_IsStillPressed == NO_Condition)
    5ece:	80 91 22 03 	lds	r24, 0x0322
    5ed2:	88 23       	and	r24, r24
    5ed4:	b1 f4       	brne	.+44     	; 0x5f02 <APP_KeypadUpdate+0x822>
        {
            L_Page_IsStillPressed = YES_Condition ;
    5ed6:	81 e0       	ldi	r24, 0x01	; 1
    5ed8:	80 93 22 03 	sts	0x0322, r24
            Page_Current_State-- ; /*   Move one right page*/
    5edc:	80 91 c7 02 	lds	r24, 0x02C7
    5ee0:	81 50       	subi	r24, 0x01	; 1
    5ee2:	80 93 c7 02 	sts	0x02C7, r24
            if(Page_Current_State == -1) /*  Exceed page 3 so it need to handle and return to page one  */
    5ee6:	80 91 c7 02 	lds	r24, 0x02C7
    5eea:	8f 3f       	cpi	r24, 0xFF	; 255
    5eec:	19 f4       	brne	.+6      	; 0x5ef4 <APP_KeypadUpdate+0x814>
            {
                Page_Current_State = Page_4_LCD ;
    5eee:	83 e0       	ldi	r24, 0x03	; 3
    5ef0:	80 93 c7 02 	sts	0x02C7, r24
            }
            /*  Call function that handle change in first two */
            DashBoard_SwitchPages();
    5ef4:	0e 94 ce 2a 	call	0x559c	; 0x559c <DashBoard_SwitchPages>
            /*  Call function that will handle display in LCD*/
            DashBoardPageFooter_update();
    5ef8:	0e 94 4a 2a 	call	0x5494	; 0x5494 <DashBoardPageFooter_update>
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <APP_KeypadUpdate+0x822>
        }
    }
    else 
    {
        /*  Enter this state when Button released*/
        L_Page_IsStillPressed = NO_Condition ;
    5efe:	10 92 22 03 	sts	0x0322, r1

/* (Button 7️⃣) Handle increase in speed limit   */
    /*  Handle Increasing part for speed limiter    */
    static uint8 SL_FirstTime_INC = YES_Condition ;
    static uint8 SL_INC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Inc_pressed_value)
    5f02:	fe 01       	movw	r30, r28
    5f04:	e9 5b       	subi	r30, 0xB9	; 185
    5f06:	ff 4f       	sbci	r31, 0xFF	; 255
    5f08:	80 81       	ld	r24, Z
    5f0a:	89 30       	cpi	r24, 0x09	; 9
    5f0c:	71 f5       	brne	.+92     	; 0x5f6a <APP_KeypadUpdate+0x88a>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ; //old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    5f0e:	10 92 16 03 	sts	0x0316, r1
    5f12:	10 92 15 03 	sts	0x0315, r1
        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    5f16:	81 e0       	ldi	r24, 0x01	; 1
    5f18:	80 93 d0 02 	sts	0x02D0, r24
        if(SL_FirstTime_INC == YES_Condition )
    5f1c:	80 91 d5 02 	lds	r24, 0x02D5
    5f20:	81 30       	cpi	r24, 0x01	; 1
    5f22:	61 f4       	brne	.+24     	; 0x5f3c <APP_KeypadUpdate+0x85c>
        {
            if(Global_Speed_Limiter_value < Max_Speed_Limit_value)
    5f24:	80 91 c9 02 	lds	r24, 0x02C9
    5f28:	88 37       	cpi	r24, 0x78	; 120
    5f2a:	28 f4       	brcc	.+10     	; 0x5f36 <APP_KeypadUpdate+0x856>
            {
                Global_Speed_Limiter_value += 5; 
    5f2c:	80 91 c9 02 	lds	r24, 0x02C9
    5f30:	8b 5f       	subi	r24, 0xFB	; 251
    5f32:	80 93 c9 02 	sts	0x02C9, r24
            }
                SL_FirstTime_INC = NO_Condition ;
    5f36:	10 92 d5 02 	sts	0x02D5, r1
    5f3a:	14 c0       	rjmp	.+40     	; 0x5f64 <APP_KeypadUpdate+0x884>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_INC_repeation += 1;
    5f3c:	80 91 1c 03 	lds	r24, 0x031C
    5f40:	8f 5f       	subi	r24, 0xFF	; 255
    5f42:	80 93 1c 03 	sts	0x031C, r24
            if(SL_INC_repeation == 3)
    5f46:	80 91 1c 03 	lds	r24, 0x031C
    5f4a:	83 30       	cpi	r24, 0x03	; 3
    5f4c:	59 f4       	brne	.+22     	; 0x5f64 <APP_KeypadUpdate+0x884>
            {
                SL_INC_repeation = 0;
    5f4e:	10 92 1c 03 	sts	0x031C, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                if(Global_Speed_Limiter_value < Max_Speed_Limit_value)
    5f52:	80 91 c9 02 	lds	r24, 0x02C9
    5f56:	88 37       	cpi	r24, 0x78	; 120
    5f58:	28 f4       	brcc	.+10     	; 0x5f64 <APP_KeypadUpdate+0x884>
                {
                    Global_Speed_Limiter_value += 5; 
    5f5a:	80 91 c9 02 	lds	r24, 0x02C9
    5f5e:	8b 5f       	subi	r24, 0xFB	; 251
    5f60:	80 93 c9 02 	sts	0x02C9, r24
                }
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    5f64:	0e 94 77 29 	call	0x52ee	; 0x52ee <DashBoard_updateSpeedLimitValue>
    5f68:	05 c0       	rjmp	.+10     	; 0x5f74 <APP_KeypadUpdate+0x894>

    }
    else
    {
        SL_FirstTime_INC = YES_Condition ;
    5f6a:	81 e0       	ldi	r24, 0x01	; 1
    5f6c:	80 93 d5 02 	sts	0x02D5, r24
        SL_INC_repeation = 0;
    5f70:	10 92 1c 03 	sts	0x031C, r1

/* (Button 8️⃣) Handle decrease in speed limit   */
    /*  Handle Decreasing part for speed limiter    */
    static uint8 SL_FirstTime_DEC = YES_Condition ;
    static uint8 SL_DEC_repeation = 0 ;
    if(local_currentValue_keypad == Keypad_SpeedLimit_Dec_pressed_value)
    5f74:	fe 01       	movw	r30, r28
    5f76:	e9 5b       	subi	r30, 0xB9	; 185
    5f78:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7a:	80 81       	ld	r24, Z
    5f7c:	87 30       	cpi	r24, 0x07	; 7
    5f7e:	71 f5       	brne	.+92     	; 0x5fdc <APP_KeypadUpdate+0x8fc>
    {
        /*  Make counter with zero to start count from zero for DM */
        // TimeOut_Counter = 0 ;//old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    5f80:	10 92 16 03 	sts	0x0316, r1
    5f84:	10 92 15 03 	sts	0x0315, r1

        /*  Change state to update in LCD*/
        DrivingMonetoring_Current_Status = DM_Meet ;
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	80 93 d0 02 	sts	0x02D0, r24

        if(SL_FirstTime_DEC == YES_Condition )
    5f8e:	80 91 d4 02 	lds	r24, 0x02D4
    5f92:	81 30       	cpi	r24, 0x01	; 1
    5f94:	61 f4       	brne	.+24     	; 0x5fae <APP_KeypadUpdate+0x8ce>
        {
            if(Global_Speed_Limiter_value > Min_speed_Limit_value)
    5f96:	80 91 c9 02 	lds	r24, 0x02C9
    5f9a:	85 31       	cpi	r24, 0x15	; 21
    5f9c:	28 f0       	brcs	.+10     	; 0x5fa8 <APP_KeypadUpdate+0x8c8>
            {
                Global_Speed_Limiter_value -= 5;    
    5f9e:	80 91 c9 02 	lds	r24, 0x02C9
    5fa2:	85 50       	subi	r24, 0x05	; 5
    5fa4:	80 93 c9 02 	sts	0x02C9, r24
            }
            SL_FirstTime_DEC = NO_Condition ;
    5fa8:	10 92 d4 02 	sts	0x02D4, r1
    5fac:	14 c0       	rjmp	.+40     	; 0x5fd6 <APP_KeypadUpdate+0x8f6>
        }
        else /* Enter it when SL_FirstTime_INC = NO_Condition   */
        {
            SL_DEC_repeation += 1;
    5fae:	80 91 1b 03 	lds	r24, 0x031B
    5fb2:	8f 5f       	subi	r24, 0xFF	; 255
    5fb4:	80 93 1b 03 	sts	0x031B, r24
            if(SL_DEC_repeation == 3)
    5fb8:	80 91 1b 03 	lds	r24, 0x031B
    5fbc:	83 30       	cpi	r24, 0x03	; 3
    5fbe:	59 f4       	brne	.+22     	; 0x5fd6 <APP_KeypadUpdate+0x8f6>
            {
                SL_DEC_repeation = 0;
    5fc0:	10 92 1b 03 	sts	0x031B, r1
                /*   Increase Global_Speed_Limiter_value variable by 5  */
                if(Global_Speed_Limiter_value > Min_speed_Limit_value)
    5fc4:	80 91 c9 02 	lds	r24, 0x02C9
    5fc8:	85 31       	cpi	r24, 0x15	; 21
    5fca:	28 f0       	brcs	.+10     	; 0x5fd6 <APP_KeypadUpdate+0x8f6>
                {
                    Global_Speed_Limiter_value -= 5;    
    5fcc:	80 91 c9 02 	lds	r24, 0x02C9
    5fd0:	85 50       	subi	r24, 0x05	; 5
    5fd2:	80 93 c9 02 	sts	0x02C9, r24
                }
            }
        }
        /*🙆‍♂️🙆‍♂️🙆‍♂️🙆‍♂️*/
        DashBoard_updateSpeedLimitValue();
    5fd6:	0e 94 77 29 	call	0x52ee	; 0x52ee <DashBoard_updateSpeedLimitValue>
    5fda:	05 c0       	rjmp	.+10     	; 0x5fe6 <APP_KeypadUpdate+0x906>

    }
    else
    {
        SL_FirstTime_DEC = YES_Condition ;
    5fdc:	81 e0       	ldi	r24, 0x01	; 1
    5fde:	80 93 d4 02 	sts	0x02D4, r24
        SL_DEC_repeation = 0;
    5fe2:	10 92 1b 03 	sts	0x031B, r1

    }

}
    5fe6:	c9 5b       	subi	r28, 0xB9	; 185
    5fe8:	df 4f       	sbci	r29, 0xFF	; 255
    5fea:	0f b6       	in	r0, 0x3f	; 63
    5fec:	f8 94       	cli
    5fee:	de bf       	out	0x3e, r29	; 62
    5ff0:	0f be       	out	0x3f, r0	; 63
    5ff2:	cd bf       	out	0x3d, r28	; 61
    5ff4:	cf 91       	pop	r28
    5ff6:	df 91       	pop	r29
    5ff8:	1f 91       	pop	r17
    5ffa:	0f 91       	pop	r16
    5ffc:	08 95       	ret

00005ffe <Engine_Control_Handling>:



static void Engine_Control_Handling(void)
{
    5ffe:	0f 93       	push	r16
    6000:	1f 93       	push	r17
    6002:	df 93       	push	r29
    6004:	cf 93       	push	r28
    6006:	cd b7       	in	r28, 0x3d	; 61
    6008:	de b7       	in	r29, 0x3e	; 62
    600a:	c6 57       	subi	r28, 0x76	; 118
    600c:	d0 40       	sbci	r29, 0x00	; 0
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	cd bf       	out	0x3d, r28	; 61
    
    EXT0_Count++ ;
    6018:	80 91 1a 03 	lds	r24, 0x031A
    601c:	8f 5f       	subi	r24, 0xFF	; 255
    601e:	80 93 1a 03 	sts	0x031A, r24
    if(EXT0_Count == 1)//Start Engine
    6022:	80 91 1a 03 	lds	r24, 0x031A
    6026:	81 30       	cpi	r24, 0x01	; 1
    6028:	09 f0       	breq	.+2      	; 0x602c <Engine_Control_Handling+0x2e>
    602a:	20 c3       	rjmp	.+1600   	; 0x666c <Engine_Control_Handling+0x66e>
    {
        Start_main_program = TRUE ;
    602c:	81 e0       	ldi	r24, 0x01	; 1
    602e:	80 93 19 03 	sts	0x0319, r24

        uint8 loaded_already = 0;
    6032:	fe 01       	movw	r30, r28
    6034:	ea 58       	subi	r30, 0x8A	; 138
    6036:	ff 4f       	sbci	r31, 0xFF	; 255
    6038:	10 82       	st	Z, r1
        uint8* ptr = (uint8*)&Accumulative_Distance_KM;
    603a:	fe 01       	movw	r30, r28
    603c:	ec 58       	subi	r30, 0x8C	; 140
    603e:	ff 4f       	sbci	r31, 0xFF	; 255
    6040:	80 e1       	ldi	r24, 0x10	; 16
    6042:	93 e0       	ldi	r25, 0x03	; 3
    6044:	91 83       	std	Z+1, r25	; 0x01
    6046:	80 83       	st	Z, r24
    6048:	d3 c0       	rjmp	.+422    	; 0x61f0 <Engine_Control_Handling+0x1f2>
        for (; loaded_already < sizeof(float64); loaded_already++) 
        {
            EEPROM_readByte(EEPROM_LOCATION + loaded_already , (ptr+loaded_already));
    604a:	fe 01       	movw	r30, r28
    604c:	ea 58       	subi	r30, 0x8A	; 138
    604e:	ff 4f       	sbci	r31, 0xFF	; 255
    6050:	80 81       	ld	r24, Z
    6052:	48 2f       	mov	r20, r24
    6054:	40 5f       	subi	r20, 0xF0	; 240
    6056:	fe 01       	movw	r30, r28
    6058:	ea 58       	subi	r30, 0x8A	; 138
    605a:	ff 4f       	sbci	r31, 0xFF	; 255
    605c:	80 81       	ld	r24, Z
    605e:	28 2f       	mov	r18, r24
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	fe 01       	movw	r30, r28
    6064:	ec 58       	subi	r30, 0x8C	; 140
    6066:	ff 4f       	sbci	r31, 0xFF	; 255
    6068:	80 81       	ld	r24, Z
    606a:	91 81       	ldd	r25, Z+1	; 0x01
    606c:	28 0f       	add	r18, r24
    606e:	39 1f       	adc	r19, r25
    6070:	84 2f       	mov	r24, r20
    6072:	b9 01       	movw	r22, r18
    6074:	0e 94 76 23 	call	0x46ec	; 0x46ec <EEPROM_readByte>
    6078:	fe 01       	movw	r30, r28
    607a:	e3 59       	subi	r30, 0x93	; 147
    607c:	ff 4f       	sbci	r31, 0xFF	; 255
    607e:	80 e0       	ldi	r24, 0x00	; 0
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	a8 e4       	ldi	r26, 0x48	; 72
    6084:	b2 e4       	ldi	r27, 0x42	; 66
    6086:	80 83       	st	Z, r24
    6088:	91 83       	std	Z+1, r25	; 0x01
    608a:	a2 83       	std	Z+2, r26	; 0x02
    608c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    608e:	8e 01       	movw	r16, r28
    6090:	07 59       	subi	r16, 0x97	; 151
    6092:	1f 4f       	sbci	r17, 0xFF	; 255
    6094:	fe 01       	movw	r30, r28
    6096:	e3 59       	subi	r30, 0x93	; 147
    6098:	ff 4f       	sbci	r31, 0xFF	; 255
    609a:	60 81       	ld	r22, Z
    609c:	71 81       	ldd	r23, Z+1	; 0x01
    609e:	82 81       	ldd	r24, Z+2	; 0x02
    60a0:	93 81       	ldd	r25, Z+3	; 0x03
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	4a ef       	ldi	r20, 0xFA	; 250
    60a8:	54 e4       	ldi	r21, 0x44	; 68
    60aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ae:	dc 01       	movw	r26, r24
    60b0:	cb 01       	movw	r24, r22
    60b2:	f8 01       	movw	r30, r16
    60b4:	80 83       	st	Z, r24
    60b6:	91 83       	std	Z+1, r25	; 0x01
    60b8:	a2 83       	std	Z+2, r26	; 0x02
    60ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    60bc:	fe 01       	movw	r30, r28
    60be:	e7 59       	subi	r30, 0x97	; 151
    60c0:	ff 4f       	sbci	r31, 0xFF	; 255
    60c2:	60 81       	ld	r22, Z
    60c4:	71 81       	ldd	r23, Z+1	; 0x01
    60c6:	82 81       	ldd	r24, Z+2	; 0x02
    60c8:	93 81       	ldd	r25, Z+3	; 0x03
    60ca:	20 e0       	ldi	r18, 0x00	; 0
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	40 e8       	ldi	r20, 0x80	; 128
    60d0:	5f e3       	ldi	r21, 0x3F	; 63
    60d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60d6:	88 23       	and	r24, r24
    60d8:	44 f4       	brge	.+16     	; 0x60ea <Engine_Control_Handling+0xec>
		__ticks = 1;
    60da:	fe 01       	movw	r30, r28
    60dc:	e9 59       	subi	r30, 0x99	; 153
    60de:	ff 4f       	sbci	r31, 0xFF	; 255
    60e0:	81 e0       	ldi	r24, 0x01	; 1
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	91 83       	std	Z+1, r25	; 0x01
    60e6:	80 83       	st	Z, r24
    60e8:	64 c0       	rjmp	.+200    	; 0x61b2 <Engine_Control_Handling+0x1b4>
	else if (__tmp > 65535)
    60ea:	fe 01       	movw	r30, r28
    60ec:	e7 59       	subi	r30, 0x97	; 151
    60ee:	ff 4f       	sbci	r31, 0xFF	; 255
    60f0:	60 81       	ld	r22, Z
    60f2:	71 81       	ldd	r23, Z+1	; 0x01
    60f4:	82 81       	ldd	r24, Z+2	; 0x02
    60f6:	93 81       	ldd	r25, Z+3	; 0x03
    60f8:	20 e0       	ldi	r18, 0x00	; 0
    60fa:	3f ef       	ldi	r19, 0xFF	; 255
    60fc:	4f e7       	ldi	r20, 0x7F	; 127
    60fe:	57 e4       	ldi	r21, 0x47	; 71
    6100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6104:	18 16       	cp	r1, r24
    6106:	0c f0       	brlt	.+2      	; 0x610a <Engine_Control_Handling+0x10c>
    6108:	43 c0       	rjmp	.+134    	; 0x6190 <Engine_Control_Handling+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    610a:	fe 01       	movw	r30, r28
    610c:	e3 59       	subi	r30, 0x93	; 147
    610e:	ff 4f       	sbci	r31, 0xFF	; 255
    6110:	60 81       	ld	r22, Z
    6112:	71 81       	ldd	r23, Z+1	; 0x01
    6114:	82 81       	ldd	r24, Z+2	; 0x02
    6116:	93 81       	ldd	r25, Z+3	; 0x03
    6118:	20 e0       	ldi	r18, 0x00	; 0
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	40 e2       	ldi	r20, 0x20	; 32
    611e:	51 e4       	ldi	r21, 0x41	; 65
    6120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6124:	dc 01       	movw	r26, r24
    6126:	cb 01       	movw	r24, r22
    6128:	8e 01       	movw	r16, r28
    612a:	09 59       	subi	r16, 0x99	; 153
    612c:	1f 4f       	sbci	r17, 0xFF	; 255
    612e:	bc 01       	movw	r22, r24
    6130:	cd 01       	movw	r24, r26
    6132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6136:	dc 01       	movw	r26, r24
    6138:	cb 01       	movw	r24, r22
    613a:	f8 01       	movw	r30, r16
    613c:	91 83       	std	Z+1, r25	; 0x01
    613e:	80 83       	st	Z, r24
    6140:	1f c0       	rjmp	.+62     	; 0x6180 <Engine_Control_Handling+0x182>
    6142:	fe 01       	movw	r30, r28
    6144:	eb 59       	subi	r30, 0x9B	; 155
    6146:	ff 4f       	sbci	r31, 0xFF	; 255
    6148:	88 ec       	ldi	r24, 0xC8	; 200
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	91 83       	std	Z+1, r25	; 0x01
    614e:	80 83       	st	Z, r24
    6150:	fe 01       	movw	r30, r28
    6152:	eb 59       	subi	r30, 0x9B	; 155
    6154:	ff 4f       	sbci	r31, 0xFF	; 255
    6156:	80 81       	ld	r24, Z
    6158:	91 81       	ldd	r25, Z+1	; 0x01
    615a:	01 97       	sbiw	r24, 0x01	; 1
    615c:	f1 f7       	brne	.-4      	; 0x615a <Engine_Control_Handling+0x15c>
    615e:	fe 01       	movw	r30, r28
    6160:	eb 59       	subi	r30, 0x9B	; 155
    6162:	ff 4f       	sbci	r31, 0xFF	; 255
    6164:	91 83       	std	Z+1, r25	; 0x01
    6166:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6168:	de 01       	movw	r26, r28
    616a:	a9 59       	subi	r26, 0x99	; 153
    616c:	bf 4f       	sbci	r27, 0xFF	; 255
    616e:	fe 01       	movw	r30, r28
    6170:	e9 59       	subi	r30, 0x99	; 153
    6172:	ff 4f       	sbci	r31, 0xFF	; 255
    6174:	80 81       	ld	r24, Z
    6176:	91 81       	ldd	r25, Z+1	; 0x01
    6178:	01 97       	sbiw	r24, 0x01	; 1
    617a:	11 96       	adiw	r26, 0x01	; 1
    617c:	9c 93       	st	X, r25
    617e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6180:	fe 01       	movw	r30, r28
    6182:	e9 59       	subi	r30, 0x99	; 153
    6184:	ff 4f       	sbci	r31, 0xFF	; 255
    6186:	80 81       	ld	r24, Z
    6188:	91 81       	ldd	r25, Z+1	; 0x01
    618a:	00 97       	sbiw	r24, 0x00	; 0
    618c:	d1 f6       	brne	.-76     	; 0x6142 <Engine_Control_Handling+0x144>
    618e:	27 c0       	rjmp	.+78     	; 0x61de <Engine_Control_Handling+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6190:	8e 01       	movw	r16, r28
    6192:	09 59       	subi	r16, 0x99	; 153
    6194:	1f 4f       	sbci	r17, 0xFF	; 255
    6196:	fe 01       	movw	r30, r28
    6198:	e7 59       	subi	r30, 0x97	; 151
    619a:	ff 4f       	sbci	r31, 0xFF	; 255
    619c:	60 81       	ld	r22, Z
    619e:	71 81       	ldd	r23, Z+1	; 0x01
    61a0:	82 81       	ldd	r24, Z+2	; 0x02
    61a2:	93 81       	ldd	r25, Z+3	; 0x03
    61a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61a8:	dc 01       	movw	r26, r24
    61aa:	cb 01       	movw	r24, r22
    61ac:	f8 01       	movw	r30, r16
    61ae:	91 83       	std	Z+1, r25	; 0x01
    61b0:	80 83       	st	Z, r24
    61b2:	de 01       	movw	r26, r28
    61b4:	ad 59       	subi	r26, 0x9D	; 157
    61b6:	bf 4f       	sbci	r27, 0xFF	; 255
    61b8:	fe 01       	movw	r30, r28
    61ba:	e9 59       	subi	r30, 0x99	; 153
    61bc:	ff 4f       	sbci	r31, 0xFF	; 255
    61be:	80 81       	ld	r24, Z
    61c0:	91 81       	ldd	r25, Z+1	; 0x01
    61c2:	8d 93       	st	X+, r24
    61c4:	9c 93       	st	X, r25
    61c6:	fe 01       	movw	r30, r28
    61c8:	ed 59       	subi	r30, 0x9D	; 157
    61ca:	ff 4f       	sbci	r31, 0xFF	; 255
    61cc:	80 81       	ld	r24, Z
    61ce:	91 81       	ldd	r25, Z+1	; 0x01
    61d0:	01 97       	sbiw	r24, 0x01	; 1
    61d2:	f1 f7       	brne	.-4      	; 0x61d0 <Engine_Control_Handling+0x1d2>
    61d4:	fe 01       	movw	r30, r28
    61d6:	ed 59       	subi	r30, 0x9D	; 157
    61d8:	ff 4f       	sbci	r31, 0xFF	; 255
    61da:	91 83       	std	Z+1, r25	; 0x01
    61dc:	80 83       	st	Z, r24
    {
        Start_main_program = TRUE ;

        uint8 loaded_already = 0;
        uint8* ptr = (uint8*)&Accumulative_Distance_KM;
        for (; loaded_already < sizeof(float64); loaded_already++) 
    61de:	de 01       	movw	r26, r28
    61e0:	aa 58       	subi	r26, 0x8A	; 138
    61e2:	bf 4f       	sbci	r27, 0xFF	; 255
    61e4:	fe 01       	movw	r30, r28
    61e6:	ea 58       	subi	r30, 0x8A	; 138
    61e8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ea:	80 81       	ld	r24, Z
    61ec:	8f 5f       	subi	r24, 0xFF	; 255
    61ee:	8c 93       	st	X, r24
    61f0:	fe 01       	movw	r30, r28
    61f2:	ea 58       	subi	r30, 0x8A	; 138
    61f4:	ff 4f       	sbci	r31, 0xFF	; 255
    61f6:	80 81       	ld	r24, Z
    61f8:	84 30       	cpi	r24, 0x04	; 4
    61fa:	08 f4       	brcc	.+2      	; 0x61fe <Engine_Control_Handling+0x200>
    61fc:	26 cf       	rjmp	.-436    	; 0x604a <Engine_Control_Handling+0x4c>
        {
            EEPROM_readByte(EEPROM_LOCATION + loaded_already , (ptr+loaded_already));
            _delay_ms(50);
        }
        EEPROM_readByte(EEPROM_LOCATION +loaded_already, &GearBox_Current_State);
    61fe:	fe 01       	movw	r30, r28
    6200:	ea 58       	subi	r30, 0x8A	; 138
    6202:	ff 4f       	sbci	r31, 0xFF	; 255
    6204:	80 81       	ld	r24, Z
    6206:	80 5f       	subi	r24, 0xF0	; 240
    6208:	26 e0       	ldi	r18, 0x06	; 6
    620a:	33 e0       	ldi	r19, 0x03	; 3
    620c:	b9 01       	movw	r22, r18
    620e:	0e 94 76 23 	call	0x46ec	; 0x46ec <EEPROM_readByte>
        loaded_already++;
    6212:	de 01       	movw	r26, r28
    6214:	aa 58       	subi	r26, 0x8A	; 138
    6216:	bf 4f       	sbci	r27, 0xFF	; 255
    6218:	fe 01       	movw	r30, r28
    621a:	ea 58       	subi	r30, 0x8A	; 138
    621c:	ff 4f       	sbci	r31, 0xFF	; 255
    621e:	80 81       	ld	r24, Z
    6220:	8f 5f       	subi	r24, 0xFF	; 255
    6222:	8c 93       	st	X, r24
    6224:	fe 01       	movw	r30, r28
    6226:	e1 5a       	subi	r30, 0xA1	; 161
    6228:	ff 4f       	sbci	r31, 0xFF	; 255
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	a8 e4       	ldi	r26, 0x48	; 72
    6230:	b2 e4       	ldi	r27, 0x42	; 66
    6232:	80 83       	st	Z, r24
    6234:	91 83       	std	Z+1, r25	; 0x01
    6236:	a2 83       	std	Z+2, r26	; 0x02
    6238:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    623a:	8e 01       	movw	r16, r28
    623c:	05 5a       	subi	r16, 0xA5	; 165
    623e:	1f 4f       	sbci	r17, 0xFF	; 255
    6240:	fe 01       	movw	r30, r28
    6242:	e1 5a       	subi	r30, 0xA1	; 161
    6244:	ff 4f       	sbci	r31, 0xFF	; 255
    6246:	60 81       	ld	r22, Z
    6248:	71 81       	ldd	r23, Z+1	; 0x01
    624a:	82 81       	ldd	r24, Z+2	; 0x02
    624c:	93 81       	ldd	r25, Z+3	; 0x03
    624e:	20 e0       	ldi	r18, 0x00	; 0
    6250:	30 e0       	ldi	r19, 0x00	; 0
    6252:	4a ef       	ldi	r20, 0xFA	; 250
    6254:	54 e4       	ldi	r21, 0x44	; 68
    6256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    625a:	dc 01       	movw	r26, r24
    625c:	cb 01       	movw	r24, r22
    625e:	f8 01       	movw	r30, r16
    6260:	80 83       	st	Z, r24
    6262:	91 83       	std	Z+1, r25	; 0x01
    6264:	a2 83       	std	Z+2, r26	; 0x02
    6266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6268:	fe 01       	movw	r30, r28
    626a:	e5 5a       	subi	r30, 0xA5	; 165
    626c:	ff 4f       	sbci	r31, 0xFF	; 255
    626e:	60 81       	ld	r22, Z
    6270:	71 81       	ldd	r23, Z+1	; 0x01
    6272:	82 81       	ldd	r24, Z+2	; 0x02
    6274:	93 81       	ldd	r25, Z+3	; 0x03
    6276:	20 e0       	ldi	r18, 0x00	; 0
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	40 e8       	ldi	r20, 0x80	; 128
    627c:	5f e3       	ldi	r21, 0x3F	; 63
    627e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6282:	88 23       	and	r24, r24
    6284:	44 f4       	brge	.+16     	; 0x6296 <Engine_Control_Handling+0x298>
		__ticks = 1;
    6286:	fe 01       	movw	r30, r28
    6288:	e7 5a       	subi	r30, 0xA7	; 167
    628a:	ff 4f       	sbci	r31, 0xFF	; 255
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	91 83       	std	Z+1, r25	; 0x01
    6292:	80 83       	st	Z, r24
    6294:	64 c0       	rjmp	.+200    	; 0x635e <Engine_Control_Handling+0x360>
	else if (__tmp > 65535)
    6296:	fe 01       	movw	r30, r28
    6298:	e5 5a       	subi	r30, 0xA5	; 165
    629a:	ff 4f       	sbci	r31, 0xFF	; 255
    629c:	60 81       	ld	r22, Z
    629e:	71 81       	ldd	r23, Z+1	; 0x01
    62a0:	82 81       	ldd	r24, Z+2	; 0x02
    62a2:	93 81       	ldd	r25, Z+3	; 0x03
    62a4:	20 e0       	ldi	r18, 0x00	; 0
    62a6:	3f ef       	ldi	r19, 0xFF	; 255
    62a8:	4f e7       	ldi	r20, 0x7F	; 127
    62aa:	57 e4       	ldi	r21, 0x47	; 71
    62ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62b0:	18 16       	cp	r1, r24
    62b2:	0c f0       	brlt	.+2      	; 0x62b6 <Engine_Control_Handling+0x2b8>
    62b4:	43 c0       	rjmp	.+134    	; 0x633c <Engine_Control_Handling+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62b6:	fe 01       	movw	r30, r28
    62b8:	e1 5a       	subi	r30, 0xA1	; 161
    62ba:	ff 4f       	sbci	r31, 0xFF	; 255
    62bc:	60 81       	ld	r22, Z
    62be:	71 81       	ldd	r23, Z+1	; 0x01
    62c0:	82 81       	ldd	r24, Z+2	; 0x02
    62c2:	93 81       	ldd	r25, Z+3	; 0x03
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	40 e2       	ldi	r20, 0x20	; 32
    62ca:	51 e4       	ldi	r21, 0x41	; 65
    62cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62d0:	dc 01       	movw	r26, r24
    62d2:	cb 01       	movw	r24, r22
    62d4:	8e 01       	movw	r16, r28
    62d6:	07 5a       	subi	r16, 0xA7	; 167
    62d8:	1f 4f       	sbci	r17, 0xFF	; 255
    62da:	bc 01       	movw	r22, r24
    62dc:	cd 01       	movw	r24, r26
    62de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62e2:	dc 01       	movw	r26, r24
    62e4:	cb 01       	movw	r24, r22
    62e6:	f8 01       	movw	r30, r16
    62e8:	91 83       	std	Z+1, r25	; 0x01
    62ea:	80 83       	st	Z, r24
    62ec:	1f c0       	rjmp	.+62     	; 0x632c <Engine_Control_Handling+0x32e>
    62ee:	fe 01       	movw	r30, r28
    62f0:	e9 5a       	subi	r30, 0xA9	; 169
    62f2:	ff 4f       	sbci	r31, 0xFF	; 255
    62f4:	88 ec       	ldi	r24, 0xC8	; 200
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	91 83       	std	Z+1, r25	; 0x01
    62fa:	80 83       	st	Z, r24
    62fc:	fe 01       	movw	r30, r28
    62fe:	e9 5a       	subi	r30, 0xA9	; 169
    6300:	ff 4f       	sbci	r31, 0xFF	; 255
    6302:	80 81       	ld	r24, Z
    6304:	91 81       	ldd	r25, Z+1	; 0x01
    6306:	01 97       	sbiw	r24, 0x01	; 1
    6308:	f1 f7       	brne	.-4      	; 0x6306 <Engine_Control_Handling+0x308>
    630a:	fe 01       	movw	r30, r28
    630c:	e9 5a       	subi	r30, 0xA9	; 169
    630e:	ff 4f       	sbci	r31, 0xFF	; 255
    6310:	91 83       	std	Z+1, r25	; 0x01
    6312:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6314:	de 01       	movw	r26, r28
    6316:	a7 5a       	subi	r26, 0xA7	; 167
    6318:	bf 4f       	sbci	r27, 0xFF	; 255
    631a:	fe 01       	movw	r30, r28
    631c:	e7 5a       	subi	r30, 0xA7	; 167
    631e:	ff 4f       	sbci	r31, 0xFF	; 255
    6320:	80 81       	ld	r24, Z
    6322:	91 81       	ldd	r25, Z+1	; 0x01
    6324:	01 97       	sbiw	r24, 0x01	; 1
    6326:	11 96       	adiw	r26, 0x01	; 1
    6328:	9c 93       	st	X, r25
    632a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    632c:	fe 01       	movw	r30, r28
    632e:	e7 5a       	subi	r30, 0xA7	; 167
    6330:	ff 4f       	sbci	r31, 0xFF	; 255
    6332:	80 81       	ld	r24, Z
    6334:	91 81       	ldd	r25, Z+1	; 0x01
    6336:	00 97       	sbiw	r24, 0x00	; 0
    6338:	d1 f6       	brne	.-76     	; 0x62ee <Engine_Control_Handling+0x2f0>
    633a:	27 c0       	rjmp	.+78     	; 0x638a <Engine_Control_Handling+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    633c:	8e 01       	movw	r16, r28
    633e:	07 5a       	subi	r16, 0xA7	; 167
    6340:	1f 4f       	sbci	r17, 0xFF	; 255
    6342:	fe 01       	movw	r30, r28
    6344:	e5 5a       	subi	r30, 0xA5	; 165
    6346:	ff 4f       	sbci	r31, 0xFF	; 255
    6348:	60 81       	ld	r22, Z
    634a:	71 81       	ldd	r23, Z+1	; 0x01
    634c:	82 81       	ldd	r24, Z+2	; 0x02
    634e:	93 81       	ldd	r25, Z+3	; 0x03
    6350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6354:	dc 01       	movw	r26, r24
    6356:	cb 01       	movw	r24, r22
    6358:	f8 01       	movw	r30, r16
    635a:	91 83       	std	Z+1, r25	; 0x01
    635c:	80 83       	st	Z, r24
    635e:	de 01       	movw	r26, r28
    6360:	ab 5a       	subi	r26, 0xAB	; 171
    6362:	bf 4f       	sbci	r27, 0xFF	; 255
    6364:	fe 01       	movw	r30, r28
    6366:	e7 5a       	subi	r30, 0xA7	; 167
    6368:	ff 4f       	sbci	r31, 0xFF	; 255
    636a:	80 81       	ld	r24, Z
    636c:	91 81       	ldd	r25, Z+1	; 0x01
    636e:	8d 93       	st	X+, r24
    6370:	9c 93       	st	X, r25
    6372:	fe 01       	movw	r30, r28
    6374:	eb 5a       	subi	r30, 0xAB	; 171
    6376:	ff 4f       	sbci	r31, 0xFF	; 255
    6378:	80 81       	ld	r24, Z
    637a:	91 81       	ldd	r25, Z+1	; 0x01
    637c:	01 97       	sbiw	r24, 0x01	; 1
    637e:	f1 f7       	brne	.-4      	; 0x637c <Engine_Control_Handling+0x37e>
    6380:	fe 01       	movw	r30, r28
    6382:	eb 5a       	subi	r30, 0xAB	; 171
    6384:	ff 4f       	sbci	r31, 0xFF	; 255
    6386:	91 83       	std	Z+1, r25	; 0x01
    6388:	80 83       	st	Z, r24
        _delay_ms(50);
        EEPROM_readByte(EEPROM_LOCATION +loaded_already, &Global_Speed_Limiter_value);
    638a:	fe 01       	movw	r30, r28
    638c:	ea 58       	subi	r30, 0x8A	; 138
    638e:	ff 4f       	sbci	r31, 0xFF	; 255
    6390:	80 81       	ld	r24, Z
    6392:	80 5f       	subi	r24, 0xF0	; 240
    6394:	29 ec       	ldi	r18, 0xC9	; 201
    6396:	32 e0       	ldi	r19, 0x02	; 2
    6398:	b9 01       	movw	r22, r18
    639a:	0e 94 76 23 	call	0x46ec	; 0x46ec <EEPROM_readByte>
        loaded_already++;
    639e:	de 01       	movw	r26, r28
    63a0:	aa 58       	subi	r26, 0x8A	; 138
    63a2:	bf 4f       	sbci	r27, 0xFF	; 255
    63a4:	fe 01       	movw	r30, r28
    63a6:	ea 58       	subi	r30, 0x8A	; 138
    63a8:	ff 4f       	sbci	r31, 0xFF	; 255
    63aa:	80 81       	ld	r24, Z
    63ac:	8f 5f       	subi	r24, 0xFF	; 255
    63ae:	8c 93       	st	X, r24
    63b0:	fe 01       	movw	r30, r28
    63b2:	ef 5a       	subi	r30, 0xAF	; 175
    63b4:	ff 4f       	sbci	r31, 0xFF	; 255
    63b6:	80 e0       	ldi	r24, 0x00	; 0
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	a8 e4       	ldi	r26, 0x48	; 72
    63bc:	b2 e4       	ldi	r27, 0x42	; 66
    63be:	80 83       	st	Z, r24
    63c0:	91 83       	std	Z+1, r25	; 0x01
    63c2:	a2 83       	std	Z+2, r26	; 0x02
    63c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63c6:	8e 01       	movw	r16, r28
    63c8:	03 5b       	subi	r16, 0xB3	; 179
    63ca:	1f 4f       	sbci	r17, 0xFF	; 255
    63cc:	fe 01       	movw	r30, r28
    63ce:	ef 5a       	subi	r30, 0xAF	; 175
    63d0:	ff 4f       	sbci	r31, 0xFF	; 255
    63d2:	60 81       	ld	r22, Z
    63d4:	71 81       	ldd	r23, Z+1	; 0x01
    63d6:	82 81       	ldd	r24, Z+2	; 0x02
    63d8:	93 81       	ldd	r25, Z+3	; 0x03
    63da:	20 e0       	ldi	r18, 0x00	; 0
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	4a ef       	ldi	r20, 0xFA	; 250
    63e0:	54 e4       	ldi	r21, 0x44	; 68
    63e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e6:	dc 01       	movw	r26, r24
    63e8:	cb 01       	movw	r24, r22
    63ea:	f8 01       	movw	r30, r16
    63ec:	80 83       	st	Z, r24
    63ee:	91 83       	std	Z+1, r25	; 0x01
    63f0:	a2 83       	std	Z+2, r26	; 0x02
    63f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63f4:	fe 01       	movw	r30, r28
    63f6:	e3 5b       	subi	r30, 0xB3	; 179
    63f8:	ff 4f       	sbci	r31, 0xFF	; 255
    63fa:	60 81       	ld	r22, Z
    63fc:	71 81       	ldd	r23, Z+1	; 0x01
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	93 81       	ldd	r25, Z+3	; 0x03
    6402:	20 e0       	ldi	r18, 0x00	; 0
    6404:	30 e0       	ldi	r19, 0x00	; 0
    6406:	40 e8       	ldi	r20, 0x80	; 128
    6408:	5f e3       	ldi	r21, 0x3F	; 63
    640a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    640e:	88 23       	and	r24, r24
    6410:	44 f4       	brge	.+16     	; 0x6422 <Engine_Control_Handling+0x424>
		__ticks = 1;
    6412:	fe 01       	movw	r30, r28
    6414:	e5 5b       	subi	r30, 0xB5	; 181
    6416:	ff 4f       	sbci	r31, 0xFF	; 255
    6418:	81 e0       	ldi	r24, 0x01	; 1
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	91 83       	std	Z+1, r25	; 0x01
    641e:	80 83       	st	Z, r24
    6420:	64 c0       	rjmp	.+200    	; 0x64ea <Engine_Control_Handling+0x4ec>
	else if (__tmp > 65535)
    6422:	fe 01       	movw	r30, r28
    6424:	e3 5b       	subi	r30, 0xB3	; 179
    6426:	ff 4f       	sbci	r31, 0xFF	; 255
    6428:	60 81       	ld	r22, Z
    642a:	71 81       	ldd	r23, Z+1	; 0x01
    642c:	82 81       	ldd	r24, Z+2	; 0x02
    642e:	93 81       	ldd	r25, Z+3	; 0x03
    6430:	20 e0       	ldi	r18, 0x00	; 0
    6432:	3f ef       	ldi	r19, 0xFF	; 255
    6434:	4f e7       	ldi	r20, 0x7F	; 127
    6436:	57 e4       	ldi	r21, 0x47	; 71
    6438:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    643c:	18 16       	cp	r1, r24
    643e:	0c f0       	brlt	.+2      	; 0x6442 <Engine_Control_Handling+0x444>
    6440:	43 c0       	rjmp	.+134    	; 0x64c8 <Engine_Control_Handling+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6442:	fe 01       	movw	r30, r28
    6444:	ef 5a       	subi	r30, 0xAF	; 175
    6446:	ff 4f       	sbci	r31, 0xFF	; 255
    6448:	60 81       	ld	r22, Z
    644a:	71 81       	ldd	r23, Z+1	; 0x01
    644c:	82 81       	ldd	r24, Z+2	; 0x02
    644e:	93 81       	ldd	r25, Z+3	; 0x03
    6450:	20 e0       	ldi	r18, 0x00	; 0
    6452:	30 e0       	ldi	r19, 0x00	; 0
    6454:	40 e2       	ldi	r20, 0x20	; 32
    6456:	51 e4       	ldi	r21, 0x41	; 65
    6458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    645c:	dc 01       	movw	r26, r24
    645e:	cb 01       	movw	r24, r22
    6460:	8e 01       	movw	r16, r28
    6462:	05 5b       	subi	r16, 0xB5	; 181
    6464:	1f 4f       	sbci	r17, 0xFF	; 255
    6466:	bc 01       	movw	r22, r24
    6468:	cd 01       	movw	r24, r26
    646a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    646e:	dc 01       	movw	r26, r24
    6470:	cb 01       	movw	r24, r22
    6472:	f8 01       	movw	r30, r16
    6474:	91 83       	std	Z+1, r25	; 0x01
    6476:	80 83       	st	Z, r24
    6478:	1f c0       	rjmp	.+62     	; 0x64b8 <Engine_Control_Handling+0x4ba>
    647a:	fe 01       	movw	r30, r28
    647c:	e7 5b       	subi	r30, 0xB7	; 183
    647e:	ff 4f       	sbci	r31, 0xFF	; 255
    6480:	88 ec       	ldi	r24, 0xC8	; 200
    6482:	90 e0       	ldi	r25, 0x00	; 0
    6484:	91 83       	std	Z+1, r25	; 0x01
    6486:	80 83       	st	Z, r24
    6488:	fe 01       	movw	r30, r28
    648a:	e7 5b       	subi	r30, 0xB7	; 183
    648c:	ff 4f       	sbci	r31, 0xFF	; 255
    648e:	80 81       	ld	r24, Z
    6490:	91 81       	ldd	r25, Z+1	; 0x01
    6492:	01 97       	sbiw	r24, 0x01	; 1
    6494:	f1 f7       	brne	.-4      	; 0x6492 <Engine_Control_Handling+0x494>
    6496:	fe 01       	movw	r30, r28
    6498:	e7 5b       	subi	r30, 0xB7	; 183
    649a:	ff 4f       	sbci	r31, 0xFF	; 255
    649c:	91 83       	std	Z+1, r25	; 0x01
    649e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64a0:	de 01       	movw	r26, r28
    64a2:	a5 5b       	subi	r26, 0xB5	; 181
    64a4:	bf 4f       	sbci	r27, 0xFF	; 255
    64a6:	fe 01       	movw	r30, r28
    64a8:	e5 5b       	subi	r30, 0xB5	; 181
    64aa:	ff 4f       	sbci	r31, 0xFF	; 255
    64ac:	80 81       	ld	r24, Z
    64ae:	91 81       	ldd	r25, Z+1	; 0x01
    64b0:	01 97       	sbiw	r24, 0x01	; 1
    64b2:	11 96       	adiw	r26, 0x01	; 1
    64b4:	9c 93       	st	X, r25
    64b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64b8:	fe 01       	movw	r30, r28
    64ba:	e5 5b       	subi	r30, 0xB5	; 181
    64bc:	ff 4f       	sbci	r31, 0xFF	; 255
    64be:	80 81       	ld	r24, Z
    64c0:	91 81       	ldd	r25, Z+1	; 0x01
    64c2:	00 97       	sbiw	r24, 0x00	; 0
    64c4:	d1 f6       	brne	.-76     	; 0x647a <Engine_Control_Handling+0x47c>
    64c6:	27 c0       	rjmp	.+78     	; 0x6516 <Engine_Control_Handling+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64c8:	8e 01       	movw	r16, r28
    64ca:	05 5b       	subi	r16, 0xB5	; 181
    64cc:	1f 4f       	sbci	r17, 0xFF	; 255
    64ce:	fe 01       	movw	r30, r28
    64d0:	e3 5b       	subi	r30, 0xB3	; 179
    64d2:	ff 4f       	sbci	r31, 0xFF	; 255
    64d4:	60 81       	ld	r22, Z
    64d6:	71 81       	ldd	r23, Z+1	; 0x01
    64d8:	82 81       	ldd	r24, Z+2	; 0x02
    64da:	93 81       	ldd	r25, Z+3	; 0x03
    64dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64e0:	dc 01       	movw	r26, r24
    64e2:	cb 01       	movw	r24, r22
    64e4:	f8 01       	movw	r30, r16
    64e6:	91 83       	std	Z+1, r25	; 0x01
    64e8:	80 83       	st	Z, r24
    64ea:	de 01       	movw	r26, r28
    64ec:	a9 5b       	subi	r26, 0xB9	; 185
    64ee:	bf 4f       	sbci	r27, 0xFF	; 255
    64f0:	fe 01       	movw	r30, r28
    64f2:	e5 5b       	subi	r30, 0xB5	; 181
    64f4:	ff 4f       	sbci	r31, 0xFF	; 255
    64f6:	80 81       	ld	r24, Z
    64f8:	91 81       	ldd	r25, Z+1	; 0x01
    64fa:	8d 93       	st	X+, r24
    64fc:	9c 93       	st	X, r25
    64fe:	fe 01       	movw	r30, r28
    6500:	e9 5b       	subi	r30, 0xB9	; 185
    6502:	ff 4f       	sbci	r31, 0xFF	; 255
    6504:	80 81       	ld	r24, Z
    6506:	91 81       	ldd	r25, Z+1	; 0x01
    6508:	01 97       	sbiw	r24, 0x01	; 1
    650a:	f1 f7       	brne	.-4      	; 0x6508 <Engine_Control_Handling+0x50a>
    650c:	fe 01       	movw	r30, r28
    650e:	e9 5b       	subi	r30, 0xB9	; 185
    6510:	ff 4f       	sbci	r31, 0xFF	; 255
    6512:	91 83       	std	Z+1, r25	; 0x01
    6514:	80 83       	st	Z, r24
        _delay_ms(50);
        EEPROM_readByte(EEPROM_LOCATION +loaded_already, &Page_Current_State);
    6516:	fe 01       	movw	r30, r28
    6518:	ea 58       	subi	r30, 0x8A	; 138
    651a:	ff 4f       	sbci	r31, 0xFF	; 255
    651c:	80 81       	ld	r24, Z
    651e:	80 5f       	subi	r24, 0xF0	; 240
    6520:	27 ec       	ldi	r18, 0xC7	; 199
    6522:	32 e0       	ldi	r19, 0x02	; 2
    6524:	b9 01       	movw	r22, r18
    6526:	0e 94 76 23 	call	0x46ec	; 0x46ec <EEPROM_readByte>
    652a:	fe 01       	movw	r30, r28
    652c:	ed 5b       	subi	r30, 0xBD	; 189
    652e:	ff 4f       	sbci	r31, 0xFF	; 255
    6530:	80 e0       	ldi	r24, 0x00	; 0
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	a8 e4       	ldi	r26, 0x48	; 72
    6536:	b2 e4       	ldi	r27, 0x42	; 66
    6538:	80 83       	st	Z, r24
    653a:	91 83       	std	Z+1, r25	; 0x01
    653c:	a2 83       	std	Z+2, r26	; 0x02
    653e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6540:	8e 01       	movw	r16, r28
    6542:	01 5c       	subi	r16, 0xC1	; 193
    6544:	1f 4f       	sbci	r17, 0xFF	; 255
    6546:	fe 01       	movw	r30, r28
    6548:	ed 5b       	subi	r30, 0xBD	; 189
    654a:	ff 4f       	sbci	r31, 0xFF	; 255
    654c:	60 81       	ld	r22, Z
    654e:	71 81       	ldd	r23, Z+1	; 0x01
    6550:	82 81       	ldd	r24, Z+2	; 0x02
    6552:	93 81       	ldd	r25, Z+3	; 0x03
    6554:	20 e0       	ldi	r18, 0x00	; 0
    6556:	30 e0       	ldi	r19, 0x00	; 0
    6558:	4a ef       	ldi	r20, 0xFA	; 250
    655a:	54 e4       	ldi	r21, 0x44	; 68
    655c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6560:	dc 01       	movw	r26, r24
    6562:	cb 01       	movw	r24, r22
    6564:	f8 01       	movw	r30, r16
    6566:	80 83       	st	Z, r24
    6568:	91 83       	std	Z+1, r25	; 0x01
    656a:	a2 83       	std	Z+2, r26	; 0x02
    656c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    656e:	fe 01       	movw	r30, r28
    6570:	ff 96       	adiw	r30, 0x3f	; 63
    6572:	60 81       	ld	r22, Z
    6574:	71 81       	ldd	r23, Z+1	; 0x01
    6576:	82 81       	ldd	r24, Z+2	; 0x02
    6578:	93 81       	ldd	r25, Z+3	; 0x03
    657a:	20 e0       	ldi	r18, 0x00	; 0
    657c:	30 e0       	ldi	r19, 0x00	; 0
    657e:	40 e8       	ldi	r20, 0x80	; 128
    6580:	5f e3       	ldi	r21, 0x3F	; 63
    6582:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6586:	88 23       	and	r24, r24
    6588:	2c f4       	brge	.+10     	; 0x6594 <Engine_Control_Handling+0x596>
		__ticks = 1;
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	9e af       	std	Y+62, r25	; 0x3e
    6590:	8d af       	std	Y+61, r24	; 0x3d
    6592:	46 c0       	rjmp	.+140    	; 0x6620 <Engine_Control_Handling+0x622>
	else if (__tmp > 65535)
    6594:	fe 01       	movw	r30, r28
    6596:	ff 96       	adiw	r30, 0x3f	; 63
    6598:	60 81       	ld	r22, Z
    659a:	71 81       	ldd	r23, Z+1	; 0x01
    659c:	82 81       	ldd	r24, Z+2	; 0x02
    659e:	93 81       	ldd	r25, Z+3	; 0x03
    65a0:	20 e0       	ldi	r18, 0x00	; 0
    65a2:	3f ef       	ldi	r19, 0xFF	; 255
    65a4:	4f e7       	ldi	r20, 0x7F	; 127
    65a6:	57 e4       	ldi	r21, 0x47	; 71
    65a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    65ac:	18 16       	cp	r1, r24
    65ae:	64 f5       	brge	.+88     	; 0x6608 <Engine_Control_Handling+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65b0:	fe 01       	movw	r30, r28
    65b2:	ed 5b       	subi	r30, 0xBD	; 189
    65b4:	ff 4f       	sbci	r31, 0xFF	; 255
    65b6:	60 81       	ld	r22, Z
    65b8:	71 81       	ldd	r23, Z+1	; 0x01
    65ba:	82 81       	ldd	r24, Z+2	; 0x02
    65bc:	93 81       	ldd	r25, Z+3	; 0x03
    65be:	20 e0       	ldi	r18, 0x00	; 0
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	40 e2       	ldi	r20, 0x20	; 32
    65c4:	51 e4       	ldi	r21, 0x41	; 65
    65c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65ca:	dc 01       	movw	r26, r24
    65cc:	cb 01       	movw	r24, r22
    65ce:	bc 01       	movw	r22, r24
    65d0:	cd 01       	movw	r24, r26
    65d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65d6:	dc 01       	movw	r26, r24
    65d8:	cb 01       	movw	r24, r22
    65da:	9e af       	std	Y+62, r25	; 0x3e
    65dc:	8d af       	std	Y+61, r24	; 0x3d
    65de:	0f c0       	rjmp	.+30     	; 0x65fe <Engine_Control_Handling+0x600>
    65e0:	88 ec       	ldi	r24, 0xC8	; 200
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	9c af       	std	Y+60, r25	; 0x3c
    65e6:	8b af       	std	Y+59, r24	; 0x3b
    65e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    65ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    65ec:	01 97       	sbiw	r24, 0x01	; 1
    65ee:	f1 f7       	brne	.-4      	; 0x65ec <Engine_Control_Handling+0x5ee>
    65f0:	9c af       	std	Y+60, r25	; 0x3c
    65f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    65f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    65f8:	01 97       	sbiw	r24, 0x01	; 1
    65fa:	9e af       	std	Y+62, r25	; 0x3e
    65fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    6600:	9e ad       	ldd	r25, Y+62	; 0x3e
    6602:	00 97       	sbiw	r24, 0x00	; 0
    6604:	69 f7       	brne	.-38     	; 0x65e0 <Engine_Control_Handling+0x5e2>
    6606:	16 c0       	rjmp	.+44     	; 0x6634 <Engine_Control_Handling+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6608:	fe 01       	movw	r30, r28
    660a:	ff 96       	adiw	r30, 0x3f	; 63
    660c:	60 81       	ld	r22, Z
    660e:	71 81       	ldd	r23, Z+1	; 0x01
    6610:	82 81       	ldd	r24, Z+2	; 0x02
    6612:	93 81       	ldd	r25, Z+3	; 0x03
    6614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	9e af       	std	Y+62, r25	; 0x3e
    661e:	8d af       	std	Y+61, r24	; 0x3d
    6620:	8d ad       	ldd	r24, Y+61	; 0x3d
    6622:	9e ad       	ldd	r25, Y+62	; 0x3e
    6624:	9a af       	std	Y+58, r25	; 0x3a
    6626:	89 af       	std	Y+57, r24	; 0x39
    6628:	89 ad       	ldd	r24, Y+57	; 0x39
    662a:	9a ad       	ldd	r25, Y+58	; 0x3a
    662c:	01 97       	sbiw	r24, 0x01	; 1
    662e:	f1 f7       	brne	.-4      	; 0x662c <Engine_Control_Handling+0x62e>
    6630:	9a af       	std	Y+58, r25	; 0x3a
    6632:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(50);

        /*  Send data to Mobile App using Bluetooth   */
        if(GearBox_Current_State == N_GearBox)
    6634:	80 91 06 03 	lds	r24, 0x0306
    6638:	88 23       	and	r24, r24
    663a:	29 f4       	brne	.+10     	; 0x6646 <Engine_Control_Handling+0x648>
            Bluetooth_Send((const uint8 * )"0");
    663c:	88 e1       	ldi	r24, 0x18	; 24
    663e:	91 e0       	ldi	r25, 0x01	; 1
    6640:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    6644:	6d c2       	rjmp	.+1242   	; 0x6b20 <Engine_Control_Handling+0xb22>
        else if(GearBox_Current_State == D_GearBox)
    6646:	80 91 06 03 	lds	r24, 0x0306
    664a:	81 30       	cpi	r24, 0x01	; 1
    664c:	29 f4       	brne	.+10     	; 0x6658 <Engine_Control_Handling+0x65a>
            Bluetooth_Send((const uint8 * )"1");
    664e:	8a e1       	ldi	r24, 0x1A	; 26
    6650:	91 e0       	ldi	r25, 0x01	; 1
    6652:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    6656:	64 c2       	rjmp	.+1224   	; 0x6b20 <Engine_Control_Handling+0xb22>
        else if(GearBox_Current_State == R_GearBox)
    6658:	80 91 06 03 	lds	r24, 0x0306
    665c:	82 30       	cpi	r24, 0x02	; 2
    665e:	09 f0       	breq	.+2      	; 0x6662 <Engine_Control_Handling+0x664>
    6660:	5f c2       	rjmp	.+1214   	; 0x6b20 <Engine_Control_Handling+0xb22>
            Bluetooth_Send((const uint8 * )"2");
    6662:	8c e1       	ldi	r24, 0x1C	; 28
    6664:	91 e0       	ldi	r25, 0x01	; 1
    6666:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    666a:	5a c2       	rjmp	.+1204   	; 0x6b20 <Engine_Control_Handling+0xb22>
    }
    else if(EXT0_Count == 2)//close engine
    666c:	80 91 1a 03 	lds	r24, 0x031A
    6670:	82 30       	cpi	r24, 0x02	; 2
    6672:	09 f0       	breq	.+2      	; 0x6676 <Engine_Control_Handling+0x678>
    6674:	55 c2       	rjmp	.+1194   	; 0x6b20 <Engine_Control_Handling+0xb22>
    {
        /*  Store data in External EEPROM   */
        uint8 loaded_already = 0;
    6676:	fe 01       	movw	r30, r28
    6678:	ed 58       	subi	r30, 0x8D	; 141
    667a:	ff 4f       	sbci	r31, 0xFF	; 255
    667c:	10 82       	st	Z, r1
        uint8* ptr = (uint8*)&Accumulative_Distance_KM;
    667e:	fe 01       	movw	r30, r28
    6680:	ef 58       	subi	r30, 0x8F	; 143
    6682:	ff 4f       	sbci	r31, 0xFF	; 255
    6684:	80 e1       	ldi	r24, 0x10	; 16
    6686:	93 e0       	ldi	r25, 0x03	; 3
    6688:	91 83       	std	Z+1, r25	; 0x01
    668a:	80 83       	st	Z, r24
    668c:	94 c0       	rjmp	.+296    	; 0x67b6 <Engine_Control_Handling+0x7b8>
        for (; loaded_already < sizeof(float64); loaded_already++) 
        {
            
            EEPROM_writeByte(EEPROM_LOCATION + loaded_already , ptr[loaded_already]);
    668e:	fe 01       	movw	r30, r28
    6690:	ed 58       	subi	r30, 0x8D	; 141
    6692:	ff 4f       	sbci	r31, 0xFF	; 255
    6694:	80 81       	ld	r24, Z
    6696:	48 2f       	mov	r20, r24
    6698:	40 5f       	subi	r20, 0xF0	; 240
    669a:	fe 01       	movw	r30, r28
    669c:	ed 58       	subi	r30, 0x8D	; 141
    669e:	ff 4f       	sbci	r31, 0xFF	; 255
    66a0:	80 81       	ld	r24, Z
    66a2:	28 2f       	mov	r18, r24
    66a4:	30 e0       	ldi	r19, 0x00	; 0
    66a6:	fe 01       	movw	r30, r28
    66a8:	ef 58       	subi	r30, 0x8F	; 143
    66aa:	ff 4f       	sbci	r31, 0xFF	; 255
    66ac:	80 81       	ld	r24, Z
    66ae:	91 81       	ldd	r25, Z+1	; 0x01
    66b0:	fc 01       	movw	r30, r24
    66b2:	e2 0f       	add	r30, r18
    66b4:	f3 1f       	adc	r31, r19
    66b6:	90 81       	ld	r25, Z
    66b8:	84 2f       	mov	r24, r20
    66ba:	69 2f       	mov	r22, r25
    66bc:	0e 94 40 23 	call	0x4680	; 0x4680 <EEPROM_writeByte>
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	a8 e4       	ldi	r26, 0x48	; 72
    66c6:	b2 e4       	ldi	r27, 0x42	; 66
    66c8:	8d ab       	std	Y+53, r24	; 0x35
    66ca:	9e ab       	std	Y+54, r25	; 0x36
    66cc:	af ab       	std	Y+55, r26	; 0x37
    66ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66d0:	6d a9       	ldd	r22, Y+53	; 0x35
    66d2:	7e a9       	ldd	r23, Y+54	; 0x36
    66d4:	8f a9       	ldd	r24, Y+55	; 0x37
    66d6:	98 ad       	ldd	r25, Y+56	; 0x38
    66d8:	20 e0       	ldi	r18, 0x00	; 0
    66da:	30 e0       	ldi	r19, 0x00	; 0
    66dc:	4a ef       	ldi	r20, 0xFA	; 250
    66de:	54 e4       	ldi	r21, 0x44	; 68
    66e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66e4:	dc 01       	movw	r26, r24
    66e6:	cb 01       	movw	r24, r22
    66e8:	89 ab       	std	Y+49, r24	; 0x31
    66ea:	9a ab       	std	Y+50, r25	; 0x32
    66ec:	ab ab       	std	Y+51, r26	; 0x33
    66ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    66f0:	69 a9       	ldd	r22, Y+49	; 0x31
    66f2:	7a a9       	ldd	r23, Y+50	; 0x32
    66f4:	8b a9       	ldd	r24, Y+51	; 0x33
    66f6:	9c a9       	ldd	r25, Y+52	; 0x34
    66f8:	20 e0       	ldi	r18, 0x00	; 0
    66fa:	30 e0       	ldi	r19, 0x00	; 0
    66fc:	40 e8       	ldi	r20, 0x80	; 128
    66fe:	5f e3       	ldi	r21, 0x3F	; 63
    6700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6704:	88 23       	and	r24, r24
    6706:	2c f4       	brge	.+10     	; 0x6712 <Engine_Control_Handling+0x714>
		__ticks = 1;
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	98 ab       	std	Y+48, r25	; 0x30
    670e:	8f a7       	std	Y+47, r24	; 0x2f
    6710:	3f c0       	rjmp	.+126    	; 0x6790 <Engine_Control_Handling+0x792>
	else if (__tmp > 65535)
    6712:	69 a9       	ldd	r22, Y+49	; 0x31
    6714:	7a a9       	ldd	r23, Y+50	; 0x32
    6716:	8b a9       	ldd	r24, Y+51	; 0x33
    6718:	9c a9       	ldd	r25, Y+52	; 0x34
    671a:	20 e0       	ldi	r18, 0x00	; 0
    671c:	3f ef       	ldi	r19, 0xFF	; 255
    671e:	4f e7       	ldi	r20, 0x7F	; 127
    6720:	57 e4       	ldi	r21, 0x47	; 71
    6722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6726:	18 16       	cp	r1, r24
    6728:	4c f5       	brge	.+82     	; 0x677c <Engine_Control_Handling+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    672a:	6d a9       	ldd	r22, Y+53	; 0x35
    672c:	7e a9       	ldd	r23, Y+54	; 0x36
    672e:	8f a9       	ldd	r24, Y+55	; 0x37
    6730:	98 ad       	ldd	r25, Y+56	; 0x38
    6732:	20 e0       	ldi	r18, 0x00	; 0
    6734:	30 e0       	ldi	r19, 0x00	; 0
    6736:	40 e2       	ldi	r20, 0x20	; 32
    6738:	51 e4       	ldi	r21, 0x41	; 65
    673a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    673e:	dc 01       	movw	r26, r24
    6740:	cb 01       	movw	r24, r22
    6742:	bc 01       	movw	r22, r24
    6744:	cd 01       	movw	r24, r26
    6746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    674a:	dc 01       	movw	r26, r24
    674c:	cb 01       	movw	r24, r22
    674e:	98 ab       	std	Y+48, r25	; 0x30
    6750:	8f a7       	std	Y+47, r24	; 0x2f
    6752:	0f c0       	rjmp	.+30     	; 0x6772 <Engine_Control_Handling+0x774>
    6754:	88 ec       	ldi	r24, 0xC8	; 200
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	9e a7       	std	Y+46, r25	; 0x2e
    675a:	8d a7       	std	Y+45, r24	; 0x2d
    675c:	8d a5       	ldd	r24, Y+45	; 0x2d
    675e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6760:	01 97       	sbiw	r24, 0x01	; 1
    6762:	f1 f7       	brne	.-4      	; 0x6760 <Engine_Control_Handling+0x762>
    6764:	9e a7       	std	Y+46, r25	; 0x2e
    6766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6768:	8f a5       	ldd	r24, Y+47	; 0x2f
    676a:	98 a9       	ldd	r25, Y+48	; 0x30
    676c:	01 97       	sbiw	r24, 0x01	; 1
    676e:	98 ab       	std	Y+48, r25	; 0x30
    6770:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6772:	8f a5       	ldd	r24, Y+47	; 0x2f
    6774:	98 a9       	ldd	r25, Y+48	; 0x30
    6776:	00 97       	sbiw	r24, 0x00	; 0
    6778:	69 f7       	brne	.-38     	; 0x6754 <Engine_Control_Handling+0x756>
    677a:	14 c0       	rjmp	.+40     	; 0x67a4 <Engine_Control_Handling+0x7a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    677c:	69 a9       	ldd	r22, Y+49	; 0x31
    677e:	7a a9       	ldd	r23, Y+50	; 0x32
    6780:	8b a9       	ldd	r24, Y+51	; 0x33
    6782:	9c a9       	ldd	r25, Y+52	; 0x34
    6784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6788:	dc 01       	movw	r26, r24
    678a:	cb 01       	movw	r24, r22
    678c:	98 ab       	std	Y+48, r25	; 0x30
    678e:	8f a7       	std	Y+47, r24	; 0x2f
    6790:	8f a5       	ldd	r24, Y+47	; 0x2f
    6792:	98 a9       	ldd	r25, Y+48	; 0x30
    6794:	9c a7       	std	Y+44, r25	; 0x2c
    6796:	8b a7       	std	Y+43, r24	; 0x2b
    6798:	8b a5       	ldd	r24, Y+43	; 0x2b
    679a:	9c a5       	ldd	r25, Y+44	; 0x2c
    679c:	01 97       	sbiw	r24, 0x01	; 1
    679e:	f1 f7       	brne	.-4      	; 0x679c <Engine_Control_Handling+0x79e>
    67a0:	9c a7       	std	Y+44, r25	; 0x2c
    67a2:	8b a7       	std	Y+43, r24	; 0x2b
    else if(EXT0_Count == 2)//close engine
    {
        /*  Store data in External EEPROM   */
        uint8 loaded_already = 0;
        uint8* ptr = (uint8*)&Accumulative_Distance_KM;
        for (; loaded_already < sizeof(float64); loaded_already++) 
    67a4:	de 01       	movw	r26, r28
    67a6:	ad 58       	subi	r26, 0x8D	; 141
    67a8:	bf 4f       	sbci	r27, 0xFF	; 255
    67aa:	fe 01       	movw	r30, r28
    67ac:	ed 58       	subi	r30, 0x8D	; 141
    67ae:	ff 4f       	sbci	r31, 0xFF	; 255
    67b0:	80 81       	ld	r24, Z
    67b2:	8f 5f       	subi	r24, 0xFF	; 255
    67b4:	8c 93       	st	X, r24
    67b6:	fe 01       	movw	r30, r28
    67b8:	ed 58       	subi	r30, 0x8D	; 141
    67ba:	ff 4f       	sbci	r31, 0xFF	; 255
    67bc:	80 81       	ld	r24, Z
    67be:	84 30       	cpi	r24, 0x04	; 4
    67c0:	08 f4       	brcc	.+2      	; 0x67c4 <Engine_Control_Handling+0x7c6>
    67c2:	65 cf       	rjmp	.-310    	; 0x668e <Engine_Control_Handling+0x690>
        {
            
            EEPROM_writeByte(EEPROM_LOCATION + loaded_already , ptr[loaded_already]);
            _delay_ms(50);
        }
        EEPROM_writeByte(EEPROM_LOCATION +loaded_already, GearBox_Current_State);
    67c4:	fe 01       	movw	r30, r28
    67c6:	ed 58       	subi	r30, 0x8D	; 141
    67c8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ca:	80 81       	ld	r24, Z
    67cc:	80 5f       	subi	r24, 0xF0	; 240
    67ce:	90 91 06 03 	lds	r25, 0x0306
    67d2:	69 2f       	mov	r22, r25
    67d4:	0e 94 40 23 	call	0x4680	; 0x4680 <EEPROM_writeByte>
        /*  Delay is mandatory to work*/
        loaded_already++;
    67d8:	de 01       	movw	r26, r28
    67da:	ad 58       	subi	r26, 0x8D	; 141
    67dc:	bf 4f       	sbci	r27, 0xFF	; 255
    67de:	fe 01       	movw	r30, r28
    67e0:	ed 58       	subi	r30, 0x8D	; 141
    67e2:	ff 4f       	sbci	r31, 0xFF	; 255
    67e4:	80 81       	ld	r24, Z
    67e6:	8f 5f       	subi	r24, 0xFF	; 255
    67e8:	8c 93       	st	X, r24
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	a8 e4       	ldi	r26, 0x48	; 72
    67f0:	b2 e4       	ldi	r27, 0x42	; 66
    67f2:	8f a3       	std	Y+39, r24	; 0x27
    67f4:	98 a7       	std	Y+40, r25	; 0x28
    67f6:	a9 a7       	std	Y+41, r26	; 0x29
    67f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67fa:	6f a1       	ldd	r22, Y+39	; 0x27
    67fc:	78 a5       	ldd	r23, Y+40	; 0x28
    67fe:	89 a5       	ldd	r24, Y+41	; 0x29
    6800:	9a a5       	ldd	r25, Y+42	; 0x2a
    6802:	20 e0       	ldi	r18, 0x00	; 0
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	4a ef       	ldi	r20, 0xFA	; 250
    6808:	54 e4       	ldi	r21, 0x44	; 68
    680a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    680e:	dc 01       	movw	r26, r24
    6810:	cb 01       	movw	r24, r22
    6812:	8b a3       	std	Y+35, r24	; 0x23
    6814:	9c a3       	std	Y+36, r25	; 0x24
    6816:	ad a3       	std	Y+37, r26	; 0x25
    6818:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    681a:	6b a1       	ldd	r22, Y+35	; 0x23
    681c:	7c a1       	ldd	r23, Y+36	; 0x24
    681e:	8d a1       	ldd	r24, Y+37	; 0x25
    6820:	9e a1       	ldd	r25, Y+38	; 0x26
    6822:	20 e0       	ldi	r18, 0x00	; 0
    6824:	30 e0       	ldi	r19, 0x00	; 0
    6826:	40 e8       	ldi	r20, 0x80	; 128
    6828:	5f e3       	ldi	r21, 0x3F	; 63
    682a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    682e:	88 23       	and	r24, r24
    6830:	2c f4       	brge	.+10     	; 0x683c <Engine_Control_Handling+0x83e>
		__ticks = 1;
    6832:	81 e0       	ldi	r24, 0x01	; 1
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	9a a3       	std	Y+34, r25	; 0x22
    6838:	89 a3       	std	Y+33, r24	; 0x21
    683a:	3f c0       	rjmp	.+126    	; 0x68ba <Engine_Control_Handling+0x8bc>
	else if (__tmp > 65535)
    683c:	6b a1       	ldd	r22, Y+35	; 0x23
    683e:	7c a1       	ldd	r23, Y+36	; 0x24
    6840:	8d a1       	ldd	r24, Y+37	; 0x25
    6842:	9e a1       	ldd	r25, Y+38	; 0x26
    6844:	20 e0       	ldi	r18, 0x00	; 0
    6846:	3f ef       	ldi	r19, 0xFF	; 255
    6848:	4f e7       	ldi	r20, 0x7F	; 127
    684a:	57 e4       	ldi	r21, 0x47	; 71
    684c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6850:	18 16       	cp	r1, r24
    6852:	4c f5       	brge	.+82     	; 0x68a6 <Engine_Control_Handling+0x8a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6854:	6f a1       	ldd	r22, Y+39	; 0x27
    6856:	78 a5       	ldd	r23, Y+40	; 0x28
    6858:	89 a5       	ldd	r24, Y+41	; 0x29
    685a:	9a a5       	ldd	r25, Y+42	; 0x2a
    685c:	20 e0       	ldi	r18, 0x00	; 0
    685e:	30 e0       	ldi	r19, 0x00	; 0
    6860:	40 e2       	ldi	r20, 0x20	; 32
    6862:	51 e4       	ldi	r21, 0x41	; 65
    6864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6868:	dc 01       	movw	r26, r24
    686a:	cb 01       	movw	r24, r22
    686c:	bc 01       	movw	r22, r24
    686e:	cd 01       	movw	r24, r26
    6870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6874:	dc 01       	movw	r26, r24
    6876:	cb 01       	movw	r24, r22
    6878:	9a a3       	std	Y+34, r25	; 0x22
    687a:	89 a3       	std	Y+33, r24	; 0x21
    687c:	0f c0       	rjmp	.+30     	; 0x689c <Engine_Control_Handling+0x89e>
    687e:	88 ec       	ldi	r24, 0xC8	; 200
    6880:	90 e0       	ldi	r25, 0x00	; 0
    6882:	98 a3       	std	Y+32, r25	; 0x20
    6884:	8f 8f       	std	Y+31, r24	; 0x1f
    6886:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6888:	98 a1       	ldd	r25, Y+32	; 0x20
    688a:	01 97       	sbiw	r24, 0x01	; 1
    688c:	f1 f7       	brne	.-4      	; 0x688a <Engine_Control_Handling+0x88c>
    688e:	98 a3       	std	Y+32, r25	; 0x20
    6890:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6892:	89 a1       	ldd	r24, Y+33	; 0x21
    6894:	9a a1       	ldd	r25, Y+34	; 0x22
    6896:	01 97       	sbiw	r24, 0x01	; 1
    6898:	9a a3       	std	Y+34, r25	; 0x22
    689a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    689c:	89 a1       	ldd	r24, Y+33	; 0x21
    689e:	9a a1       	ldd	r25, Y+34	; 0x22
    68a0:	00 97       	sbiw	r24, 0x00	; 0
    68a2:	69 f7       	brne	.-38     	; 0x687e <Engine_Control_Handling+0x880>
    68a4:	14 c0       	rjmp	.+40     	; 0x68ce <Engine_Control_Handling+0x8d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68a6:	6b a1       	ldd	r22, Y+35	; 0x23
    68a8:	7c a1       	ldd	r23, Y+36	; 0x24
    68aa:	8d a1       	ldd	r24, Y+37	; 0x25
    68ac:	9e a1       	ldd	r25, Y+38	; 0x26
    68ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68b2:	dc 01       	movw	r26, r24
    68b4:	cb 01       	movw	r24, r22
    68b6:	9a a3       	std	Y+34, r25	; 0x22
    68b8:	89 a3       	std	Y+33, r24	; 0x21
    68ba:	89 a1       	ldd	r24, Y+33	; 0x21
    68bc:	9a a1       	ldd	r25, Y+34	; 0x22
    68be:	9e 8f       	std	Y+30, r25	; 0x1e
    68c0:	8d 8f       	std	Y+29, r24	; 0x1d
    68c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    68c6:	01 97       	sbiw	r24, 0x01	; 1
    68c8:	f1 f7       	brne	.-4      	; 0x68c6 <Engine_Control_Handling+0x8c8>
    68ca:	9e 8f       	std	Y+30, r25	; 0x1e
    68cc:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(50);
        EEPROM_writeByte(EEPROM_LOCATION +loaded_already, Global_Speed_Limiter_value);
    68ce:	fe 01       	movw	r30, r28
    68d0:	ed 58       	subi	r30, 0x8D	; 141
    68d2:	ff 4f       	sbci	r31, 0xFF	; 255
    68d4:	80 81       	ld	r24, Z
    68d6:	80 5f       	subi	r24, 0xF0	; 240
    68d8:	90 91 c9 02 	lds	r25, 0x02C9
    68dc:	69 2f       	mov	r22, r25
    68de:	0e 94 40 23 	call	0x4680	; 0x4680 <EEPROM_writeByte>
        loaded_already++;
    68e2:	de 01       	movw	r26, r28
    68e4:	ad 58       	subi	r26, 0x8D	; 141
    68e6:	bf 4f       	sbci	r27, 0xFF	; 255
    68e8:	fe 01       	movw	r30, r28
    68ea:	ed 58       	subi	r30, 0x8D	; 141
    68ec:	ff 4f       	sbci	r31, 0xFF	; 255
    68ee:	80 81       	ld	r24, Z
    68f0:	8f 5f       	subi	r24, 0xFF	; 255
    68f2:	8c 93       	st	X, r24
    68f4:	80 e0       	ldi	r24, 0x00	; 0
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	a8 e4       	ldi	r26, 0x48	; 72
    68fa:	b2 e4       	ldi	r27, 0x42	; 66
    68fc:	89 8f       	std	Y+25, r24	; 0x19
    68fe:	9a 8f       	std	Y+26, r25	; 0x1a
    6900:	ab 8f       	std	Y+27, r26	; 0x1b
    6902:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6904:	69 8d       	ldd	r22, Y+25	; 0x19
    6906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6908:	8b 8d       	ldd	r24, Y+27	; 0x1b
    690a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    690c:	20 e0       	ldi	r18, 0x00	; 0
    690e:	30 e0       	ldi	r19, 0x00	; 0
    6910:	4a ef       	ldi	r20, 0xFA	; 250
    6912:	54 e4       	ldi	r21, 0x44	; 68
    6914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6918:	dc 01       	movw	r26, r24
    691a:	cb 01       	movw	r24, r22
    691c:	8d 8b       	std	Y+21, r24	; 0x15
    691e:	9e 8b       	std	Y+22, r25	; 0x16
    6920:	af 8b       	std	Y+23, r26	; 0x17
    6922:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6924:	6d 89       	ldd	r22, Y+21	; 0x15
    6926:	7e 89       	ldd	r23, Y+22	; 0x16
    6928:	8f 89       	ldd	r24, Y+23	; 0x17
    692a:	98 8d       	ldd	r25, Y+24	; 0x18
    692c:	20 e0       	ldi	r18, 0x00	; 0
    692e:	30 e0       	ldi	r19, 0x00	; 0
    6930:	40 e8       	ldi	r20, 0x80	; 128
    6932:	5f e3       	ldi	r21, 0x3F	; 63
    6934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6938:	88 23       	and	r24, r24
    693a:	2c f4       	brge	.+10     	; 0x6946 <Engine_Control_Handling+0x948>
		__ticks = 1;
    693c:	81 e0       	ldi	r24, 0x01	; 1
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	9c 8b       	std	Y+20, r25	; 0x14
    6942:	8b 8b       	std	Y+19, r24	; 0x13
    6944:	3f c0       	rjmp	.+126    	; 0x69c4 <Engine_Control_Handling+0x9c6>
	else if (__tmp > 65535)
    6946:	6d 89       	ldd	r22, Y+21	; 0x15
    6948:	7e 89       	ldd	r23, Y+22	; 0x16
    694a:	8f 89       	ldd	r24, Y+23	; 0x17
    694c:	98 8d       	ldd	r25, Y+24	; 0x18
    694e:	20 e0       	ldi	r18, 0x00	; 0
    6950:	3f ef       	ldi	r19, 0xFF	; 255
    6952:	4f e7       	ldi	r20, 0x7F	; 127
    6954:	57 e4       	ldi	r21, 0x47	; 71
    6956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    695a:	18 16       	cp	r1, r24
    695c:	4c f5       	brge	.+82     	; 0x69b0 <Engine_Control_Handling+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    695e:	69 8d       	ldd	r22, Y+25	; 0x19
    6960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6966:	20 e0       	ldi	r18, 0x00	; 0
    6968:	30 e0       	ldi	r19, 0x00	; 0
    696a:	40 e2       	ldi	r20, 0x20	; 32
    696c:	51 e4       	ldi	r21, 0x41	; 65
    696e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6972:	dc 01       	movw	r26, r24
    6974:	cb 01       	movw	r24, r22
    6976:	bc 01       	movw	r22, r24
    6978:	cd 01       	movw	r24, r26
    697a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    697e:	dc 01       	movw	r26, r24
    6980:	cb 01       	movw	r24, r22
    6982:	9c 8b       	std	Y+20, r25	; 0x14
    6984:	8b 8b       	std	Y+19, r24	; 0x13
    6986:	0f c0       	rjmp	.+30     	; 0x69a6 <Engine_Control_Handling+0x9a8>
    6988:	88 ec       	ldi	r24, 0xC8	; 200
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	9a 8b       	std	Y+18, r25	; 0x12
    698e:	89 8b       	std	Y+17, r24	; 0x11
    6990:	89 89       	ldd	r24, Y+17	; 0x11
    6992:	9a 89       	ldd	r25, Y+18	; 0x12
    6994:	01 97       	sbiw	r24, 0x01	; 1
    6996:	f1 f7       	brne	.-4      	; 0x6994 <Engine_Control_Handling+0x996>
    6998:	9a 8b       	std	Y+18, r25	; 0x12
    699a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    699c:	8b 89       	ldd	r24, Y+19	; 0x13
    699e:	9c 89       	ldd	r25, Y+20	; 0x14
    69a0:	01 97       	sbiw	r24, 0x01	; 1
    69a2:	9c 8b       	std	Y+20, r25	; 0x14
    69a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69a6:	8b 89       	ldd	r24, Y+19	; 0x13
    69a8:	9c 89       	ldd	r25, Y+20	; 0x14
    69aa:	00 97       	sbiw	r24, 0x00	; 0
    69ac:	69 f7       	brne	.-38     	; 0x6988 <Engine_Control_Handling+0x98a>
    69ae:	14 c0       	rjmp	.+40     	; 0x69d8 <Engine_Control_Handling+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69b0:	6d 89       	ldd	r22, Y+21	; 0x15
    69b2:	7e 89       	ldd	r23, Y+22	; 0x16
    69b4:	8f 89       	ldd	r24, Y+23	; 0x17
    69b6:	98 8d       	ldd	r25, Y+24	; 0x18
    69b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69bc:	dc 01       	movw	r26, r24
    69be:	cb 01       	movw	r24, r22
    69c0:	9c 8b       	std	Y+20, r25	; 0x14
    69c2:	8b 8b       	std	Y+19, r24	; 0x13
    69c4:	8b 89       	ldd	r24, Y+19	; 0x13
    69c6:	9c 89       	ldd	r25, Y+20	; 0x14
    69c8:	98 8b       	std	Y+16, r25	; 0x10
    69ca:	8f 87       	std	Y+15, r24	; 0x0f
    69cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    69ce:	98 89       	ldd	r25, Y+16	; 0x10
    69d0:	01 97       	sbiw	r24, 0x01	; 1
    69d2:	f1 f7       	brne	.-4      	; 0x69d0 <Engine_Control_Handling+0x9d2>
    69d4:	98 8b       	std	Y+16, r25	; 0x10
    69d6:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(50);
        EEPROM_writeByte(EEPROM_LOCATION +loaded_already, Page_Current_State);
    69d8:	fe 01       	movw	r30, r28
    69da:	ed 58       	subi	r30, 0x8D	; 141
    69dc:	ff 4f       	sbci	r31, 0xFF	; 255
    69de:	80 81       	ld	r24, Z
    69e0:	28 2f       	mov	r18, r24
    69e2:	20 5f       	subi	r18, 0xF0	; 240
    69e4:	80 91 c7 02 	lds	r24, 0x02C7
    69e8:	98 2f       	mov	r25, r24
    69ea:	82 2f       	mov	r24, r18
    69ec:	69 2f       	mov	r22, r25
    69ee:	0e 94 40 23 	call	0x4680	; 0x4680 <EEPROM_writeByte>
        cli();
    69f2:	f8 94       	cli
        /*  Engine of car will be off so stop every thing  */
        LCD_ClearScreen();
    69f4:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <LCD_ClearScreen>
        LCD_MoveCursor(1,5);
    69f8:	81 e0       	ldi	r24, 0x01	; 1
    69fa:	65 e0       	ldi	r22, 0x05	; 5
    69fc:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString("Engine OFF");
    6a00:	8e e1       	ldi	r24, 0x1E	; 30
    6a02:	91 e0       	ldi	r25, 0x01	; 1
    6a04:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        /*  Stop motor*/
        DC_Motor_Speed(&DC_pins_Motor,DC_Motor_Stop,0);
    6a08:	8a ec       	ldi	r24, 0xCA	; 202
    6a0a:	92 e0       	ldi	r25, 0x02	; 2
    6a0c:	62 e0       	ldi	r22, 0x02	; 2
    6a0e:	40 e0       	ldi	r20, 0x00	; 0
    6a10:	0e 94 f7 23 	call	0x47ee	; 0x47ee <DC_Motor_Speed>
        /*  turn of relay if opened*/
        GPIO_WritePin(Relay_PORT,Relay_PIN,LOGIC_LOW);
    6a14:	82 e0       	ldi	r24, 0x02	; 2
    6a16:	67 e0       	ldi	r22, 0x07	; 7
    6a18:	40 e0       	ldi	r20, 0x00	; 0
    6a1a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <GPIO_WritePin>
        /*  turn off red led & yellow*/
        LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    6a1e:	80 e0       	ldi	r24, 0x00	; 0
    6a20:	66 e0       	ldi	r22, 0x06	; 6
    6a22:	40 e0       	ldi	r20, 0x00	; 0
    6a24:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    6a28:	81 e0       	ldi	r24, 0x01	; 1
    6a2a:	67 e0       	ldi	r22, 0x07	; 7
    6a2c:	40 e0       	ldi	r20, 0x00	; 0
    6a2e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
        /*  Send to mobile app that engine is power off  */
        Bluetooth_Send((const uint8 * )"@@@");
    6a32:	89 e2       	ldi	r24, 0x29	; 41
    6a34:	91 e0       	ldi	r25, 0x01	; 1
    6a36:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    6a3a:	80 e0       	ldi	r24, 0x00	; 0
    6a3c:	90 e0       	ldi	r25, 0x00	; 0
    6a3e:	a0 e2       	ldi	r26, 0x20	; 32
    6a40:	b1 e4       	ldi	r27, 0x41	; 65
    6a42:	8b 87       	std	Y+11, r24	; 0x0b
    6a44:	9c 87       	std	Y+12, r25	; 0x0c
    6a46:	ad 87       	std	Y+13, r26	; 0x0d
    6a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a52:	20 e0       	ldi	r18, 0x00	; 0
    6a54:	30 e0       	ldi	r19, 0x00	; 0
    6a56:	4a ef       	ldi	r20, 0xFA	; 250
    6a58:	54 e4       	ldi	r21, 0x44	; 68
    6a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a5e:	dc 01       	movw	r26, r24
    6a60:	cb 01       	movw	r24, r22
    6a62:	8f 83       	std	Y+7, r24	; 0x07
    6a64:	98 87       	std	Y+8, r25	; 0x08
    6a66:	a9 87       	std	Y+9, r26	; 0x09
    6a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a6c:	78 85       	ldd	r23, Y+8	; 0x08
    6a6e:	89 85       	ldd	r24, Y+9	; 0x09
    6a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a72:	20 e0       	ldi	r18, 0x00	; 0
    6a74:	30 e0       	ldi	r19, 0x00	; 0
    6a76:	40 e8       	ldi	r20, 0x80	; 128
    6a78:	5f e3       	ldi	r21, 0x3F	; 63
    6a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a7e:	88 23       	and	r24, r24
    6a80:	2c f4       	brge	.+10     	; 0x6a8c <Engine_Control_Handling+0xa8e>
		__ticks = 1;
    6a82:	81 e0       	ldi	r24, 0x01	; 1
    6a84:	90 e0       	ldi	r25, 0x00	; 0
    6a86:	9e 83       	std	Y+6, r25	; 0x06
    6a88:	8d 83       	std	Y+5, r24	; 0x05
    6a8a:	3f c0       	rjmp	.+126    	; 0x6b0a <Engine_Control_Handling+0xb0c>
	else if (__tmp > 65535)
    6a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a8e:	78 85       	ldd	r23, Y+8	; 0x08
    6a90:	89 85       	ldd	r24, Y+9	; 0x09
    6a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a94:	20 e0       	ldi	r18, 0x00	; 0
    6a96:	3f ef       	ldi	r19, 0xFF	; 255
    6a98:	4f e7       	ldi	r20, 0x7F	; 127
    6a9a:	57 e4       	ldi	r21, 0x47	; 71
    6a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6aa0:	18 16       	cp	r1, r24
    6aa2:	4c f5       	brge	.+82     	; 0x6af6 <Engine_Control_Handling+0xaf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6aac:	20 e0       	ldi	r18, 0x00	; 0
    6aae:	30 e0       	ldi	r19, 0x00	; 0
    6ab0:	40 e2       	ldi	r20, 0x20	; 32
    6ab2:	51 e4       	ldi	r21, 0x41	; 65
    6ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ab8:	dc 01       	movw	r26, r24
    6aba:	cb 01       	movw	r24, r22
    6abc:	bc 01       	movw	r22, r24
    6abe:	cd 01       	movw	r24, r26
    6ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ac4:	dc 01       	movw	r26, r24
    6ac6:	cb 01       	movw	r24, r22
    6ac8:	9e 83       	std	Y+6, r25	; 0x06
    6aca:	8d 83       	std	Y+5, r24	; 0x05
    6acc:	0f c0       	rjmp	.+30     	; 0x6aec <Engine_Control_Handling+0xaee>
    6ace:	88 ec       	ldi	r24, 0xC8	; 200
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
    6ad2:	9c 83       	std	Y+4, r25	; 0x04
    6ad4:	8b 83       	std	Y+3, r24	; 0x03
    6ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    6ada:	01 97       	sbiw	r24, 0x01	; 1
    6adc:	f1 f7       	brne	.-4      	; 0x6ada <Engine_Control_Handling+0xadc>
    6ade:	9c 83       	std	Y+4, r25	; 0x04
    6ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ae6:	01 97       	sbiw	r24, 0x01	; 1
    6ae8:	9e 83       	std	Y+6, r25	; 0x06
    6aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6aec:	8d 81       	ldd	r24, Y+5	; 0x05
    6aee:	9e 81       	ldd	r25, Y+6	; 0x06
    6af0:	00 97       	sbiw	r24, 0x00	; 0
    6af2:	69 f7       	brne	.-38     	; 0x6ace <Engine_Control_Handling+0xad0>
    6af4:	14 c0       	rjmp	.+40     	; 0x6b1e <Engine_Control_Handling+0xb20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6af6:	6f 81       	ldd	r22, Y+7	; 0x07
    6af8:	78 85       	ldd	r23, Y+8	; 0x08
    6afa:	89 85       	ldd	r24, Y+9	; 0x09
    6afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b02:	dc 01       	movw	r26, r24
    6b04:	cb 01       	movw	r24, r22
    6b06:	9e 83       	std	Y+6, r25	; 0x06
    6b08:	8d 83       	std	Y+5, r24	; 0x05
    6b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6b0e:	9a 83       	std	Y+2, r25	; 0x02
    6b10:	89 83       	std	Y+1, r24	; 0x01
    6b12:	89 81       	ldd	r24, Y+1	; 0x01
    6b14:	9a 81       	ldd	r25, Y+2	; 0x02
    6b16:	01 97       	sbiw	r24, 0x01	; 1
    6b18:	f1 f7       	brne	.-4      	; 0x6b16 <Engine_Control_Handling+0xb18>
    6b1a:	9a 83       	std	Y+2, r25	; 0x02
    6b1c:	89 83       	std	Y+1, r24	; 0x01
    6b1e:	ff cf       	rjmp	.-2      	; 0x6b1e <Engine_Control_Handling+0xb20>
        _delay_ms(10);

        while(1);
    }
}
    6b20:	ca 58       	subi	r28, 0x8A	; 138
    6b22:	df 4f       	sbci	r29, 0xFF	; 255
    6b24:	0f b6       	in	r0, 0x3f	; 63
    6b26:	f8 94       	cli
    6b28:	de bf       	out	0x3e, r29	; 62
    6b2a:	0f be       	out	0x3f, r0	; 63
    6b2c:	cd bf       	out	0x3d, r28	; 61
    6b2e:	cf 91       	pop	r28
    6b30:	df 91       	pop	r29
    6b32:	1f 91       	pop	r17
    6b34:	0f 91       	pop	r16
    6b36:	08 95       	ret

00006b38 <Braking_Button_Handling>:




static void Braking_Button_Handling(void)
{
    6b38:	df 93       	push	r29
    6b3a:	cf 93       	push	r28
    6b3c:	cd b7       	in	r28, 0x3d	; 61
    6b3e:	de b7       	in	r29, 0x3e	; 62
    /*  Make initial state that Button is released  */
    static uint8 Braking_BTN_State = BTN_Released_State ;
    /*  Will Enter this condition only when press button Only (this will make failling edge)  */
    if(Braking_BTN_State == BTN_Released_State)
    6b40:	80 91 d6 02 	lds	r24, 0x02D6
    6b44:	81 30       	cpi	r24, 0x01	; 1
    6b46:	a9 f4       	brne	.+42     	; 0x6b72 <Braking_Button_Handling+0x3a>
    {
        /*  So when I release utton will make Rising Edge so I need to make setup to detect this state to turn led off  */
        INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN); /*    If swap between that command and next command will face problem that If I make very short press will face problem  that led will turn on only not turn off also and this not required*/
    6b48:	83 e0       	ldi	r24, 0x03	; 3
    6b4a:	60 e0       	ldi	r22, 0x00	; 0
    6b4c:	0e 94 cc 12 	call	0x2598	; 0x2598 <INT1_init>

        Buzzer_GiveSound = YES_Condition; 
    6b50:	81 e0       	ldi	r24, 0x01	; 1
    6b52:	80 93 17 03 	sts	0x0317, r24

        /*  Make update to state    */
        Braking_BTN_State = BTN_Pressed_State;
    6b56:	10 92 d6 02 	sts	0x02D6, r1
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    6b5a:	80 91 d6 02 	lds	r24, 0x02D6
    6b5e:	80 93 c8 02 	sts	0x02C8, r24
        /*  Turn led on  */
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    6b62:	81 e0       	ldi	r24, 0x01	; 1
    6b64:	67 e0       	ldi	r22, 0x07	; 7
    6b66:	41 e0       	ldi	r20, 0x01	; 1
    6b68:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

        //     DashBoard_DistanceHide();


        // }
        tessst();
    6b6c:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <tessst>
    6b70:	14 c0       	rjmp	.+40     	; 0x6b9a <Braking_Button_Handling+0x62>
    }
    /*  Will Enter this condition only when release button Only (this will make failling edge)  */
    else if(Braking_BTN_State == BTN_Pressed_State)
    6b72:	80 91 d6 02 	lds	r24, 0x02D6
    6b76:	88 23       	and	r24, r24
    6b78:	81 f4       	brne	.+32     	; 0x6b9a <Braking_Button_Handling+0x62>
    {

        INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    6b7a:	82 e0       	ldi	r24, 0x02	; 2
    6b7c:	60 e0       	ldi	r22, 0x00	; 0
    6b7e:	0e 94 cc 12 	call	0x2598	; 0x2598 <INT1_init>
        Braking_BTN_State = BTN_Released_State;
    6b82:	81 e0       	ldi	r24, 0x01	; 1
    6b84:	80 93 d6 02 	sts	0x02D6, r24
        /*  Update global varaible that carry state of car speed    */
        Global_Braking_BTN_State = Braking_BTN_State;
    6b88:	80 91 d6 02 	lds	r24, 0x02D6
    6b8c:	80 93 c8 02 	sts	0x02C8, r24
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    6b90:	81 e0       	ldi	r24, 0x01	; 1
    6b92:	67 e0       	ldi	r22, 0x07	; 7
    6b94:	40 e0       	ldi	r20, 0x00	; 0
    6b96:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
    }
}
    6b9a:	cf 91       	pop	r28
    6b9c:	df 91       	pop	r29
    6b9e:	08 95       	ret

00006ba0 <tessst>:


void tessst (void)
{
    6ba0:	df 93       	push	r29
    6ba2:	cf 93       	push	r28
    6ba4:	cd b7       	in	r28, 0x3d	; 61
    6ba6:	de b7       	in	r29, 0x3e	; 62
    6ba8:	6c 97       	sbiw	r28, 0x1c	; 28
    6baa:	0f b6       	in	r0, 0x3f	; 63
    6bac:	f8 94       	cli
    6bae:	de bf       	out	0x3e, r29	; 62
    6bb0:	0f be       	out	0x3f, r0	; 63
    6bb2:	cd bf       	out	0x3d, r28	; 61
        if((GearBox_Current_State == D_GearBox))
    6bb4:	80 91 06 03 	lds	r24, 0x0306
    6bb8:	81 30       	cpi	r24, 0x01	; 1
    6bba:	09 f0       	breq	.+2      	; 0x6bbe <tessst+0x1e>
    6bbc:	0c c1       	rjmp	.+536    	; 0x6dd6 <tessst+0x236>
        {
            /*	Enable Global Interrupt  */
	        sei();
    6bbe:	78 94       	sei
            /*  If it was CCS enabled should disabled and update in LCD*/
            if(CCS_Currnet_state == CCS_Enable)
    6bc0:	80 91 07 03 	lds	r24, 0x0307
    6bc4:	81 30       	cpi	r24, 0x01	; 1
    6bc6:	09 f0       	breq	.+2      	; 0x6bca <tessst+0x2a>
    6bc8:	7c c0       	rjmp	.+248    	; 0x6cc2 <tessst+0x122>
            {
                /*  Disable ACCS if Enabled  */
                CCS_Currnet_state = CCS_Disable;
    6bca:	10 92 07 03 	sts	0x0307, r1

                /*  Update LCD with new change*/
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    6bce:	80 91 07 03 	lds	r24, 0x0307
    6bd2:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>

                /*  👀👀Send update of Cruise contol to mobile app using bluetooth*/
                //Bluetooth
                Bluetooth_Send((const uint8 * )"$0");
    6bd6:	89 e0       	ldi	r24, 0x09	; 9
    6bd8:	91 e0       	ldi	r25, 0x01	; 1
    6bda:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	a0 e2       	ldi	r26, 0x20	; 32
    6be4:	b1 e4       	ldi	r27, 0x41	; 65
    6be6:	89 8f       	std	Y+25, r24	; 0x19
    6be8:	9a 8f       	std	Y+26, r25	; 0x1a
    6bea:	ab 8f       	std	Y+27, r26	; 0x1b
    6bec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bee:	69 8d       	ldd	r22, Y+25	; 0x19
    6bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bf6:	20 e0       	ldi	r18, 0x00	; 0
    6bf8:	30 e0       	ldi	r19, 0x00	; 0
    6bfa:	4a ef       	ldi	r20, 0xFA	; 250
    6bfc:	54 e4       	ldi	r21, 0x44	; 68
    6bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c02:	dc 01       	movw	r26, r24
    6c04:	cb 01       	movw	r24, r22
    6c06:	8d 8b       	std	Y+21, r24	; 0x15
    6c08:	9e 8b       	std	Y+22, r25	; 0x16
    6c0a:	af 8b       	std	Y+23, r26	; 0x17
    6c0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    6c10:	7e 89       	ldd	r23, Y+22	; 0x16
    6c12:	8f 89       	ldd	r24, Y+23	; 0x17
    6c14:	98 8d       	ldd	r25, Y+24	; 0x18
    6c16:	20 e0       	ldi	r18, 0x00	; 0
    6c18:	30 e0       	ldi	r19, 0x00	; 0
    6c1a:	40 e8       	ldi	r20, 0x80	; 128
    6c1c:	5f e3       	ldi	r21, 0x3F	; 63
    6c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c22:	88 23       	and	r24, r24
    6c24:	2c f4       	brge	.+10     	; 0x6c30 <tessst+0x90>
		__ticks = 1;
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	9c 8b       	std	Y+20, r25	; 0x14
    6c2c:	8b 8b       	std	Y+19, r24	; 0x13
    6c2e:	3f c0       	rjmp	.+126    	; 0x6cae <tessst+0x10e>
	else if (__tmp > 65535)
    6c30:	6d 89       	ldd	r22, Y+21	; 0x15
    6c32:	7e 89       	ldd	r23, Y+22	; 0x16
    6c34:	8f 89       	ldd	r24, Y+23	; 0x17
    6c36:	98 8d       	ldd	r25, Y+24	; 0x18
    6c38:	20 e0       	ldi	r18, 0x00	; 0
    6c3a:	3f ef       	ldi	r19, 0xFF	; 255
    6c3c:	4f e7       	ldi	r20, 0x7F	; 127
    6c3e:	57 e4       	ldi	r21, 0x47	; 71
    6c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c44:	18 16       	cp	r1, r24
    6c46:	4c f5       	brge	.+82     	; 0x6c9a <tessst+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c48:	69 8d       	ldd	r22, Y+25	; 0x19
    6c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c50:	20 e0       	ldi	r18, 0x00	; 0
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	40 e2       	ldi	r20, 0x20	; 32
    6c56:	51 e4       	ldi	r21, 0x41	; 65
    6c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c5c:	dc 01       	movw	r26, r24
    6c5e:	cb 01       	movw	r24, r22
    6c60:	bc 01       	movw	r22, r24
    6c62:	cd 01       	movw	r24, r26
    6c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c68:	dc 01       	movw	r26, r24
    6c6a:	cb 01       	movw	r24, r22
    6c6c:	9c 8b       	std	Y+20, r25	; 0x14
    6c6e:	8b 8b       	std	Y+19, r24	; 0x13
    6c70:	0f c0       	rjmp	.+30     	; 0x6c90 <tessst+0xf0>
    6c72:	88 ec       	ldi	r24, 0xC8	; 200
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	9a 8b       	std	Y+18, r25	; 0x12
    6c78:	89 8b       	std	Y+17, r24	; 0x11
    6c7a:	89 89       	ldd	r24, Y+17	; 0x11
    6c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    6c7e:	01 97       	sbiw	r24, 0x01	; 1
    6c80:	f1 f7       	brne	.-4      	; 0x6c7e <tessst+0xde>
    6c82:	9a 8b       	std	Y+18, r25	; 0x12
    6c84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c86:	8b 89       	ldd	r24, Y+19	; 0x13
    6c88:	9c 89       	ldd	r25, Y+20	; 0x14
    6c8a:	01 97       	sbiw	r24, 0x01	; 1
    6c8c:	9c 8b       	std	Y+20, r25	; 0x14
    6c8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c90:	8b 89       	ldd	r24, Y+19	; 0x13
    6c92:	9c 89       	ldd	r25, Y+20	; 0x14
    6c94:	00 97       	sbiw	r24, 0x00	; 0
    6c96:	69 f7       	brne	.-38     	; 0x6c72 <tessst+0xd2>
    6c98:	14 c0       	rjmp	.+40     	; 0x6cc2 <tessst+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    6c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    6c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    6ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    6ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ca6:	dc 01       	movw	r26, r24
    6ca8:	cb 01       	movw	r24, r22
    6caa:	9c 8b       	std	Y+20, r25	; 0x14
    6cac:	8b 8b       	std	Y+19, r24	; 0x13
    6cae:	8b 89       	ldd	r24, Y+19	; 0x13
    6cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    6cb2:	98 8b       	std	Y+16, r25	; 0x10
    6cb4:	8f 87       	std	Y+15, r24	; 0x0f
    6cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6cb8:	98 89       	ldd	r25, Y+16	; 0x10
    6cba:	01 97       	sbiw	r24, 0x01	; 1
    6cbc:	f1 f7       	brne	.-4      	; 0x6cba <tessst+0x11a>
    6cbe:	98 8b       	std	Y+16, r25	; 0x10
    6cc0:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(10);
                
            }

            /*  If it was Braking Assist enabled should disabled and update in LCD*/
            if(BrakingAssist_Current_State == BrakingAssist_Enable)
    6cc2:	80 91 09 03 	lds	r24, 0x0309
    6cc6:	81 30       	cpi	r24, 0x01	; 1
    6cc8:	09 f0       	breq	.+2      	; 0x6ccc <tessst+0x12c>
    6cca:	7e c0       	rjmp	.+252    	; 0x6dc8 <tessst+0x228>
            {
                /*  Disable BA Sysystem */
                BrakingAssist_Current_State = BrakingAssist_Disable ;
    6ccc:	10 92 09 03 	sts	0x0309, r1

                /*  Update LCD with new change*/
                DashBoard_Update_BrakingAssist_State(BrakingAssist_Current_State);
    6cd0:	80 91 09 03 	lds	r24, 0x0309
    6cd4:	0e 94 1f 29 	call	0x523e	; 0x523e <DashBoard_Update_BrakingAssist_State>
                /*  Called As user if currently in page 1 that carry information about brake system should be handled   */
                DashBoard_SwitchPages();
    6cd8:	0e 94 ce 2a 	call	0x559c	; 0x559c <DashBoard_SwitchPages>

                /*  👀👀Send update of Brake Assist to mobile app using bluetooth*/
                //Bluetooth
                Bluetooth_Send((const uint8 * )"%0");
    6cdc:	82 e1       	ldi	r24, 0x12	; 18
    6cde:	91 e0       	ldi	r25, 0x01	; 1
    6ce0:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	a0 e2       	ldi	r26, 0x20	; 32
    6cea:	b1 e4       	ldi	r27, 0x41	; 65
    6cec:	8b 87       	std	Y+11, r24	; 0x0b
    6cee:	9c 87       	std	Y+12, r25	; 0x0c
    6cf0:	ad 87       	std	Y+13, r26	; 0x0d
    6cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cfc:	20 e0       	ldi	r18, 0x00	; 0
    6cfe:	30 e0       	ldi	r19, 0x00	; 0
    6d00:	4a ef       	ldi	r20, 0xFA	; 250
    6d02:	54 e4       	ldi	r21, 0x44	; 68
    6d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d08:	dc 01       	movw	r26, r24
    6d0a:	cb 01       	movw	r24, r22
    6d0c:	8f 83       	std	Y+7, r24	; 0x07
    6d0e:	98 87       	std	Y+8, r25	; 0x08
    6d10:	a9 87       	std	Y+9, r26	; 0x09
    6d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d14:	6f 81       	ldd	r22, Y+7	; 0x07
    6d16:	78 85       	ldd	r23, Y+8	; 0x08
    6d18:	89 85       	ldd	r24, Y+9	; 0x09
    6d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d1c:	20 e0       	ldi	r18, 0x00	; 0
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	40 e8       	ldi	r20, 0x80	; 128
    6d22:	5f e3       	ldi	r21, 0x3F	; 63
    6d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d28:	88 23       	and	r24, r24
    6d2a:	2c f4       	brge	.+10     	; 0x6d36 <tessst+0x196>
		__ticks = 1;
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	9e 83       	std	Y+6, r25	; 0x06
    6d32:	8d 83       	std	Y+5, r24	; 0x05
    6d34:	3f c0       	rjmp	.+126    	; 0x6db4 <tessst+0x214>
	else if (__tmp > 65535)
    6d36:	6f 81       	ldd	r22, Y+7	; 0x07
    6d38:	78 85       	ldd	r23, Y+8	; 0x08
    6d3a:	89 85       	ldd	r24, Y+9	; 0x09
    6d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d3e:	20 e0       	ldi	r18, 0x00	; 0
    6d40:	3f ef       	ldi	r19, 0xFF	; 255
    6d42:	4f e7       	ldi	r20, 0x7F	; 127
    6d44:	57 e4       	ldi	r21, 0x47	; 71
    6d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d4a:	18 16       	cp	r1, r24
    6d4c:	4c f5       	brge	.+82     	; 0x6da0 <tessst+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	40 e2       	ldi	r20, 0x20	; 32
    6d5c:	51 e4       	ldi	r21, 0x41	; 65
    6d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d62:	dc 01       	movw	r26, r24
    6d64:	cb 01       	movw	r24, r22
    6d66:	bc 01       	movw	r22, r24
    6d68:	cd 01       	movw	r24, r26
    6d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d6e:	dc 01       	movw	r26, r24
    6d70:	cb 01       	movw	r24, r22
    6d72:	9e 83       	std	Y+6, r25	; 0x06
    6d74:	8d 83       	std	Y+5, r24	; 0x05
    6d76:	0f c0       	rjmp	.+30     	; 0x6d96 <tessst+0x1f6>
    6d78:	88 ec       	ldi	r24, 0xC8	; 200
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	9c 83       	std	Y+4, r25	; 0x04
    6d7e:	8b 83       	std	Y+3, r24	; 0x03
    6d80:	8b 81       	ldd	r24, Y+3	; 0x03
    6d82:	9c 81       	ldd	r25, Y+4	; 0x04
    6d84:	01 97       	sbiw	r24, 0x01	; 1
    6d86:	f1 f7       	brne	.-4      	; 0x6d84 <tessst+0x1e4>
    6d88:	9c 83       	std	Y+4, r25	; 0x04
    6d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    6d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    6d90:	01 97       	sbiw	r24, 0x01	; 1
    6d92:	9e 83       	std	Y+6, r25	; 0x06
    6d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d96:	8d 81       	ldd	r24, Y+5	; 0x05
    6d98:	9e 81       	ldd	r25, Y+6	; 0x06
    6d9a:	00 97       	sbiw	r24, 0x00	; 0
    6d9c:	69 f7       	brne	.-38     	; 0x6d78 <tessst+0x1d8>
    6d9e:	14 c0       	rjmp	.+40     	; 0x6dc8 <tessst+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6da0:	6f 81       	ldd	r22, Y+7	; 0x07
    6da2:	78 85       	ldd	r23, Y+8	; 0x08
    6da4:	89 85       	ldd	r24, Y+9	; 0x09
    6da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dac:	dc 01       	movw	r26, r24
    6dae:	cb 01       	movw	r24, r22
    6db0:	9e 83       	std	Y+6, r25	; 0x06
    6db2:	8d 83       	std	Y+5, r24	; 0x05
    6db4:	8d 81       	ldd	r24, Y+5	; 0x05
    6db6:	9e 81       	ldd	r25, Y+6	; 0x06
    6db8:	9a 83       	std	Y+2, r25	; 0x02
    6dba:	89 83       	std	Y+1, r24	; 0x01
    6dbc:	89 81       	ldd	r24, Y+1	; 0x01
    6dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    6dc0:	01 97       	sbiw	r24, 0x01	; 1
    6dc2:	f1 f7       	brne	.-4      	; 0x6dc0 <tessst+0x220>
    6dc4:	9a 83       	std	Y+2, r25	; 0x02
    6dc6:	89 83       	std	Y+1, r24	; 0x01



            /*  Make counter with zero to start count from zero for DM */
            // TimeOut_Counter = 0 ;//old one when I use timer1
            Timer0_Overflow_counter_DM = 0 ;
    6dc8:	10 92 16 03 	sts	0x0316, r1
    6dcc:	10 92 15 03 	sts	0x0315, r1

            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    6dd0:	81 e0       	ldi	r24, 0x01	; 1
    6dd2:	80 93 d0 02 	sts	0x02D0, r24

        }
}
    6dd6:	6c 96       	adiw	r28, 0x1c	; 28
    6dd8:	0f b6       	in	r0, 0x3f	; 63
    6dda:	f8 94       	cli
    6ddc:	de bf       	out	0x3e, r29	; 62
    6dde:	0f be       	out	0x3f, r0	; 63
    6de0:	cd bf       	out	0x3d, r28	; 61
    6de2:	cf 91       	pop	r28
    6de4:	df 91       	pop	r29
    6de6:	08 95       	ret

00006de8 <Braking_LongPressHandle>:


void Braking_LongPressHandle(void)
{
    6de8:	df 93       	push	r29
    6dea:	cf 93       	push	r28
    6dec:	cd b7       	in	r28, 0x3d	; 61
    6dee:	de b7       	in	r29, 0x3e	; 62
    6df0:	2e 97       	sbiw	r28, 0x0e	; 14
    6df2:	0f b6       	in	r0, 0x3f	; 63
    6df4:	f8 94       	cli
    6df6:	de bf       	out	0x3e, r29	; 62
    6df8:	0f be       	out	0x3f, r0	; 63
    6dfa:	cd bf       	out	0x3d, r28	; 61
    if(Global_Braking_BTN_State == BTN_Pressed_State)
    6dfc:	80 91 c8 02 	lds	r24, 0x02C8
    6e00:	88 23       	and	r24, r24
    6e02:	09 f0       	breq	.+2      	; 0x6e06 <Braking_LongPressHandle+0x1e>
    6e04:	85 c0       	rjmp	.+266    	; 0x6f10 <Braking_LongPressHandle+0x128>
    {
        /*  ⚠️Here make disable for Cruise control sysytem (CCS) as there bug 
        *   when press in brake system if CCS is enaled will disaled but during  pressing brake if CCS activated again will not handled
        */
        if(CCS_Currnet_state == CCS_Enable)
    6e06:	80 91 07 03 	lds	r24, 0x0307
    6e0a:	81 30       	cpi	r24, 0x01	; 1
    6e0c:	09 f0       	breq	.+2      	; 0x6e10 <Braking_LongPressHandle+0x28>
    6e0e:	7c c0       	rjmp	.+248    	; 0x6f08 <Braking_LongPressHandle+0x120>
        {
            /*  Disable ACCS if Enabled  */
            CCS_Currnet_state = CCS_Disable;
    6e10:	10 92 07 03 	sts	0x0307, r1

            /*  Update LCD with new change*/
            DashBoard_Update_CCS_State(CCS_Currnet_state);
    6e14:	80 91 07 03 	lds	r24, 0x0307
    6e18:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>

            /*  👀👀Send update of Cruise contol to mobile app using bluetooth*/
            //Bluetooth
                Bluetooth_Send((const uint8 * )"$0");
    6e1c:	89 e0       	ldi	r24, 0x09	; 9
    6e1e:	91 e0       	ldi	r25, 0x01	; 1
    6e20:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    6e24:	80 e0       	ldi	r24, 0x00	; 0
    6e26:	90 e0       	ldi	r25, 0x00	; 0
    6e28:	a0 e2       	ldi	r26, 0x20	; 32
    6e2a:	b1 e4       	ldi	r27, 0x41	; 65
    6e2c:	8b 87       	std	Y+11, r24	; 0x0b
    6e2e:	9c 87       	std	Y+12, r25	; 0x0c
    6e30:	ad 87       	std	Y+13, r26	; 0x0d
    6e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e3c:	20 e0       	ldi	r18, 0x00	; 0
    6e3e:	30 e0       	ldi	r19, 0x00	; 0
    6e40:	4a ef       	ldi	r20, 0xFA	; 250
    6e42:	54 e4       	ldi	r21, 0x44	; 68
    6e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e48:	dc 01       	movw	r26, r24
    6e4a:	cb 01       	movw	r24, r22
    6e4c:	8f 83       	std	Y+7, r24	; 0x07
    6e4e:	98 87       	std	Y+8, r25	; 0x08
    6e50:	a9 87       	std	Y+9, r26	; 0x09
    6e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e54:	6f 81       	ldd	r22, Y+7	; 0x07
    6e56:	78 85       	ldd	r23, Y+8	; 0x08
    6e58:	89 85       	ldd	r24, Y+9	; 0x09
    6e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e5c:	20 e0       	ldi	r18, 0x00	; 0
    6e5e:	30 e0       	ldi	r19, 0x00	; 0
    6e60:	40 e8       	ldi	r20, 0x80	; 128
    6e62:	5f e3       	ldi	r21, 0x3F	; 63
    6e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e68:	88 23       	and	r24, r24
    6e6a:	2c f4       	brge	.+10     	; 0x6e76 <Braking_LongPressHandle+0x8e>
		__ticks = 1;
    6e6c:	81 e0       	ldi	r24, 0x01	; 1
    6e6e:	90 e0       	ldi	r25, 0x00	; 0
    6e70:	9e 83       	std	Y+6, r25	; 0x06
    6e72:	8d 83       	std	Y+5, r24	; 0x05
    6e74:	3f c0       	rjmp	.+126    	; 0x6ef4 <Braking_LongPressHandle+0x10c>
	else if (__tmp > 65535)
    6e76:	6f 81       	ldd	r22, Y+7	; 0x07
    6e78:	78 85       	ldd	r23, Y+8	; 0x08
    6e7a:	89 85       	ldd	r24, Y+9	; 0x09
    6e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e7e:	20 e0       	ldi	r18, 0x00	; 0
    6e80:	3f ef       	ldi	r19, 0xFF	; 255
    6e82:	4f e7       	ldi	r20, 0x7F	; 127
    6e84:	57 e4       	ldi	r21, 0x47	; 71
    6e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e8a:	18 16       	cp	r1, r24
    6e8c:	4c f5       	brge	.+82     	; 0x6ee0 <Braking_LongPressHandle+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e96:	20 e0       	ldi	r18, 0x00	; 0
    6e98:	30 e0       	ldi	r19, 0x00	; 0
    6e9a:	40 e2       	ldi	r20, 0x20	; 32
    6e9c:	51 e4       	ldi	r21, 0x41	; 65
    6e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ea2:	dc 01       	movw	r26, r24
    6ea4:	cb 01       	movw	r24, r22
    6ea6:	bc 01       	movw	r22, r24
    6ea8:	cd 01       	movw	r24, r26
    6eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6eae:	dc 01       	movw	r26, r24
    6eb0:	cb 01       	movw	r24, r22
    6eb2:	9e 83       	std	Y+6, r25	; 0x06
    6eb4:	8d 83       	std	Y+5, r24	; 0x05
    6eb6:	0f c0       	rjmp	.+30     	; 0x6ed6 <Braking_LongPressHandle+0xee>
    6eb8:	88 ec       	ldi	r24, 0xC8	; 200
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	9c 83       	std	Y+4, r25	; 0x04
    6ebe:	8b 83       	std	Y+3, r24	; 0x03
    6ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ec4:	01 97       	sbiw	r24, 0x01	; 1
    6ec6:	f1 f7       	brne	.-4      	; 0x6ec4 <Braking_LongPressHandle+0xdc>
    6ec8:	9c 83       	std	Y+4, r25	; 0x04
    6eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    6ece:	9e 81       	ldd	r25, Y+6	; 0x06
    6ed0:	01 97       	sbiw	r24, 0x01	; 1
    6ed2:	9e 83       	std	Y+6, r25	; 0x06
    6ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    6eda:	00 97       	sbiw	r24, 0x00	; 0
    6edc:	69 f7       	brne	.-38     	; 0x6eb8 <Braking_LongPressHandle+0xd0>
    6ede:	14 c0       	rjmp	.+40     	; 0x6f08 <Braking_LongPressHandle+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    6ee2:	78 85       	ldd	r23, Y+8	; 0x08
    6ee4:	89 85       	ldd	r24, Y+9	; 0x09
    6ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6eec:	dc 01       	movw	r26, r24
    6eee:	cb 01       	movw	r24, r22
    6ef0:	9e 83       	std	Y+6, r25	; 0x06
    6ef2:	8d 83       	std	Y+5, r24	; 0x05
    6ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    6ef8:	9a 83       	std	Y+2, r25	; 0x02
    6efa:	89 83       	std	Y+1, r24	; 0x01
    6efc:	89 81       	ldd	r24, Y+1	; 0x01
    6efe:	9a 81       	ldd	r25, Y+2	; 0x02
    6f00:	01 97       	sbiw	r24, 0x01	; 1
    6f02:	f1 f7       	brne	.-4      	; 0x6f00 <Braking_LongPressHandle+0x118>
    6f04:	9a 83       	std	Y+2, r25	; 0x02
    6f06:	89 83       	std	Y+1, r24	; 0x01
        *   As system can't handle this so Here I handle this bug
        */
        
        /*  Make counter with zero to start count from zero for DM */
        //TimeOut_Counter = 0 ; //old one when I use timer1
        Timer0_Overflow_counter_DM = 0 ;
    6f08:	10 92 16 03 	sts	0x0316, r1
    6f0c:	10 92 15 03 	sts	0x0315, r1
    }
}
    6f10:	2e 96       	adiw	r28, 0x0e	; 14
    6f12:	0f b6       	in	r0, 0x3f	; 63
    6f14:	f8 94       	cli
    6f16:	de bf       	out	0x3e, r29	; 62
    6f18:	0f be       	out	0x3f, r0	; 63
    6f1a:	cd bf       	out	0x3d, r28	; 61
    6f1c:	cf 91       	pop	r28
    6f1e:	df 91       	pop	r29
    6f20:	08 95       	ret

00006f22 <DashBoard_updateTime>:




static void DashBoard_updateTime(void)
{
    6f22:	df 93       	push	r29
    6f24:	cf 93       	push	r28
    6f26:	cd b7       	in	r28, 0x3d	; 61
    6f28:	de b7       	in	r29, 0x3e	; 62
    cli();
    6f2a:	f8 94       	cli
    if(Page_Current_State == Page_4_LCD)
    6f2c:	80 91 c7 02 	lds	r24, 0x02C7
    6f30:	83 30       	cpi	r24, 0x03	; 3
    6f32:	09 f0       	breq	.+2      	; 0x6f36 <DashBoard_updateTime+0x14>
    6f34:	65 c0       	rjmp	.+202    	; 0x7000 <DashBoard_updateTime+0xde>
    {
        LCD_MoveCursor(1,0);
    6f36:	81 e0       	ldi	r24, 0x01	; 1
    6f38:	60 e0       	ldi	r22, 0x00	; 0
    6f3a:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_DisplayString((const uint8 * )"T=");if(Clock_hour < 10)
    6f3e:	8d e2       	ldi	r24, 0x2D	; 45
    6f40:	91 e0       	ldi	r25, 0x01	; 1
    6f42:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    6f46:	80 91 d3 02 	lds	r24, 0x02D3
    6f4a:	8a 30       	cpi	r24, 0x0A	; 10
    6f4c:	70 f4       	brcc	.+28     	; 0x6f6a <DashBoard_updateTime+0x48>
        {
            LCD_DisplayCharacter(' ');
    6f4e:	80 e2       	ldi	r24, 0x20	; 32
    6f50:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
            LCD_intToString(Clock_hour);
    6f54:	80 91 d3 02 	lds	r24, 0x02D3
    6f58:	88 2f       	mov	r24, r24
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	a0 e0       	ldi	r26, 0x00	; 0
    6f5e:	b0 e0       	ldi	r27, 0x00	; 0
    6f60:	bc 01       	movw	r22, r24
    6f62:	cd 01       	movw	r24, r26
    6f64:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
    6f68:	0a c0       	rjmp	.+20     	; 0x6f7e <DashBoard_updateTime+0x5c>
        }
        else
        {
            LCD_intToString(Clock_hour);
    6f6a:	80 91 d3 02 	lds	r24, 0x02D3
    6f6e:	88 2f       	mov	r24, r24
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	a0 e0       	ldi	r26, 0x00	; 0
    6f74:	b0 e0       	ldi	r27, 0x00	; 0
    6f76:	bc 01       	movw	r22, r24
    6f78:	cd 01       	movw	r24, r26
    6f7a:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
        }
        LCD_DisplayCharacter(':');
    6f7e:	8a e3       	ldi	r24, 0x3A	; 58
    6f80:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
        if(Clock_min < 10)
    6f84:	80 91 d2 02 	lds	r24, 0x02D2
    6f88:	8a 30       	cpi	r24, 0x0A	; 10
    6f8a:	70 f4       	brcc	.+28     	; 0x6fa8 <DashBoard_updateTime+0x86>
        {
            LCD_DisplayCharacter(' ');
    6f8c:	80 e2       	ldi	r24, 0x20	; 32
    6f8e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
            LCD_intToString(Clock_min);
    6f92:	80 91 d2 02 	lds	r24, 0x02D2
    6f96:	88 2f       	mov	r24, r24
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	a0 e0       	ldi	r26, 0x00	; 0
    6f9c:	b0 e0       	ldi	r27, 0x00	; 0
    6f9e:	bc 01       	movw	r22, r24
    6fa0:	cd 01       	movw	r24, r26
    6fa2:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
    6fa6:	0a c0       	rjmp	.+20     	; 0x6fbc <DashBoard_updateTime+0x9a>
        }
        else
        {
            LCD_intToString(Clock_min);
    6fa8:	80 91 d2 02 	lds	r24, 0x02D2
    6fac:	88 2f       	mov	r24, r24
    6fae:	90 e0       	ldi	r25, 0x00	; 0
    6fb0:	a0 e0       	ldi	r26, 0x00	; 0
    6fb2:	b0 e0       	ldi	r27, 0x00	; 0
    6fb4:	bc 01       	movw	r22, r24
    6fb6:	cd 01       	movw	r24, r26
    6fb8:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
        }
        LCD_DisplayCharacter(':');
    6fbc:	8a e3       	ldi	r24, 0x3A	; 58
    6fbe:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
        if(Clock_sec < 10)
    6fc2:	80 91 d1 02 	lds	r24, 0x02D1
    6fc6:	8a 30       	cpi	r24, 0x0A	; 10
    6fc8:	70 f4       	brcc	.+28     	; 0x6fe6 <DashBoard_updateTime+0xc4>
        {
            LCD_DisplayCharacter(' ');
    6fca:	80 e2       	ldi	r24, 0x20	; 32
    6fcc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
            LCD_intToString(Clock_sec);
    6fd0:	80 91 d1 02 	lds	r24, 0x02D1
    6fd4:	88 2f       	mov	r24, r24
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	a0 e0       	ldi	r26, 0x00	; 0
    6fda:	b0 e0       	ldi	r27, 0x00	; 0
    6fdc:	bc 01       	movw	r22, r24
    6fde:	cd 01       	movw	r24, r26
    6fe0:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
    6fe4:	0a c0       	rjmp	.+20     	; 0x6ffa <DashBoard_updateTime+0xd8>
        }
        else
        {
            LCD_intToString(Clock_sec);
    6fe6:	80 91 d1 02 	lds	r24, 0x02D1
    6fea:	88 2f       	mov	r24, r24
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	a0 e0       	ldi	r26, 0x00	; 0
    6ff0:	b0 e0       	ldi	r27, 0x00	; 0
    6ff2:	bc 01       	movw	r22, r24
    6ff4:	cd 01       	movw	r24, r26
    6ff6:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
        }
        LCD_DisplayCharacter(' ');
    6ffa:	80 e2       	ldi	r24, 0x20	; 32
    6ffc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
        
    }
    sei();
    7000:	78 94       	sei
}
    7002:	cf 91       	pop	r28
    7004:	df 91       	pop	r29
    7006:	08 95       	ret

00007008 <ACCS_CatchDistance>:

static void ACCS_CatchDistance(void)
{
    7008:	df 93       	push	r29
    700a:	cf 93       	push	r28
    700c:	00 d0       	rcall	.+0      	; 0x700e <ACCS_CatchDistance+0x6>
    700e:	00 d0       	rcall	.+0      	; 0x7010 <ACCS_CatchDistance+0x8>
    7010:	0f 92       	push	r0
    7012:	cd b7       	in	r28, 0x3d	; 61
    7014:	de b7       	in	r29, 0x3e	; 62
    * so this lead to make data overwrite in LCD 
    * "this is one scenario from a lot of scenarios "
    */

    /*  It should be outside critical section as this function depend on  interrupt */
    float64 Value_of_Dis = Ultrasonic_Distance();
    7016:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Ultrasonic_Distance>
    701a:	dc 01       	movw	r26, r24
    701c:	cb 01       	movw	r24, r22
    701e:	8a 83       	std	Y+2, r24	; 0x02
    7020:	9b 83       	std	Y+3, r25	; 0x03
    7022:	ac 83       	std	Y+4, r26	; 0x04
    7024:	bd 83       	std	Y+5, r27	; 0x05
    Distance_for_dicision = (uint8) Value_of_Dis ;
    7026:	6a 81       	ldd	r22, Y+2	; 0x02
    7028:	7b 81       	ldd	r23, Y+3	; 0x03
    702a:	8c 81       	ldd	r24, Y+4	; 0x04
    702c:	9d 81       	ldd	r25, Y+5	; 0x05
    702e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7032:	dc 01       	movw	r26, r24
    7034:	cb 01       	movw	r24, r22
    7036:	80 93 0e 03 	sts	0x030E, r24
    cli();
    703a:	f8 94       	cli
    if(Page_Current_State == Page_1_LCD)
    703c:	80 91 c7 02 	lds	r24, 0x02C7
    7040:	88 23       	and	r24, r24
    7042:	09 f0       	breq	.+2      	; 0x7046 <ACCS_CatchDistance+0x3e>
    7044:	4f c0       	rjmp	.+158    	; 0x70e4 <ACCS_CatchDistance+0xdc>
    {
        LCD_MoveCursor(1,4);
    7046:	81 e0       	ldi	r24, 0x01	; 1
    7048:	64 e0       	ldi	r22, 0x04	; 4
    704a:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        if(Value_of_Dis > 20)
    704e:	6a 81       	ldd	r22, Y+2	; 0x02
    7050:	7b 81       	ldd	r23, Y+3	; 0x03
    7052:	8c 81       	ldd	r24, Y+4	; 0x04
    7054:	9d 81       	ldd	r25, Y+5	; 0x05
    7056:	20 e0       	ldi	r18, 0x00	; 0
    7058:	30 e0       	ldi	r19, 0x00	; 0
    705a:	40 ea       	ldi	r20, 0xA0	; 160
    705c:	51 e4       	ldi	r21, 0x41	; 65
    705e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7062:	18 16       	cp	r1, r24
    7064:	5c f4       	brge	.+22     	; 0x707c <ACCS_CatchDistance+0x74>
        {
            LCD_DisplayCharacter('>');
    7066:	8e e3       	ldi	r24, 0x3E	; 62
    7068:	0e 94 b8 1a 	call	0x3570	; 0x3570 <LCD_DisplayCharacter>
            Value_of_Dis = 20 ;
    706c:	80 e0       	ldi	r24, 0x00	; 0
    706e:	90 e0       	ldi	r25, 0x00	; 0
    7070:	a0 ea       	ldi	r26, 0xA0	; 160
    7072:	b1 e4       	ldi	r27, 0x41	; 65
    7074:	8a 83       	std	Y+2, r24	; 0x02
    7076:	9b 83       	std	Y+3, r25	; 0x03
    7078:	ac 83       	std	Y+4, r26	; 0x04
    707a:	bd 83       	std	Y+5, r27	; 0x05
        }
        uint8 Character_displayed = LCD_FloatToString(Value_of_Dis);
    707c:	8a 81       	ldd	r24, Y+2	; 0x02
    707e:	9b 81       	ldd	r25, Y+3	; 0x03
    7080:	ac 81       	ldd	r26, Y+4	; 0x04
    7082:	bd 81       	ldd	r27, Y+5	; 0x05
    7084:	bc 01       	movw	r22, r24
    7086:	cd 01       	movw	r24, r26
    7088:	0e 94 2a 21 	call	0x4254	; 0x4254 <LCD_FloatToString>
    708c:	89 83       	std	Y+1, r24	; 0x01

        LCD_DisplayString((const uint8 * )"M");
    708e:	80 e3       	ldi	r24, 0x30	; 48
    7090:	91 e0       	ldi	r25, 0x01	; 1
    7092:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
        if(Character_displayed == 5)
    7096:	89 81       	ldd	r24, Y+1	; 0x01
    7098:	85 30       	cpi	r24, 0x05	; 5
    709a:	29 f4       	brne	.+10     	; 0x70a6 <ACCS_CatchDistance+0x9e>
            LCD_DisplayString((const uint8 * )" ");
    709c:	82 e3       	ldi	r24, 0x32	; 50
    709e:	91 e0       	ldi	r25, 0x01	; 1
    70a0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    70a4:	1f c0       	rjmp	.+62     	; 0x70e4 <ACCS_CatchDistance+0xdc>
        else if(Character_displayed == 4)
    70a6:	89 81       	ldd	r24, Y+1	; 0x01
    70a8:	84 30       	cpi	r24, 0x04	; 4
    70aa:	29 f4       	brne	.+10     	; 0x70b6 <ACCS_CatchDistance+0xae>
            LCD_DisplayString((const uint8 * )"  ");
    70ac:	84 e3       	ldi	r24, 0x34	; 52
    70ae:	91 e0       	ldi	r25, 0x01	; 1
    70b0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    70b4:	17 c0       	rjmp	.+46     	; 0x70e4 <ACCS_CatchDistance+0xdc>
        else if(Character_displayed == 3)
    70b6:	89 81       	ldd	r24, Y+1	; 0x01
    70b8:	83 30       	cpi	r24, 0x03	; 3
    70ba:	29 f4       	brne	.+10     	; 0x70c6 <ACCS_CatchDistance+0xbe>
            LCD_DisplayString((const uint8 * )"   ");
    70bc:	87 e3       	ldi	r24, 0x37	; 55
    70be:	91 e0       	ldi	r25, 0x01	; 1
    70c0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    70c4:	0f c0       	rjmp	.+30     	; 0x70e4 <ACCS_CatchDistance+0xdc>
        else if(Character_displayed == 2)
    70c6:	89 81       	ldd	r24, Y+1	; 0x01
    70c8:	82 30       	cpi	r24, 0x02	; 2
    70ca:	29 f4       	brne	.+10     	; 0x70d6 <ACCS_CatchDistance+0xce>
            LCD_DisplayString((const uint8 * )"    ");
    70cc:	8b e3       	ldi	r24, 0x3B	; 59
    70ce:	91 e0       	ldi	r25, 0x01	; 1
    70d0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    70d4:	07 c0       	rjmp	.+14     	; 0x70e4 <ACCS_CatchDistance+0xdc>
        else if(Character_displayed == 1)
    70d6:	89 81       	ldd	r24, Y+1	; 0x01
    70d8:	81 30       	cpi	r24, 0x01	; 1
    70da:	21 f4       	brne	.+8      	; 0x70e4 <ACCS_CatchDistance+0xdc>
            LCD_DisplayString((const uint8 * )"     ");
    70dc:	80 e4       	ldi	r24, 0x40	; 64
    70de:	91 e0       	ldi	r25, 0x01	; 1
    70e0:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
    }

    sei();
    70e4:	78 94       	sei
}
    70e6:	0f 90       	pop	r0
    70e8:	0f 90       	pop	r0
    70ea:	0f 90       	pop	r0
    70ec:	0f 90       	pop	r0
    70ee:	0f 90       	pop	r0
    70f0:	cf 91       	pop	r28
    70f2:	df 91       	pop	r29
    70f4:	08 95       	ret

000070f6 <ACCS_DicisionTake>:



static void ACCS_DicisionTake(void)
{
    70f6:	df 93       	push	r29
    70f8:	cf 93       	push	r28
    70fa:	cd b7       	in	r28, 0x3d	; 61
    70fc:	de b7       	in	r29, 0x3e	; 62
    70fe:	6d 97       	sbiw	r28, 0x1d	; 29
    7100:	0f b6       	in	r0, 0x3f	; 63
    7102:	f8 94       	cli
    7104:	de bf       	out	0x3e, r29	; 62
    7106:	0f be       	out	0x3f, r0	; 63
    7108:	cd bf       	out	0x3d, r28	; 61
   
    cli();
    710a:	f8 94       	cli
    if(Car_Speed > 20)
    710c:	80 91 0b 03 	lds	r24, 0x030B
    7110:	90 91 0c 03 	lds	r25, 0x030C
    7114:	85 31       	cpi	r24, 0x15	; 21
    7116:	91 05       	cpc	r25, r1
    7118:	0c f4       	brge	.+2      	; 0x711c <ACCS_DicisionTake+0x26>
    711a:	66 c1       	rjmp	.+716    	; 0x73e8 <ACCS_DicisionTake+0x2f2>
    {
        if(Distance_for_dicision >= 9) /*  Case 1  */
    711c:	80 91 0e 03 	lds	r24, 0x030E
    7120:	89 30       	cpi	r24, 0x09	; 9
    7122:	90 f0       	brcs	.+36     	; 0x7148 <ACCS_DicisionTake+0x52>
        {
            
            /*  Do no thing */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    7124:	80 e0       	ldi	r24, 0x00	; 0
    7126:	66 e0       	ldi	r22, 0x06	; 6
    7128:	40 e0       	ldi	r20, 0x00	; 0
    712a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    712e:	81 e0       	ldi	r24, 0x01	; 1
    7130:	67 e0       	ldi	r22, 0x07	; 7
    7132:	40 e0       	ldi	r20, 0x00	; 0
    7134:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

            BrakeAssist_Braking = FALSE;
    7138:	10 92 0d 03 	sts	0x030D, r1

            /*  Update status of this feature ion dashboard */
            Distance_BA_Current_status = Distance_BA_Meet;
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	80 93 cf 02 	sts	0x02CF, r24
            DashBoard_BrakingAssist_Status_update();
    7142:	0e 94 39 29 	call	0x5272	; 0x5272 <DashBoard_BrakingAssist_Status_update>
    7146:	52 c1       	rjmp	.+676    	; 0x73ec <ACCS_DicisionTake+0x2f6>
            
        }
        else if(Distance_for_dicision >= 7)/*  Case 2  */
    7148:	80 91 0e 03 	lds	r24, 0x030E
    714c:	87 30       	cpi	r24, 0x07	; 7
    714e:	90 f0       	brcs	.+36     	; 0x7174 <ACCS_DicisionTake+0x7e>
        {
            
            /*  in this case only turn yellow led only */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    7150:	80 e0       	ldi	r24, 0x00	; 0
    7152:	66 e0       	ldi	r22, 0x06	; 6
    7154:	41 e0       	ldi	r20, 0x01	; 1
    7156:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    715a:	81 e0       	ldi	r24, 0x01	; 1
    715c:	67 e0       	ldi	r22, 0x07	; 7
    715e:	40 e0       	ldi	r20, 0x00	; 0
    7160:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

            BrakeAssist_Braking = FALSE ;
    7164:	10 92 0d 03 	sts	0x030D, r1

            /*  Update status of this feature ion dashboard */
            Distance_BA_Current_status = Distance_BA_Meet;
    7168:	81 e0       	ldi	r24, 0x01	; 1
    716a:	80 93 cf 02 	sts	0x02CF, r24
            DashBoard_BrakingAssist_Status_update();
    716e:	0e 94 39 29 	call	0x5272	; 0x5272 <DashBoard_BrakingAssist_Status_update>
    7172:	3c c1       	rjmp	.+632    	; 0x73ec <ACCS_DicisionTake+0x2f6>
        }
        else if (Distance_for_dicision >= 5) /*  Case 3  */
    7174:	80 91 0e 03 	lds	r24, 0x030E
    7178:	85 30       	cpi	r24, 0x05	; 5
    717a:	90 f0       	brcs	.+36     	; 0x71a0 <ACCS_DicisionTake+0xaa>
        {
            

            /*  in this case turn yellow and red led on*/
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    717c:	80 e0       	ldi	r24, 0x00	; 0
    717e:	66 e0       	ldi	r22, 0x06	; 6
    7180:	41 e0       	ldi	r20, 0x01	; 1
    7182:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
    7186:	81 e0       	ldi	r24, 0x01	; 1
    7188:	67 e0       	ldi	r22, 0x07	; 7
    718a:	41 e0       	ldi	r20, 0x01	; 1
    718c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

            /*  turn off acceleration*/
            BrakeAssist_Braking = TRUE;
    7190:	81 e0       	ldi	r24, 0x01	; 1
    7192:	80 93 0d 03 	sts	0x030D, r24
            
            /*  Update status of this feature ion dashboard */
            Distance_BA_Current_status = Distance_BA_Failed;
    7196:	10 92 cf 02 	sts	0x02CF, r1
            DashBoard_BrakingAssist_Status_update();
    719a:	0e 94 39 29 	call	0x5272	; 0x5272 <DashBoard_BrakingAssist_Status_update>
    719e:	26 c1       	rjmp	.+588    	; 0x73ec <ACCS_DicisionTake+0x2f6>

        }
        else if (Distance_for_dicision >= 3) /*  Case 4  */
    71a0:	80 91 0e 03 	lds	r24, 0x030E
    71a4:	83 30       	cpi	r24, 0x03	; 3
    71a6:	88 f0       	brcs	.+34     	; 0x71ca <ACCS_DicisionTake+0xd4>
        {


            /*  turn yellow led on and make red led toggles continuesly with very speed */
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_ON);
    71a8:	80 e0       	ldi	r24, 0x00	; 0
    71aa:	66 e0       	ldi	r22, 0x06	; 6
    71ac:	41 e0       	ldi	r20, 0x01	; 1
    71ae:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>

            LED_Toggle(Red_LED_PORT,Red_LED_PIN);
    71b2:	81 e0       	ldi	r24, 0x01	; 1
    71b4:	67 e0       	ldi	r22, 0x07	; 7
    71b6:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <LED_Toggle>

            /*  turn off acceleration*/
            BrakeAssist_Braking =TRUE;
    71ba:	81 e0       	ldi	r24, 0x01	; 1
    71bc:	80 93 0d 03 	sts	0x030D, r24

            /*  Update status of this feature ion dashboard */
            Distance_BA_Current_status = Distance_BA_Failed;
    71c0:	10 92 cf 02 	sts	0x02CF, r1
            DashBoard_BrakingAssist_Status_update();
    71c4:	0e 94 39 29 	call	0x5272	; 0x5272 <DashBoard_BrakingAssist_Status_update>
    71c8:	11 c1       	rjmp	.+546    	; 0x73ec <ACCS_DicisionTake+0x2f6>

        }   
        else if (Distance_for_dicision >= 0)/*  Case 5  */
    71ca:	80 91 0e 03 	lds	r24, 0x030E
        {
            /*  Turn Of all leds    */
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    71ce:	81 e0       	ldi	r24, 0x01	; 1
    71d0:	67 e0       	ldi	r22, 0x07	; 7
    71d2:	40 e0       	ldi	r20, 0x00	; 0
    71d4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    71d8:	80 e0       	ldi	r24, 0x00	; 0
    71da:	66 e0       	ldi	r22, 0x06	; 6
    71dc:	40 e0       	ldi	r20, 0x00	; 0
    71de:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>


            /*  Display Crash message   */
            LCD_ClearScreen();
    71e2:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <LCD_ClearScreen>
            LCD_DisplayString((const uint8 *)"Crushed car ):");
    71e6:	86 e4       	ldi	r24, 0x46	; 70
    71e8:	91 e0       	ldi	r25, 0x01	; 1
    71ea:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>
            

            /*  flash Relay  */

            /*  Disable every thing*/
            DC_Motor_Speed(&DC_pins_Motor,DC_Motor_Stop,0);
    71ee:	8a ec       	ldi	r24, 0xCA	; 202
    71f0:	92 e0       	ldi	r25, 0x02	; 2
    71f2:	62 e0       	ldi	r22, 0x02	; 2
    71f4:	40 e0       	ldi	r20, 0x00	; 0
    71f6:	0e 94 f7 23 	call	0x47ee	; 0x47ee <DC_Motor_Speed>
            LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN,LED_OFF);
    71fa:	80 e0       	ldi	r24, 0x00	; 0
    71fc:	66 e0       	ldi	r22, 0x06	; 6
    71fe:	40 e0       	ldi	r20, 0x00	; 0
    7200:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
            LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    7204:	81 e0       	ldi	r24, 0x01	; 1
    7206:	67 e0       	ldi	r22, 0x07	; 7
    7208:	40 e0       	ldi	r20, 0x00	; 0
    720a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LED_OnOffPositiveLogic>
            
            /*  send message to mobile app to inform that car made accedint */
            Bluetooth_Send((const uint8 * )"##");
    720e:	85 e5       	ldi	r24, 0x55	; 85
    7210:	91 e0       	ldi	r25, 0x01	; 1
    7212:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    7216:	80 e0       	ldi	r24, 0x00	; 0
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	a0 e2       	ldi	r26, 0x20	; 32
    721c:	b1 e4       	ldi	r27, 0x41	; 65
    721e:	89 8f       	std	Y+25, r24	; 0x19
    7220:	9a 8f       	std	Y+26, r25	; 0x1a
    7222:	ab 8f       	std	Y+27, r26	; 0x1b
    7224:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7226:	69 8d       	ldd	r22, Y+25	; 0x19
    7228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    722a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    722c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    722e:	20 e0       	ldi	r18, 0x00	; 0
    7230:	30 e0       	ldi	r19, 0x00	; 0
    7232:	4a ef       	ldi	r20, 0xFA	; 250
    7234:	54 e4       	ldi	r21, 0x44	; 68
    7236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    723a:	dc 01       	movw	r26, r24
    723c:	cb 01       	movw	r24, r22
    723e:	8d 8b       	std	Y+21, r24	; 0x15
    7240:	9e 8b       	std	Y+22, r25	; 0x16
    7242:	af 8b       	std	Y+23, r26	; 0x17
    7244:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7246:	6d 89       	ldd	r22, Y+21	; 0x15
    7248:	7e 89       	ldd	r23, Y+22	; 0x16
    724a:	8f 89       	ldd	r24, Y+23	; 0x17
    724c:	98 8d       	ldd	r25, Y+24	; 0x18
    724e:	20 e0       	ldi	r18, 0x00	; 0
    7250:	30 e0       	ldi	r19, 0x00	; 0
    7252:	40 e8       	ldi	r20, 0x80	; 128
    7254:	5f e3       	ldi	r21, 0x3F	; 63
    7256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    725a:	88 23       	and	r24, r24
    725c:	2c f4       	brge	.+10     	; 0x7268 <ACCS_DicisionTake+0x172>
		__ticks = 1;
    725e:	81 e0       	ldi	r24, 0x01	; 1
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	9c 8b       	std	Y+20, r25	; 0x14
    7264:	8b 8b       	std	Y+19, r24	; 0x13
    7266:	3f c0       	rjmp	.+126    	; 0x72e6 <ACCS_DicisionTake+0x1f0>
	else if (__tmp > 65535)
    7268:	6d 89       	ldd	r22, Y+21	; 0x15
    726a:	7e 89       	ldd	r23, Y+22	; 0x16
    726c:	8f 89       	ldd	r24, Y+23	; 0x17
    726e:	98 8d       	ldd	r25, Y+24	; 0x18
    7270:	20 e0       	ldi	r18, 0x00	; 0
    7272:	3f ef       	ldi	r19, 0xFF	; 255
    7274:	4f e7       	ldi	r20, 0x7F	; 127
    7276:	57 e4       	ldi	r21, 0x47	; 71
    7278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    727c:	18 16       	cp	r1, r24
    727e:	4c f5       	brge	.+82     	; 0x72d2 <ACCS_DicisionTake+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7280:	69 8d       	ldd	r22, Y+25	; 0x19
    7282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7288:	20 e0       	ldi	r18, 0x00	; 0
    728a:	30 e0       	ldi	r19, 0x00	; 0
    728c:	40 e2       	ldi	r20, 0x20	; 32
    728e:	51 e4       	ldi	r21, 0x41	; 65
    7290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7294:	dc 01       	movw	r26, r24
    7296:	cb 01       	movw	r24, r22
    7298:	bc 01       	movw	r22, r24
    729a:	cd 01       	movw	r24, r26
    729c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72a0:	dc 01       	movw	r26, r24
    72a2:	cb 01       	movw	r24, r22
    72a4:	9c 8b       	std	Y+20, r25	; 0x14
    72a6:	8b 8b       	std	Y+19, r24	; 0x13
    72a8:	0f c0       	rjmp	.+30     	; 0x72c8 <ACCS_DicisionTake+0x1d2>
    72aa:	88 ec       	ldi	r24, 0xC8	; 200
    72ac:	90 e0       	ldi	r25, 0x00	; 0
    72ae:	9a 8b       	std	Y+18, r25	; 0x12
    72b0:	89 8b       	std	Y+17, r24	; 0x11
    72b2:	89 89       	ldd	r24, Y+17	; 0x11
    72b4:	9a 89       	ldd	r25, Y+18	; 0x12
    72b6:	01 97       	sbiw	r24, 0x01	; 1
    72b8:	f1 f7       	brne	.-4      	; 0x72b6 <ACCS_DicisionTake+0x1c0>
    72ba:	9a 8b       	std	Y+18, r25	; 0x12
    72bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72be:	8b 89       	ldd	r24, Y+19	; 0x13
    72c0:	9c 89       	ldd	r25, Y+20	; 0x14
    72c2:	01 97       	sbiw	r24, 0x01	; 1
    72c4:	9c 8b       	std	Y+20, r25	; 0x14
    72c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72c8:	8b 89       	ldd	r24, Y+19	; 0x13
    72ca:	9c 89       	ldd	r25, Y+20	; 0x14
    72cc:	00 97       	sbiw	r24, 0x00	; 0
    72ce:	69 f7       	brne	.-38     	; 0x72aa <ACCS_DicisionTake+0x1b4>
    72d0:	14 c0       	rjmp	.+40     	; 0x72fa <ACCS_DicisionTake+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72d2:	6d 89       	ldd	r22, Y+21	; 0x15
    72d4:	7e 89       	ldd	r23, Y+22	; 0x16
    72d6:	8f 89       	ldd	r24, Y+23	; 0x17
    72d8:	98 8d       	ldd	r25, Y+24	; 0x18
    72da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72de:	dc 01       	movw	r26, r24
    72e0:	cb 01       	movw	r24, r22
    72e2:	9c 8b       	std	Y+20, r25	; 0x14
    72e4:	8b 8b       	std	Y+19, r24	; 0x13
    72e6:	8b 89       	ldd	r24, Y+19	; 0x13
    72e8:	9c 89       	ldd	r25, Y+20	; 0x14
    72ea:	98 8b       	std	Y+16, r25	; 0x10
    72ec:	8f 87       	std	Y+15, r24	; 0x0f
    72ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    72f0:	98 89       	ldd	r25, Y+16	; 0x10
    72f2:	01 97       	sbiw	r24, 0x01	; 1
    72f4:	f1 f7       	brne	.-4      	; 0x72f2 <ACCS_DicisionTake+0x1fc>
    72f6:	98 8b       	std	Y+16, r25	; 0x10
    72f8:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);
            while(1)
            {
                GPIO_TogglePin(Relay_PORT,Relay_PIN);
    72fa:	82 e0       	ldi	r24, 0x02	; 2
    72fc:	67 e0       	ldi	r22, 0x07	; 7
    72fe:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <GPIO_TogglePin>
    7302:	80 e0       	ldi	r24, 0x00	; 0
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	aa e7       	ldi	r26, 0x7A	; 122
    7308:	b4 e4       	ldi	r27, 0x44	; 68
    730a:	8b 87       	std	Y+11, r24	; 0x0b
    730c:	9c 87       	std	Y+12, r25	; 0x0c
    730e:	ad 87       	std	Y+13, r26	; 0x0d
    7310:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7312:	6b 85       	ldd	r22, Y+11	; 0x0b
    7314:	7c 85       	ldd	r23, Y+12	; 0x0c
    7316:	8d 85       	ldd	r24, Y+13	; 0x0d
    7318:	9e 85       	ldd	r25, Y+14	; 0x0e
    731a:	20 e0       	ldi	r18, 0x00	; 0
    731c:	30 e0       	ldi	r19, 0x00	; 0
    731e:	4a ef       	ldi	r20, 0xFA	; 250
    7320:	54 e4       	ldi	r21, 0x44	; 68
    7322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7326:	dc 01       	movw	r26, r24
    7328:	cb 01       	movw	r24, r22
    732a:	8f 83       	std	Y+7, r24	; 0x07
    732c:	98 87       	std	Y+8, r25	; 0x08
    732e:	a9 87       	std	Y+9, r26	; 0x09
    7330:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7332:	6f 81       	ldd	r22, Y+7	; 0x07
    7334:	78 85       	ldd	r23, Y+8	; 0x08
    7336:	89 85       	ldd	r24, Y+9	; 0x09
    7338:	9a 85       	ldd	r25, Y+10	; 0x0a
    733a:	20 e0       	ldi	r18, 0x00	; 0
    733c:	30 e0       	ldi	r19, 0x00	; 0
    733e:	40 e8       	ldi	r20, 0x80	; 128
    7340:	5f e3       	ldi	r21, 0x3F	; 63
    7342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7346:	88 23       	and	r24, r24
    7348:	2c f4       	brge	.+10     	; 0x7354 <ACCS_DicisionTake+0x25e>
		__ticks = 1;
    734a:	81 e0       	ldi	r24, 0x01	; 1
    734c:	90 e0       	ldi	r25, 0x00	; 0
    734e:	9e 83       	std	Y+6, r25	; 0x06
    7350:	8d 83       	std	Y+5, r24	; 0x05
    7352:	3f c0       	rjmp	.+126    	; 0x73d2 <ACCS_DicisionTake+0x2dc>
	else if (__tmp > 65535)
    7354:	6f 81       	ldd	r22, Y+7	; 0x07
    7356:	78 85       	ldd	r23, Y+8	; 0x08
    7358:	89 85       	ldd	r24, Y+9	; 0x09
    735a:	9a 85       	ldd	r25, Y+10	; 0x0a
    735c:	20 e0       	ldi	r18, 0x00	; 0
    735e:	3f ef       	ldi	r19, 0xFF	; 255
    7360:	4f e7       	ldi	r20, 0x7F	; 127
    7362:	57 e4       	ldi	r21, 0x47	; 71
    7364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7368:	18 16       	cp	r1, r24
    736a:	4c f5       	brge	.+82     	; 0x73be <ACCS_DicisionTake+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    736c:	6b 85       	ldd	r22, Y+11	; 0x0b
    736e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7370:	8d 85       	ldd	r24, Y+13	; 0x0d
    7372:	9e 85       	ldd	r25, Y+14	; 0x0e
    7374:	20 e0       	ldi	r18, 0x00	; 0
    7376:	30 e0       	ldi	r19, 0x00	; 0
    7378:	40 e2       	ldi	r20, 0x20	; 32
    737a:	51 e4       	ldi	r21, 0x41	; 65
    737c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7380:	dc 01       	movw	r26, r24
    7382:	cb 01       	movw	r24, r22
    7384:	bc 01       	movw	r22, r24
    7386:	cd 01       	movw	r24, r26
    7388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    738c:	dc 01       	movw	r26, r24
    738e:	cb 01       	movw	r24, r22
    7390:	9e 83       	std	Y+6, r25	; 0x06
    7392:	8d 83       	std	Y+5, r24	; 0x05
    7394:	0f c0       	rjmp	.+30     	; 0x73b4 <ACCS_DicisionTake+0x2be>
    7396:	88 ec       	ldi	r24, 0xC8	; 200
    7398:	90 e0       	ldi	r25, 0x00	; 0
    739a:	9c 83       	std	Y+4, r25	; 0x04
    739c:	8b 83       	std	Y+3, r24	; 0x03
    739e:	8b 81       	ldd	r24, Y+3	; 0x03
    73a0:	9c 81       	ldd	r25, Y+4	; 0x04
    73a2:	01 97       	sbiw	r24, 0x01	; 1
    73a4:	f1 f7       	brne	.-4      	; 0x73a2 <ACCS_DicisionTake+0x2ac>
    73a6:	9c 83       	std	Y+4, r25	; 0x04
    73a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73aa:	8d 81       	ldd	r24, Y+5	; 0x05
    73ac:	9e 81       	ldd	r25, Y+6	; 0x06
    73ae:	01 97       	sbiw	r24, 0x01	; 1
    73b0:	9e 83       	std	Y+6, r25	; 0x06
    73b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73b4:	8d 81       	ldd	r24, Y+5	; 0x05
    73b6:	9e 81       	ldd	r25, Y+6	; 0x06
    73b8:	00 97       	sbiw	r24, 0x00	; 0
    73ba:	69 f7       	brne	.-38     	; 0x7396 <ACCS_DicisionTake+0x2a0>
    73bc:	9e cf       	rjmp	.-196    	; 0x72fa <ACCS_DicisionTake+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73be:	6f 81       	ldd	r22, Y+7	; 0x07
    73c0:	78 85       	ldd	r23, Y+8	; 0x08
    73c2:	89 85       	ldd	r24, Y+9	; 0x09
    73c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    73c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73ca:	dc 01       	movw	r26, r24
    73cc:	cb 01       	movw	r24, r22
    73ce:	9e 83       	std	Y+6, r25	; 0x06
    73d0:	8d 83       	std	Y+5, r24	; 0x05
    73d2:	8d 81       	ldd	r24, Y+5	; 0x05
    73d4:	9e 81       	ldd	r25, Y+6	; 0x06
    73d6:	9a 83       	std	Y+2, r25	; 0x02
    73d8:	89 83       	std	Y+1, r24	; 0x01
    73da:	89 81       	ldd	r24, Y+1	; 0x01
    73dc:	9a 81       	ldd	r25, Y+2	; 0x02
    73de:	01 97       	sbiw	r24, 0x01	; 1
    73e0:	f1 f7       	brne	.-4      	; 0x73de <ACCS_DicisionTake+0x2e8>
    73e2:	9a 83       	std	Y+2, r25	; 0x02
    73e4:	89 83       	std	Y+1, r24	; 0x01
    73e6:	89 cf       	rjmp	.-238    	; 0x72fa <ACCS_DicisionTake+0x204>
    }
    
    else 
    {
        /*  No car lead to death with car speed low than 20km/h*/
        BrakeAssist_Braking = FALSE;
    73e8:	10 92 0d 03 	sts	0x030D, r1
    }
    sei();
    73ec:	78 94       	sei

}
    73ee:	6d 96       	adiw	r28, 0x1d	; 29
    73f0:	0f b6       	in	r0, 0x3f	; 63
    73f2:	f8 94       	cli
    73f4:	de bf       	out	0x3e, r29	; 62
    73f6:	0f be       	out	0x3f, r0	; 63
    73f8:	cd bf       	out	0x3d, r28	; 61
    73fa:	cf 91       	pop	r28
    73fc:	df 91       	pop	r29
    73fe:	08 95       	ret

00007400 <App_CarSpeedUpdate>:

static void App_CarSpeedUpdate(void)
{
    7400:	df 93       	push	r29
    7402:	cf 93       	push	r28
    7404:	cd b7       	in	r28, 0x3d	; 61
    7406:	de b7       	in	r29, 0x3e	; 62
    7408:	62 97       	sbiw	r28, 0x12	; 18
    740a:	0f b6       	in	r0, 0x3f	; 63
    740c:	f8 94       	cli
    740e:	de bf       	out	0x3e, r29	; 62
    7410:	0f be       	out	0x3f, r0	; 63
    7412:	cd bf       	out	0x3d, r28	; 61
    static volatile uint16 Prev_Adc_value_pure = 0;
    /*  Read current value for Potentiometer that work as Accelerator  */
    volatile uint16 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);  
    7414:	80 e0       	ldi	r24, 0x00	; 0
    7416:	0e 94 ee 13 	call	0x27dc	; 0x27dc <ADC_ReadChannelSingleConvertion>
    741a:	9a 8b       	std	Y+18, r25	; 0x12
    741c:	89 8b       	std	Y+17, r24	; 0x11
    /*  Get speed that be assigned depend on next condition state  */ 
    Temp_Speed = (uint8)( ( (200) * ((uint32) Adc_value_pure)  ) / 1023 ) ;
    741e:	89 89       	ldd	r24, Y+17	; 0x11
    7420:	9a 89       	ldd	r25, Y+18	; 0x12
    7422:	cc 01       	movw	r24, r24
    7424:	a0 e0       	ldi	r26, 0x00	; 0
    7426:	b0 e0       	ldi	r27, 0x00	; 0
    7428:	28 ec       	ldi	r18, 0xC8	; 200
    742a:	30 e0       	ldi	r19, 0x00	; 0
    742c:	40 e0       	ldi	r20, 0x00	; 0
    742e:	50 e0       	ldi	r21, 0x00	; 0
    7430:	bc 01       	movw	r22, r24
    7432:	cd 01       	movw	r24, r26
    7434:	0e 94 ef 3c 	call	0x79de	; 0x79de <__mulsi3>
    7438:	dc 01       	movw	r26, r24
    743a:	cb 01       	movw	r24, r22
    743c:	2f ef       	ldi	r18, 0xFF	; 255
    743e:	33 e0       	ldi	r19, 0x03	; 3
    7440:	40 e0       	ldi	r20, 0x00	; 0
    7442:	50 e0       	ldi	r21, 0x00	; 0
    7444:	bc 01       	movw	r22, r24
    7446:	cd 01       	movw	r24, r26
    7448:	0e 94 35 3d 	call	0x7a6a	; 0x7a6a <__udivmodsi4>
    744c:	da 01       	movw	r26, r20
    744e:	c9 01       	movw	r24, r18
    7450:	80 93 2c 03 	sts	0x032C, r24

    static volatile uint8 ADC_Value_change_accepted  ;
    Diff_between_ADCS =  (sint16)Prev_Adc_value_pure - (sint16)Adc_value_pure;
    7454:	80 91 27 03 	lds	r24, 0x0327
    7458:	90 91 28 03 	lds	r25, 0x0328
    745c:	9c 01       	movw	r18, r24
    745e:	89 89       	ldd	r24, Y+17	; 0x11
    7460:	9a 89       	ldd	r25, Y+18	; 0x12
    7462:	a9 01       	movw	r20, r18
    7464:	48 1b       	sub	r20, r24
    7466:	59 0b       	sbc	r21, r25
    7468:	ca 01       	movw	r24, r20
    746a:	90 93 2f 03 	sts	0x032F, r25
    746e:	80 93 2e 03 	sts	0x032E, r24

    /*  Here change speed of car by decrease its value when press braking   */
    if((Global_Braking_BTN_State == BTN_Pressed_State) || (BrakeAssist_Braking == TRUE))
    7472:	80 91 c8 02 	lds	r24, 0x02C8
    7476:	88 23       	and	r24, r24
    7478:	21 f0       	breq	.+8      	; 0x7482 <App_CarSpeedUpdate+0x82>
    747a:	80 91 0d 03 	lds	r24, 0x030D
    747e:	81 30       	cpi	r24, 0x01	; 1
    7480:	a9 f4       	brne	.+42     	; 0x74ac <App_CarSpeedUpdate+0xac>
    {
        Car_Speed -= 6 ;   
    7482:	80 91 0b 03 	lds	r24, 0x030B
    7486:	90 91 0c 03 	lds	r25, 0x030C
    748a:	06 97       	sbiw	r24, 0x06	; 6
    748c:	90 93 0c 03 	sts	0x030C, r25
    7490:	80 93 0b 03 	sts	0x030B, r24
        if(Car_Speed < 0)
    7494:	80 91 0b 03 	lds	r24, 0x030B
    7498:	90 91 0c 03 	lds	r25, 0x030C
    749c:	99 23       	and	r25, r25
    749e:	0c f0       	brlt	.+2      	; 0x74a2 <App_CarSpeedUpdate+0xa2>
    74a0:	62 c1       	rjmp	.+708    	; 0x7766 <App_CarSpeedUpdate+0x366>
        {
            Car_Speed = 0; 
    74a2:	10 92 0c 03 	sts	0x030C, r1
    74a6:	10 92 0b 03 	sts	0x030B, r1
    74aa:	5d c1       	rjmp	.+698    	; 0x7766 <App_CarSpeedUpdate+0x366>
    /*
        1.return to  speed of potentiometer that not chaned but braking make ignore to it
        2.update speed due to change in potentiometer value
    */
    {
        if((Diff_between_ADCS > 19) || (Diff_between_ADCS < -19)) // by try found that potentiometer in real life its value vary with max change = 15 so I want change greater than 25 in CCR or CR to accept it as human change not noise in potentiometer
    74ac:	80 91 2e 03 	lds	r24, 0x032E
    74b0:	90 91 2f 03 	lds	r25, 0x032F
    74b4:	84 31       	cpi	r24, 0x14	; 20
    74b6:	91 05       	cpc	r25, r1
    74b8:	4c f4       	brge	.+18     	; 0x74cc <App_CarSpeedUpdate+0xcc>
    74ba:	80 91 2e 03 	lds	r24, 0x032E
    74be:	90 91 2f 03 	lds	r25, 0x032F
    74c2:	5f ef       	ldi	r21, 0xFF	; 255
    74c4:	8d 3e       	cpi	r24, 0xED	; 237
    74c6:	95 07       	cpc	r25, r21
    74c8:	0c f0       	brlt	.+2      	; 0x74cc <App_CarSpeedUpdate+0xcc>
    74ca:	97 c0       	rjmp	.+302    	; 0x75fa <App_CarSpeedUpdate+0x1fa>
        {
            ADC_Value_change_accepted =  Temp_Speed ;
    74cc:	80 91 2c 03 	lds	r24, 0x032C
    74d0:	80 93 26 03 	sts	0x0326, r24
            /*  Solve problem of limit resource represented in potentiometer    */
            if(ADC_Value_change_accepted < 6)
    74d4:	80 91 26 03 	lds	r24, 0x0326
    74d8:	86 30       	cpi	r24, 0x06	; 6
    74da:	10 f4       	brcc	.+4      	; 0x74e0 <App_CarSpeedUpdate+0xe0>
                ADC_Value_change_accepted = 0;
    74dc:	10 92 26 03 	sts	0x0326, r1
            Timer0_Overflow_counter_DM =0 ; // when there are new change in potentiometer (accelemetor) reset time counter for Driving monetering 
    74e0:	10 92 16 03 	sts	0x0316, r1
    74e4:	10 92 15 03 	sts	0x0315, r1
            
            /*  Change state to update in LCD*/
            DrivingMonetoring_Current_Status = DM_Meet ;
    74e8:	81 e0       	ldi	r24, 0x01	; 1
    74ea:	80 93 d0 02 	sts	0x02D0, r24

            if((CCS_Currnet_state == CCS_Enable) && (GearBox_Current_State == D_GearBox))
    74ee:	80 91 07 03 	lds	r24, 0x0307
    74f2:	81 30       	cpi	r24, 0x01	; 1
    74f4:	09 f0       	breq	.+2      	; 0x74f8 <App_CarSpeedUpdate+0xf8>
    74f6:	81 c0       	rjmp	.+258    	; 0x75fa <App_CarSpeedUpdate+0x1fa>
    74f8:	80 91 06 03 	lds	r24, 0x0306
    74fc:	81 30       	cpi	r24, 0x01	; 1
    74fe:	09 f0       	breq	.+2      	; 0x7502 <App_CarSpeedUpdate+0x102>
    7500:	7c c0       	rjmp	.+248    	; 0x75fa <App_CarSpeedUpdate+0x1fa>
            {
                /*  As in requirement Cruise control will be Disabled when press in accelerator pedal if I in "D" Gearbox  and CCS was activated */
                CCS_Currnet_state = CCS_Disable ;
    7502:	10 92 07 03 	sts	0x0307, r1
                DashBoard_Update_CCS_State(CCS_Currnet_state);
    7506:	80 91 07 03 	lds	r24, 0x0307
    750a:	0e 94 04 29 	call	0x5208	; 0x5208 <DashBoard_Update_CCS_State>

                /*  👀👀Send update of Cruise contol to mobile app using bluetooth*/
                //Bluetooth
                Bluetooth_Send((const uint8 * )"$0");
    750e:	89 e0       	ldi	r24, 0x09	; 9
    7510:	91 e0       	ldi	r25, 0x01	; 1
    7512:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <Bluetooth_Send>
    7516:	80 e0       	ldi	r24, 0x00	; 0
    7518:	90 e0       	ldi	r25, 0x00	; 0
    751a:	a0 e2       	ldi	r26, 0x20	; 32
    751c:	b1 e4       	ldi	r27, 0x41	; 65
    751e:	8b 87       	std	Y+11, r24	; 0x0b
    7520:	9c 87       	std	Y+12, r25	; 0x0c
    7522:	ad 87       	std	Y+13, r26	; 0x0d
    7524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7526:	6b 85       	ldd	r22, Y+11	; 0x0b
    7528:	7c 85       	ldd	r23, Y+12	; 0x0c
    752a:	8d 85       	ldd	r24, Y+13	; 0x0d
    752c:	9e 85       	ldd	r25, Y+14	; 0x0e
    752e:	20 e0       	ldi	r18, 0x00	; 0
    7530:	30 e0       	ldi	r19, 0x00	; 0
    7532:	4a ef       	ldi	r20, 0xFA	; 250
    7534:	54 e4       	ldi	r21, 0x44	; 68
    7536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    753a:	dc 01       	movw	r26, r24
    753c:	cb 01       	movw	r24, r22
    753e:	8f 83       	std	Y+7, r24	; 0x07
    7540:	98 87       	std	Y+8, r25	; 0x08
    7542:	a9 87       	std	Y+9, r26	; 0x09
    7544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7546:	6f 81       	ldd	r22, Y+7	; 0x07
    7548:	78 85       	ldd	r23, Y+8	; 0x08
    754a:	89 85       	ldd	r24, Y+9	; 0x09
    754c:	9a 85       	ldd	r25, Y+10	; 0x0a
    754e:	20 e0       	ldi	r18, 0x00	; 0
    7550:	30 e0       	ldi	r19, 0x00	; 0
    7552:	40 e8       	ldi	r20, 0x80	; 128
    7554:	5f e3       	ldi	r21, 0x3F	; 63
    7556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    755a:	88 23       	and	r24, r24
    755c:	2c f4       	brge	.+10     	; 0x7568 <App_CarSpeedUpdate+0x168>
		__ticks = 1;
    755e:	81 e0       	ldi	r24, 0x01	; 1
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	9e 83       	std	Y+6, r25	; 0x06
    7564:	8d 83       	std	Y+5, r24	; 0x05
    7566:	3f c0       	rjmp	.+126    	; 0x75e6 <App_CarSpeedUpdate+0x1e6>
	else if (__tmp > 65535)
    7568:	6f 81       	ldd	r22, Y+7	; 0x07
    756a:	78 85       	ldd	r23, Y+8	; 0x08
    756c:	89 85       	ldd	r24, Y+9	; 0x09
    756e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7570:	20 e0       	ldi	r18, 0x00	; 0
    7572:	3f ef       	ldi	r19, 0xFF	; 255
    7574:	4f e7       	ldi	r20, 0x7F	; 127
    7576:	57 e4       	ldi	r21, 0x47	; 71
    7578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    757c:	18 16       	cp	r1, r24
    757e:	4c f5       	brge	.+82     	; 0x75d2 <App_CarSpeedUpdate+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7580:	6b 85       	ldd	r22, Y+11	; 0x0b
    7582:	7c 85       	ldd	r23, Y+12	; 0x0c
    7584:	8d 85       	ldd	r24, Y+13	; 0x0d
    7586:	9e 85       	ldd	r25, Y+14	; 0x0e
    7588:	20 e0       	ldi	r18, 0x00	; 0
    758a:	30 e0       	ldi	r19, 0x00	; 0
    758c:	40 e2       	ldi	r20, 0x20	; 32
    758e:	51 e4       	ldi	r21, 0x41	; 65
    7590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7594:	dc 01       	movw	r26, r24
    7596:	cb 01       	movw	r24, r22
    7598:	bc 01       	movw	r22, r24
    759a:	cd 01       	movw	r24, r26
    759c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75a0:	dc 01       	movw	r26, r24
    75a2:	cb 01       	movw	r24, r22
    75a4:	9e 83       	std	Y+6, r25	; 0x06
    75a6:	8d 83       	std	Y+5, r24	; 0x05
    75a8:	0f c0       	rjmp	.+30     	; 0x75c8 <App_CarSpeedUpdate+0x1c8>
    75aa:	88 ec       	ldi	r24, 0xC8	; 200
    75ac:	90 e0       	ldi	r25, 0x00	; 0
    75ae:	9c 83       	std	Y+4, r25	; 0x04
    75b0:	8b 83       	std	Y+3, r24	; 0x03
    75b2:	8b 81       	ldd	r24, Y+3	; 0x03
    75b4:	9c 81       	ldd	r25, Y+4	; 0x04
    75b6:	01 97       	sbiw	r24, 0x01	; 1
    75b8:	f1 f7       	brne	.-4      	; 0x75b6 <App_CarSpeedUpdate+0x1b6>
    75ba:	9c 83       	std	Y+4, r25	; 0x04
    75bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75be:	8d 81       	ldd	r24, Y+5	; 0x05
    75c0:	9e 81       	ldd	r25, Y+6	; 0x06
    75c2:	01 97       	sbiw	r24, 0x01	; 1
    75c4:	9e 83       	std	Y+6, r25	; 0x06
    75c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75c8:	8d 81       	ldd	r24, Y+5	; 0x05
    75ca:	9e 81       	ldd	r25, Y+6	; 0x06
    75cc:	00 97       	sbiw	r24, 0x00	; 0
    75ce:	69 f7       	brne	.-38     	; 0x75aa <App_CarSpeedUpdate+0x1aa>
    75d0:	14 c0       	rjmp	.+40     	; 0x75fa <App_CarSpeedUpdate+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75d2:	6f 81       	ldd	r22, Y+7	; 0x07
    75d4:	78 85       	ldd	r23, Y+8	; 0x08
    75d6:	89 85       	ldd	r24, Y+9	; 0x09
    75d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    75da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75de:	dc 01       	movw	r26, r24
    75e0:	cb 01       	movw	r24, r22
    75e2:	9e 83       	std	Y+6, r25	; 0x06
    75e4:	8d 83       	std	Y+5, r24	; 0x05
    75e6:	8d 81       	ldd	r24, Y+5	; 0x05
    75e8:	9e 81       	ldd	r25, Y+6	; 0x06
    75ea:	9a 83       	std	Y+2, r25	; 0x02
    75ec:	89 83       	std	Y+1, r24	; 0x01
    75ee:	89 81       	ldd	r24, Y+1	; 0x01
    75f0:	9a 81       	ldd	r25, Y+2	; 0x02
    75f2:	01 97       	sbiw	r24, 0x01	; 1
    75f4:	f1 f7       	brne	.-4      	; 0x75f2 <App_CarSpeedUpdate+0x1f2>
    75f6:	9a 83       	std	Y+2, r25	; 0x02
    75f8:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(10);
            }
        }
        if(ADC_Value_change_accepted > Car_Speed)
    75fa:	80 91 26 03 	lds	r24, 0x0326
    75fe:	28 2f       	mov	r18, r24
    7600:	30 e0       	ldi	r19, 0x00	; 0
    7602:	80 91 0b 03 	lds	r24, 0x030B
    7606:	90 91 0c 03 	lds	r25, 0x030C
    760a:	82 17       	cp	r24, r18
    760c:	93 07       	cpc	r25, r19
    760e:	0c f0       	brlt	.+2      	; 0x7612 <App_CarSpeedUpdate+0x212>
    7610:	50 c0       	rjmp	.+160    	; 0x76b2 <App_CarSpeedUpdate+0x2b2>
        {
            if(ADC_Value_change_accepted - Car_Speed > 100)
    7612:	80 91 26 03 	lds	r24, 0x0326
    7616:	28 2f       	mov	r18, r24
    7618:	30 e0       	ldi	r19, 0x00	; 0
    761a:	80 91 0b 03 	lds	r24, 0x030B
    761e:	90 91 0c 03 	lds	r25, 0x030C
    7622:	a9 01       	movw	r20, r18
    7624:	48 1b       	sub	r20, r24
    7626:	59 0b       	sbc	r21, r25
    7628:	ca 01       	movw	r24, r20
    762a:	85 36       	cpi	r24, 0x65	; 101
    762c:	91 05       	cpc	r25, r1
    762e:	54 f0       	brlt	.+20     	; 0x7644 <App_CarSpeedUpdate+0x244>
            {
                Car_Speed += 14;
    7630:	80 91 0b 03 	lds	r24, 0x030B
    7634:	90 91 0c 03 	lds	r25, 0x030C
    7638:	0e 96       	adiw	r24, 0x0e	; 14
    763a:	90 93 0c 03 	sts	0x030C, r25
    763e:	80 93 0b 03 	sts	0x030B, r24
    7642:	22 c0       	rjmp	.+68     	; 0x7688 <App_CarSpeedUpdate+0x288>
            }
            else if (ADC_Value_change_accepted - Car_Speed > 50)
    7644:	80 91 26 03 	lds	r24, 0x0326
    7648:	28 2f       	mov	r18, r24
    764a:	30 e0       	ldi	r19, 0x00	; 0
    764c:	80 91 0b 03 	lds	r24, 0x030B
    7650:	90 91 0c 03 	lds	r25, 0x030C
    7654:	a9 01       	movw	r20, r18
    7656:	48 1b       	sub	r20, r24
    7658:	59 0b       	sbc	r21, r25
    765a:	ca 01       	movw	r24, r20
    765c:	83 33       	cpi	r24, 0x33	; 51
    765e:	91 05       	cpc	r25, r1
    7660:	54 f0       	brlt	.+20     	; 0x7676 <App_CarSpeedUpdate+0x276>
            {
                Car_Speed += 8;
    7662:	80 91 0b 03 	lds	r24, 0x030B
    7666:	90 91 0c 03 	lds	r25, 0x030C
    766a:	08 96       	adiw	r24, 0x08	; 8
    766c:	90 93 0c 03 	sts	0x030C, r25
    7670:	80 93 0b 03 	sts	0x030B, r24
    7674:	09 c0       	rjmp	.+18     	; 0x7688 <App_CarSpeedUpdate+0x288>
            }
            else 
            {
                Car_Speed += 6;
    7676:	80 91 0b 03 	lds	r24, 0x030B
    767a:	90 91 0c 03 	lds	r25, 0x030C
    767e:	06 96       	adiw	r24, 0x06	; 6
    7680:	90 93 0c 03 	sts	0x030C, r25
    7684:	80 93 0b 03 	sts	0x030B, r24
            }
            
            if(ADC_Value_change_accepted <= Car_Speed)
    7688:	80 91 26 03 	lds	r24, 0x0326
    768c:	28 2f       	mov	r18, r24
    768e:	30 e0       	ldi	r19, 0x00	; 0
    7690:	80 91 0b 03 	lds	r24, 0x030B
    7694:	90 91 0c 03 	lds	r25, 0x030C
    7698:	82 17       	cp	r24, r18
    769a:	93 07       	cpc	r25, r19
    769c:	0c f4       	brge	.+2      	; 0x76a0 <App_CarSpeedUpdate+0x2a0>
    769e:	63 c0       	rjmp	.+198    	; 0x7766 <App_CarSpeedUpdate+0x366>
            {
                Car_Speed = ADC_Value_change_accepted ;
    76a0:	80 91 26 03 	lds	r24, 0x0326
    76a4:	88 2f       	mov	r24, r24
    76a6:	90 e0       	ldi	r25, 0x00	; 0
    76a8:	90 93 0c 03 	sts	0x030C, r25
    76ac:	80 93 0b 03 	sts	0x030B, r24
    76b0:	5a c0       	rjmp	.+180    	; 0x7766 <App_CarSpeedUpdate+0x366>
            }
        }
        else if(ADC_Value_change_accepted < Car_Speed)
    76b2:	80 91 26 03 	lds	r24, 0x0326
    76b6:	28 2f       	mov	r18, r24
    76b8:	30 e0       	ldi	r19, 0x00	; 0
    76ba:	80 91 0b 03 	lds	r24, 0x030B
    76be:	90 91 0c 03 	lds	r25, 0x030C
    76c2:	28 17       	cp	r18, r24
    76c4:	39 07       	cpc	r19, r25
    76c6:	0c f0       	brlt	.+2      	; 0x76ca <App_CarSpeedUpdate+0x2ca>
    76c8:	4e c0       	rjmp	.+156    	; 0x7766 <App_CarSpeedUpdate+0x366>
        {
            if(Car_Speed - ADC_Value_change_accepted  > 100)
    76ca:	20 91 0b 03 	lds	r18, 0x030B
    76ce:	30 91 0c 03 	lds	r19, 0x030C
    76d2:	80 91 26 03 	lds	r24, 0x0326
    76d6:	88 2f       	mov	r24, r24
    76d8:	90 e0       	ldi	r25, 0x00	; 0
    76da:	a9 01       	movw	r20, r18
    76dc:	48 1b       	sub	r20, r24
    76de:	59 0b       	sbc	r21, r25
    76e0:	ca 01       	movw	r24, r20
    76e2:	85 36       	cpi	r24, 0x65	; 101
    76e4:	91 05       	cpc	r25, r1
    76e6:	54 f0       	brlt	.+20     	; 0x76fc <App_CarSpeedUpdate+0x2fc>
            {
                Car_Speed -= 14;
    76e8:	80 91 0b 03 	lds	r24, 0x030B
    76ec:	90 91 0c 03 	lds	r25, 0x030C
    76f0:	0e 97       	sbiw	r24, 0x0e	; 14
    76f2:	90 93 0c 03 	sts	0x030C, r25
    76f6:	80 93 0b 03 	sts	0x030B, r24
    76fa:	22 c0       	rjmp	.+68     	; 0x7740 <App_CarSpeedUpdate+0x340>
            }
            else if (Car_Speed - ADC_Value_change_accepted   > 50)
    76fc:	20 91 0b 03 	lds	r18, 0x030B
    7700:	30 91 0c 03 	lds	r19, 0x030C
    7704:	80 91 26 03 	lds	r24, 0x0326
    7708:	88 2f       	mov	r24, r24
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	a9 01       	movw	r20, r18
    770e:	48 1b       	sub	r20, r24
    7710:	59 0b       	sbc	r21, r25
    7712:	ca 01       	movw	r24, r20
    7714:	83 33       	cpi	r24, 0x33	; 51
    7716:	91 05       	cpc	r25, r1
    7718:	54 f0       	brlt	.+20     	; 0x772e <App_CarSpeedUpdate+0x32e>
            {
                Car_Speed -= 8;
    771a:	80 91 0b 03 	lds	r24, 0x030B
    771e:	90 91 0c 03 	lds	r25, 0x030C
    7722:	08 97       	sbiw	r24, 0x08	; 8
    7724:	90 93 0c 03 	sts	0x030C, r25
    7728:	80 93 0b 03 	sts	0x030B, r24
    772c:	09 c0       	rjmp	.+18     	; 0x7740 <App_CarSpeedUpdate+0x340>
            }
            else 
            {
                Car_Speed -= 6;
    772e:	80 91 0b 03 	lds	r24, 0x030B
    7732:	90 91 0c 03 	lds	r25, 0x030C
    7736:	06 97       	sbiw	r24, 0x06	; 6
    7738:	90 93 0c 03 	sts	0x030C, r25
    773c:	80 93 0b 03 	sts	0x030B, r24
            }

            if(ADC_Value_change_accepted >= Car_Speed)
    7740:	80 91 26 03 	lds	r24, 0x0326
    7744:	28 2f       	mov	r18, r24
    7746:	30 e0       	ldi	r19, 0x00	; 0
    7748:	80 91 0b 03 	lds	r24, 0x030B
    774c:	90 91 0c 03 	lds	r25, 0x030C
    7750:	28 17       	cp	r18, r24
    7752:	39 07       	cpc	r19, r25
    7754:	44 f0       	brlt	.+16     	; 0x7766 <App_CarSpeedUpdate+0x366>
            {
                Car_Speed = ADC_Value_change_accepted ;
    7756:	80 91 26 03 	lds	r24, 0x0326
    775a:	88 2f       	mov	r24, r24
    775c:	90 e0       	ldi	r25, 0x00	; 0
    775e:	90 93 0c 03 	sts	0x030C, r25
    7762:	80 93 0b 03 	sts	0x030B, r24
            }
        }
    }
    
    cli();
    7766:	f8 94       	cli
    LCD_MoveCursor(1,14);
    7768:	81 e0       	ldi	r24, 0x01	; 1
    776a:	6e e0       	ldi	r22, 0x0E	; 14
    776c:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
    /*  call function to handle speed for motor */
    LCD_intToString((uint8)Car_Speed) ;
    7770:	80 91 0b 03 	lds	r24, 0x030B
    7774:	90 91 0c 03 	lds	r25, 0x030C
    7778:	88 2f       	mov	r24, r24
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	a0 e0       	ldi	r26, 0x00	; 0
    777e:	b0 e0       	ldi	r27, 0x00	; 0
    7780:	bc 01       	movw	r22, r24
    7782:	cd 01       	movw	r24, r26
    7784:	0e 94 05 21 	call	0x420a	; 0x420a <LCD_intToString>
    LCD_DisplayString((const uint8 * )"KM ");
    7788:	88 e5       	ldi	r24, 0x58	; 88
    778a:	91 e0       	ldi	r25, 0x01	; 1
    778c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <LCD_DisplayString>

    /*  Update DC motor speed  */
    if(GearBox_Current_State == N_GearBox)
    7790:	80 91 06 03 	lds	r24, 0x0306
    7794:	88 23       	and	r24, r24
    7796:	39 f4       	brne	.+14     	; 0x77a6 <App_CarSpeedUpdate+0x3a6>
    {
        DC_Motor_Speed(&DC_pins_Motor,DC_Motor_Stop,0);
    7798:	8a ec       	ldi	r24, 0xCA	; 202
    779a:	92 e0       	ldi	r25, 0x02	; 2
    779c:	62 e0       	ldi	r22, 0x02	; 2
    779e:	40 e0       	ldi	r20, 0x00	; 0
    77a0:	0e 94 f7 23 	call	0x47ee	; 0x47ee <DC_Motor_Speed>
    77a4:	41 c0       	rjmp	.+130    	; 0x7828 <App_CarSpeedUpdate+0x428>
    }
    else if(GearBox_Current_State == D_GearBox)
    77a6:	80 91 06 03 	lds	r24, 0x0306
    77aa:	81 30       	cpi	r24, 0x01	; 1
    77ac:	e9 f4       	brne	.+58     	; 0x77e8 <App_CarSpeedUpdate+0x3e8>
    {
        
        uint8 Speed_0_100 = (Car_Speed * (uint16) 100) / 200 ;
    77ae:	80 91 0b 03 	lds	r24, 0x030B
    77b2:	90 91 0c 03 	lds	r25, 0x030C
    77b6:	9c 01       	movw	r18, r24
    77b8:	84 e6       	ldi	r24, 0x64	; 100
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	ac 01       	movw	r20, r24
    77be:	24 9f       	mul	r18, r20
    77c0:	c0 01       	movw	r24, r0
    77c2:	25 9f       	mul	r18, r21
    77c4:	90 0d       	add	r25, r0
    77c6:	34 9f       	mul	r19, r20
    77c8:	90 0d       	add	r25, r0
    77ca:	11 24       	eor	r1, r1
    77cc:	28 ec       	ldi	r18, 0xC8	; 200
    77ce:	30 e0       	ldi	r19, 0x00	; 0
    77d0:	b9 01       	movw	r22, r18
    77d2:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <__udivmodhi4>
    77d6:	cb 01       	movw	r24, r22
    77d8:	88 8b       	std	Y+16, r24	; 0x10
        DC_Motor_Speed(&DC_pins_Motor,DC_Motor_CW,(uint8)Speed_0_100);
    77da:	8a ec       	ldi	r24, 0xCA	; 202
    77dc:	92 e0       	ldi	r25, 0x02	; 2
    77de:	60 e0       	ldi	r22, 0x00	; 0
    77e0:	48 89       	ldd	r20, Y+16	; 0x10
    77e2:	0e 94 f7 23 	call	0x47ee	; 0x47ee <DC_Motor_Speed>
    77e6:	20 c0       	rjmp	.+64     	; 0x7828 <App_CarSpeedUpdate+0x428>
        
    }
    else if(GearBox_Current_State == R_GearBox)
    77e8:	80 91 06 03 	lds	r24, 0x0306
    77ec:	82 30       	cpi	r24, 0x02	; 2
    77ee:	e1 f4       	brne	.+56     	; 0x7828 <App_CarSpeedUpdate+0x428>
    {
        uint8 Speed_0_100 = (Car_Speed * (uint16) 100) / 200 ;
    77f0:	80 91 0b 03 	lds	r24, 0x030B
    77f4:	90 91 0c 03 	lds	r25, 0x030C
    77f8:	9c 01       	movw	r18, r24
    77fa:	84 e6       	ldi	r24, 0x64	; 100
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	ac 01       	movw	r20, r24
    7800:	24 9f       	mul	r18, r20
    7802:	c0 01       	movw	r24, r0
    7804:	25 9f       	mul	r18, r21
    7806:	90 0d       	add	r25, r0
    7808:	34 9f       	mul	r19, r20
    780a:	90 0d       	add	r25, r0
    780c:	11 24       	eor	r1, r1
    780e:	28 ec       	ldi	r18, 0xC8	; 200
    7810:	30 e0       	ldi	r19, 0x00	; 0
    7812:	b9 01       	movw	r22, r18
    7814:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <__udivmodhi4>
    7818:	cb 01       	movw	r24, r22
    781a:	8f 87       	std	Y+15, r24	; 0x0f
        DC_Motor_Speed(&DC_pins_Motor,DC_Motor_ACW,(uint8)Speed_0_100);
    781c:	8a ec       	ldi	r24, 0xCA	; 202
    781e:	92 e0       	ldi	r25, 0x02	; 2
    7820:	61 e0       	ldi	r22, 0x01	; 1
    7822:	4f 85       	ldd	r20, Y+15	; 0x0f
    7824:	0e 94 f7 23 	call	0x47ee	; 0x47ee <DC_Motor_Speed>
    }
    
    sei();
    7828:	78 94       	sei
    /*  Save last change in Speed variable that will display in LCD  */
    Prev_Adc_value_pure = Adc_value_pure ;
    782a:	89 89       	ldd	r24, Y+17	; 0x11
    782c:	9a 89       	ldd	r25, Y+18	; 0x12
    782e:	90 93 28 03 	sts	0x0328, r25
    7832:	80 93 27 03 	sts	0x0327, r24

}
    7836:	62 96       	adiw	r28, 0x12	; 18
    7838:	0f b6       	in	r0, 0x3f	; 63
    783a:	f8 94       	cli
    783c:	de bf       	out	0x3e, r29	; 62
    783e:	0f be       	out	0x3f, r0	; 63
    7840:	cd bf       	out	0x3d, r28	; 61
    7842:	cf 91       	pop	r28
    7844:	df 91       	pop	r29
    7846:	08 95       	ret

00007848 <TImer0_OVF_Handling_Fun>:



/*  👀👀👀👀 Look Here function handle Time overflow    */
static void TImer0_OVF_Handling_Fun(void)
{
    7848:	df 93       	push	r29
    784a:	cf 93       	push	r28
    784c:	cd b7       	in	r28, 0x3d	; 61
    784e:	de b7       	in	r29, 0x3e	; 62
    /*  Here handle */
    // if( (GearBox_Current_State == D_GearBox) || (GearBox_Current_State == R_GearBox) )
    
    
    Timer0_Overflow_counter_DM++; 
    7850:	80 91 15 03 	lds	r24, 0x0315
    7854:	90 91 16 03 	lds	r25, 0x0316
    7858:	01 96       	adiw	r24, 0x01	; 1
    785a:	90 93 16 03 	sts	0x0316, r25
    785e:	80 93 15 03 	sts	0x0315, r24
    /*  No need to increment this variable as DM disabled  */
    if(DrivingMonetoring_Current_State == DirivingMonetoring_Disable)
    7862:	80 91 0a 03 	lds	r24, 0x030A
    7866:	88 23       	and	r24, r24
    7868:	29 f4       	brne	.+10     	; 0x7874 <TImer0_OVF_Handling_Fun+0x2c>
    {
        Timer0_Overflow_counter_DM = 0 ;
    786a:	10 92 16 03 	sts	0x0316, r1
    786e:	10 92 15 03 	sts	0x0315, r1
    7872:	0d c0       	rjmp	.+26     	; 0x788e <TImer0_OVF_Handling_Fun+0x46>
    }

    else if(Timer0_Overflow_counter_DM == Timer0_OVF_5_sec_DrivingMonetoring)
    7874:	80 91 15 03 	lds	r24, 0x0315
    7878:	90 91 16 03 	lds	r25, 0x0316
    787c:	85 35       	cpi	r24, 0x55	; 85
    787e:	91 05       	cpc	r25, r1
    7880:	31 f4       	brne	.+12     	; 0x788e <TImer0_OVF_Handling_Fun+0x46>
    {
        Timer0_Overflow_counter_DM = 0;
    7882:	10 92 16 03 	sts	0x0316, r1
    7886:	10 92 15 03 	sts	0x0315, r1
        /*  Here happen time out that it may be user is in Sleep  */
        DrivingMonetoring_Current_Status = DM_Failed ;
    788a:	10 92 d0 02 	sts	0x02D0, r1

    }
    
    if(Buzzer_GiveSound == YES_Condition )
    788e:	80 91 17 03 	lds	r24, 0x0317
    7892:	81 30       	cpi	r24, 0x01	; 1
    7894:	c1 f4       	brne	.+48     	; 0x78c6 <TImer0_OVF_Handling_Fun+0x7e>
    {
        Buzzer_Timer0_OVF_count++;
    7896:	80 91 18 03 	lds	r24, 0x0318
    789a:	8f 5f       	subi	r24, 0xFF	; 255
    789c:	80 93 18 03 	sts	0x0318, r24
        Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_ON);
    78a0:	82 e0       	ldi	r24, 0x02	; 2
    78a2:	66 e0       	ldi	r22, 0x06	; 6
    78a4:	41 e0       	ldi	r20, 0x01	; 1
    78a6:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <Buzzer_OnOffPositiveLogic>
        if(Buzzer_Timer0_OVF_count == Timer0_OVF_Buzzer_Notify_sound)
    78aa:	80 91 18 03 	lds	r24, 0x0318
    78ae:	84 30       	cpi	r24, 0x04	; 4
    78b0:	81 f4       	brne	.+32     	; 0x78d2 <TImer0_OVF_Handling_Fun+0x8a>
        {
            Buzzer_GiveSound = NO_Condition ;
    78b2:	10 92 17 03 	sts	0x0317, r1
            Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    78b6:	82 e0       	ldi	r24, 0x02	; 2
    78b8:	66 e0       	ldi	r22, 0x06	; 6
    78ba:	40 e0       	ldi	r20, 0x00	; 0
    78bc:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <Buzzer_OnOffPositiveLogic>
            Buzzer_Timer0_OVF_count = 0;
    78c0:	10 92 18 03 	sts	0x0318, r1
    78c4:	06 c0       	rjmp	.+12     	; 0x78d2 <TImer0_OVF_Handling_Fun+0x8a>
        }
    }
    else if(Buzzer_GiveSound == NO_Condition)
    78c6:	80 91 17 03 	lds	r24, 0x0317
    78ca:	88 23       	and	r24, r24
    78cc:	11 f4       	brne	.+4      	; 0x78d2 <TImer0_OVF_Handling_Fun+0x8a>
    {
        Buzzer_Timer0_OVF_count = 0;
    78ce:	10 92 18 03 	sts	0x0318, r1
    }


    Timer0_Overflow_Counter_RTClock++;
    78d2:	80 91 14 03 	lds	r24, 0x0314
    78d6:	8f 5f       	subi	r24, 0xFF	; 255
    78d8:	80 93 14 03 	sts	0x0314, r24
    if(Timer0_Overflow_Counter_RTClock == Timer0_OVF_1_sec_RTClock)
    78dc:	80 91 14 03 	lds	r24, 0x0314
    78e0:	88 30       	cpi	r24, 0x08	; 8
    78e2:	09 f0       	breq	.+2      	; 0x78e6 <TImer0_OVF_Handling_Fun+0x9e>
    78e4:	53 c0       	rjmp	.+166    	; 0x798c <TImer0_OVF_Handling_Fun+0x144>
    {
        Timer0_Overflow_Counter_RTClock = 0;
    78e6:	10 92 14 03 	sts	0x0314, r1
        /*  Distance = speed * time   -> and speed = KM/H  so distance = (KM/H) * H 
        but as I make Demo I will not wait hour for update so I make update for every second
        so equation will be Distance = Speed * 1sec / 60
        */

       if((GearBox_Current_State == D_GearBox) || (GearBox_Current_State == R_GearBox))
    78ea:	80 91 06 03 	lds	r24, 0x0306
    78ee:	81 30       	cpi	r24, 0x01	; 1
    78f0:	21 f0       	breq	.+8      	; 0x78fa <TImer0_OVF_Handling_Fun+0xb2>
    78f2:	80 91 06 03 	lds	r24, 0x0306
    78f6:	82 30       	cpi	r24, 0x02	; 2
    78f8:	71 f5       	brne	.+92     	; 0x7956 <TImer0_OVF_Handling_Fun+0x10e>
       {
            /*  Must take count when moving in D or R mode*/
            Accumulative_Distance_KM += Car_Speed / 60.0 ; 
    78fa:	80 91 0b 03 	lds	r24, 0x030B
    78fe:	90 91 0c 03 	lds	r25, 0x030C
    7902:	aa 27       	eor	r26, r26
    7904:	97 fd       	sbrc	r25, 7
    7906:	a0 95       	com	r26
    7908:	ba 2f       	mov	r27, r26
    790a:	bc 01       	movw	r22, r24
    790c:	cd 01       	movw	r24, r26
    790e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    7912:	dc 01       	movw	r26, r24
    7914:	cb 01       	movw	r24, r22
    7916:	bc 01       	movw	r22, r24
    7918:	cd 01       	movw	r24, r26
    791a:	20 e0       	ldi	r18, 0x00	; 0
    791c:	30 e0       	ldi	r19, 0x00	; 0
    791e:	40 e7       	ldi	r20, 0x70	; 112
    7920:	52 e4       	ldi	r21, 0x42	; 66
    7922:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7926:	dc 01       	movw	r26, r24
    7928:	cb 01       	movw	r24, r22
    792a:	20 91 10 03 	lds	r18, 0x0310
    792e:	30 91 11 03 	lds	r19, 0x0311
    7932:	40 91 12 03 	lds	r20, 0x0312
    7936:	50 91 13 03 	lds	r21, 0x0313
    793a:	bc 01       	movw	r22, r24
    793c:	cd 01       	movw	r24, r26
    793e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    7942:	dc 01       	movw	r26, r24
    7944:	cb 01       	movw	r24, r22
    7946:	80 93 10 03 	sts	0x0310, r24
    794a:	90 93 11 03 	sts	0x0311, r25
    794e:	a0 93 12 03 	sts	0x0312, r26
    7952:	b0 93 13 03 	sts	0x0313, r27
       }

        /*  This is part for update real time clock  */
        Clock_sec ++ ;
    7956:	80 91 d1 02 	lds	r24, 0x02D1
    795a:	8f 5f       	subi	r24, 0xFF	; 255
    795c:	80 93 d1 02 	sts	0x02D1, r24
        if(Clock_sec == 60)
    7960:	80 91 d1 02 	lds	r24, 0x02D1
    7964:	8c 33       	cpi	r24, 0x3C	; 60
    7966:	39 f4       	brne	.+14     	; 0x7976 <TImer0_OVF_Handling_Fun+0x12e>
        {
            Clock_sec =  0 ;
    7968:	10 92 d1 02 	sts	0x02D1, r1
            Clock_min ++;
    796c:	80 91 d2 02 	lds	r24, 0x02D2
    7970:	8f 5f       	subi	r24, 0xFF	; 255
    7972:	80 93 d2 02 	sts	0x02D2, r24
        }
        if(Clock_min == 60)
    7976:	80 91 d2 02 	lds	r24, 0x02D2
    797a:	8c 33       	cpi	r24, 0x3C	; 60
    797c:	39 f4       	brne	.+14     	; 0x798c <TImer0_OVF_Handling_Fun+0x144>
        {
            Clock_min = 0 ;
    797e:	10 92 d2 02 	sts	0x02D2, r1
            Clock_hour ++;
    7982:	80 91 d3 02 	lds	r24, 0x02D3
    7986:	8f 5f       	subi	r24, 0xFF	; 255
    7988:	80 93 d3 02 	sts	0x02D3, r24
        }
    }


}
    798c:	cf 91       	pop	r28
    798e:	df 91       	pop	r29
    7990:	08 95       	ret

00007992 <APP_CarMovedKiloMeters>:


static void APP_CarMovedKiloMeters(void)
{
    7992:	df 93       	push	r29
    7994:	cf 93       	push	r28
    7996:	cd b7       	in	r28, 0x3d	; 61
    7998:	de b7       	in	r29, 0x3e	; 62
    if(Page_Current_State == Page_2_LCD)
    799a:	80 91 c7 02 	lds	r24, 0x02C7
    799e:	81 30       	cpi	r24, 0x01	; 1
    79a0:	91 f4       	brne	.+36     	; 0x79c6 <APP_CarMovedKiloMeters+0x34>
    {
        cli();
    79a2:	f8 94       	cli
        LCD_MoveCursor(1,4);
    79a4:	81 e0       	ldi	r24, 0x01	; 1
    79a6:	64 e0       	ldi	r22, 0x04	; 4
    79a8:	0e 94 57 1f 	call	0x3eae	; 0x3eae <LCD_MoveCursor>
        LCD_FloatToString(Accumulative_Distance_KM);
    79ac:	80 91 10 03 	lds	r24, 0x0310
    79b0:	90 91 11 03 	lds	r25, 0x0311
    79b4:	a0 91 12 03 	lds	r26, 0x0312
    79b8:	b0 91 13 03 	lds	r27, 0x0313
    79bc:	bc 01       	movw	r22, r24
    79be:	cd 01       	movw	r24, r26
    79c0:	0e 94 2a 21 	call	0x4254	; 0x4254 <LCD_FloatToString>
        
        sei();
    79c4:	78 94       	sei
    }
    else 
    {
        /*  Do Nothing  */
    }
}
    79c6:	cf 91       	pop	r28
    79c8:	df 91       	pop	r29
    79ca:	08 95       	ret

000079cc <main>:


#include "Application/Application_interface.h"
uint8 Adc_value_pure = 0;
int main()
{
    79cc:	df 93       	push	r29
    79ce:	cf 93       	push	r28
    79d0:	cd b7       	in	r28, 0x3d	; 61
    79d2:	de b7       	in	r29, 0x3e	; 62
	/*	Make Initialize for Every thing*/
	App_Init();
    79d4:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <App_Init>
	
	while(1)
	{
		App_StateMachineUpdate();
    79d8:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <App_StateMachineUpdate>
    79dc:	fd cf       	rjmp	.-6      	; 0x79d8 <main+0xc>

000079de <__mulsi3>:
    79de:	62 9f       	mul	r22, r18
    79e0:	d0 01       	movw	r26, r0
    79e2:	73 9f       	mul	r23, r19
    79e4:	f0 01       	movw	r30, r0
    79e6:	82 9f       	mul	r24, r18
    79e8:	e0 0d       	add	r30, r0
    79ea:	f1 1d       	adc	r31, r1
    79ec:	64 9f       	mul	r22, r20
    79ee:	e0 0d       	add	r30, r0
    79f0:	f1 1d       	adc	r31, r1
    79f2:	92 9f       	mul	r25, r18
    79f4:	f0 0d       	add	r31, r0
    79f6:	83 9f       	mul	r24, r19
    79f8:	f0 0d       	add	r31, r0
    79fa:	74 9f       	mul	r23, r20
    79fc:	f0 0d       	add	r31, r0
    79fe:	65 9f       	mul	r22, r21
    7a00:	f0 0d       	add	r31, r0
    7a02:	99 27       	eor	r25, r25
    7a04:	72 9f       	mul	r23, r18
    7a06:	b0 0d       	add	r27, r0
    7a08:	e1 1d       	adc	r30, r1
    7a0a:	f9 1f       	adc	r31, r25
    7a0c:	63 9f       	mul	r22, r19
    7a0e:	b0 0d       	add	r27, r0
    7a10:	e1 1d       	adc	r30, r1
    7a12:	f9 1f       	adc	r31, r25
    7a14:	bd 01       	movw	r22, r26
    7a16:	cf 01       	movw	r24, r30
    7a18:	11 24       	eor	r1, r1
    7a1a:	08 95       	ret

00007a1c <__udivmodhi4>:
    7a1c:	aa 1b       	sub	r26, r26
    7a1e:	bb 1b       	sub	r27, r27
    7a20:	51 e1       	ldi	r21, 0x11	; 17
    7a22:	07 c0       	rjmp	.+14     	; 0x7a32 <__udivmodhi4_ep>

00007a24 <__udivmodhi4_loop>:
    7a24:	aa 1f       	adc	r26, r26
    7a26:	bb 1f       	adc	r27, r27
    7a28:	a6 17       	cp	r26, r22
    7a2a:	b7 07       	cpc	r27, r23
    7a2c:	10 f0       	brcs	.+4      	; 0x7a32 <__udivmodhi4_ep>
    7a2e:	a6 1b       	sub	r26, r22
    7a30:	b7 0b       	sbc	r27, r23

00007a32 <__udivmodhi4_ep>:
    7a32:	88 1f       	adc	r24, r24
    7a34:	99 1f       	adc	r25, r25
    7a36:	5a 95       	dec	r21
    7a38:	a9 f7       	brne	.-22     	; 0x7a24 <__udivmodhi4_loop>
    7a3a:	80 95       	com	r24
    7a3c:	90 95       	com	r25
    7a3e:	bc 01       	movw	r22, r24
    7a40:	cd 01       	movw	r24, r26
    7a42:	08 95       	ret

00007a44 <__divmodhi4>:
    7a44:	97 fb       	bst	r25, 7
    7a46:	09 2e       	mov	r0, r25
    7a48:	07 26       	eor	r0, r23
    7a4a:	0a d0       	rcall	.+20     	; 0x7a60 <__divmodhi4_neg1>
    7a4c:	77 fd       	sbrc	r23, 7
    7a4e:	04 d0       	rcall	.+8      	; 0x7a58 <__divmodhi4_neg2>
    7a50:	e5 df       	rcall	.-54     	; 0x7a1c <__udivmodhi4>
    7a52:	06 d0       	rcall	.+12     	; 0x7a60 <__divmodhi4_neg1>
    7a54:	00 20       	and	r0, r0
    7a56:	1a f4       	brpl	.+6      	; 0x7a5e <__divmodhi4_exit>

00007a58 <__divmodhi4_neg2>:
    7a58:	70 95       	com	r23
    7a5a:	61 95       	neg	r22
    7a5c:	7f 4f       	sbci	r23, 0xFF	; 255

00007a5e <__divmodhi4_exit>:
    7a5e:	08 95       	ret

00007a60 <__divmodhi4_neg1>:
    7a60:	f6 f7       	brtc	.-4      	; 0x7a5e <__divmodhi4_exit>
    7a62:	90 95       	com	r25
    7a64:	81 95       	neg	r24
    7a66:	9f 4f       	sbci	r25, 0xFF	; 255
    7a68:	08 95       	ret

00007a6a <__udivmodsi4>:
    7a6a:	a1 e2       	ldi	r26, 0x21	; 33
    7a6c:	1a 2e       	mov	r1, r26
    7a6e:	aa 1b       	sub	r26, r26
    7a70:	bb 1b       	sub	r27, r27
    7a72:	fd 01       	movw	r30, r26
    7a74:	0d c0       	rjmp	.+26     	; 0x7a90 <__udivmodsi4_ep>

00007a76 <__udivmodsi4_loop>:
    7a76:	aa 1f       	adc	r26, r26
    7a78:	bb 1f       	adc	r27, r27
    7a7a:	ee 1f       	adc	r30, r30
    7a7c:	ff 1f       	adc	r31, r31
    7a7e:	a2 17       	cp	r26, r18
    7a80:	b3 07       	cpc	r27, r19
    7a82:	e4 07       	cpc	r30, r20
    7a84:	f5 07       	cpc	r31, r21
    7a86:	20 f0       	brcs	.+8      	; 0x7a90 <__udivmodsi4_ep>
    7a88:	a2 1b       	sub	r26, r18
    7a8a:	b3 0b       	sbc	r27, r19
    7a8c:	e4 0b       	sbc	r30, r20
    7a8e:	f5 0b       	sbc	r31, r21

00007a90 <__udivmodsi4_ep>:
    7a90:	66 1f       	adc	r22, r22
    7a92:	77 1f       	adc	r23, r23
    7a94:	88 1f       	adc	r24, r24
    7a96:	99 1f       	adc	r25, r25
    7a98:	1a 94       	dec	r1
    7a9a:	69 f7       	brne	.-38     	; 0x7a76 <__udivmodsi4_loop>
    7a9c:	60 95       	com	r22
    7a9e:	70 95       	com	r23
    7aa0:	80 95       	com	r24
    7aa2:	90 95       	com	r25
    7aa4:	9b 01       	movw	r18, r22
    7aa6:	ac 01       	movw	r20, r24
    7aa8:	bd 01       	movw	r22, r26
    7aaa:	cf 01       	movw	r24, r30
    7aac:	08 95       	ret

00007aae <__prologue_saves__>:
    7aae:	2f 92       	push	r2
    7ab0:	3f 92       	push	r3
    7ab2:	4f 92       	push	r4
    7ab4:	5f 92       	push	r5
    7ab6:	6f 92       	push	r6
    7ab8:	7f 92       	push	r7
    7aba:	8f 92       	push	r8
    7abc:	9f 92       	push	r9
    7abe:	af 92       	push	r10
    7ac0:	bf 92       	push	r11
    7ac2:	cf 92       	push	r12
    7ac4:	df 92       	push	r13
    7ac6:	ef 92       	push	r14
    7ac8:	ff 92       	push	r15
    7aca:	0f 93       	push	r16
    7acc:	1f 93       	push	r17
    7ace:	cf 93       	push	r28
    7ad0:	df 93       	push	r29
    7ad2:	cd b7       	in	r28, 0x3d	; 61
    7ad4:	de b7       	in	r29, 0x3e	; 62
    7ad6:	ca 1b       	sub	r28, r26
    7ad8:	db 0b       	sbc	r29, r27
    7ada:	0f b6       	in	r0, 0x3f	; 63
    7adc:	f8 94       	cli
    7ade:	de bf       	out	0x3e, r29	; 62
    7ae0:	0f be       	out	0x3f, r0	; 63
    7ae2:	cd bf       	out	0x3d, r28	; 61
    7ae4:	09 94       	ijmp

00007ae6 <__epilogue_restores__>:
    7ae6:	2a 88       	ldd	r2, Y+18	; 0x12
    7ae8:	39 88       	ldd	r3, Y+17	; 0x11
    7aea:	48 88       	ldd	r4, Y+16	; 0x10
    7aec:	5f 84       	ldd	r5, Y+15	; 0x0f
    7aee:	6e 84       	ldd	r6, Y+14	; 0x0e
    7af0:	7d 84       	ldd	r7, Y+13	; 0x0d
    7af2:	8c 84       	ldd	r8, Y+12	; 0x0c
    7af4:	9b 84       	ldd	r9, Y+11	; 0x0b
    7af6:	aa 84       	ldd	r10, Y+10	; 0x0a
    7af8:	b9 84       	ldd	r11, Y+9	; 0x09
    7afa:	c8 84       	ldd	r12, Y+8	; 0x08
    7afc:	df 80       	ldd	r13, Y+7	; 0x07
    7afe:	ee 80       	ldd	r14, Y+6	; 0x06
    7b00:	fd 80       	ldd	r15, Y+5	; 0x05
    7b02:	0c 81       	ldd	r16, Y+4	; 0x04
    7b04:	1b 81       	ldd	r17, Y+3	; 0x03
    7b06:	aa 81       	ldd	r26, Y+2	; 0x02
    7b08:	b9 81       	ldd	r27, Y+1	; 0x01
    7b0a:	ce 0f       	add	r28, r30
    7b0c:	d1 1d       	adc	r29, r1
    7b0e:	0f b6       	in	r0, 0x3f	; 63
    7b10:	f8 94       	cli
    7b12:	de bf       	out	0x3e, r29	; 62
    7b14:	0f be       	out	0x3f, r0	; 63
    7b16:	cd bf       	out	0x3d, r28	; 61
    7b18:	ed 01       	movw	r28, r26
    7b1a:	08 95       	ret

00007b1c <itoa>:
    7b1c:	fb 01       	movw	r30, r22
    7b1e:	9f 01       	movw	r18, r30
    7b20:	e8 94       	clt
    7b22:	42 30       	cpi	r20, 0x02	; 2
    7b24:	c4 f0       	brlt	.+48     	; 0x7b56 <itoa+0x3a>
    7b26:	45 32       	cpi	r20, 0x25	; 37
    7b28:	b4 f4       	brge	.+44     	; 0x7b56 <itoa+0x3a>
    7b2a:	4a 30       	cpi	r20, 0x0A	; 10
    7b2c:	29 f4       	brne	.+10     	; 0x7b38 <itoa+0x1c>
    7b2e:	97 fb       	bst	r25, 7
    7b30:	1e f4       	brtc	.+6      	; 0x7b38 <itoa+0x1c>
    7b32:	90 95       	com	r25
    7b34:	81 95       	neg	r24
    7b36:	9f 4f       	sbci	r25, 0xFF	; 255
    7b38:	64 2f       	mov	r22, r20
    7b3a:	77 27       	eor	r23, r23
    7b3c:	0e 94 0e 3d 	call	0x7a1c	; 0x7a1c <__udivmodhi4>
    7b40:	80 5d       	subi	r24, 0xD0	; 208
    7b42:	8a 33       	cpi	r24, 0x3A	; 58
    7b44:	0c f0       	brlt	.+2      	; 0x7b48 <itoa+0x2c>
    7b46:	89 5d       	subi	r24, 0xD9	; 217
    7b48:	81 93       	st	Z+, r24
    7b4a:	cb 01       	movw	r24, r22
    7b4c:	00 97       	sbiw	r24, 0x00	; 0
    7b4e:	a1 f7       	brne	.-24     	; 0x7b38 <itoa+0x1c>
    7b50:	16 f4       	brtc	.+4      	; 0x7b56 <itoa+0x3a>
    7b52:	5d e2       	ldi	r21, 0x2D	; 45
    7b54:	51 93       	st	Z+, r21
    7b56:	10 82       	st	Z, r1
    7b58:	c9 01       	movw	r24, r18
    7b5a:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <strrev>

00007b5e <strrev>:
    7b5e:	dc 01       	movw	r26, r24
    7b60:	fc 01       	movw	r30, r24
    7b62:	67 2f       	mov	r22, r23
    7b64:	71 91       	ld	r23, Z+
    7b66:	77 23       	and	r23, r23
    7b68:	e1 f7       	brne	.-8      	; 0x7b62 <strrev+0x4>
    7b6a:	32 97       	sbiw	r30, 0x02	; 2
    7b6c:	04 c0       	rjmp	.+8      	; 0x7b76 <strrev+0x18>
    7b6e:	7c 91       	ld	r23, X
    7b70:	6d 93       	st	X+, r22
    7b72:	70 83       	st	Z, r23
    7b74:	62 91       	ld	r22, -Z
    7b76:	ae 17       	cp	r26, r30
    7b78:	bf 07       	cpc	r27, r31
    7b7a:	c8 f3       	brcs	.-14     	; 0x7b6e <strrev+0x10>
    7b7c:	08 95       	ret

00007b7e <_exit>:
    7b7e:	f8 94       	cli

00007b80 <__stop_program>:
    7b80:	ff cf       	rjmp	.-2      	; 0x7b80 <__stop_program>
