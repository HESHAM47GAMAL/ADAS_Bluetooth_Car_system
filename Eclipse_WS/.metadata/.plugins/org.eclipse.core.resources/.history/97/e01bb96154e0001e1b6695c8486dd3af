/******************************************************************************
 *
 * Module: Application
 *
 * File Name: Application_program.c
 *
 * Description: source file for implementation for all functionality for Application Specefic
 *
 * Author: Hesham Shehata
 *
 *******************************************************************************/



/**************************                   INCLUDES                   **************************/

#include "Application_interface.h"
#include "Application_private.h"
#include "../SERVICE/IVT.h"





/**************************                   Type Declaration                    **************************/
enum GearBox_State {N_GearBox,D_GearBox,R_GearBox , GearBox_Return_to_N};
enum ACCS_State {ACCS_Disable,ACCS_Enable};


/**************************                   Global variable                   **************************/

uint8 GearBox_Current_State = N_GearBox;
uint8 ACCS_Currnet_state = ACCS_Disable;

void App_Init(void)
{
    /*	Enable Global Interrupt  */
	sei();

    /*  Intialize LCD   */
    LCD_init();

    /*  Initialize Buzzer */
    Buzzer_Init(Buzzer_PORT,Buzzer_PIN);

    /* Initialize Button Accelerate & ACCS & GearBox    */
    BUTTON_Init(Accelerate_BTN_PORT,Accelerate_BTN_PIN,INPUT_PIN);
    BUTTON_Init(ACCS_BTN_PORT,ACCS_BTN_PIN,INPUT_PIN);
    BUTTON_Init(GearBox_BTN_PORT,GearBox_BTN_PIN,INPUT_PIN);

    /*  Initialize Braking Button with EXT_INT 1    */
    INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
    /*  Set call back function  */
    INT1_SetCallBack(Braking_Button_Handling);

    /*  Initialize LEDS(BLUE,Red,Green,Yellow) all os them connected positive logic */
    LED_Init(Blue_LED_PORT,BLUE_LED_PIN);
    LED_Init(Red_LED_PORT,Red_LED_PIN);
    LED_Init(Green_LED_PORT,Green_LED_PIN);
    LED_Init(Yellow_LED_PORT,Yellow_LED_PIN);

    /*  Turn Of all of this led  */
    LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN, LED_OFF);
    LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN, LED_OFF);
    LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN, LED_OFF);
    LED_OnOffPositiveLogic(Yellow_LED_PORT,Yellow_LED_PIN, LED_OFF);

    /*  initialize Timer0   */
    Timer0_Init();

    /*  Set callback function that will called when Timeout happen to turn of buzzer and handle anything another    */
    Timer0_SetCallBack(Buzzer_timeOutOff);

    /*  Initialize ADC to be used by Potentiometer to work as RADAR(Ultrasonic)*/
    ADC_Init();

    /*  Intialize Potentiometer */
    POT_Init(ADC_Channel_0);
    
    /*  Intialize Bash Board for Car*/
    DashBoard_Init();
}



static void DashBoard_Init(void)
{
    /*  Display GearBox Current state  */
    LCD_MoveCursor(0,0);
    LCD_DisplayString((const uint8 * )"GearBox(N,D,R) : N");

    /*  Display speed */
    LCD_MoveCursor(1,0);
    LCD_DisplayString((const uint8 * )"Speed : 0");

    /*  Display state of Adaptive Cruise control  */
    LCD_MoveCursor(2,0);
    LCD_DisplayString((const uint8 * )"ACCS(ON,OFF) : OFF");

}



void StateMachineUpdate(void)
{
    Hanndle_GrearBox_N_State();
    Hanndle_GrearBox_D_State();
    Hanndle_GrearBox_R_State();
    Buttons_Update();
}


static void Hanndle_GrearBox_D_State(void)
{
    if((ACCS_Currnet_state == ACCS_Enable) && (D_GearBox == GearBox_Current_State))
    {
        ACCS_CatchDistance();
        
        // LCD_MoveCursor(3,11);
        // LCD_DisplayCharacter('8');
        
    }
}



static void Hanndle_GrearBox_N_State(void)
{
    if(GearBox_Current_State == N_GearBox)
    {
        if(ACCS_Currnet_state == ACCS_Enable)
        {
            /*  Disable ACCS if Enabled  */
            ACCS_Currnet_state = ACCS_Disable;
            /*  Turn off led of it was turned on  */
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
            /*  Update LCD with new change*/
            DashBoard_Update_ACCS_State(ACCS_Currnet_state);
            
            DashBoard_DistanceHide();

        }
    }
   
}


static void Hanndle_GrearBox_R_State(void)
{
    if(GearBox_Current_State == R_GearBox)
    {
        if(ACCS_Currnet_state == ACCS_Enable)
        {
            /*  Disable ACCS if Enabled  */
            ACCS_Currnet_state = ACCS_Disable;
            /*  Turn off led of it was turned on  */
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
            /*  Update LCD with new change*/
            DashBoard_Update_ACCS_State(ACCS_Currnet_state);
            
            DashBoard_DistanceHide();

        }
    }
}



static void Buttons_Update(void)
{   

    /*  This variable used to carry if button is still pressed after last pressed as any action taken once with first step and if still press nothing happen    */
    static uint8 GearBox_IsStillPressed = NO_Condition;
    /*  Take current state for button  to check if still pressed*/
    uint8 GearBox_BTN_State = BUTTON_GetValue(GearBox_BTN_PORT,GearBox_BTN_PIN);
    
    if(GearBox_BTN_State == BTN_Pressed_State)
    {
        /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
        if(GearBox_IsStillPressed == NO_Condition)
        {
            Buzzer_NotifySound();


            GearBox_IsStillPressed = YES_Condition ;
            GearBox_Current_State ++ ;
            if(GearBox_Current_State == GearBox_Return_to_N  )
            {
                GearBox_Current_State = N_GearBox ;
                
            }
            /*  call function to update gearbox state in Dashboard*/
            DashBoard_Update_GearBox_state(GearBox_Current_State);

        }
        
    }
    else
    {
        /*  Enter this state when Button released*/
        GearBox_IsStillPressed = NO_Condition ;
        
    }
  

    if(GearBox_Current_State == D_GearBox)
    {
        /*  This variable used to carry if button is still pressed after last pressed as any action taken once with first step and if still press nothing happen    */
        static uint8 ACCS_IsStillPressed = NO_Condition;
        /*  Take current state for button  to check if still pressed*/
        uint8 ACCS_BTN_State = BUTTON_GetValue(ACCS_BTN_PORT,ACCS_BTN_PIN);
        
        if(ACCS_BTN_State == BTN_Pressed_State)
        {
            /*  This condition placed here to take action for button press only when pressed and if still pressed Do nothing    */
            if(ACCS_IsStillPressed == NO_Condition)
            {
                Buzzer_NotifySound();

                ACCS_IsStillPressed = YES_Condition ;
                LED_Toggle(Green_LED_PORT,Green_LED_PIN); 
                if(ACCS_Currnet_state == ACCS_Disable ) 
                {
                    ACCS_Currnet_state = ACCS_Enable;
                    DashBoard_Update_ACCS_State(ACCS_Currnet_state);
                    DashBoard_DistanceShow();
                }
                else
                {
                    ACCS_Currnet_state = ACCS_Disable;
                    DashBoard_Update_ACCS_State(ACCS_Currnet_state);
                    DashBoard_DistanceHide();
                }

 
            }
        }
        else
        {
            /*  Enter this state when Button released*/
            ACCS_IsStillPressed = NO_Condition ;
        }
    }

    if((GearBox_Current_State == D_GearBox) || (GearBox_Current_State == R_GearBox))
    {
        /*  This variable used to carry if button is still pressed after last pressed as give buzzer sound only once at the begin of press    */
        static uint8 Acccelerate_IsStillPressed = NO_Condition;
        /*  Take current state for button  to check if still pressed*/
        uint8 Acccelerate_BTN_State = BUTTON_GetValue(Accelerate_BTN_PORT,Accelerate_BTN_PIN);
        
        if(Acccelerate_BTN_State == BTN_Pressed_State)
        {
            LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN,LED_ON);

            /*  the reason of this avoid make sound while accelerate BTN pressed    */
            if(Acccelerate_IsStillPressed == NO_Condition)
            {
                Buzzer_NotifySound();
                Acccelerate_IsStillPressed = YES_Condition ;
            }
        }
        else
        {
            Acccelerate_IsStillPressed = NO_Condition;
            LED_OnOffPositiveLogic(Blue_LED_PORT,BLUE_LED_PIN,LED_OFF);
        }
    }


}


static void DashBoard_Update_GearBox_state(uint8 GearBox_state)
{
    /*  Array carry All Characters For GearBox as make display easier using index*/
    uint8 GearBox_Characyer [] = {'N','D','R'};
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(0,17);
    /*  Edit its state with new state given to function*/
    LCD_DisplayCharacter(GearBox_Characyer[GearBox_state]);
}

static void DashBoard_Update_ACCS_State(uint8 ACCS_state)
{
    const uint8 * ACCS_String[] = {(const uint8 * )"OFF",(const uint8 * )"ON "};
    /*  Go to index that display current GearBox state*/
    LCD_MoveCursor(2,15);
    /*  Edit its state with new state given to function*/
    LCD_DisplayString(ACCS_String[ACCS_state]);
}



static void Braking_Button_Handling(void)
{
    /*  Make initial state that Button is released  */
    static uint8 Braking_BTN_State = BTN_Released_State ;
    /*  Will Enter this condition only when press button Only (this will make failling edge)  */
    if(Braking_BTN_State == BTN_Released_State)
    {
        /*  So when I release utton will make Rising Edge so I need to make setup to detect this state to turn led off  */
        INT1_init(RISING_EDGE_TRIGGER,INPUT_PIN); /*    If swap between that command and next command will face problem that If I make very short press will face problem  that led will turn on only not turn off also and this not required*/

        Buzzer_NotifySound();

        /*  Make update to state    */
        Braking_BTN_State = BTN_Pressed_State;
        /*  Turn led on  */
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_ON);
/*                Here when I press in Braking if in D mode should Disable ACCS mode                                                       */
/*
*   I face very big problem as this Button has two scienaros (very short press and normal or long press )
*   In very short press I will face problem if I Enable ACCS as there are if condition will be true and this code will take time for execute (failing edge followed by rising edge ) and code in if condition execution time greater than time of(convert from failling edge to rising edge)
*/
        // if((GearBox_Current_State == D_GearBox) && (ACCS_Currnet_state == ACCS_Enable))
        // {
        //     /*	Enable Global Interrupt  */
	    //     sei();

        //     /*  Disable ACCS if Enabled  */
        //     ACCS_Currnet_state = ACCS_Disable;
        //     /*  Turn off led of it was turned on  */
        //     LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
        //     /*  Update LCD with new change*/
        //     DashBoard_Update_ACCS_State(ACCS_Currnet_state);

        //     DashBoard_DistanceHide();


        // }
        tessst();
    }
    /*  Will Enter this condition only when release button Only (this will make failling edge)  */
    else if(Braking_BTN_State == BTN_Pressed_State)
    {

        INT1_init(FALLING_EDGE_TRIGGER,INPUT_PIN);
        Braking_BTN_State = BTN_Released_State;
        LED_OnOffPositiveLogic(Red_LED_PORT,Red_LED_PIN,LED_OFF);
    }
}


static void Buzzer_NotifySound(void)
{
    /*  initialize Timer register with zero value   */
    Timer0_UpdateValue(0);
    /*  Turn Buzzer on  */
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_ON);
    /*  Timer provide clock  */
    Timer0_ProvideClock();

    /*  There are another function after timeout will turn buzzer off and stop clock for timer register  */

}


void Buzzer_timeOutOff(void)
{
    Buzzer_OnOffPositiveLogic(Buzzer_PORT,Buzzer_PIN,Buzzer_OFF);
    Timer0_StopClock();
}


static void DashBoard_DistanceShow(void)
{
    LCD_MoveCursor(3,0);
    LCD_DisplayString((const uint8 * )"Distance : ");
}


static void DashBoard_DistanceHide(void)
{
    LCD_MoveCursor(3,0);
    LCD_DisplayString((const uint8 * )"                    ");
}


/*  Don't forget that I want to display first number after sign '.'  */
static void ACCS_CatchDistance(void)
{
    cli();
    uint8 Adc_value_pure = ADC_ReadChannelSingleConvertion(ADC_Channel_0);
    uint8 distance_ACCS = (Adc_value_pure * 10) / 1024 ; 

    LCD_MoveCursor(3,11);
    if(distance_ACCS < 10)
    {
        LCD_DisplayCharacter(distance_ACCS);
        LCD_DisplayCharacter(' ');
    }
    else 
    {
        LCD_DisplayString("10");
    }
    sei();
}

void tessst (void)
{
            if((GearBox_Current_State == D_GearBox) && (ACCS_Currnet_state == ACCS_Enable))
        {
            /*	Enable Global Interrupt  */
	        sei();

            /*  Disable ACCS if Enabled  */
            ACCS_Currnet_state = ACCS_Disable;
            /*  Turn off led of it was turned on  */
            LED_OnOffPositiveLogic(Green_LED_PORT,Green_LED_PIN,LED_OFF);
            /*  Update LCD with new change*/
            DashBoard_Update_ACCS_State(ACCS_Currnet_state);

            DashBoard_DistanceHide();


        }
}


